function _mergeNamespaces(n, m) {
  for (var i2 = 0; i2 < m.length; i2++) {
    const e = m[i2];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(script) {
    const fetchOpts = {};
    if (script.integrity)
      fetchOpts.integrity = script.integrity;
    if (script.referrerpolicy)
      fetchOpts.referrerPolicy = script.referrerpolicy;
    if (script.crossorigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (script.crossorigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const app = "";
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function listen(node, event, handler2, options) {
  node.addEventListener(event, handler2, options);
  return () => node.removeEventListener(event, handler2, options);
}
function attr(node, attribute, value2) {
  if (value2 == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value2)
    node.setAttribute(attribute, value2);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
let current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
const seen_callbacks = /* @__PURE__ */ new Set();
let flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i2 = 0; i2 < render_callbacks.length; i2 += 1) {
      const callback = render_callbacks[i2];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
const outroing = /* @__PURE__ */ new Set();
let outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i2) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i2 / 31 | 0] |= 1 << i2 % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance2 ? instance2(component, options.props || {}, (i2, ret, ...rest) => {
    const value2 = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i2], $$.ctx[i2] = value2)) {
      if (!$$.skip_bound && $$.bound[i2])
        $$.bound[i2](value2);
      if (ready)
        make_dirty(component, i2);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    flush();
  }
  set_current_component(parent_component);
}
class SvelteComponent {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
}
const topBar_svelte_svelte_type_style_lang = "";
function create_fragment$5(ctx) {
  let div1;
  return {
    c() {
      div1 = element("div");
      div1.innerHTML = `<header class="svelte-k1kqkd"><h1 class="svelte-k1kqkd">Hand Piano</h1> 
        <nav class="svelte-k1kqkd"><ul id="topNav" class="svelte-k1kqkd"><li class="svelte-k1kqkd">About</li> 
                <li class="svelte-k1kqkd">Instructions</li> 
                <li class="svelte-k1kqkd">Planned Update</li> 
                <li class="svelte-k1kqkd">Play</li></ul></nav></header> 
    <div class="header-spacer svelte-k1kqkd"></div>`;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
    }
  };
}
class Top_bar extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment$5, safe_not_equal, {});
  }
}
class Hand {
  constructor() {
    this.handpose;
    this.predictions = [];
    this.fingers = {};
    this.curledFingers = /* @__PURE__ */ new Set();
    this.startMessage = "Hand Model Loading Please Wait";
  }
  setupHandpose(width2, height2, video) {
    video.size(width2, height2);
    this.handpose = ml5.handpose(video, { flipHorizontal: true }, () => {
      this.startMessage = "Click To Start";
      console.log("Model Ready");
    });
    console.log(this.handpose);
    this.getPredictions();
    video.hide();
  }
  getPredictions() {
    this.handpose.on("predict", (results) => {
      this.predictions = results;
    });
  }
  addPointsToFingers(prediction) {
    this.fingers["thumb"] = [prediction.thumb[2], prediction.thumb[3]];
    this.fingers["index"] = [prediction.indexFinger[2], prediction.indexFinger[3]];
    this.fingers["middle"] = [prediction.middleFinger[2], prediction.middleFinger[3]];
    this.fingers["ring"] = [prediction.ringFinger[2], prediction.ringFinger[3]];
    this.fingers["pinky"] = [prediction.pinky[2], prediction.pinky[3]];
  }
  draw(p) {
    for (let i2 = 0; i2 < this.predictions.length; i2 += 1) {
      const prediction = this.predictions[i2].annotations;
      this.addPointsToFingers(prediction);
      for (let finger in this.fingers) {
        this.fingers[finger].forEach((joint) => {
          p.fill(0, 255, 0);
          p.noStroke();
          p.ellipse(joint[0], joint[1], 10, 10);
        });
      }
    }
  }
  checkFingerPositions() {
    for (let finger in this.fingers) {
      const fingerTopY = this.fingers[finger][0][1];
      const fingerBottomY = this.fingers[finger][1][1];
      if (fingerTopY - 10 <= fingerBottomY + 10) {
        this.curledFingers.add(finger);
      } else {
        this.curledFingers.delete(finger);
      }
    }
  }
}
const version = "14.7.77";
const createExtendedExponentialRampToValueAutomationEvent = (value2, endTime, insertTime) => {
  return { endTime, insertTime, type: "exponentialRampToValue", value: value2 };
};
const createExtendedLinearRampToValueAutomationEvent = (value2, endTime, insertTime) => {
  return { endTime, insertTime, type: "linearRampToValue", value: value2 };
};
const createSetValueAutomationEvent = (value2, startTime) => {
  return { startTime, type: "setValue", value: value2 };
};
const createSetValueCurveAutomationEvent = (values, startTime, duration) => {
  return { duration, startTime, type: "setValueCurve", values };
};
const getTargetValueAtTime = (time, valueAtStartTime, { startTime, target, timeConstant }) => {
  return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);
};
const isExponentialRampToValueAutomationEvent = (automationEvent) => {
  return automationEvent.type === "exponentialRampToValue";
};
const isLinearRampToValueAutomationEvent = (automationEvent) => {
  return automationEvent.type === "linearRampToValue";
};
const isAnyRampToValueAutomationEvent = (automationEvent) => {
  return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);
};
const isSetValueAutomationEvent = (automationEvent) => {
  return automationEvent.type === "setValue";
};
const isSetValueCurveAutomationEvent = (automationEvent) => {
  return automationEvent.type === "setValueCurve";
};
const getValueOfAutomationEventAtIndexAtTime = (automationEvents, index, time, defaultValue) => {
  const automationEvent = automationEvents[index];
  return automationEvent === void 0 ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);
};
const getEndTimeAndValueOfPreviousAutomationEvent = (automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) => {
  return currentAutomationEvent === void 0 ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [
    currentAutomationEvent.startTime + currentAutomationEvent.duration,
    currentAutomationEvent.values[currentAutomationEvent.values.length - 1]
  ] : [
    currentAutomationEvent.startTime,
    getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)
  ];
};
const isCancelAndHoldAutomationEvent = (automationEvent) => {
  return automationEvent.type === "cancelAndHold";
};
const isCancelScheduledValuesAutomationEvent = (automationEvent) => {
  return automationEvent.type === "cancelScheduledValues";
};
const getEventTime = (automationEvent) => {
  if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
    return automationEvent.cancelTime;
  }
  if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {
    return automationEvent.endTime;
  }
  return automationEvent.startTime;
};
const getExponentialRampValueAtTime = (time, startTime, valueAtStartTime, { endTime, value: value2 }) => {
  if (valueAtStartTime === value2) {
    return value2;
  }
  if (0 < valueAtStartTime && 0 < value2 || valueAtStartTime < 0 && value2 < 0) {
    return valueAtStartTime * (value2 / valueAtStartTime) ** ((time - startTime) / (endTime - startTime));
  }
  return 0;
};
const getLinearRampValueAtTime = (time, startTime, valueAtStartTime, { endTime, value: value2 }) => {
  return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value2 - valueAtStartTime);
};
const interpolateValue = (values, theoreticIndex) => {
  const lowerIndex = Math.floor(theoreticIndex);
  const upperIndex = Math.ceil(theoreticIndex);
  if (lowerIndex === upperIndex) {
    return values[lowerIndex];
  }
  return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];
};
const getValueCurveValueAtTime = (time, { duration, startTime, values }) => {
  const theoreticIndex = (time - startTime) / duration * (values.length - 1);
  return interpolateValue(values, theoreticIndex);
};
const isSetTargetAutomationEvent = (automationEvent) => {
  return automationEvent.type === "setTarget";
};
class AutomationEventList {
  constructor(defaultValue) {
    this._automationEvents = [];
    this._currenTime = 0;
    this._defaultValue = defaultValue;
  }
  [Symbol.iterator]() {
    return this._automationEvents[Symbol.iterator]();
  }
  add(automationEvent) {
    const eventTime = getEventTime(automationEvent);
    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
      const index = this._automationEvents.findIndex((currentAutomationEvent) => {
        if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {
          return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;
        }
        return getEventTime(currentAutomationEvent) >= eventTime;
      });
      const removedAutomationEvent = this._automationEvents[index];
      if (index !== -1) {
        this._automationEvents = this._automationEvents.slice(0, index);
      }
      if (isCancelAndHoldAutomationEvent(automationEvent)) {
        const lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];
        if (removedAutomationEvent !== void 0 && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {
          if (isSetTargetAutomationEvent(lastAutomationEvent)) {
            throw new Error("The internal list is malformed.");
          }
          const startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);
          const startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;
          const value2 = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);
          const truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value2, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value2, eventTime, this._currenTime);
          this._automationEvents.push(truncatedAutomationEvent);
        }
        if (lastAutomationEvent !== void 0 && isSetTargetAutomationEvent(lastAutomationEvent)) {
          this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));
        }
        if (lastAutomationEvent !== void 0 && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {
          this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);
        }
      }
    } else {
      const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > eventTime);
      const previousAutomationEvent = index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[index - 1];
      if (previousAutomationEvent !== void 0 && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {
        return false;
      }
      const persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;
      if (index === -1) {
        this._automationEvents.push(persistentAutomationEvent);
      } else {
        if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[index])) {
          return false;
        }
        this._automationEvents.splice(index, 0, persistentAutomationEvent);
      }
    }
    return true;
  }
  flush(time) {
    const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > time);
    if (index > 1) {
      const remainingAutomationEvents = this._automationEvents.slice(index - 1);
      const firstRemainingAutomationEvent = remainingAutomationEvents[0];
      if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {
        remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));
      }
      this._automationEvents = remainingAutomationEvents;
    }
  }
  getValue(time) {
    if (this._automationEvents.length === 0) {
      return this._defaultValue;
    }
    const indexOfNextEvent = this._automationEvents.findIndex((automationEvent) => getEventTime(automationEvent) > time);
    const nextAutomationEvent = this._automationEvents[indexOfNextEvent];
    const indexOfCurrentEvent = (indexOfNextEvent === -1 ? this._automationEvents.length : indexOfNextEvent) - 1;
    const currentAutomationEvent = this._automationEvents[indexOfCurrentEvent];
    if (currentAutomationEvent !== void 0 && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === void 0 || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {
      return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, indexOfCurrentEvent - 1, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);
    }
    if (currentAutomationEvent !== void 0 && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === void 0 || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
      return currentAutomationEvent.value;
    }
    if (currentAutomationEvent !== void 0 && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === void 0 || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {
      if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {
        return getValueCurveValueAtTime(time, currentAutomationEvent);
      }
      return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];
    }
    if (currentAutomationEvent !== void 0 && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === void 0 || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
      return currentAutomationEvent.value;
    }
    if (nextAutomationEvent !== void 0 && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {
      const [startTime, value2] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);
      return getExponentialRampValueAtTime(time, startTime, value2, nextAutomationEvent);
    }
    if (nextAutomationEvent !== void 0 && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {
      const [startTime, value2] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);
      return getLinearRampValueAtTime(time, startTime, value2, nextAutomationEvent);
    }
    return this._defaultValue;
  }
}
const createCancelAndHoldAutomationEvent = (cancelTime) => {
  return { cancelTime, type: "cancelAndHold" };
};
const createCancelScheduledValuesAutomationEvent = (cancelTime) => {
  return { cancelTime, type: "cancelScheduledValues" };
};
const createExponentialRampToValueAutomationEvent = (value2, endTime) => {
  return { endTime, type: "exponentialRampToValue", value: value2 };
};
const createLinearRampToValueAutomationEvent = (value2, endTime) => {
  return { endTime, type: "linearRampToValue", value: value2 };
};
const createSetTargetAutomationEvent = (target, startTime, timeConstant) => {
  return { startTime, target, timeConstant, type: "setTarget" };
};
const createAbortError = () => new DOMException("", "AbortError");
const createAddActiveInputConnectionToAudioNode = (insertElementInSet2) => {
  return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {
    insertElementInSet2(activeInputs[input], [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
  };
};
const createAddAudioNodeConnections = (audioNodeConnectionsStore) => {
  return (audioNode, audioNodeRenderer, nativeAudioNode) => {
    const activeInputs = [];
    for (let i2 = 0; i2 < nativeAudioNode.numberOfInputs; i2 += 1) {
      activeInputs.push(/* @__PURE__ */ new Set());
    }
    audioNodeConnectionsStore.set(audioNode, {
      activeInputs,
      outputs: /* @__PURE__ */ new Set(),
      passiveInputs: /* @__PURE__ */ new WeakMap(),
      renderer: audioNodeRenderer
    });
  };
};
const createAddAudioParamConnections = (audioParamConnectionsStore) => {
  return (audioParam, audioParamRenderer) => {
    audioParamConnectionsStore.set(audioParam, { activeInputs: /* @__PURE__ */ new Set(), passiveInputs: /* @__PURE__ */ new WeakMap(), renderer: audioParamRenderer });
  };
};
const ACTIVE_AUDIO_NODE_STORE = /* @__PURE__ */ new WeakSet();
const AUDIO_NODE_CONNECTIONS_STORE = /* @__PURE__ */ new WeakMap();
const AUDIO_NODE_STORE = /* @__PURE__ */ new WeakMap();
const AUDIO_PARAM_CONNECTIONS_STORE = /* @__PURE__ */ new WeakMap();
const AUDIO_PARAM_STORE = /* @__PURE__ */ new WeakMap();
const CONTEXT_STORE = /* @__PURE__ */ new WeakMap();
const EVENT_LISTENERS = /* @__PURE__ */ new WeakMap();
const CYCLE_COUNTERS = /* @__PURE__ */ new WeakMap();
const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = /* @__PURE__ */ new WeakMap();
const NODE_TO_PROCESSOR_MAPS = /* @__PURE__ */ new WeakMap();
const handler = {
  construct() {
    return handler;
  }
};
const isConstructible = (constructible) => {
  try {
    const proxy = new Proxy(constructible, handler);
    new proxy();
  } catch {
    return false;
  }
  return true;
};
const IMPORT_STATEMENT_REGEX = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/;
const splitImportStatements = (source, url2) => {
  const importStatements = [];
  let sourceWithoutImportStatements = source.replace(/^[\s]+/, "");
  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
  while (result !== null) {
    const unresolvedUrl = result[1].slice(1, -1);
    const importStatementWithResolvedUrl = result[0].replace(/([\s]+)?;?$/, "").replace(unresolvedUrl, new URL(unresolvedUrl, url2).toString());
    importStatements.push(importStatementWithResolvedUrl);
    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/, "");
    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
  }
  return [importStatements.join(";"), sourceWithoutImportStatements];
};
const verifyParameterDescriptors = (parameterDescriptors) => {
  if (parameterDescriptors !== void 0 && !Array.isArray(parameterDescriptors)) {
    throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.");
  }
};
const verifyProcessorCtor = (processorCtor) => {
  if (!isConstructible(processorCtor)) {
    throw new TypeError("The given value for processorCtor should be a constructor.");
  }
  if (processorCtor.prototype === null || typeof processorCtor.prototype !== "object") {
    throw new TypeError("The given value for processorCtor should have a prototype.");
  }
};
const createAddAudioWorkletModule = (cacheTestResult2, createNotSupportedError2, evaluateSource, exposeCurrentFrameAndCurrentTime2, fetchSource, getNativeContext2, getOrCreateBackupOfflineAudioContext2, isNativeOfflineAudioContext2, nativeAudioWorkletNodeConstructor2, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window2) => {
  let index = 0;
  return (context, moduleURL, options = { credentials: "omit" }) => {
    const resolvedRequestsOfContext = resolvedRequests.get(context);
    if (resolvedRequestsOfContext !== void 0 && resolvedRequestsOfContext.has(moduleURL)) {
      return Promise.resolve();
    }
    const ongoingRequestsOfContext = ongoingRequests.get(context);
    if (ongoingRequestsOfContext !== void 0) {
      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);
      if (promiseOfOngoingRequest !== void 0) {
        return promiseOfOngoingRequest;
      }
    }
    const nativeContext = getNativeContext2(context);
    const promise = nativeContext.audioWorklet === void 0 ? fetchSource(moduleURL).then(([source, absoluteUrl]) => {
      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);
      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}
})})(window,'_AWGS')`;
      return evaluateSource(wrappedSource);
    }).then(() => {
      const evaluateAudioWorkletGlobalScope = window2._AWGS.pop();
      if (evaluateAudioWorkletGlobalScope === void 0) {
        throw new SyntaxError();
      }
      exposeCurrentFrameAndCurrentTime2(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {
      }, void 0, (name, processorCtor) => {
        if (name.trim() === "") {
          throw createNotSupportedError2();
        }
        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);
        if (nodeNameToProcessorConstructorMap !== void 0) {
          if (nodeNameToProcessorConstructorMap.has(name)) {
            throw createNotSupportedError2();
          }
          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);
          nodeNameToProcessorConstructorMap.set(name, processorCtor);
        } else {
          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);
          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, /* @__PURE__ */ new Map([[name, processorCtor]]));
        }
      }, nativeContext.sampleRate, void 0, void 0));
    }) : Promise.all([
      fetchSource(moduleURL),
      Promise.resolve(cacheTestResult2(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))
    ]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {
      const currentIndex = index + 1;
      index = currentIndex;
      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);
      const patchedAudioWorkletProcessor = isSupportingPostMessage ? "AudioWorkletProcessor" : "class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}";
      const memberDefinition = isSupportingPostMessage ? "" : "__c = (a) => a.forEach(e=>this.__b.add(e.buffer));";
      const bufferRegistration = isSupportingPostMessage ? "" : "i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));";
      const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}
})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;
      const blob = new Blob([wrappedSource], { type: "application/javascript; charset=utf-8" });
      const url2 = URL.createObjectURL(blob);
      return nativeContext.audioWorklet.addModule(url2, options).then(() => {
        if (isNativeOfflineAudioContext2(nativeContext)) {
          return nativeContext;
        }
        const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext2(nativeContext);
        return backupOfflineAudioContext.audioWorklet.addModule(url2, options).then(() => backupOfflineAudioContext);
      }).then((nativeContextOrBackupOfflineAudioContext) => {
        if (nativeAudioWorkletNodeConstructor2 === null) {
          throw new SyntaxError();
        }
        try {
          new nativeAudioWorkletNodeConstructor2(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`);
        } catch {
          throw new SyntaxError();
        }
      }).finally(() => URL.revokeObjectURL(url2));
    });
    if (ongoingRequestsOfContext === void 0) {
      ongoingRequests.set(context, /* @__PURE__ */ new Map([[moduleURL, promise]]));
    } else {
      ongoingRequestsOfContext.set(moduleURL, promise);
    }
    promise.then(() => {
      const updatedResolvedRequestsOfContext = resolvedRequests.get(context);
      if (updatedResolvedRequestsOfContext === void 0) {
        resolvedRequests.set(context, /* @__PURE__ */ new Set([moduleURL]));
      } else {
        updatedResolvedRequestsOfContext.add(moduleURL);
      }
    }).finally(() => {
      const updatedOngoingRequestsOfContext = ongoingRequests.get(context);
      if (updatedOngoingRequestsOfContext !== void 0) {
        updatedOngoingRequestsOfContext.delete(moduleURL);
      }
    });
    return promise;
  };
};
const getValueForKey = (map2, key) => {
  const value2 = map2.get(key);
  if (value2 === void 0) {
    throw new Error("A value with the given key could not be found.");
  }
  return value2;
};
const pickElementFromSet = (set, predicate) => {
  const matchingElements = Array.from(set).filter(predicate);
  if (matchingElements.length > 1) {
    throw Error("More than one element was found.");
  }
  if (matchingElements.length === 0) {
    throw Error("No element was found.");
  }
  const [matchingElement] = matchingElements;
  set.delete(matchingElement);
  return matchingElement;
};
const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {
  const passiveInputConnections = getValueForKey(passiveInputs, source);
  const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input);
  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }
  return matchingConnection;
};
const getEventListenersOfAudioNode = (audioNode) => {
  return getValueForKey(EVENT_LISTENERS, audioNode);
};
const setInternalStateToActive = (audioNode) => {
  if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error("The AudioNode is already stored.");
  }
  ACTIVE_AUDIO_NODE_STORE.add(audioNode);
  getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(true));
};
const isAudioWorkletNode = (audioNode) => {
  return "port" in audioNode;
};
const setInternalStateToPassive = (audioNode) => {
  if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error("The AudioNode is not stored.");
  }
  ACTIVE_AUDIO_NODE_STORE.delete(audioNode);
  getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(false));
};
const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {
  if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => connections.size === 0)) {
    setInternalStateToPassive(audioNode);
  }
};
const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode2, addPassiveInputConnectionToAudioNode2, connectNativeAudioNodeToNativeAudioNode2, deleteActiveInputConnectionToAudioNode2, disconnectNativeAudioNodeFromNativeAudioNode2, getAudioNodeConnections2, getAudioNodeTailTime2, getEventListenersOfAudioNode2, getNativeAudioNode2, insertElementInSet2, isActiveAudioNode2, isPartOfACycle2, isPassiveAudioNode2) => {
  const tailTimeTimeoutIds = /* @__PURE__ */ new WeakMap();
  return (source, destination, output, input, isOffline) => {
    const { activeInputs, passiveInputs } = getAudioNodeConnections2(destination);
    const { outputs } = getAudioNodeConnections2(source);
    const eventListeners = getEventListenersOfAudioNode2(source);
    const eventListener = (isActive) => {
      const nativeDestinationAudioNode = getNativeAudioNode2(destination);
      const nativeSourceAudioNode = getNativeAudioNode2(source);
      if (isActive) {
        const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);
        addActiveInputConnectionToAudioNode2(activeInputs, source, partialConnection, false);
        if (!isOffline && !isPartOfACycle2(source)) {
          connectNativeAudioNodeToNativeAudioNode2(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
        }
        if (isPassiveAudioNode2(destination)) {
          setInternalStateToActive(destination);
        }
      } else {
        const partialConnection = deleteActiveInputConnectionToAudioNode2(activeInputs, source, output, input);
        addPassiveInputConnectionToAudioNode2(passiveInputs, input, partialConnection, false);
        if (!isOffline && !isPartOfACycle2(source)) {
          disconnectNativeAudioNodeFromNativeAudioNode2(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
        }
        const tailTime = getAudioNodeTailTime2(destination);
        if (tailTime === 0) {
          if (isActiveAudioNode2(destination)) {
            setInternalStateToPassiveWhenNecessary(destination, activeInputs);
          }
        } else {
          const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);
          if (tailTimeTimeoutId !== void 0) {
            clearTimeout(tailTimeTimeoutId);
          }
          tailTimeTimeoutIds.set(destination, setTimeout(() => {
            if (isActiveAudioNode2(destination)) {
              setInternalStateToPassiveWhenNecessary(destination, activeInputs);
            }
          }, tailTime * 1e3));
        }
      }
    };
    if (insertElementInSet2(outputs, [destination, output, input], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
      eventListeners.add(eventListener);
      if (isActiveAudioNode2(source)) {
        addActiveInputConnectionToAudioNode2(activeInputs, source, [output, input, eventListener], true);
      } else {
        addPassiveInputConnectionToAudioNode2(passiveInputs, input, [source, output, eventListener], true);
      }
      return true;
    }
    return false;
  };
};
const createAddPassiveInputConnectionToAudioNode = (insertElementInSet2) => {
  return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {
    const passiveInputConnections = passiveInputs.get(source);
    if (passiveInputConnections === void 0) {
      passiveInputs.set(source, /* @__PURE__ */ new Set([[output, input, eventListener]]));
    } else {
      insertElementInSet2(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);
    }
  };
};
const createAddSilentConnection = (createNativeGainNode2) => {
  return (nativeContext, nativeAudioScheduledSourceNode) => {
    const nativeGainNode = createNativeGainNode2(nativeContext, {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      gain: 0
    });
    nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);
    const disconnect2 = () => {
      nativeAudioScheduledSourceNode.removeEventListener("ended", disconnect2);
      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };
    nativeAudioScheduledSourceNode.addEventListener("ended", disconnect2);
  };
};
const createAddUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes2) => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes2(nativeContext).add(audioWorkletNode);
  };
};
const DEFAULT_OPTIONS$j = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  fftSize: 2048,
  maxDecibels: -30,
  minDecibels: -100,
  smoothingTimeConstant: 0.8
};
const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer2, createIndexSizeError2, createNativeAnalyserNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class AnalyserNode extends audionNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$j, ...options };
      const nativeAnalyserNode = createNativeAnalyserNode2(nativeContext, mergedOptions);
      const analyserNodeRenderer = isNativeOfflineAudioContext2(nativeContext) ? createAnalyserNodeRenderer2() : null;
      super(context, false, nativeAnalyserNode, analyserNodeRenderer);
      this._nativeAnalyserNode = nativeAnalyserNode;
    }
    get fftSize() {
      return this._nativeAnalyserNode.fftSize;
    }
    set fftSize(value2) {
      this._nativeAnalyserNode.fftSize = value2;
    }
    get frequencyBinCount() {
      return this._nativeAnalyserNode.frequencyBinCount;
    }
    get maxDecibels() {
      return this._nativeAnalyserNode.maxDecibels;
    }
    set maxDecibels(value2) {
      const maxDecibels = this._nativeAnalyserNode.maxDecibels;
      this._nativeAnalyserNode.maxDecibels = value2;
      if (!(value2 > this._nativeAnalyserNode.minDecibels)) {
        this._nativeAnalyserNode.maxDecibels = maxDecibels;
        throw createIndexSizeError2();
      }
    }
    get minDecibels() {
      return this._nativeAnalyserNode.minDecibels;
    }
    set minDecibels(value2) {
      const minDecibels = this._nativeAnalyserNode.minDecibels;
      this._nativeAnalyserNode.minDecibels = value2;
      if (!(this._nativeAnalyserNode.maxDecibels > value2)) {
        this._nativeAnalyserNode.minDecibels = minDecibels;
        throw createIndexSizeError2();
      }
    }
    get smoothingTimeConstant() {
      return this._nativeAnalyserNode.smoothingTimeConstant;
    }
    set smoothingTimeConstant(value2) {
      this._nativeAnalyserNode.smoothingTimeConstant = value2;
    }
    getByteFrequencyData(array) {
      this._nativeAnalyserNode.getByteFrequencyData(array);
    }
    getByteTimeDomainData(array) {
      this._nativeAnalyserNode.getByteTimeDomainData(array);
    }
    getFloatFrequencyData(array) {
      this._nativeAnalyserNode.getFloatFrequencyData(array);
    }
    getFloatTimeDomainData(array) {
      this._nativeAnalyserNode.getFloatTimeDomainData(array);
    }
  };
};
const isOwnedByContext = (nativeAudioNode, nativeContext) => {
  return nativeAudioNode.context === nativeContext;
};
const createAnalyserNodeRendererFactory = (createNativeAnalyserNode2, getNativeAudioNode2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeAnalyserNodes = /* @__PURE__ */ new WeakMap();
    const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAnalyserNode = getNativeAudioNode2(proxy);
      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);
      if (!nativeAnalyserNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAnalyserNode.channelCount,
          channelCountMode: nativeAnalyserNode.channelCountMode,
          channelInterpretation: nativeAnalyserNode.channelInterpretation,
          fftSize: nativeAnalyserNode.fftSize,
          maxDecibels: nativeAnalyserNode.maxDecibels,
          minDecibels: nativeAnalyserNode.minDecibels,
          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
        };
        nativeAnalyserNode = createNativeAnalyserNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAnalyserNode);
      return nativeAnalyserNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAnalyserNode !== void 0) {
          return Promise.resolve(renderedNativeAnalyserNode);
        }
        return createAnalyserNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {
  try {
    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);
  } catch {
    return false;
  }
  return true;
};
const createIndexSizeError = () => new DOMException("", "IndexSizeError");
const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {
  audioBuffer.getChannelData = ((getChannelData) => {
    return (channel) => {
      try {
        return getChannelData.call(audioBuffer, channel);
      } catch (err) {
        if (err.code === 12) {
          throw createIndexSizeError();
        }
        throw err;
      }
    };
  })(audioBuffer.getChannelData);
};
const DEFAULT_OPTIONS$i = {
  numberOfChannels: 1
};
const createAudioBufferConstructor = (audioBufferStore2, cacheTestResult2, createNotSupportedError2, nativeAudioBufferConstructor2, nativeOfflineAudioContextConstructor2, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods2, wrapAudioBufferCopyChannelMethodsOutOfBounds2) => {
  let nativeOfflineAudioContext = null;
  return class AudioBuffer2 {
    constructor(options) {
      if (nativeOfflineAudioContextConstructor2 === null) {
        throw new Error("Missing the native OfflineAudioContext constructor.");
      }
      const { length: length2, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS$i, ...options };
      if (nativeOfflineAudioContext === null) {
        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor2(1, 1, 44100);
      }
      const audioBuffer = nativeAudioBufferConstructor2 !== null && cacheTestResult2(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor2({ length: length2, numberOfChannels, sampleRate }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length2, sampleRate);
      if (audioBuffer.numberOfChannels === 0) {
        throw createNotSupportedError2();
      }
      if (typeof audioBuffer.copyFromChannel !== "function") {
        wrapAudioBufferCopyChannelMethods2(audioBuffer);
        wrapAudioBufferGetChannelDataMethod(audioBuffer);
      } else if (!cacheTestResult2(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
        wrapAudioBufferCopyChannelMethodsOutOfBounds2(audioBuffer);
      }
      audioBufferStore2.add(audioBuffer);
      return audioBuffer;
    }
    static [Symbol.hasInstance](instance2) {
      return instance2 !== null && typeof instance2 === "object" && Object.getPrototypeOf(instance2) === AudioBuffer2.prototype || audioBufferStore2.has(instance2);
    }
  };
};
const MOST_NEGATIVE_SINGLE_FLOAT = -34028234663852886e22;
const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;
const isActiveAudioNode = (audioNode) => ACTIVE_AUDIO_NODE_STORE.has(audioNode);
const DEFAULT_OPTIONS$h = {
  buffer: null,
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  loop: false,
  loopEnd: 0,
  loopStart: 0,
  playbackRate: 1
};
const createAudioBufferSourceNodeConstructor = (audioNodeConstructor2, createAudioBufferSourceNodeRenderer2, createAudioParam2, createInvalidStateError2, createNativeAudioBufferSourceNode2, getNativeContext2, isNativeOfflineAudioContext2, wrapEventListener2) => {
  return class AudioBufferSourceNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$h, ...options };
      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer2() : null;
      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);
      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;
      this._isBufferNullified = false;
      this._isBufferSet = mergedOptions.buffer !== null;
      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;
      this._onended = null;
      this._playbackRate = createAudioParam2(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
    }
    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }
      return this._nativeAudioBufferSourceNode.buffer;
    }
    set buffer(value2) {
      this._nativeAudioBufferSourceNode.buffer = value2;
      if (value2 !== null) {
        if (this._isBufferSet) {
          throw createInvalidStateError2();
        }
        this._isBufferSet = true;
      }
    }
    get loop() {
      return this._nativeAudioBufferSourceNode.loop;
    }
    set loop(value2) {
      this._nativeAudioBufferSourceNode.loop = value2;
    }
    get loopEnd() {
      return this._nativeAudioBufferSourceNode.loopEnd;
    }
    set loopEnd(value2) {
      this._nativeAudioBufferSourceNode.loopEnd = value2;
    }
    get loopStart() {
      return this._nativeAudioBufferSourceNode.loopStart;
    }
    set loopStart(value2) {
      this._nativeAudioBufferSourceNode.loopStart = value2;
    }
    get onended() {
      return this._onended;
    }
    set onended(value2) {
      const wrappedListener = typeof value2 === "function" ? wrapEventListener2(this, value2) : null;
      this._nativeAudioBufferSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value2 : nativeOnEnded;
    }
    get playbackRate() {
      return this._playbackRate;
    }
    start(when = 0, offset = 0, duration) {
      this._nativeAudioBufferSourceNode.start(when, offset, duration);
      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.start = duration === void 0 ? [when, offset] : [when, offset, duration];
      }
      if (this.context.state !== "closed") {
        setInternalStateToActive(this);
        const resetInternalStateToPassive = () => {
          this._nativeAudioBufferSourceNode.removeEventListener("ended", resetInternalStateToPassive);
          if (isActiveAudioNode(this)) {
            setInternalStateToPassive(this);
          }
        };
        this._nativeAudioBufferSourceNode.addEventListener("ended", resetInternalStateToPassive);
      }
    }
    stop(when = 0) {
      this._nativeAudioBufferSourceNode.stop(when);
      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.stop = when;
      }
    }
  };
};
const createAudioBufferSourceNodeRendererFactory = (connectAudioParam2, createNativeAudioBufferSourceNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeAudioBufferSourceNodes = /* @__PURE__ */ new WeakMap();
    let start = null;
    let stop = null;
    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAudioBufferSourceNode = getNativeAudioNode2(proxy);
      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);
      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        const options = {
          buffer: nativeAudioBufferSourceNode.buffer,
          channelCount: nativeAudioBufferSourceNode.channelCount,
          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
          loop: nativeAudioBufferSourceNode.loop,
          loopEnd: nativeAudioBufferSourceNode.loopEnd,
          loopStart: nativeAudioBufferSourceNode.loopStart,
          playbackRate: nativeAudioBufferSourceNode.playbackRate.value
        };
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeOfflineAudioContext, options);
        if (start !== null) {
          nativeAudioBufferSourceNode.start(...start);
        }
        if (stop !== null) {
          nativeAudioBufferSourceNode.stop(stop);
        }
      }
      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);
      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);
      return nativeAudioBufferSourceNode;
    };
    return {
      set start(value2) {
        start = value2;
      },
      set stop(value2) {
        stop = value2;
      },
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAudioBufferSourceNode !== void 0) {
          return Promise.resolve(renderedNativeAudioBufferSourceNode);
        }
        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const isAudioBufferSourceNode = (audioNode) => {
  return "playbackRate" in audioNode;
};
const isBiquadFilterNode = (audioNode) => {
  return "frequency" in audioNode && "gain" in audioNode;
};
const isConstantSourceNode = (audioNode) => {
  return "offset" in audioNode;
};
const isGainNode = (audioNode) => {
  return !("frequency" in audioNode) && "gain" in audioNode;
};
const isOscillatorNode = (audioNode) => {
  return "detune" in audioNode && "frequency" in audioNode;
};
const isStereoPannerNode = (audioNode) => {
  return "pan" in audioNode;
};
const getAudioNodeConnections = (audioNode) => {
  return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);
};
const getAudioParamConnections = (audioParam) => {
  return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);
};
const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {
  const { activeInputs } = getAudioNodeConnections(audioNode);
  activeInputs.forEach((connections) => connections.forEach(([source]) => {
    if (!trace.includes(audioNode)) {
      deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);
    }
  }));
  const audioParams = isAudioBufferSourceNode(audioNode) ? [
    audioNode.playbackRate
  ] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];
  for (const audioParam of audioParams) {
    const audioParamConnections = getAudioParamConnections(audioParam);
    if (audioParamConnections !== void 0) {
      audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));
    }
  }
  if (isActiveAudioNode(audioNode)) {
    setInternalStateToPassive(audioNode);
  }
};
const deactivateAudioGraph = (context) => {
  deactivateActiveAudioNodeInputConnections(context.destination, []);
};
const isValidLatencyHint = (latencyHint) => {
  return latencyHint === void 0 || typeof latencyHint === "number" || typeof latencyHint === "string" && (latencyHint === "balanced" || latencyHint === "interactive" || latencyHint === "playback");
};
const createAudioContextConstructor = (baseAudioContextConstructor2, createInvalidStateError2, createNotSupportedError2, createUnknownError2, mediaElementAudioSourceNodeConstructor2, mediaStreamAudioDestinationNodeConstructor2, mediaStreamAudioSourceNodeConstructor2, mediaStreamTrackAudioSourceNodeConstructor2, nativeAudioContextConstructor2) => {
  return class AudioContext extends baseAudioContextConstructor2 {
    constructor(options = {}) {
      if (nativeAudioContextConstructor2 === null) {
        throw new Error("Missing the native AudioContext constructor.");
      }
      let nativeAudioContext;
      try {
        nativeAudioContext = new nativeAudioContextConstructor2(options);
      } catch (err) {
        if (err.code === 12 && err.message === "sampleRate is not in range") {
          throw createNotSupportedError2();
        }
        throw err;
      }
      if (nativeAudioContext === null) {
        throw createUnknownError2();
      }
      if (!isValidLatencyHint(options.latencyHint)) {
        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
      }
      if (options.sampleRate !== void 0 && nativeAudioContext.sampleRate !== options.sampleRate) {
        throw createNotSupportedError2();
      }
      super(nativeAudioContext, 2);
      const { latencyHint } = options;
      const { sampleRate } = nativeAudioContext;
      this._baseLatency = typeof nativeAudioContext.baseLatency === "number" ? nativeAudioContext.baseLatency : latencyHint === "balanced" ? 512 / sampleRate : latencyHint === "interactive" || latencyHint === void 0 ? 256 / sampleRate : latencyHint === "playback" ? 1024 / sampleRate : Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
      this._nativeAudioContext = nativeAudioContext;
      if (nativeAudioContextConstructor2.name === "webkitAudioContext") {
        this._nativeGainNode = nativeAudioContext.createGain();
        this._nativeOscillatorNode = nativeAudioContext.createOscillator();
        this._nativeGainNode.gain.value = 1e-37;
        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);
        this._nativeOscillatorNode.start();
      } else {
        this._nativeGainNode = null;
        this._nativeOscillatorNode = null;
      }
      this._state = null;
      if (nativeAudioContext.state === "running") {
        this._state = "suspended";
        const revokeState = () => {
          if (this._state === "suspended") {
            this._state = null;
          }
          nativeAudioContext.removeEventListener("statechange", revokeState);
        };
        nativeAudioContext.addEventListener("statechange", revokeState);
      }
    }
    get baseLatency() {
      return this._baseLatency;
    }
    get state() {
      return this._state !== null ? this._state : this._nativeAudioContext.state;
    }
    close() {
      if (this.state === "closed") {
        return this._nativeAudioContext.close().then(() => {
          throw createInvalidStateError2();
        });
      }
      if (this._state === "suspended") {
        this._state = null;
      }
      return this._nativeAudioContext.close().then(() => {
        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
          this._nativeOscillatorNode.stop();
          this._nativeGainNode.disconnect();
          this._nativeOscillatorNode.disconnect();
        }
        deactivateAudioGraph(this);
      });
    }
    createMediaElementSource(mediaElement) {
      return new mediaElementAudioSourceNodeConstructor2(this, { mediaElement });
    }
    createMediaStreamDestination() {
      return new mediaStreamAudioDestinationNodeConstructor2(this);
    }
    createMediaStreamSource(mediaStream) {
      return new mediaStreamAudioSourceNodeConstructor2(this, { mediaStream });
    }
    createMediaStreamTrackSource(mediaStreamTrack) {
      return new mediaStreamTrackAudioSourceNodeConstructor2(this, { mediaStreamTrack });
    }
    resume() {
      if (this._state === "suspended") {
        return new Promise((resolve, reject) => {
          const resolvePromise = () => {
            this._nativeAudioContext.removeEventListener("statechange", resolvePromise);
            if (this._nativeAudioContext.state === "running") {
              resolve();
            } else {
              this.resume().then(resolve, reject);
            }
          };
          this._nativeAudioContext.addEventListener("statechange", resolvePromise);
        });
      }
      return this._nativeAudioContext.resume().catch((err) => {
        if (err === void 0 || err.code === 15) {
          throw createInvalidStateError2();
        }
        throw err;
      });
    }
    suspend() {
      return this._nativeAudioContext.suspend().catch((err) => {
        if (err === void 0) {
          throw createInvalidStateError2();
        }
        throw err;
      });
    }
  };
};
const createAudioDestinationNodeConstructor = (audioNodeConstructor2, createAudioDestinationNodeRenderer2, createIndexSizeError2, createInvalidStateError2, createNativeAudioDestinationNode, getNativeContext2, isNativeOfflineAudioContext2, renderInputsOfAudioNode2) => {
  return class AudioDestinationNode extends audioNodeConstructor2 {
    constructor(context, channelCount) {
      const nativeContext = getNativeContext2(context);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);
      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer2(renderInputsOfAudioNode2) : null;
      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);
      this._isNodeOfNativeOfflineAudioContext = isOffline;
      this._nativeAudioDestinationNode = nativeAudioDestinationNode;
    }
    get channelCount() {
      return this._nativeAudioDestinationNode.channelCount;
    }
    set channelCount(value2) {
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError2();
      }
      if (value2 > this._nativeAudioDestinationNode.maxChannelCount) {
        throw createIndexSizeError2();
      }
      this._nativeAudioDestinationNode.channelCount = value2;
    }
    get channelCountMode() {
      return this._nativeAudioDestinationNode.channelCountMode;
    }
    set channelCountMode(value2) {
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError2();
      }
      this._nativeAudioDestinationNode.channelCountMode = value2;
    }
    get maxChannelCount() {
      return this._nativeAudioDestinationNode.maxChannelCount;
    }
  };
};
const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode2) => {
  const renderedNativeAudioDestinationNodes = /* @__PURE__ */ new WeakMap();
  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {
    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;
    renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);
    await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);
    return nativeAudioDestinationNode;
  };
  return {
    render(proxy, nativeOfflineAudioContext) {
      const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);
      if (renderedNativeAudioDestinationNode !== void 0) {
        return Promise.resolve(renderedNativeAudioDestinationNode);
      }
      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);
    }
  };
};
const createAudioListenerFactory = (createAudioParam2, createNativeChannelMergerNode2, createNativeConstantSourceNode2, createNativeScriptProcessorNode2, createNotSupportedError2, getFirstSample2, isNativeOfflineAudioContext2, overwriteAccessors2) => {
  return (context, nativeContext) => {
    const nativeListener = nativeContext.listener;
    const createFakeAudioParams = () => {
      const buffer = new Float32Array(1);
      const channelMergerNode = createNativeChannelMergerNode2(nativeContext, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "speakers",
        numberOfInputs: 9
      });
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      let isScriptProcessorNodeCreated = false;
      let lastOrientation = [0, 0, -1, 0, 1, 0];
      let lastPosition = [0, 0, 0];
      const createScriptProcessorNode = () => {
        if (isScriptProcessorNodeCreated) {
          return;
        }
        isScriptProcessorNodeCreated = true;
        const scriptProcessorNode = createNativeScriptProcessorNode2(nativeContext, 256, 9, 0);
        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {
          const orientation = [
            getFirstSample2(inputBuffer, buffer, 0),
            getFirstSample2(inputBuffer, buffer, 1),
            getFirstSample2(inputBuffer, buffer, 2),
            getFirstSample2(inputBuffer, buffer, 3),
            getFirstSample2(inputBuffer, buffer, 4),
            getFirstSample2(inputBuffer, buffer, 5)
          ];
          if (orientation.some((value2, index) => value2 !== lastOrientation[index])) {
            nativeListener.setOrientation(...orientation);
            lastOrientation = orientation;
          }
          const positon = [
            getFirstSample2(inputBuffer, buffer, 6),
            getFirstSample2(inputBuffer, buffer, 7),
            getFirstSample2(inputBuffer, buffer, 8)
          ];
          if (positon.some((value2, index) => value2 !== lastPosition[index])) {
            nativeListener.setPosition(...positon);
            lastPosition = positon;
          }
        };
        channelMergerNode.connect(scriptProcessorNode);
      };
      const createSetOrientation = (index) => (value2) => {
        if (value2 !== lastOrientation[index]) {
          lastOrientation[index] = value2;
          nativeListener.setOrientation(...lastOrientation);
        }
      };
      const createSetPosition = (index) => (value2) => {
        if (value2 !== lastPosition[index]) {
          lastPosition[index] = value2;
          nativeListener.setPosition(...lastPosition);
        }
      };
      const createFakeAudioParam = (input, initialValue, setValue) => {
        const constantSourceNode = createNativeConstantSourceNode2(nativeContext, {
          channelCount: 1,
          channelCountMode: "explicit",
          channelInterpretation: "discrete",
          offset: initialValue
        });
        constantSourceNode.connect(channelMergerNode, 0, input);
        constantSourceNode.start();
        Object.defineProperty(constantSourceNode.offset, "defaultValue", {
          get() {
            return initialValue;
          }
        });
        const audioParam = createAudioParam2({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
        overwriteAccessors2(audioParam, "value", (get) => () => get.call(audioParam), (set) => (value2) => {
          try {
            set.call(audioParam, value2);
          } catch (err) {
            if (err.code !== 9) {
              throw err;
            }
          }
          createScriptProcessorNode();
          if (isOffline) {
            setValue(value2);
          }
        });
        audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = cancelAndHoldAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.cancelAndHoldAtTime);
        audioParam.cancelScheduledValues = ((cancelScheduledValues) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = cancelScheduledValues.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.cancelScheduledValues);
        audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = exponentialRampToValueAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.exponentialRampToValueAtTime);
        audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = linearRampToValueAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.linearRampToValueAtTime);
        audioParam.setTargetAtTime = ((setTargetAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = setTargetAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.setTargetAtTime);
        audioParam.setValueAtTime = ((setValueAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = setValueAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.setValueAtTime);
        audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {
          if (isOffline) {
            return () => {
              throw createNotSupportedError2();
            };
          }
          return (...args) => {
            const value2 = setValueCurveAtTime.apply(audioParam, args);
            createScriptProcessorNode();
            return value2;
          };
        })(audioParam.setValueCurveAtTime);
        return audioParam;
      };
      return {
        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),
        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),
        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),
        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),
        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),
        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),
        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),
        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),
        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))
      };
    };
    const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === void 0 ? createFakeAudioParams() : nativeListener;
    return {
      get forwardX() {
        return forwardX;
      },
      get forwardY() {
        return forwardY;
      },
      get forwardZ() {
        return forwardZ;
      },
      get positionX() {
        return positionX;
      },
      get positionY() {
        return positionY;
      },
      get positionZ() {
        return positionZ;
      },
      get upX() {
        return upX;
      },
      get upY() {
        return upY;
      },
      get upZ() {
        return upZ;
      }
    };
  };
};
const isAudioNode$1 = (audioNodeOrAudioParam) => {
  return "context" in audioNodeOrAudioParam;
};
const isAudioNodeOutputConnection = (outputConnection) => {
  return isAudioNode$1(outputConnection[0]);
};
const insertElementInSet = (set, element2, predicate, ignoreDuplicates) => {
  for (const lmnt of set) {
    if (predicate(lmnt)) {
      if (ignoreDuplicates) {
        return false;
      }
      throw Error("The set contains at least one similar element.");
    }
  }
  set.add(element2);
  return true;
};
const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {
  insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
};
const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {
  const passiveInputConnections = passiveInputs.get(source);
  if (passiveInputConnections === void 0) {
    passiveInputs.set(source, /* @__PURE__ */ new Set([[output, eventListener]]));
  } else {
    insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output, ignoreDuplicates);
  }
};
const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker) => {
  return "inputs" in nativeAudioNodeOrNativeAudioNodeFaker;
};
const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {
    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];
    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);
    return [fakeNativeDestinationAudioNode, output, 0];
  }
  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);
  return [nativeDestinationAudioNode, output, input];
};
const deleteActiveInputConnection = (activeInputConnections, source, output) => {
  for (const activeInputConnection of activeInputConnections) {
    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {
      activeInputConnections.delete(activeInputConnection);
      return activeInputConnection;
    }
  }
  return null;
};
const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {
  return pickElementFromSet(activeInputs, (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);
};
const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {
  const eventListeners = getEventListenersOfAudioNode(audioNode);
  if (!eventListeners.delete(eventListener)) {
    throw new Error("Missing the expected event listener.");
  }
};
const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {
  const passiveInputConnections = getValueForKey(passiveInputs, source);
  const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output);
  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }
  return matchingConnection;
};
const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);
  } else {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);
  }
};
const getNativeAudioNode = (audioNode) => {
  return getValueForKey(AUDIO_NODE_STORE, audioNode);
};
const getNativeAudioParam = (audioParam) => {
  return getValueForKey(AUDIO_PARAM_STORE, audioParam);
};
const isPartOfACycle = (audioNode) => {
  return CYCLE_COUNTERS.has(audioNode);
};
const isPassiveAudioNode = (audioNode) => {
  return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);
};
const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor2) => {
  return new Promise((resolve) => {
    if (nativeAudioWorkletNodeConstructor2 !== null) {
      resolve(true);
    } else {
      const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);
      const dummy = nativeAudioContext.createGain();
      const ones = nativeAudioContext.createBuffer(1, 2, 44100);
      const channelData = ones.getChannelData(0);
      channelData[0] = 1;
      channelData[1] = 1;
      const source = nativeAudioContext.createBufferSource();
      source.buffer = ones;
      source.loop = true;
      source.connect(analyzer).connect(nativeAudioContext.destination);
      source.connect(dummy);
      source.disconnect(dummy);
      analyzer.onaudioprocess = (event) => {
        const chnnlDt = event.inputBuffer.getChannelData(0);
        if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {
          resolve(true);
        } else {
          resolve(false);
        }
        source.stop();
        analyzer.onaudioprocess = null;
        source.disconnect(analyzer);
        analyzer.disconnect(nativeAudioContext.destination);
      };
      source.start();
    }
  });
};
const visitEachAudioNodeOnce = (cycles, visitor) => {
  const counts = /* @__PURE__ */ new Map();
  for (const cycle of cycles) {
    for (const audioNode of cycle) {
      const count = counts.get(audioNode);
      counts.set(audioNode, count === void 0 ? 1 : count + 1);
    }
  }
  counts.forEach((count, audioNode) => visitor(audioNode, count));
};
const isNativeAudioNode$1 = (nativeAudioNodeOrAudioParam) => {
  return "context" in nativeAudioNodeOrAudioParam;
};
const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {
  const connections = /* @__PURE__ */ new Map();
  nativeAudioNode.connect = ((connect2) => {
    return (destination, output = 0, input = 0) => {
      const returnValue = isNativeAudioNode$1(destination) ? connect2(destination, output, input) : connect2(destination, output);
      const connectionsToDestination = connections.get(destination);
      if (connectionsToDestination === void 0) {
        connections.set(destination, [{ input, output }]);
      } else {
        if (connectionsToDestination.every((connection) => connection.input !== input || connection.output !== output)) {
          connectionsToDestination.push({ input, output });
        }
      }
      return returnValue;
    };
  })(nativeAudioNode.connect.bind(nativeAudioNode));
  nativeAudioNode.disconnect = ((disconnect2) => {
    return (destinationOrOutput, output, input) => {
      disconnect2.apply(nativeAudioNode);
      if (destinationOrOutput === void 0) {
        connections.clear();
      } else if (typeof destinationOrOutput === "number") {
        for (const [destination, connectionsToDestination] of connections) {
          const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== destinationOrOutput);
          if (filteredConnections.length === 0) {
            connections.delete(destination);
          } else {
            connections.set(destination, filteredConnections);
          }
        }
      } else if (connections.has(destinationOrOutput)) {
        if (output === void 0) {
          connections.delete(destinationOrOutput);
        } else {
          const connectionsToDestination = connections.get(destinationOrOutput);
          if (connectionsToDestination !== void 0) {
            const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== output && (connection.input !== input || input === void 0));
            if (filteredConnections.length === 0) {
              connections.delete(destinationOrOutput);
            } else {
              connections.set(destinationOrOutput, filteredConnections);
            }
          }
        }
      }
      for (const [destination, connectionsToDestination] of connections) {
        connectionsToDestination.forEach((connection) => {
          if (isNativeAudioNode$1(destination)) {
            nativeAudioNode.connect(destination, connection.output, connection.input);
          } else {
            nativeAudioNode.connect(destination, connection.output);
          }
        });
      }
    };
  })(nativeAudioNode.disconnect);
};
const addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline) => {
  const { activeInputs, passiveInputs } = getAudioParamConnections(destination);
  const { outputs } = getAudioNodeConnections(source);
  const eventListeners = getEventListenersOfAudioNode(source);
  const eventListener = (isActive) => {
    const nativeAudioNode = getNativeAudioNode(source);
    const nativeAudioParam = getNativeAudioParam(destination);
    if (isActive) {
      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);
      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);
      if (!isOffline && !isPartOfACycle(source)) {
        nativeAudioNode.connect(nativeAudioParam, output);
      }
    } else {
      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);
      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);
      if (!isOffline && !isPartOfACycle(source)) {
        nativeAudioNode.disconnect(nativeAudioParam, output);
      }
    }
  };
  if (insertElementInSet(outputs, [destination, output], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output, true)) {
    eventListeners.add(eventListener);
    if (isActiveAudioNode(source)) {
      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);
    } else {
      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);
    }
    return true;
  }
  return false;
};
const deleteInputConnectionOfAudioNode = (source, destination, output, input) => {
  const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);
  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);
  if (activeInputConnection === null) {
    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);
    return [passiveInputConnection[2], false];
  }
  return [activeInputConnection[2], true];
};
const deleteInputConnectionOfAudioParam = (source, destination, output) => {
  const { activeInputs, passiveInputs } = getAudioParamConnections(destination);
  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);
  if (activeInputConnection === null) {
    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);
    return [passiveInputConnection[1], false];
  }
  return [activeInputConnection[2], true];
};
const deleteInputsOfAudioNode = (source, isOffline, destination, output, input) => {
  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);
  if (listener !== null) {
    deleteEventListenerOfAudioNode(source, listener);
    if (isActive && !isOffline && !isPartOfACycle(source)) {
      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);
    }
  }
  if (isActiveAudioNode(destination)) {
    const { activeInputs } = getAudioNodeConnections(destination);
    setInternalStateToPassiveWhenNecessary(destination, activeInputs);
  }
};
const deleteInputsOfAudioParam = (source, isOffline, destination, output) => {
  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);
  if (listener !== null) {
    deleteEventListenerOfAudioNode(source, listener);
    if (isActive && !isOffline && !isPartOfACycle(source)) {
      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);
    }
  }
};
const deleteAnyConnection = (source, isOffline) => {
  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);
  const destinations = [];
  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if (isAudioNodeOutputConnection(outputConnection)) {
      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
    }
    destinations.push(outputConnection[0]);
  }
  audioNodeConnectionsOfSource.outputs.clear();
  return destinations;
};
const deleteConnectionAtOutput = (source, isOffline, output) => {
  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);
  const destinations = [];
  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if (outputConnection[1] === output) {
      if (isAudioNodeOutputConnection(outputConnection)) {
        deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
      } else {
        deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
      }
      destinations.push(outputConnection[0]);
      audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    }
  }
  return destinations;
};
const deleteConnectionToDestination = (source, isOffline, destination, output, input) => {
  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);
  return Array.from(audioNodeConnectionsOfSource.outputs).filter((outputConnection) => outputConnection[0] === destination && (output === void 0 || outputConnection[1] === output) && (input === void 0 || outputConnection[2] === input)).map((outputConnection) => {
    if (isAudioNodeOutputConnection(outputConnection)) {
      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
    }
    audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    return outputConnection[0];
  });
};
const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult2, createIncrementCycleCounter, createIndexSizeError2, createInvalidAccessError2, createNotSupportedError2, decrementCycleCounter, detectCycles, eventTargetConstructor2, getNativeContext2, isNativeAudioContext2, isNativeAudioNode2, isNativeAudioParam2, isNativeOfflineAudioContext2, nativeAudioWorkletNodeConstructor2) => {
  return class AudioNode extends eventTargetConstructor2 {
    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {
      super(nativeAudioNode);
      this._context = context;
      this._nativeAudioNode = nativeAudioNode;
      const nativeContext = getNativeContext2(context);
      if (isNativeAudioContext2(nativeContext) && true !== cacheTestResult2(testAudioNodeDisconnectMethodSupport, () => {
        return testAudioNodeDisconnectMethodSupport(nativeContext, nativeAudioWorkletNodeConstructor2);
      })) {
        wrapAudioNodeDisconnectMethod(nativeAudioNode);
      }
      AUDIO_NODE_STORE.set(this, nativeAudioNode);
      EVENT_LISTENERS.set(this, /* @__PURE__ */ new Set());
      if (context.state !== "closed" && isActive) {
        setInternalStateToActive(this);
      }
      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);
    }
    get channelCount() {
      return this._nativeAudioNode.channelCount;
    }
    set channelCount(value2) {
      this._nativeAudioNode.channelCount = value2;
    }
    get channelCountMode() {
      return this._nativeAudioNode.channelCountMode;
    }
    set channelCountMode(value2) {
      this._nativeAudioNode.channelCountMode = value2;
    }
    get channelInterpretation() {
      return this._nativeAudioNode.channelInterpretation;
    }
    set channelInterpretation(value2) {
      this._nativeAudioNode.channelInterpretation = value2;
    }
    get context() {
      return this._context;
    }
    get numberOfInputs() {
      return this._nativeAudioNode.numberOfInputs;
    }
    get numberOfOutputs() {
      return this._nativeAudioNode.numberOfOutputs;
    }
    connect(destination, output = 0, input = 0) {
      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {
        throw createIndexSizeError2();
      }
      const nativeContext = getNativeContext2(this._context);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      if (isNativeAudioNode2(destination) || isNativeAudioParam2(destination)) {
        throw createInvalidAccessError2();
      }
      if (isAudioNode$1(destination)) {
        const nativeDestinationAudioNode = getNativeAudioNode(destination);
        try {
          const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);
          const isPassive = isPassiveAudioNode(this);
          if (isOffline || isPassive) {
            this._nativeAudioNode.disconnect(...connection);
          }
          if (this.context.state !== "closed" && !isPassive && isPassiveAudioNode(destination)) {
            setInternalStateToActive(destination);
          }
        } catch (err) {
          if (err.code === 12) {
            throw createInvalidAccessError2();
          }
          throw err;
        }
        const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);
        if (isNewConnectionToAudioNode) {
          const cycles = detectCycles([this], destination);
          visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));
        }
        return destination;
      }
      const nativeAudioParam = getNativeAudioParam(destination);
      if (nativeAudioParam.name === "playbackRate" && nativeAudioParam.maxValue === 1024) {
        throw createNotSupportedError2();
      }
      try {
        this._nativeAudioNode.connect(nativeAudioParam, output);
        if (isOffline || isPassiveAudioNode(this)) {
          this._nativeAudioNode.disconnect(nativeAudioParam, output);
        }
      } catch (err) {
        if (err.code === 12) {
          throw createInvalidAccessError2();
        }
        throw err;
      }
      const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);
      if (isNewConnectionToAudioParam) {
        const cycles = detectCycles([this], destination);
        visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));
      }
    }
    disconnect(destinationOrOutput, output, input) {
      let destinations;
      const nativeContext = getNativeContext2(this._context);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      if (destinationOrOutput === void 0) {
        destinations = deleteAnyConnection(this, isOffline);
      } else if (typeof destinationOrOutput === "number") {
        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {
          throw createIndexSizeError2();
        }
        destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);
      } else {
        if (output !== void 0 && (output < 0 || output >= this.numberOfOutputs)) {
          throw createIndexSizeError2();
        }
        if (isAudioNode$1(destinationOrOutput) && input !== void 0 && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {
          throw createIndexSizeError2();
        }
        destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);
        if (destinations.length === 0) {
          throw createInvalidAccessError2();
        }
      }
      for (const destination of destinations) {
        const cycles = detectCycles([this], destination);
        visitEachAudioNodeOnce(cycles, decrementCycleCounter);
      }
    }
  };
};
const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore2, audioParamStore, createAudioParamRenderer2, createCancelAndHoldAutomationEvent2, createCancelScheduledValuesAutomationEvent2, createExponentialRampToValueAutomationEvent2, createLinearRampToValueAutomationEvent2, createSetTargetAutomationEvent2, createSetValueAutomationEvent2, createSetValueCurveAutomationEvent2, nativeAudioContextConstructor2, setValueAtTimeUntilPossible2) => {
  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {
    const automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);
    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer2(automationEventList) : null;
    const audioParam = {
      get defaultValue() {
        return nativeAudioParam.defaultValue;
      },
      get maxValue() {
        return maxValue === null ? nativeAudioParam.maxValue : maxValue;
      },
      get minValue() {
        return minValue === null ? nativeAudioParam.minValue : minValue;
      },
      get value() {
        return nativeAudioParam.value;
      },
      set value(value2) {
        nativeAudioParam.value = value2;
        audioParam.setValueAtTime(value2, audioNode.context.currentTime);
      },
      cancelAndHoldAtTime(cancelTime) {
        if (typeof nativeAudioParam.cancelAndHoldAtTime === "function") {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }
          automationEventList.add(createCancelAndHoldAutomationEvent2(cancelTime));
          nativeAudioParam.cancelAndHoldAtTime(cancelTime);
        } else {
          const previousLastEvent = Array.from(automationEventList).pop();
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }
          automationEventList.add(createCancelAndHoldAutomationEvent2(cancelTime));
          const currentLastEvent = Array.from(automationEventList).pop();
          nativeAudioParam.cancelScheduledValues(cancelTime);
          if (previousLastEvent !== currentLastEvent && currentLastEvent !== void 0) {
            if (currentLastEvent.type === "exponentialRampToValue") {
              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === "linearRampToValue") {
              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === "setValue") {
              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);
            } else if (currentLastEvent.type === "setValueCurve") {
              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);
            }
          }
        }
        return audioParam;
      },
      cancelScheduledValues(cancelTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }
        automationEventList.add(createCancelScheduledValuesAutomationEvent2(cancelTime));
        nativeAudioParam.cancelScheduledValues(cancelTime);
        return audioParam;
      },
      exponentialRampToValueAtTime(value2, endTime) {
        if (value2 === 0) {
          throw new RangeError();
        }
        if (!Number.isFinite(endTime) || endTime < 0) {
          throw new RangeError();
        }
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }
        automationEventList.add(createExponentialRampToValueAutomationEvent2(value2, endTime));
        nativeAudioParam.exponentialRampToValueAtTime(value2, endTime);
        return audioParam;
      },
      linearRampToValueAtTime(value2, endTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }
        automationEventList.add(createLinearRampToValueAutomationEvent2(value2, endTime));
        nativeAudioParam.linearRampToValueAtTime(value2, endTime);
        return audioParam;
      },
      setTargetAtTime(target, startTime, timeConstant) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }
        automationEventList.add(createSetTargetAutomationEvent2(target, startTime, timeConstant));
        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
        return audioParam;
      },
      setValueAtTime(value2, startTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }
        automationEventList.add(createSetValueAutomationEvent2(value2, startTime));
        nativeAudioParam.setValueAtTime(value2, startTime);
        return audioParam;
      },
      setValueCurveAtTime(values, startTime, duration) {
        const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);
        if (nativeAudioContextConstructor2 !== null && nativeAudioContextConstructor2.name === "webkitAudioContext") {
          const endTime = startTime + duration;
          const sampleRate = audioNode.context.sampleRate;
          const firstSample = Math.ceil(startTime * sampleRate);
          const lastSample = Math.floor(endTime * sampleRate);
          const numberOfInterpolatedValues = lastSample - firstSample;
          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);
          for (let i2 = 0; i2 < numberOfInterpolatedValues; i2 += 1) {
            const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i2) / sampleRate - startTime);
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            interpolatedValues[i2] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];
          }
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }
          automationEventList.add(createSetValueCurveAutomationEvent2(interpolatedValues, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);
          const timeOfLastSample = lastSample / sampleRate;
          if (timeOfLastSample < endTime) {
            setValueAtTimeUntilPossible2(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);
          }
          setValueAtTimeUntilPossible2(audioParam, convertedValues[convertedValues.length - 1], endTime);
        } else {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }
          automationEventList.add(createSetValueCurveAutomationEvent2(convertedValues, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);
        }
        return audioParam;
      }
    };
    audioParamStore.set(audioParam, nativeAudioParam);
    audioParamAudioNodeStore2.set(audioParam, audioNode);
    addAudioParamConnections(audioParam, audioParamRenderer);
    return audioParam;
  };
};
const createAudioParamRenderer = (automationEventList) => {
  return {
    replay(audioParam) {
      for (const automationEvent of automationEventList) {
        if (automationEvent.type === "exponentialRampToValue") {
          const { endTime, value: value2 } = automationEvent;
          audioParam.exponentialRampToValueAtTime(value2, endTime);
        } else if (automationEvent.type === "linearRampToValue") {
          const { endTime, value: value2 } = automationEvent;
          audioParam.linearRampToValueAtTime(value2, endTime);
        } else if (automationEvent.type === "setTarget") {
          const { startTime, target, timeConstant } = automationEvent;
          audioParam.setTargetAtTime(target, startTime, timeConstant);
        } else if (automationEvent.type === "setValue") {
          const { startTime, value: value2 } = automationEvent;
          audioParam.setValueAtTime(value2, startTime);
        } else if (automationEvent.type === "setValueCurve") {
          const { duration, startTime, values } = automationEvent;
          audioParam.setValueCurveAtTime(values, startTime, duration);
        } else {
          throw new Error("Can't apply an unknown automation.");
        }
      }
    }
  };
};
class ReadOnlyMap {
  constructor(parameters) {
    this._map = new Map(parameters);
  }
  get size() {
    return this._map.size;
  }
  entries() {
    return this._map.entries();
  }
  forEach(callback, thisArg = null) {
    return this._map.forEach((value2, key) => callback.call(thisArg, value2, key, this));
  }
  get(name) {
    return this._map.get(name);
  }
  has(name) {
    return this._map.has(name);
  }
  keys() {
    return this._map.keys();
  }
  values() {
    return this._map.values();
  }
}
const DEFAULT_OPTIONS$g = {
  channelCount: 2,
  channelCountMode: "explicit",
  channelInterpretation: "speakers",
  numberOfInputs: 1,
  numberOfOutputs: 1,
  parameterData: {},
  processorOptions: {}
};
const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode2, audioNodeConstructor2, createAudioParam2, createAudioWorkletNodeRenderer2, createNativeAudioWorkletNode2, getAudioNodeConnections2, getBackupOfflineAudioContext2, getNativeContext2, isNativeOfflineAudioContext2, nativeAudioWorkletNodeConstructor2, sanitizeAudioWorkletNodeOptions2, setActiveAudioWorkletNodeInputs2, testAudioWorkletNodeOptionsClonability2, wrapEventListener2) => {
  return class AudioWorkletNode extends audioNodeConstructor2 {
    constructor(context, name, options) {
      var _a;
      const nativeContext = getNativeContext2(context);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const mergedOptions = sanitizeAudioWorkletNodeOptions2({ ...DEFAULT_OPTIONS$g, ...options });
      testAudioWorkletNodeOptionsClonability2(mergedOptions);
      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);
      const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);
      const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== "closed" ? nativeContext : (_a = getBackupOfflineAudioContext2(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;
      const nativeAudioWorkletNode = createNativeAudioWorkletNode2(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor2, name, processorConstructor, mergedOptions);
      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer2(name, mergedOptions, processorConstructor) : null;
      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);
      const parameters = [];
      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {
        const audioParam = createAudioParam2(this, isOffline, nativeAudioParam);
        parameters.push([nm, audioParam]);
      });
      this._nativeAudioWorkletNode = nativeAudioWorkletNode;
      this._onprocessorerror = null;
      this._parameters = new ReadOnlyMap(parameters);
      if (isOffline) {
        addUnrenderedAudioWorkletNode2(nativeContext, this);
      }
      const { activeInputs } = getAudioNodeConnections2(this);
      setActiveAudioWorkletNodeInputs2(nativeAudioWorkletNode, activeInputs);
    }
    get onprocessorerror() {
      return this._onprocessorerror;
    }
    set onprocessorerror(value2) {
      const wrappedListener = typeof value2 === "function" ? wrapEventListener2(this, value2) : null;
      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;
      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;
      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value2 : nativeOnProcessorError;
    }
    get parameters() {
      if (this._parameters === null) {
        return this._nativeAudioWorkletNode.parameters;
      }
      return this._parameters;
    }
    get port() {
      return this._nativeAudioWorkletNode.port;
    }
  };
};
function copyFromChannel(audioBuffer, parent, key, channelNumber, bufferOffset) {
  if (typeof audioBuffer.copyFromChannel === "function") {
    if (parent[key].byteLength === 0) {
      parent[key] = new Float32Array(128);
    }
    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);
  } else {
    const channelData = audioBuffer.getChannelData(channelNumber);
    if (parent[key].byteLength === 0) {
      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);
    } else {
      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);
      parent[key].set(slicedInput);
    }
  }
}
const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {
  if (typeof audioBuffer.copyToChannel === "function") {
    if (parent[key].byteLength !== 0) {
      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);
    }
  } else {
    if (parent[key].byteLength !== 0) {
      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);
    }
  }
};
const createNestedArrays = (x, y) => {
  const arrays = [];
  for (let i2 = 0; i2 < x; i2 += 1) {
    const array = [];
    const length2 = typeof y === "number" ? y : y[i2];
    for (let j = 0; j < length2; j += 1) {
      array.push(new Float32Array(128));
    }
    arrays.push(array);
  }
  return arrays;
};
const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {
  const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);
  const nativeAudioWorkletNode = getNativeAudioNode(proxy);
  return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);
};
const processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime2) => {
  const length2 = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;
  const numberOfInputChannels = options.channelCount * options.numberOfInputs;
  const numberOfOutputChannels = outputChannelCount.reduce((sum, value2) => sum + value2, 0);
  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length2, nativeOfflineAudioContext.sampleRate);
  if (processorConstructor === void 0) {
    throw new Error("Missing the processor constructor.");
  }
  const audioNodeConnections = getAudioNodeConnections(proxy);
  const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);
  const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);
  const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);
  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});
  for (let i2 = 0; i2 < length2; i2 += 128) {
    if (options.numberOfInputs > 0 && renderedBuffer !== null) {
      for (let j = 0; j < options.numberOfInputs; j += 1) {
        for (let k = 0; k < options.channelCount; k += 1) {
          copyFromChannel(renderedBuffer, inputs[j], k, k, i2);
        }
      }
    }
    if (processorConstructor.parameterDescriptors !== void 0 && renderedBuffer !== null) {
      processorConstructor.parameterDescriptors.forEach(({ name }, index) => {
        copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i2);
      });
    }
    for (let j = 0; j < options.numberOfInputs; j += 1) {
      for (let k = 0; k < outputChannelCount[j]; k += 1) {
        if (outputs[j][k].byteLength === 0) {
          outputs[j][k] = new Float32Array(128);
        }
      }
    }
    try {
      const potentiallyEmptyInputs = inputs.map((input, index) => {
        if (audioNodeConnections.activeInputs[index].size === 0) {
          return [];
        }
        return input;
      });
      const activeSourceFlag = exposeCurrentFrameAndCurrentTime2(i2 / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
      if (processedBuffer !== null) {
        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
          for (let k = 0; k < outputChannelCount[j]; k += 1) {
            copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i2);
          }
          outputChannelSplitterNodeOutput += outputChannelCount[j];
        }
      }
      if (!activeSourceFlag) {
        break;
      }
    } catch (error) {
      proxy.dispatchEvent(new ErrorEvent("processorerror", {
        colno: error.colno,
        filename: error.filename,
        lineno: error.lineno,
        message: error.message
      }));
      break;
    }
  }
  return processedBuffer;
};
const createAudioWorkletNodeRendererFactory = (connectAudioParam2, connectMultipleOutputs2, createNativeAudioBufferSourceNode2, createNativeChannelMergerNode2, createNativeChannelSplitterNode2, createNativeConstantSourceNode2, createNativeGainNode2, deleteUnrenderedAudioWorkletNode2, disconnectMultipleOutputs2, exposeCurrentFrameAndCurrentTime2, getNativeAudioNode2, nativeAudioWorkletNodeConstructor2, nativeOfflineAudioContextConstructor2, renderAutomation2, renderInputsOfAudioNode2, renderNativeOfflineAudioContext2) => {
  return (name, options, processorConstructor) => {
    const renderedNativeAudioNodes = /* @__PURE__ */ new WeakMap();
    let processedBufferPromise = null;
    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAudioWorkletNode = getNativeAudioNode2(proxy);
      let nativeOutputNodes = null;
      const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);
      const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);
      if (nativeAudioWorkletNodeConstructor2 === null) {
        const numberOfOutputChannels = outputChannelCount.reduce((sum, value2) => sum + value2, 0);
        const outputChannelSplitterNode = createNativeChannelSplitterNode2(nativeOfflineAudioContext, {
          channelCount: Math.max(1, numberOfOutputChannels),
          channelCountMode: "explicit",
          channelInterpretation: "discrete",
          numberOfOutputs: Math.max(1, numberOfOutputChannels)
        });
        const outputChannelMergerNodes = [];
        for (let i2 = 0; i2 < proxy.numberOfOutputs; i2 += 1) {
          outputChannelMergerNodes.push(createNativeChannelMergerNode2(nativeOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "speakers",
            numberOfInputs: outputChannelCount[i2]
          }));
        }
        const outputGainNode = createNativeGainNode2(nativeOfflineAudioContext, {
          channelCount: options.channelCount,
          channelCountMode: options.channelCountMode,
          channelInterpretation: options.channelInterpretation,
          gain: 1
        });
        outputGainNode.connect = connectMultipleOutputs2.bind(null, outputChannelMergerNodes);
        outputGainNode.disconnect = disconnectMultipleOutputs2.bind(null, outputChannelMergerNodes);
        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];
      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {
        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor2(nativeOfflineAudioContext, name);
      }
      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);
      if (nativeOutputNodes !== null) {
        if (processedBufferPromise === null) {
          if (processorConstructor === void 0) {
            throw new Error("Missing the processor constructor.");
          }
          if (nativeOfflineAudioContextConstructor2 === null) {
            throw new Error("Missing the native OfflineAudioContext constructor.");
          }
          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;
          const numberOfParameters = processorConstructor.parameterDescriptors === void 0 ? 0 : processorConstructor.parameterDescriptors.length;
          const numberOfChannels = numberOfInputChannels + numberOfParameters;
          const renderBuffer = async () => {
            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor2(
              numberOfChannels,
              Math.ceil(proxy.context.length / 128) * 128,
              nativeOfflineAudioContext.sampleRate
            );
            const gainNodes = [];
            const inputChannelSplitterNodes = [];
            for (let i2 = 0; i2 < options.numberOfInputs; i2 += 1) {
              gainNodes.push(createNativeGainNode2(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: options.channelCountMode,
                channelInterpretation: options.channelInterpretation,
                gain: 1
              }));
              inputChannelSplitterNodes.push(createNativeChannelSplitterNode2(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                numberOfOutputs: options.channelCount
              }));
            }
            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async (audioParam) => {
              const constantSourceNode = createNativeConstantSourceNode2(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                offset: audioParam.value
              });
              await renderAutomation2(partialOfflineAudioContext, audioParam, constantSourceNode.offset);
              return constantSourceNode;
            }));
            const inputChannelMergerNode = createNativeChannelMergerNode2(partialOfflineAudioContext, {
              channelCount: 1,
              channelCountMode: "explicit",
              channelInterpretation: "speakers",
              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
            });
            for (let i2 = 0; i2 < options.numberOfInputs; i2 += 1) {
              gainNodes[i2].connect(inputChannelSplitterNodes[i2]);
              for (let j = 0; j < options.channelCount; j += 1) {
                inputChannelSplitterNodes[i2].connect(inputChannelMergerNode, j, i2 * options.channelCount + j);
              }
            }
            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {
              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
              constantSourceNode.start(0);
            }
            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);
            await Promise.all(gainNodes.map((gainNode) => renderInputsOfAudioNode2(proxy, partialOfflineAudioContext, gainNode)));
            return renderNativeOfflineAudioContext2(partialOfflineAudioContext);
          };
          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime2);
        }
        const processedBuffer = await processedBufferPromise;
        const audioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: "max",
          channelInterpretation: "speakers",
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;
        if (processedBuffer !== null) {
          audioBufferSourceNode.buffer = processedBuffer;
          audioBufferSourceNode.start(0);
        }
        audioBufferSourceNode.connect(outputChannelSplitterNode);
        for (let i2 = 0, outputChannelSplitterNodeOutput = 0; i2 < proxy.numberOfOutputs; i2 += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i2];
          for (let j = 0; j < outputChannelCount[i2]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }
          outputChannelSplitterNodeOutput += outputChannelCount[i2];
        }
        return outputGainNode;
      }
      if (!nativeAudioWorkletNodeIsOwnedByContext) {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await renderAutomation2(
            nativeOfflineAudioContext,
            audioParam,
            nativeAudioWorkletNode.parameters.get(nm)
          );
        }
      } else {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await connectAudioParam2(
            nativeOfflineAudioContext,
            audioParam,
            nativeAudioWorkletNode.parameters.get(nm)
          );
        }
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);
      return nativeAudioWorkletNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        deleteUnrenderedAudioWorkletNode2(nativeOfflineAudioContext, proxy);
        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAudioWorkletNodeOrGainNode !== void 0) {
          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);
        }
        return createAudioNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createBaseAudioContextConstructor = (addAudioWorkletModule2, analyserNodeConstructor2, audioBufferConstructor2, audioBufferSourceNodeConstructor2, biquadFilterNodeConstructor2, channelMergerNodeConstructor2, channelSplitterNodeConstructor2, constantSourceNodeConstructor2, convolverNodeConstructor2, decodeAudioData2, delayNodeConstructor2, dynamicsCompressorNodeConstructor2, gainNodeConstructor2, iIRFilterNodeConstructor2, minimalBaseAudioContextConstructor2, oscillatorNodeConstructor2, pannerNodeConstructor2, periodicWaveConstructor2, stereoPannerNodeConstructor2, waveShaperNodeConstructor2) => {
  return class BaseAudioContext extends minimalBaseAudioContextConstructor2 {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext, numberOfChannels);
      this._nativeContext = _nativeContext;
      this._audioWorklet = addAudioWorkletModule2 === void 0 ? void 0 : {
        addModule: (moduleURL, options) => {
          return addAudioWorkletModule2(this, moduleURL, options);
        }
      };
    }
    get audioWorklet() {
      return this._audioWorklet;
    }
    createAnalyser() {
      return new analyserNodeConstructor2(this);
    }
    createBiquadFilter() {
      return new biquadFilterNodeConstructor2(this);
    }
    createBuffer(numberOfChannels, length2, sampleRate) {
      return new audioBufferConstructor2({ length: length2, numberOfChannels, sampleRate });
    }
    createBufferSource() {
      return new audioBufferSourceNodeConstructor2(this);
    }
    createChannelMerger(numberOfInputs = 6) {
      return new channelMergerNodeConstructor2(this, { numberOfInputs });
    }
    createChannelSplitter(numberOfOutputs = 6) {
      return new channelSplitterNodeConstructor2(this, { numberOfOutputs });
    }
    createConstantSource() {
      return new constantSourceNodeConstructor2(this);
    }
    createConvolver() {
      return new convolverNodeConstructor2(this);
    }
    createDelay(maxDelayTime = 1) {
      return new delayNodeConstructor2(this, { maxDelayTime });
    }
    createDynamicsCompressor() {
      return new dynamicsCompressorNodeConstructor2(this);
    }
    createGain() {
      return new gainNodeConstructor2(this);
    }
    createIIRFilter(feedforward, feedback) {
      return new iIRFilterNodeConstructor2(this, { feedback, feedforward });
    }
    createOscillator() {
      return new oscillatorNodeConstructor2(this);
    }
    createPanner() {
      return new pannerNodeConstructor2(this);
    }
    createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {
      return new periodicWaveConstructor2(this, { ...constraints, imag, real });
    }
    createStereoPanner() {
      return new stereoPannerNodeConstructor2(this);
    }
    createWaveShaper() {
      return new waveShaperNodeConstructor2(this);
    }
    decodeAudioData(audioData, successCallback, errorCallback) {
      return decodeAudioData2(this._nativeContext, audioData).then((audioBuffer) => {
        if (typeof successCallback === "function") {
          successCallback(audioBuffer);
        }
        return audioBuffer;
      }, (err) => {
        if (typeof errorCallback === "function") {
          errorCallback(err);
        }
        throw err;
      });
    }
  };
};
const DEFAULT_OPTIONS$f = {
  Q: 1,
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  detune: 0,
  frequency: 350,
  gain: 0,
  type: "lowpass"
};
const createBiquadFilterNodeConstructor = (audioNodeConstructor2, createAudioParam2, createBiquadFilterNodeRenderer2, createInvalidAccessError2, createNativeBiquadFilterNode2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class BiquadFilterNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$f, ...options };
      const nativeBiquadFilterNode = createNativeBiquadFilterNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer2() : null;
      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);
      this._Q = createAudioParam2(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._detune = createAudioParam2(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));
      this._frequency = createAudioParam2(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);
      this._gain = createAudioParam2(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);
      this._nativeBiquadFilterNode = nativeBiquadFilterNode;
      setAudioNodeTailTime2(this, 1);
    }
    get detune() {
      return this._detune;
    }
    get frequency() {
      return this._frequency;
    }
    get gain() {
      return this._gain;
    }
    get Q() {
      return this._Q;
    }
    get type() {
      return this._nativeBiquadFilterNode.type;
    }
    set type(value2) {
      this._nativeBiquadFilterNode.type = value2;
    }
    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      try {
        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
      } catch (err) {
        if (err.code === 11) {
          throw createInvalidAccessError2();
        }
        throw err;
      }
      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw createInvalidAccessError2();
      }
    }
  };
};
const createBiquadFilterNodeRendererFactory = (connectAudioParam2, createNativeBiquadFilterNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeBiquadFilterNodes = /* @__PURE__ */ new WeakMap();
    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeBiquadFilterNode = getNativeAudioNode2(proxy);
      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);
      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        const options = {
          Q: nativeBiquadFilterNode.Q.value,
          channelCount: nativeBiquadFilterNode.channelCount,
          channelCountMode: nativeBiquadFilterNode.channelCountMode,
          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
          detune: nativeBiquadFilterNode.detune.value,
          frequency: nativeBiquadFilterNode.frequency.value,
          gain: nativeBiquadFilterNode.gain.value,
          type: nativeBiquadFilterNode.type
        };
        nativeBiquadFilterNode = createNativeBiquadFilterNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);
      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
        await renderAutomation2(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
        await renderAutomation2(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
        await renderAutomation2(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);
      return nativeBiquadFilterNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);
        if (renderedNativeBiquadFilterNode !== void 0) {
          return Promise.resolve(renderedNativeBiquadFilterNode);
        }
        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createCacheTestResult = (ongoingTests, testResults) => {
  return (tester, test) => {
    const cachedTestResult = testResults.get(tester);
    if (cachedTestResult !== void 0) {
      return cachedTestResult;
    }
    const ongoingTest = ongoingTests.get(tester);
    if (ongoingTest !== void 0) {
      return ongoingTest;
    }
    try {
      const synchronousTestResult = test();
      if (synchronousTestResult instanceof Promise) {
        ongoingTests.set(tester, synchronousTestResult);
        return synchronousTestResult.catch(() => false).then((finalTestResult) => {
          ongoingTests.delete(tester);
          testResults.set(tester, finalTestResult);
          return finalTestResult;
        });
      }
      testResults.set(tester, synchronousTestResult);
      return synchronousTestResult;
    } catch {
      testResults.set(tester, false);
      return false;
    }
  };
};
const DEFAULT_OPTIONS$e = {
  channelCount: 1,
  channelCountMode: "explicit",
  channelInterpretation: "speakers",
  numberOfInputs: 6
};
const createChannelMergerNodeConstructor = (audioNodeConstructor2, createChannelMergerNodeRenderer2, createNativeChannelMergerNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class ChannelMergerNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$e, ...options };
      const nativeChannelMergerNode = createNativeChannelMergerNode2(nativeContext, mergedOptions);
      const channelMergerNodeRenderer = isNativeOfflineAudioContext2(nativeContext) ? createChannelMergerNodeRenderer2() : null;
      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);
    }
  };
};
const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode2, getNativeAudioNode2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeAudioNodes = /* @__PURE__ */ new WeakMap();
    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAudioNode = getNativeAudioNode2(proxy);
      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);
      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfInputs: nativeAudioNode.numberOfInputs
        };
        nativeAudioNode = createNativeChannelMergerNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAudioNode);
      return nativeAudioNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAudioNode !== void 0) {
          return Promise.resolve(renderedNativeAudioNode);
        }
        return createAudioNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const DEFAULT_OPTIONS$d = {
  channelCount: 6,
  channelCountMode: "explicit",
  channelInterpretation: "discrete",
  numberOfOutputs: 6
};
const createChannelSplitterNodeConstructor = (audioNodeConstructor2, createChannelSplitterNodeRenderer2, createNativeChannelSplitterNode2, getNativeContext2, isNativeOfflineAudioContext2, sanitizeChannelSplitterOptions2) => {
  return class ChannelSplitterNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = sanitizeChannelSplitterOptions2({ ...DEFAULT_OPTIONS$d, ...options });
      const nativeChannelSplitterNode = createNativeChannelSplitterNode2(nativeContext, mergedOptions);
      const channelSplitterNodeRenderer = isNativeOfflineAudioContext2(nativeContext) ? createChannelSplitterNodeRenderer2() : null;
      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);
    }
  };
};
const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode2, getNativeAudioNode2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeAudioNodes = /* @__PURE__ */ new WeakMap();
    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAudioNode = getNativeAudioNode2(proxy);
      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);
      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfOutputs: nativeAudioNode.numberOfOutputs
        };
        nativeAudioNode = createNativeChannelSplitterNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeAudioNode);
      return nativeAudioNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAudioNode !== void 0) {
          return Promise.resolve(renderedNativeAudioNode);
        }
        return createAudioNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createConnectAudioParam = (renderInputsOfAudioParam2) => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {
    return renderInputsOfAudioParam2(audioParam, nativeOfflineAudioContext, nativeAudioParam);
  };
};
const createConnectMultipleOutputs = (createIndexSizeError2) => {
  return (outputAudioNodes, destination, output = 0, input = 0) => {
    const outputAudioNode = outputAudioNodes[output];
    if (outputAudioNode === void 0) {
      throw createIndexSizeError2();
    }
    if (isNativeAudioNode$1(destination)) {
      return outputAudioNode.connect(destination, 0, input);
    }
    return outputAudioNode.connect(destination, 0);
  };
};
const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode2) => {
  return (nativeContext, nativeAudioNode) => {
    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.loop = true;
    nativeAudioBufferSourceNode.connect(nativeAudioNode);
    nativeAudioBufferSourceNode.start();
    return () => {
      nativeAudioBufferSourceNode.stop();
      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);
    };
  };
};
const DEFAULT_OPTIONS$c = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  offset: 1
};
const createConstantSourceNodeConstructor = (audioNodeConstructor2, createAudioParam2, createConstantSourceNodeRendererFactory2, createNativeConstantSourceNode2, getNativeContext2, isNativeOfflineAudioContext2, wrapEventListener2) => {
  return class ConstantSourceNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$c, ...options };
      const nativeConstantSourceNode = createNativeConstantSourceNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory2() : null;
      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);
      this._constantSourceNodeRenderer = constantSourceNodeRenderer;
      this._nativeConstantSourceNode = nativeConstantSourceNode;
      this._offset = createAudioParam2(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._onended = null;
    }
    get offset() {
      return this._offset;
    }
    get onended() {
      return this._onended;
    }
    set onended(value2) {
      const wrappedListener = typeof value2 === "function" ? wrapEventListener2(this, value2) : null;
      this._nativeConstantSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeConstantSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value2 : nativeOnEnded;
    }
    start(when = 0) {
      this._nativeConstantSourceNode.start(when);
      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.start = when;
      }
      if (this.context.state !== "closed") {
        setInternalStateToActive(this);
        const resetInternalStateToPassive = () => {
          this._nativeConstantSourceNode.removeEventListener("ended", resetInternalStateToPassive);
          if (isActiveAudioNode(this)) {
            setInternalStateToPassive(this);
          }
        };
        this._nativeConstantSourceNode.addEventListener("ended", resetInternalStateToPassive);
      }
    }
    stop(when = 0) {
      this._nativeConstantSourceNode.stop(when);
      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.stop = when;
      }
    }
  };
};
const createConstantSourceNodeRendererFactory = (connectAudioParam2, createNativeConstantSourceNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeConstantSourceNodes = /* @__PURE__ */ new WeakMap();
    let start = null;
    let stop = null;
    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeConstantSourceNode = getNativeAudioNode2(proxy);
      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);
      if (!nativeConstantSourceNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeConstantSourceNode.channelCount,
          channelCountMode: nativeConstantSourceNode.channelCountMode,
          channelInterpretation: nativeConstantSourceNode.channelInterpretation,
          offset: nativeConstantSourceNode.offset.value
        };
        nativeConstantSourceNode = createNativeConstantSourceNode2(nativeOfflineAudioContext, options);
        if (start !== null) {
          nativeConstantSourceNode.start(start);
        }
        if (stop !== null) {
          nativeConstantSourceNode.stop(stop);
        }
      }
      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);
      if (!nativeConstantSourceNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);
      return nativeConstantSourceNode;
    };
    return {
      set start(value2) {
        start = value2;
      },
      set stop(value2) {
        stop = value2;
      },
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);
        if (renderedNativeConstantSourceNode !== void 0) {
          return Promise.resolve(renderedNativeConstantSourceNode);
        }
        return createConstantSourceNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createConvertNumberToUnsignedLong = (unit32Array) => {
  return (value2) => {
    unit32Array[0] = value2;
    return unit32Array[0];
  };
};
const DEFAULT_OPTIONS$b = {
  buffer: null,
  channelCount: 2,
  channelCountMode: "clamped-max",
  channelInterpretation: "speakers",
  disableNormalization: false
};
const createConvolverNodeConstructor = (audioNodeConstructor2, createConvolverNodeRenderer2, createNativeConvolverNode2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class ConvolverNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$b, ...options };
      const nativeConvolverNode = createNativeConvolverNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer2() : null;
      super(context, false, nativeConvolverNode, convolverNodeRenderer);
      this._isBufferNullified = false;
      this._nativeConvolverNode = nativeConvolverNode;
      if (mergedOptions.buffer !== null) {
        setAudioNodeTailTime2(this, mergedOptions.buffer.duration);
      }
    }
    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }
      return this._nativeConvolverNode.buffer;
    }
    set buffer(value2) {
      this._nativeConvolverNode.buffer = value2;
      if (value2 === null && this._nativeConvolverNode.buffer !== null) {
        const nativeContext = this._nativeConvolverNode.context;
        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);
        this._isBufferNullified = true;
        setAudioNodeTailTime2(this, 0);
      } else {
        this._isBufferNullified = false;
        setAudioNodeTailTime2(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);
      }
    }
    get normalize() {
      return this._nativeConvolverNode.normalize;
    }
    set normalize(value2) {
      this._nativeConvolverNode.normalize = value2;
    }
  };
};
const createConvolverNodeRendererFactory = (createNativeConvolverNode2, getNativeAudioNode2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeConvolverNodes = /* @__PURE__ */ new WeakMap();
    const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeConvolverNode = getNativeAudioNode2(proxy);
      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);
      if (!nativeConvolverNodeIsOwnedByContext) {
        const options = {
          buffer: nativeConvolverNode.buffer,
          channelCount: nativeConvolverNode.channelCount,
          channelCountMode: nativeConvolverNode.channelCountMode,
          channelInterpretation: nativeConvolverNode.channelInterpretation,
          disableNormalization: !nativeConvolverNode.normalize
        };
        nativeConvolverNode = createNativeConvolverNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);
      if (isNativeAudioNodeFaker(nativeConvolverNode)) {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);
      } else {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeConvolverNode);
      }
      return nativeConvolverNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);
        if (renderedNativeConvolverNode !== void 0) {
          return Promise.resolve(renderedNativeConvolverNode);
        }
        return createConvolverNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createCreateNativeOfflineAudioContext = (createNotSupportedError2, nativeOfflineAudioContextConstructor2) => {
  return (numberOfChannels, length2, sampleRate) => {
    if (nativeOfflineAudioContextConstructor2 === null) {
      throw new Error("Missing the native OfflineAudioContext constructor.");
    }
    try {
      return new nativeOfflineAudioContextConstructor2(numberOfChannels, length2, sampleRate);
    } catch (err) {
      if (err.name === "SyntaxError") {
        throw createNotSupportedError2();
      }
      throw err;
    }
  };
};
const createDataCloneError = () => new DOMException("", "DataCloneError");
const detachArrayBuffer = (arrayBuffer) => {
  const { port1, port2 } = new MessageChannel();
  return new Promise((resolve) => {
    const closeAndResolve = () => {
      port2.onmessage = null;
      port1.close();
      port2.close();
      resolve();
    };
    port2.onmessage = () => closeAndResolve();
    try {
      port1.postMessage(arrayBuffer, [arrayBuffer]);
    } finally {
      closeAndResolve();
    }
  });
};
const createDecodeAudioData = (audioBufferStore2, cacheTestResult2, createDataCloneError2, createEncodingError2, detachedArrayBuffers, getNativeContext2, isNativeContext2, testAudioBufferCopyChannelMethodsOutOfBoundsSupport2, testPromiseSupport2, wrapAudioBufferCopyChannelMethods2, wrapAudioBufferCopyChannelMethodsOutOfBounds2) => {
  return (anyContext, audioData) => {
    const nativeContext = isNativeContext2(anyContext) ? anyContext : getNativeContext2(anyContext);
    if (detachedArrayBuffers.has(audioData)) {
      const err = createDataCloneError2();
      return Promise.reject(err);
    }
    try {
      detachedArrayBuffers.add(audioData);
    } catch {
    }
    if (cacheTestResult2(testPromiseSupport2, () => testPromiseSupport2(nativeContext))) {
      return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {
        detachArrayBuffer(audioData).catch(() => {
        });
        if (!cacheTestResult2(testAudioBufferCopyChannelMethodsOutOfBoundsSupport2, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport2(audioBuffer))) {
          wrapAudioBufferCopyChannelMethodsOutOfBounds2(audioBuffer);
        }
        audioBufferStore2.add(audioBuffer);
        return audioBuffer;
      });
    }
    return new Promise((resolve, reject) => {
      const complete = async () => {
        try {
          await detachArrayBuffer(audioData);
        } catch {
        }
      };
      const fail = (err) => {
        reject(err);
        complete();
      };
      try {
        nativeContext.decodeAudioData(audioData, (audioBuffer) => {
          if (typeof audioBuffer.copyFromChannel !== "function") {
            wrapAudioBufferCopyChannelMethods2(audioBuffer);
            wrapAudioBufferGetChannelDataMethod(audioBuffer);
          }
          audioBufferStore2.add(audioBuffer);
          complete().then(() => resolve(audioBuffer));
        }, (err) => {
          if (err === null) {
            fail(createEncodingError2());
          } else {
            fail(err);
          }
        });
      } catch (err) {
        fail(err);
      }
    });
  };
};
const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode2, cycleCounters, getAudioNodeConnections2, getNativeAudioNode2, getNativeAudioParam2, getNativeContext2, isActiveAudioNode2, isNativeOfflineAudioContext2) => {
  return (audioNode, count) => {
    const cycleCounter = cycleCounters.get(audioNode);
    if (cycleCounter === void 0) {
      throw new Error("Missing the expected cycle count.");
    }
    const nativeContext = getNativeContext2(audioNode.context);
    const isOffline = isNativeOfflineAudioContext2(nativeContext);
    if (cycleCounter === count) {
      cycleCounters.delete(audioNode);
      if (!isOffline && isActiveAudioNode2(audioNode)) {
        const nativeSourceAudioNode = getNativeAudioNode2(audioNode);
        const { outputs } = getAudioNodeConnections2(audioNode);
        for (const output of outputs) {
          if (isAudioNodeOutputConnection(output)) {
            const nativeDestinationAudioNode = getNativeAudioNode2(output[0]);
            connectNativeAudioNodeToNativeAudioNode2(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
          } else {
            const nativeDestinationAudioParam = getNativeAudioParam2(output[0]);
            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);
          }
        }
      }
    } else {
      cycleCounters.set(audioNode, cycleCounter - count);
    }
  };
};
const DEFAULT_OPTIONS$a = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  delayTime: 0,
  maxDelayTime: 1
};
const createDelayNodeConstructor = (audioNodeConstructor2, createAudioParam2, createDelayNodeRenderer2, createNativeDelayNode2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class DelayNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$a, ...options };
      const nativeDelayNode = createNativeDelayNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const delayNodeRenderer = isOffline ? createDelayNodeRenderer2(mergedOptions.maxDelayTime) : null;
      super(context, false, nativeDelayNode, delayNodeRenderer);
      this._delayTime = createAudioParam2(this, isOffline, nativeDelayNode.delayTime);
      setAudioNodeTailTime2(this, mergedOptions.maxDelayTime);
    }
    get delayTime() {
      return this._delayTime;
    }
  };
};
const createDelayNodeRendererFactory = (connectAudioParam2, createNativeDelayNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return (maxDelayTime) => {
    const renderedNativeDelayNodes = /* @__PURE__ */ new WeakMap();
    const createDelayNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeDelayNode = getNativeAudioNode2(proxy);
      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);
      if (!nativeDelayNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeDelayNode.channelCount,
          channelCountMode: nativeDelayNode.channelCountMode,
          channelInterpretation: nativeDelayNode.channelInterpretation,
          delayTime: nativeDelayNode.delayTime.value,
          maxDelayTime
        };
        nativeDelayNode = createNativeDelayNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);
      if (!nativeDelayNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeDelayNode);
      return nativeDelayNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);
        if (renderedNativeDelayNode !== void 0) {
          return Promise.resolve(renderedNativeDelayNode);
        }
        return createDelayNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createDeleteActiveInputConnectionToAudioNode = (pickElementFromSet2) => {
  return (activeInputs, source, output, input) => {
    return pickElementFromSet2(activeInputs[input], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);
  };
};
const createDeleteUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes2) => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes2(nativeContext).delete(audioWorkletNode);
  };
};
const isDelayNode = (audioNode) => {
  return "delayTime" in audioNode;
};
const createDetectCycles = (audioParamAudioNodeStore2, getAudioNodeConnections2, getValueForKey2) => {
  return function detectCycles(chain, nextLink) {
    const audioNode = isAudioNode$1(nextLink) ? nextLink : getValueForKey2(audioParamAudioNodeStore2, nextLink);
    if (isDelayNode(audioNode)) {
      return [];
    }
    if (chain[0] === audioNode) {
      return [chain];
    }
    if (chain.includes(audioNode)) {
      return [];
    }
    const { outputs } = getAudioNodeConnections2(audioNode);
    return Array.from(outputs).map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);
  };
};
const getOutputAudioNodeAtIndex = (createIndexSizeError2, outputAudioNodes, output) => {
  const outputAudioNode = outputAudioNodes[output];
  if (outputAudioNode === void 0) {
    throw createIndexSizeError2();
  }
  return outputAudioNode;
};
const createDisconnectMultipleOutputs = (createIndexSizeError2) => {
  return (outputAudioNodes, destinationOrOutput = void 0, output = void 0, input = 0) => {
    if (destinationOrOutput === void 0) {
      return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());
    }
    if (typeof destinationOrOutput === "number") {
      return getOutputAudioNodeAtIndex(createIndexSizeError2, outputAudioNodes, destinationOrOutput).disconnect();
    }
    if (isNativeAudioNode$1(destinationOrOutput)) {
      if (output === void 0) {
        return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));
      }
      if (input === void 0) {
        return getOutputAudioNodeAtIndex(createIndexSizeError2, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
      }
      return getOutputAudioNodeAtIndex(createIndexSizeError2, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);
    }
    if (output === void 0) {
      return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));
    }
    return getOutputAudioNodeAtIndex(createIndexSizeError2, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
  };
};
const DEFAULT_OPTIONS$9 = {
  attack: 3e-3,
  channelCount: 2,
  channelCountMode: "clamped-max",
  channelInterpretation: "speakers",
  knee: 30,
  ratio: 12,
  release: 0.25,
  threshold: -24
};
const createDynamicsCompressorNodeConstructor = (audioNodeConstructor2, createAudioParam2, createDynamicsCompressorNodeRenderer2, createNativeDynamicsCompressorNode2, createNotSupportedError2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class DynamicsCompressorNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$9, ...options };
      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer2() : null;
      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);
      this._attack = createAudioParam2(this, isOffline, nativeDynamicsCompressorNode.attack);
      this._knee = createAudioParam2(this, isOffline, nativeDynamicsCompressorNode.knee);
      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;
      this._ratio = createAudioParam2(this, isOffline, nativeDynamicsCompressorNode.ratio);
      this._release = createAudioParam2(this, isOffline, nativeDynamicsCompressorNode.release);
      this._threshold = createAudioParam2(this, isOffline, nativeDynamicsCompressorNode.threshold);
      setAudioNodeTailTime2(this, 6e-3);
    }
    get attack() {
      return this._attack;
    }
    get channelCount() {
      return this._nativeDynamicsCompressorNode.channelCount;
    }
    set channelCount(value2) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;
      this._nativeDynamicsCompressorNode.channelCount = value2;
      if (value2 > 2) {
        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;
        throw createNotSupportedError2();
      }
    }
    get channelCountMode() {
      return this._nativeDynamicsCompressorNode.channelCountMode;
    }
    set channelCountMode(value2) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;
      this._nativeDynamicsCompressorNode.channelCountMode = value2;
      if (value2 === "max") {
        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;
        throw createNotSupportedError2();
      }
    }
    get knee() {
      return this._knee;
    }
    get ratio() {
      return this._ratio;
    }
    get reduction() {
      if (typeof this._nativeDynamicsCompressorNode.reduction.value === "number") {
        return this._nativeDynamicsCompressorNode.reduction.value;
      }
      return this._nativeDynamicsCompressorNode.reduction;
    }
    get release() {
      return this._release;
    }
    get threshold() {
      return this._threshold;
    }
  };
};
const createDynamicsCompressorNodeRendererFactory = (connectAudioParam2, createNativeDynamicsCompressorNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeDynamicsCompressorNodes = /* @__PURE__ */ new WeakMap();
    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeDynamicsCompressorNode = getNativeAudioNode2(proxy);
      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);
      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        const options = {
          attack: nativeDynamicsCompressorNode.attack.value,
          channelCount: nativeDynamicsCompressorNode.channelCount,
          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,
          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,
          knee: nativeDynamicsCompressorNode.knee.value,
          ratio: nativeDynamicsCompressorNode.ratio.value,
          release: nativeDynamicsCompressorNode.release.value,
          threshold: nativeDynamicsCompressorNode.threshold.value
        };
        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);
      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
        await renderAutomation2(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
        await renderAutomation2(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
        await renderAutomation2(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
        await renderAutomation2(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);
      return nativeDynamicsCompressorNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);
        if (renderedNativeDynamicsCompressorNode !== void 0) {
          return Promise.resolve(renderedNativeDynamicsCompressorNode);
        }
        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createEncodingError = () => new DOMException("", "EncodingError");
const createEvaluateSource = (window2) => {
  return (source) => new Promise((resolve, reject) => {
    if (window2 === null) {
      reject(new SyntaxError());
      return;
    }
    const head = window2.document.head;
    if (head === null) {
      reject(new SyntaxError());
    } else {
      const script = window2.document.createElement("script");
      const blob = new Blob([source], { type: "application/javascript" });
      const url2 = URL.createObjectURL(blob);
      const originalOnErrorHandler = window2.onerror;
      const removeErrorEventListenerAndRevokeUrl = () => {
        window2.onerror = originalOnErrorHandler;
        URL.revokeObjectURL(url2);
      };
      window2.onerror = (message, src, lineno, colno, error) => {
        if (src === url2 || src === window2.location.href && lineno === 1 && colno === 1) {
          removeErrorEventListenerAndRevokeUrl();
          reject(error);
          return false;
        }
        if (originalOnErrorHandler !== null) {
          return originalOnErrorHandler(message, src, lineno, colno, error);
        }
      };
      script.onerror = () => {
        removeErrorEventListenerAndRevokeUrl();
        reject(new SyntaxError());
      };
      script.onload = () => {
        removeErrorEventListenerAndRevokeUrl();
        resolve();
      };
      script.src = url2;
      script.type = "module";
      head.appendChild(script);
    }
  });
};
const createEventTargetConstructor = (wrapEventListener2) => {
  return class EventTarget {
    constructor(_nativeEventTarget) {
      this._nativeEventTarget = _nativeEventTarget;
      this._listeners = /* @__PURE__ */ new WeakMap();
    }
    addEventListener(type, listener, options) {
      if (listener !== null) {
        let wrappedEventListener = this._listeners.get(listener);
        if (wrappedEventListener === void 0) {
          wrappedEventListener = wrapEventListener2(this, listener);
          if (typeof listener === "function") {
            this._listeners.set(listener, wrappedEventListener);
          }
        }
        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
      }
    }
    dispatchEvent(event) {
      return this._nativeEventTarget.dispatchEvent(event);
    }
    removeEventListener(type, listener, options) {
      const wrappedEventListener = listener === null ? void 0 : this._listeners.get(listener);
      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === void 0 ? null : wrappedEventListener, options);
    }
  };
};
const createExposeCurrentFrameAndCurrentTime = (window2) => {
  return (currentTime, sampleRate, fn) => {
    Object.defineProperties(window2, {
      currentFrame: {
        configurable: true,
        get() {
          return Math.round(currentTime * sampleRate);
        }
      },
      currentTime: {
        configurable: true,
        get() {
          return currentTime;
        }
      }
    });
    try {
      return fn();
    } finally {
      if (window2 !== null) {
        delete window2.currentFrame;
        delete window2.currentTime;
      }
    }
  };
};
const createFetchSource = (createAbortError2) => {
  return async (url2) => {
    try {
      const response = await fetch(url2);
      if (response.ok) {
        return [await response.text(), response.url];
      }
    } catch {
    }
    throw createAbortError2();
  };
};
const DEFAULT_OPTIONS$8 = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  gain: 1
};
const createGainNodeConstructor = (audioNodeConstructor2, createAudioParam2, createGainNodeRenderer2, createNativeGainNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class GainNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$8, ...options };
      const nativeGainNode = createNativeGainNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const gainNodeRenderer = isOffline ? createGainNodeRenderer2() : null;
      super(context, false, nativeGainNode, gainNodeRenderer);
      this._gain = createAudioParam2(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
    }
    get gain() {
      return this._gain;
    }
  };
};
const createGainNodeRendererFactory = (connectAudioParam2, createNativeGainNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeGainNodes = /* @__PURE__ */ new WeakMap();
    const createGainNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeGainNode = getNativeAudioNode2(proxy);
      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);
      if (!nativeGainNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeGainNode.channelCount,
          channelCountMode: nativeGainNode.channelCountMode,
          channelInterpretation: nativeGainNode.channelInterpretation,
          gain: nativeGainNode.gain.value
        };
        nativeGainNode = createNativeGainNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);
      if (!nativeGainNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeGainNode);
      return nativeGainNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);
        if (renderedNativeGainNode !== void 0) {
          return Promise.resolve(renderedNativeGainNode);
        }
        return createGainNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore2, getValueForKey2) => {
  return (nativeAudioWorkletNode) => getValueForKey2(activeAudioWorkletNodeInputsStore2, nativeAudioWorkletNode);
};
const createGetAudioNodeRenderer = (getAudioNodeConnections2) => {
  return (audioNode) => {
    const audioNodeConnections = getAudioNodeConnections2(audioNode);
    if (audioNodeConnections.renderer === null) {
      throw new Error("Missing the renderer of the given AudioNode in the audio graph.");
    }
    return audioNodeConnections.renderer;
  };
};
const createGetAudioNodeTailTime = (audioNodeTailTimeStore2) => {
  return (audioNode) => {
    var _a;
    return (_a = audioNodeTailTimeStore2.get(audioNode)) !== null && _a !== void 0 ? _a : 0;
  };
};
const createGetAudioParamRenderer = (getAudioParamConnections2) => {
  return (audioParam) => {
    const audioParamConnections = getAudioParamConnections2(audioParam);
    if (audioParamConnections.renderer === null) {
      throw new Error("Missing the renderer of the given AudioParam in the audio graph.");
    }
    return audioParamConnections.renderer;
  };
};
const createGetBackupOfflineAudioContext = (backupOfflineAudioContextStore2) => {
  return (nativeContext) => {
    return backupOfflineAudioContextStore2.get(nativeContext);
  };
};
const createInvalidStateError = () => new DOMException("", "InvalidStateError");
const createGetNativeContext = (contextStore) => {
  return (context) => {
    const nativeContext = contextStore.get(context);
    if (nativeContext === void 0) {
      throw createInvalidStateError();
    }
    return nativeContext;
  };
};
const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore2, nativeOfflineAudioContextConstructor2) => {
  return (nativeContext) => {
    let backupOfflineAudioContext = backupOfflineAudioContextStore2.get(nativeContext);
    if (backupOfflineAudioContext !== void 0) {
      return backupOfflineAudioContext;
    }
    if (nativeOfflineAudioContextConstructor2 === null) {
      throw new Error("Missing the native OfflineAudioContext constructor.");
    }
    backupOfflineAudioContext = new nativeOfflineAudioContextConstructor2(1, 1, 44100);
    backupOfflineAudioContextStore2.set(nativeContext, backupOfflineAudioContext);
    return backupOfflineAudioContext;
  };
};
const createGetUnrenderedAudioWorkletNodes = (unrenderedAudioWorkletNodeStore2) => {
  return (nativeContext) => {
    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore2.get(nativeContext);
    if (unrenderedAudioWorkletNodes === void 0) {
      throw new Error("The context has no set of AudioWorkletNodes.");
    }
    return unrenderedAudioWorkletNodes;
  };
};
const createInvalidAccessError = () => new DOMException("", "InvalidAccessError");
const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {
  nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {
    return (frequencyHz, magResponse, phaseResponse) => {
      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw createInvalidAccessError();
      }
      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);
    };
  })(nativeIIRFilterNode.getFrequencyResponse);
};
const DEFAULT_OPTIONS$7 = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers"
};
const createIIRFilterNodeConstructor = (audioNodeConstructor2, createNativeIIRFilterNode2, createIIRFilterNodeRenderer2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class IIRFilterNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const mergedOptions = { ...DEFAULT_OPTIONS$7, ...options };
      const nativeIIRFilterNode = createNativeIIRFilterNode2(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);
      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer2(mergedOptions.feedback, mergedOptions.feedforward) : null;
      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);
      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);
      this._nativeIIRFilterNode = nativeIIRFilterNode;
      setAudioNodeTailTime2(this, 1);
    }
    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
    }
  };
};
const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {
  const inputLength = input.length;
  let i2 = bufferIndex;
  for (let j = 0; j < inputLength; j += 1) {
    let y = feedforward[0] * input[j];
    for (let k = 1; k < minLength; k += 1) {
      const x = i2 - k & bufferLength - 1;
      y += feedforward[k] * xBuffer[x];
      y -= feedback[k] * yBuffer[x];
    }
    for (let k = minLength; k < feedforwardLength; k += 1) {
      y += feedforward[k] * xBuffer[i2 - k & bufferLength - 1];
    }
    for (let k = minLength; k < feedbackLength; k += 1) {
      y -= feedback[k] * yBuffer[i2 - k & bufferLength - 1];
    }
    xBuffer[i2] = input[j];
    yBuffer[i2] = y;
    i2 = i2 + 1 & bufferLength - 1;
    output[j] = y;
  }
  return i2;
};
const filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {
  const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
  const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
  const feedbackLength = convertedFeedback.length;
  const feedforwardLength = convertedFeedforward.length;
  const minLength = Math.min(feedbackLength, feedforwardLength);
  if (convertedFeedback[0] !== 1) {
    for (let i2 = 0; i2 < feedbackLength; i2 += 1) {
      convertedFeedforward[i2] /= convertedFeedback[0];
    }
    for (let i2 = 1; i2 < feedforwardLength; i2 += 1) {
      convertedFeedback[i2] /= convertedFeedback[0];
    }
  }
  const bufferLength = 32;
  const xBuffer = new Float32Array(bufferLength);
  const yBuffer = new Float32Array(bufferLength);
  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);
  const numberOfChannels = renderedBuffer.numberOfChannels;
  for (let i2 = 0; i2 < numberOfChannels; i2 += 1) {
    const input = renderedBuffer.getChannelData(i2);
    const output = filteredBuffer.getChannelData(i2);
    xBuffer.fill(0);
    yBuffer.fill(0);
    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);
  }
  return filteredBuffer;
};
const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode2, getNativeAudioNode2, nativeOfflineAudioContextConstructor2, renderInputsOfAudioNode2, renderNativeOfflineAudioContext2) => {
  return (feedback, feedforward) => {
    const renderedNativeAudioNodes = /* @__PURE__ */ new WeakMap();
    let filteredBufferPromise = null;
    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeAudioBufferSourceNode = null;
      let nativeIIRFilterNode = getNativeAudioNode2(proxy);
      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);
      if (nativeOfflineAudioContext.createIIRFilter === void 0) {
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: "max",
          channelInterpretation: "speakers",
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
      } else if (!nativeIIRFilterNodeIsOwnedByContext) {
        nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);
      }
      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);
      if (nativeAudioBufferSourceNode !== null) {
        if (filteredBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor2 === null) {
            throw new Error("Missing the native OfflineAudioContext constructor.");
          }
          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor2(
            proxy.context.destination.channelCount,
            proxy.context.length,
            nativeOfflineAudioContext.sampleRate
          );
          filteredBufferPromise = (async () => {
            await renderInputsOfAudioNode2(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);
            const renderedBuffer = await renderNativeOfflineAudioContext2(partialOfflineAudioContext);
            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);
          })();
        }
        const filteredBuffer = await filteredBufferPromise;
        nativeAudioBufferSourceNode.buffer = filteredBuffer;
        nativeAudioBufferSourceNode.start(0);
        return nativeAudioBufferSourceNode;
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);
      return nativeIIRFilterNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
        if (renderedNativeAudioNode !== void 0) {
          return Promise.resolve(renderedNativeAudioNode);
        }
        return createAudioNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode2, getAudioNodeConnections2, getNativeAudioNode2, getNativeAudioParam2, isActiveAudioNode2) => {
  return (isOffline) => {
    return (audioNode, count) => {
      const cycleCounter = cycleCounters.get(audioNode);
      if (cycleCounter === void 0) {
        if (!isOffline && isActiveAudioNode2(audioNode)) {
          const nativeSourceAudioNode = getNativeAudioNode2(audioNode);
          const { outputs } = getAudioNodeConnections2(audioNode);
          for (const output of outputs) {
            if (isAudioNodeOutputConnection(output)) {
              const nativeDestinationAudioNode = getNativeAudioNode2(output[0]);
              disconnectNativeAudioNodeFromNativeAudioNode2(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
            } else {
              const nativeDestinationAudioParam = getNativeAudioParam2(output[0]);
              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);
            }
          }
        }
        cycleCounters.set(audioNode, count);
      } else {
        cycleCounters.set(audioNode, cycleCounter + count);
      }
    };
  };
};
const createIsAnyAudioContext = (contextStore, isNativeAudioContext2) => {
  return (anything) => {
    const nativeContext = contextStore.get(anything);
    return isNativeAudioContext2(nativeContext) || isNativeAudioContext2(anything);
  };
};
const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode2) => {
  return (anything) => audioNodeStore.has(anything) || isNativeAudioNode2(anything);
};
const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam2) => {
  return (anything) => audioParamStore.has(anything) || isNativeAudioParam2(anything);
};
const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext2) => {
  return (anything) => {
    const nativeContext = contextStore.get(anything);
    return isNativeOfflineAudioContext2(nativeContext) || isNativeOfflineAudioContext2(anything);
  };
};
const createIsNativeAudioContext = (nativeAudioContextConstructor2) => {
  return (anything) => {
    return nativeAudioContextConstructor2 !== null && anything instanceof nativeAudioContextConstructor2;
  };
};
const createIsNativeAudioNode = (window2) => {
  return (anything) => {
    return window2 !== null && typeof window2.AudioNode === "function" && anything instanceof window2.AudioNode;
  };
};
const createIsNativeAudioParam = (window2) => {
  return (anything) => {
    return window2 !== null && typeof window2.AudioParam === "function" && anything instanceof window2.AudioParam;
  };
};
const createIsNativeContext = (isNativeAudioContext2, isNativeOfflineAudioContext2) => {
  return (anything) => {
    return isNativeAudioContext2(anything) || isNativeOfflineAudioContext2(anything);
  };
};
const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor2) => {
  return (anything) => {
    return nativeOfflineAudioContextConstructor2 !== null && anything instanceof nativeOfflineAudioContextConstructor2;
  };
};
const createIsSecureContext = (window2) => window2 !== null && window2.isSecureContext;
const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor2, createNativeMediaElementAudioSourceNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class MediaElementAudioSourceNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode2(nativeContext, options);
      if (isNativeOfflineAudioContext2(nativeContext)) {
        throw TypeError();
      }
      super(context, true, nativeMediaElementAudioSourceNode, null);
      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;
    }
    get mediaElement() {
      return this._nativeMediaElementAudioSourceNode.mediaElement;
    }
  };
};
const DEFAULT_OPTIONS$6 = {
  channelCount: 2,
  channelCountMode: "explicit",
  channelInterpretation: "speakers"
};
const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor2, createNativeMediaStreamAudioDestinationNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class MediaStreamAudioDestinationNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      if (isNativeOfflineAudioContext2(nativeContext)) {
        throw new TypeError();
      }
      const mergedOptions = { ...DEFAULT_OPTIONS$6, ...options };
      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode2(nativeContext, mergedOptions);
      super(context, false, nativeMediaStreamAudioDestinationNode, null);
      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;
    }
    get stream() {
      return this._nativeMediaStreamAudioDestinationNode.stream;
    }
  };
};
const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor2, createNativeMediaStreamAudioSourceNode2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class MediaStreamAudioSourceNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode2(nativeContext, options);
      if (isNativeOfflineAudioContext2(nativeContext)) {
        throw new TypeError();
      }
      super(context, true, nativeMediaStreamAudioSourceNode, null);
      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;
    }
    get mediaStream() {
      return this._nativeMediaStreamAudioSourceNode.mediaStream;
    }
  };
};
const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor2, createNativeMediaStreamTrackAudioSourceNode2, getNativeContext2) => {
  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode2(nativeContext, options);
      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);
    }
  };
};
const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor2, createAudioListener2, eventTargetConstructor2, isNativeOfflineAudioContext2, unrenderedAudioWorkletNodeStore2, wrapEventListener2) => {
  return class MinimalBaseAudioContext extends eventTargetConstructor2 {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext);
      this._nativeContext = _nativeContext;
      CONTEXT_STORE.set(this, _nativeContext);
      if (isNativeOfflineAudioContext2(_nativeContext)) {
        unrenderedAudioWorkletNodeStore2.set(_nativeContext, /* @__PURE__ */ new Set());
      }
      this._destination = new audioDestinationNodeConstructor2(this, numberOfChannels);
      this._listener = createAudioListener2(this, _nativeContext);
      this._onstatechange = null;
    }
    get currentTime() {
      return this._nativeContext.currentTime;
    }
    get destination() {
      return this._destination;
    }
    get listener() {
      return this._listener;
    }
    get onstatechange() {
      return this._onstatechange;
    }
    set onstatechange(value2) {
      const wrappedListener = typeof value2 === "function" ? wrapEventListener2(this, value2) : null;
      this._nativeContext.onstatechange = wrappedListener;
      const nativeOnStateChange = this._nativeContext.onstatechange;
      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value2 : nativeOnStateChange;
    }
    get sampleRate() {
      return this._nativeContext.sampleRate;
    }
    get state() {
      return this._nativeContext.state;
    }
  };
};
const testPromiseSupport = (nativeContext) => {
  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);
  try {
    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {
    });
    if (promise === void 0) {
      return false;
    }
    promise.catch(() => {
    });
    return true;
  } catch {
  }
  return false;
};
const createMonitorConnections = (insertElementInSet2, isNativeAudioNode2) => {
  return (nativeAudioNode, whenConnected, whenDisconnected) => {
    const connections = /* @__PURE__ */ new Set();
    nativeAudioNode.connect = ((connect2) => {
      return (destination, output = 0, input = 0) => {
        const wasDisconnected = connections.size === 0;
        if (isNativeAudioNode2(destination)) {
          connect2.call(nativeAudioNode, destination, output, input);
          insertElementInSet2(connections, [destination, output, input], (connection) => connection[0] === destination && connection[1] === output && connection[2] === input, true);
          if (wasDisconnected) {
            whenConnected();
          }
          return destination;
        }
        connect2.call(nativeAudioNode, destination, output);
        insertElementInSet2(connections, [destination, output], (connection) => connection[0] === destination && connection[1] === output, true);
        if (wasDisconnected) {
          whenConnected();
        }
        return;
      };
    })(nativeAudioNode.connect);
    nativeAudioNode.disconnect = ((disconnect2) => {
      return (destinationOrOutput, output, input) => {
        const wasConnected = connections.size > 0;
        if (destinationOrOutput === void 0) {
          disconnect2.apply(nativeAudioNode);
          connections.clear();
        } else if (typeof destinationOrOutput === "number") {
          disconnect2.call(nativeAudioNode, destinationOrOutput);
          for (const connection of connections) {
            if (connection[1] === destinationOrOutput) {
              connections.delete(connection);
            }
          }
        } else {
          if (isNativeAudioNode2(destinationOrOutput)) {
            disconnect2.call(nativeAudioNode, destinationOrOutput, output, input);
          } else {
            disconnect2.call(nativeAudioNode, destinationOrOutput, output);
          }
          for (const connection of connections) {
            if (connection[0] === destinationOrOutput && (output === void 0 || connection[1] === output) && (input === void 0 || connection[2] === input)) {
              connections.delete(connection);
            }
          }
        }
        const isDisconnected = connections.size === 0;
        if (wasConnected && isDisconnected) {
          whenDisconnected();
        }
      };
    })(nativeAudioNode.disconnect);
    return nativeAudioNode;
  };
};
const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {
  const value2 = options[option];
  if (value2 !== void 0 && value2 !== nativeAudioNode[option]) {
    nativeAudioNode[option] = value2;
  }
};
const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {
  assignNativeAudioNodeOption(nativeAudioNode, options, "channelCount");
  assignNativeAudioNodeOption(nativeAudioNode, options, "channelCountMode");
  assignNativeAudioNodeOption(nativeAudioNode, options, "channelInterpretation");
};
const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {
  return typeof nativeAnalyserNode.getFloatTimeDomainData === "function";
};
const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {
  nativeAnalyserNode.getFloatTimeDomainData = (array) => {
    const byteTimeDomainData = new Uint8Array(array.length);
    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);
    const length2 = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);
    for (let i2 = 0; i2 < length2; i2 += 1) {
      array[i2] = (byteTimeDomainData[i2] - 128) * 78125e-7;
    }
    return array;
  };
};
const createNativeAnalyserNodeFactory = (cacheTestResult2, createIndexSizeError2) => {
  return (nativeContext, options) => {
    const nativeAnalyserNode = nativeContext.createAnalyser();
    assignNativeAudioNodeOptions(nativeAnalyserNode, options);
    if (!(options.maxDecibels > options.minDecibels)) {
      throw createIndexSizeError2();
    }
    assignNativeAudioNodeOption(nativeAnalyserNode, options, "fftSize");
    assignNativeAudioNodeOption(nativeAnalyserNode, options, "maxDecibels");
    assignNativeAudioNodeOption(nativeAnalyserNode, options, "minDecibels");
    assignNativeAudioNodeOption(nativeAnalyserNode, options, "smoothingTimeConstant");
    if (!cacheTestResult2(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {
      wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);
    }
    return nativeAnalyserNode;
  };
};
const createNativeAudioBufferConstructor = (window2) => {
  if (window2 === null) {
    return null;
  }
  if (window2.hasOwnProperty("AudioBuffer")) {
    return window2.AudioBuffer;
  }
  return null;
};
const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {
  const value2 = options[audioParam];
  if (value2 !== void 0 && value2 !== nativeAudioNode[audioParam].value) {
    nativeAudioNode[audioParam].value = value2;
  }
};
const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {
  nativeAudioBufferSourceNode.start = ((start) => {
    let isScheduled = false;
    return (when = 0, offset = 0, duration) => {
      if (isScheduled) {
        throw createInvalidStateError();
      }
      start.call(nativeAudioBufferSourceNode, when, offset, duration);
      isScheduled = true;
    };
  })(nativeAudioBufferSourceNode.start);
};
const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {
  nativeAudioScheduledSourceNode.start = ((start) => {
    return (when = 0, offset = 0, duration) => {
      if (typeof duration === "number" && duration < 0 || offset < 0 || when < 0) {
        throw new RangeError("The parameters can't be negative.");
      }
      start.call(nativeAudioScheduledSourceNode, when, offset, duration);
    };
  })(nativeAudioScheduledSourceNode.start);
};
const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {
  nativeAudioScheduledSourceNode.stop = ((stop) => {
    return (when = 0) => {
      if (when < 0) {
        throw new RangeError("The parameter can't be negative.");
      }
      stop.call(nativeAudioScheduledSourceNode, when);
    };
  })(nativeAudioScheduledSourceNode.stop);
};
const createNativeAudioBufferSourceNodeFactory = (addSilentConnection2, cacheTestResult2, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport2, testAudioBufferSourceNodeStartMethodOffsetClampingSupport2, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport2, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls2) => {
  return (nativeContext, options) => {
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);
    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, "playbackRate");
    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, "buffer");
    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, "loop");
    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, "loopEnd");
    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, "loopStart");
    if (!cacheTestResult2(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport2, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport2(nativeContext))) {
      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);
    }
    if (!cacheTestResult2(testAudioBufferSourceNodeStartMethodOffsetClampingSupport2, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport2(nativeContext))) {
      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);
    }
    if (!cacheTestResult2(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport2, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport2(nativeContext))) {
      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls2(nativeAudioBufferSourceNode, nativeContext);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);
    }
    addSilentConnection2(nativeContext, nativeAudioBufferSourceNode);
    return nativeAudioBufferSourceNode;
  };
};
const createNativeAudioContextConstructor = (window2) => {
  if (window2 === null) {
    return null;
  }
  if (window2.hasOwnProperty("AudioContext")) {
    return window2.AudioContext;
  }
  return window2.hasOwnProperty("webkitAudioContext") ? window2.webkitAudioContext : null;
};
const createNativeAudioDestinationNodeFactory = (createNativeGainNode2, overwriteAccessors2) => {
  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {
    const nativeAudioDestinationNode = nativeContext.destination;
    if (nativeAudioDestinationNode.channelCount !== channelCount) {
      try {
        nativeAudioDestinationNode.channelCount = channelCount;
      } catch {
      }
    }
    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== "explicit") {
      nativeAudioDestinationNode.channelCountMode = "explicit";
    }
    if (nativeAudioDestinationNode.maxChannelCount === 0) {
      Object.defineProperty(nativeAudioDestinationNode, "maxChannelCount", {
        value: channelCount
      });
    }
    const gainNode = createNativeGainNode2(nativeContext, {
      channelCount,
      channelCountMode: nativeAudioDestinationNode.channelCountMode,
      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,
      gain: 1
    });
    overwriteAccessors2(gainNode, "channelCount", (get) => () => get.call(gainNode), (set) => (value2) => {
      set.call(gainNode, value2);
      try {
        nativeAudioDestinationNode.channelCount = value2;
      } catch (err) {
        if (value2 > nativeAudioDestinationNode.maxChannelCount) {
          throw err;
        }
      }
    });
    overwriteAccessors2(gainNode, "channelCountMode", (get) => () => get.call(gainNode), (set) => (value2) => {
      set.call(gainNode, value2);
      nativeAudioDestinationNode.channelCountMode = value2;
    });
    overwriteAccessors2(gainNode, "channelInterpretation", (get) => () => get.call(gainNode), (set) => (value2) => {
      set.call(gainNode, value2);
      nativeAudioDestinationNode.channelInterpretation = value2;
    });
    Object.defineProperty(gainNode, "maxChannelCount", {
      get: () => nativeAudioDestinationNode.maxChannelCount
    });
    gainNode.connect(nativeAudioDestinationNode);
    return gainNode;
  };
};
const createNativeAudioWorkletNodeConstructor = (window2) => {
  if (window2 === null) {
    return null;
  }
  return window2.hasOwnProperty("AudioWorkletNode") ? window2.AudioWorkletNode : null;
};
const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {
  const { port1 } = new MessageChannel();
  try {
    port1.postMessage(audioWorkletNodeOptions);
  } finally {
    port1.close();
  }
};
const createNativeAudioWorkletNodeFactory = (createInvalidStateError2, createNativeAudioWorkletNodeFaker2, createNativeGainNode2, createNotSupportedError2, monitorConnections2) => {
  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor2, name, processorConstructor, options) => {
    if (nativeAudioWorkletNodeConstructor2 !== null) {
      try {
        const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor2(nativeContext, name, options);
        const patchedEventListeners = /* @__PURE__ */ new Map();
        let onprocessorerror = null;
        Object.defineProperties(nativeAudioWorkletNode, {
          channelCount: {
            get: () => options.channelCount,
            set: () => {
              throw createInvalidStateError2();
            }
          },
          channelCountMode: {
            get: () => "explicit",
            set: () => {
              throw createInvalidStateError2();
            }
          },
          onprocessorerror: {
            get: () => onprocessorerror,
            set: (value2) => {
              if (typeof onprocessorerror === "function") {
                nativeAudioWorkletNode.removeEventListener("processorerror", onprocessorerror);
              }
              onprocessorerror = typeof value2 === "function" ? value2 : null;
              if (typeof onprocessorerror === "function") {
                nativeAudioWorkletNode.addEventListener("processorerror", onprocessorerror);
              }
            }
          }
        });
        nativeAudioWorkletNode.addEventListener = ((addEventListener2) => {
          return (...args) => {
            if (args[0] === "processorerror") {
              const unpatchedEventListener = typeof args[1] === "function" ? args[1] : typeof args[1] === "object" && args[1] !== null && typeof args[1].handleEvent === "function" ? args[1].handleEvent : null;
              if (unpatchedEventListener !== null) {
                const patchedEventListener = patchedEventListeners.get(args[1]);
                if (patchedEventListener !== void 0) {
                  args[1] = patchedEventListener;
                } else {
                  args[1] = (event) => {
                    if (event.type === "error") {
                      Object.defineProperties(event, {
                        type: { value: "processorerror" }
                      });
                      unpatchedEventListener(event);
                    } else {
                      unpatchedEventListener(new ErrorEvent(args[0], { ...event }));
                    }
                  };
                  patchedEventListeners.set(unpatchedEventListener, args[1]);
                }
              }
            }
            addEventListener2.call(nativeAudioWorkletNode, "error", args[1], args[2]);
            return addEventListener2.call(nativeAudioWorkletNode, ...args);
          };
        })(nativeAudioWorkletNode.addEventListener);
        nativeAudioWorkletNode.removeEventListener = ((removeEventListener2) => {
          return (...args) => {
            if (args[0] === "processorerror") {
              const patchedEventListener = patchedEventListeners.get(args[1]);
              if (patchedEventListener !== void 0) {
                patchedEventListeners.delete(args[1]);
                args[1] = patchedEventListener;
              }
            }
            removeEventListener2.call(nativeAudioWorkletNode, "error", args[1], args[2]);
            return removeEventListener2.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
          };
        })(nativeAudioWorkletNode.removeEventListener);
        if (options.numberOfOutputs !== 0) {
          const nativeGainNode = createNativeGainNode2(nativeContext, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "discrete",
            gain: 0
          });
          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);
          const whenConnected = () => nativeGainNode.disconnect();
          const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);
          return monitorConnections2(nativeAudioWorkletNode, whenConnected, whenDisconnected);
        }
        return nativeAudioWorkletNode;
      } catch (err) {
        if (err.code === 11) {
          throw createNotSupportedError2();
        }
        throw err;
      }
    }
    if (processorConstructor === void 0) {
      throw createNotSupportedError2();
    }
    testClonabilityOfAudioWorkletNodeOptions(options);
    return createNativeAudioWorkletNodeFaker2(nativeContext, baseLatency, processorConstructor, options);
  };
};
const computeBufferSize = (baseLatency, sampleRate) => {
  if (baseLatency === null) {
    return 512;
  }
  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));
};
const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {
  return new Promise((resolve, reject) => {
    const { port1, port2 } = new MessageChannel();
    port1.onmessage = ({ data }) => {
      port1.close();
      port2.close();
      resolve(data);
    };
    port1.onmessageerror = ({ data }) => {
      port1.close();
      port2.close();
      reject(data);
    };
    port2.postMessage(audioWorkletNodeOptions);
  });
};
const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {
  const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);
  return new processorConstructor(clonedAudioWorkletNodeOptions);
};
const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {
  let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);
  if (nodeToProcessorMap === void 0) {
    nodeToProcessorMap = /* @__PURE__ */ new WeakMap();
    NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);
  }
  const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);
  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
  return audioWorkletProcessorPromise;
};
const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs2, createIndexSizeError2, createInvalidStateError2, createNativeChannelMergerNode2, createNativeChannelSplitterNode2, createNativeConstantSourceNode2, createNativeGainNode2, createNativeScriptProcessorNode2, createNotSupportedError2, disconnectMultipleOutputs2, exposeCurrentFrameAndCurrentTime2, getActiveAudioWorkletNodeInputs2, monitorConnections2) => {
  return (nativeContext, baseLatency, processorConstructor, options) => {
    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {
      throw createNotSupportedError2();
    }
    const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);
    if (outputChannelCount.some((channelCount) => channelCount < 1)) {
      throw createNotSupportedError2();
    }
    if (outputChannelCount.length !== options.numberOfOutputs) {
      throw createIndexSizeError2();
    }
    if (options.channelCountMode !== "explicit") {
      throw createNotSupportedError2();
    }
    const numberOfInputChannels = options.channelCount * options.numberOfInputs;
    const numberOfOutputChannels = outputChannelCount.reduce((sum, value2) => sum + value2, 0);
    const numberOfParameters = processorConstructor.parameterDescriptors === void 0 ? 0 : processorConstructor.parameterDescriptors.length;
    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {
      throw createNotSupportedError2();
    }
    const messageChannel = new MessageChannel();
    const gainNodes = [];
    const inputChannelSplitterNodes = [];
    for (let i2 = 0; i2 < options.numberOfInputs; i2 += 1) {
      gainNodes.push(createNativeGainNode2(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: options.channelCountMode,
        channelInterpretation: options.channelInterpretation,
        gain: 1
      }));
      inputChannelSplitterNodes.push(createNativeChannelSplitterNode2(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        numberOfOutputs: options.channelCount
      }));
    }
    const constantSourceNodes = [];
    if (processorConstructor.parameterDescriptors !== void 0) {
      for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {
        const constantSourceNode = createNativeConstantSourceNode2(nativeContext, {
          channelCount: 1,
          channelCountMode: "explicit",
          channelInterpretation: "discrete",
          offset: options.parameterData[name] !== void 0 ? options.parameterData[name] : defaultValue === void 0 ? 0 : defaultValue
        });
        Object.defineProperties(constantSourceNode.offset, {
          defaultValue: {
            get: () => defaultValue === void 0 ? 0 : defaultValue
          },
          maxValue: {
            get: () => maxValue === void 0 ? MOST_POSITIVE_SINGLE_FLOAT : maxValue
          },
          minValue: {
            get: () => minValue === void 0 ? MOST_NEGATIVE_SINGLE_FLOAT : minValue
          }
        });
        constantSourceNodes.push(constantSourceNode);
      }
    }
    const inputChannelMergerNode = createNativeChannelMergerNode2(nativeContext, {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "speakers",
      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
    });
    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);
    const scriptProcessorNode = createNativeScriptProcessorNode2(
      nativeContext,
      bufferSize,
      numberOfInputChannels + numberOfParameters,
      Math.max(1, numberOfOutputChannels)
    );
    const outputChannelSplitterNode = createNativeChannelSplitterNode2(nativeContext, {
      channelCount: Math.max(1, numberOfOutputChannels),
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      numberOfOutputs: Math.max(1, numberOfOutputChannels)
    });
    const outputChannelMergerNodes = [];
    for (let i2 = 0; i2 < options.numberOfOutputs; i2 += 1) {
      outputChannelMergerNodes.push(createNativeChannelMergerNode2(nativeContext, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "speakers",
        numberOfInputs: outputChannelCount[i2]
      }));
    }
    for (let i2 = 0; i2 < options.numberOfInputs; i2 += 1) {
      gainNodes[i2].connect(inputChannelSplitterNodes[i2]);
      for (let j = 0; j < options.channelCount; j += 1) {
        inputChannelSplitterNodes[i2].connect(inputChannelMergerNode, j, i2 * options.channelCount + j);
      }
    }
    const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === void 0 ? [] : processorConstructor.parameterDescriptors.map(({ name }, index) => {
      const constantSourceNode = constantSourceNodes[index];
      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
      constantSourceNode.start(0);
      return [name, constantSourceNode.offset];
    }));
    inputChannelMergerNode.connect(scriptProcessorNode);
    let channelInterpretation = options.channelInterpretation;
    let onprocessorerror = null;
    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;
    const nativeAudioWorkletNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },
      get channelCount() {
        return options.channelCount;
      },
      set channelCount(_) {
        throw createInvalidStateError2();
      },
      get channelCountMode() {
        return options.channelCountMode;
      },
      set channelCountMode(_) {
        throw createInvalidStateError2();
      },
      get channelInterpretation() {
        return channelInterpretation;
      },
      set channelInterpretation(value2) {
        for (const gainNode of gainNodes) {
          gainNode.channelInterpretation = value2;
        }
        channelInterpretation = value2;
      },
      get context() {
        return scriptProcessorNode.context;
      },
      get inputs() {
        return gainNodes;
      },
      get numberOfInputs() {
        return options.numberOfInputs;
      },
      get numberOfOutputs() {
        return options.numberOfOutputs;
      },
      get onprocessorerror() {
        return onprocessorerror;
      },
      set onprocessorerror(value2) {
        if (typeof onprocessorerror === "function") {
          nativeAudioWorkletNodeFaker.removeEventListener("processorerror", onprocessorerror);
        }
        onprocessorerror = typeof value2 === "function" ? value2 : null;
        if (typeof onprocessorerror === "function") {
          nativeAudioWorkletNodeFaker.addEventListener("processorerror", onprocessorerror);
        }
      },
      get parameters() {
        return parameterMap;
      },
      get port() {
        return messageChannel.port2;
      },
      addEventListener(...args) {
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },
      connect: connectMultipleOutputs2.bind(null, outputAudioNodes),
      disconnect: disconnectMultipleOutputs2.bind(null, outputAudioNodes),
      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },
      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }
    };
    const patchedEventListeners = /* @__PURE__ */ new Map();
    messageChannel.port1.addEventListener = ((addEventListener2) => {
      return (...args) => {
        if (args[0] === "message") {
          const unpatchedEventListener = typeof args[1] === "function" ? args[1] : typeof args[1] === "object" && args[1] !== null && typeof args[1].handleEvent === "function" ? args[1].handleEvent : null;
          if (unpatchedEventListener !== null) {
            const patchedEventListener = patchedEventListeners.get(args[1]);
            if (patchedEventListener !== void 0) {
              args[1] = patchedEventListener;
            } else {
              args[1] = (event) => {
                exposeCurrentFrameAndCurrentTime2(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));
              };
              patchedEventListeners.set(unpatchedEventListener, args[1]);
            }
          }
        }
        return addEventListener2.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.addEventListener);
    messageChannel.port1.removeEventListener = ((removeEventListener2) => {
      return (...args) => {
        if (args[0] === "message") {
          const patchedEventListener = patchedEventListeners.get(args[1]);
          if (patchedEventListener !== void 0) {
            patchedEventListeners.delete(args[1]);
            args[1] = patchedEventListener;
          }
        }
        return removeEventListener2.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.removeEventListener);
    let onmessage = null;
    Object.defineProperty(messageChannel.port1, "onmessage", {
      get: () => onmessage,
      set: (value2) => {
        if (typeof onmessage === "function") {
          messageChannel.port1.removeEventListener("message", onmessage);
        }
        onmessage = typeof value2 === "function" ? value2 : null;
        if (typeof onmessage === "function") {
          messageChannel.port1.addEventListener("message", onmessage);
          messageChannel.port1.start();
        }
      }
    });
    processorConstructor.prototype.port = messageChannel.port1;
    let audioWorkletProcessor = null;
    const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);
    audioWorkletProcessorPromise.then((dWrkltPrcssr) => audioWorkletProcessor = dWrkltPrcssr);
    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);
    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);
    const parameters = processorConstructor.parameterDescriptors === void 0 ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});
    let isActive = true;
    const disconnectOutputsGraph = () => {
      if (options.numberOfOutputs > 0) {
        scriptProcessorNode.disconnect(outputChannelSplitterNode);
      }
      for (let i2 = 0, outputChannelSplitterNodeOutput = 0; i2 < options.numberOfOutputs; i2 += 1) {
        const outputChannelMergerNode = outputChannelMergerNodes[i2];
        for (let j = 0; j < outputChannelCount[i2]; j += 1) {
          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
        }
        outputChannelSplitterNodeOutput += outputChannelCount[i2];
      }
    };
    const activeInputIndexes = /* @__PURE__ */ new Map();
    scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {
      if (audioWorkletProcessor !== null) {
        const activeInputs = getActiveAudioWorkletNodeInputs2(nativeAudioWorkletNodeFaker);
        for (let i2 = 0; i2 < bufferSize; i2 += 128) {
          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < options.channelCount; k += 1) {
              copyFromChannel(inputBuffer, inputs[j], k, k, i2);
            }
          }
          if (processorConstructor.parameterDescriptors !== void 0) {
            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {
              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i2);
            });
          }
          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < outputChannelCount[j]; k += 1) {
              if (outputs[j][k].byteLength === 0) {
                outputs[j][k] = new Float32Array(128);
              }
            }
          }
          try {
            const potentiallyEmptyInputs = inputs.map((input, index) => {
              const activeInput = activeInputs[index];
              if (activeInput.size > 0) {
                activeInputIndexes.set(index, bufferSize / 128);
                return input;
              }
              const count = activeInputIndexes.get(index);
              if (count === void 0) {
                return [];
              }
              if (input.every((channelData) => channelData.every((sample) => sample === 0))) {
                if (count === 1) {
                  activeInputIndexes.delete(index);
                } else {
                  activeInputIndexes.set(index, count - 1);
                }
              }
              return input;
            });
            const activeSourceFlag = exposeCurrentFrameAndCurrentTime2(nativeContext.currentTime + i2 / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
            isActive = activeSourceFlag;
            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
              for (let k = 0; k < outputChannelCount[j]; k += 1) {
                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i2);
              }
              outputChannelSplitterNodeOutput += outputChannelCount[j];
            }
          } catch (error) {
            isActive = false;
            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent("processorerror", {
              colno: error.colno,
              filename: error.filename,
              lineno: error.lineno,
              message: error.message
            }));
          }
          if (!isActive) {
            for (let j = 0; j < options.numberOfInputs; j += 1) {
              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);
              for (let k = 0; k < options.channelCount; k += 1) {
                inputChannelSplitterNodes[i2].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);
              }
            }
            if (processorConstructor.parameterDescriptors !== void 0) {
              const length2 = processorConstructor.parameterDescriptors.length;
              for (let j = 0; j < length2; j += 1) {
                const constantSourceNode = constantSourceNodes[j];
                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);
                constantSourceNode.stop();
              }
            }
            inputChannelMergerNode.disconnect(scriptProcessorNode);
            scriptProcessorNode.onaudioprocess = null;
            if (isConnected) {
              disconnectOutputsGraph();
            } else {
              disconnectFakeGraph();
            }
            break;
          }
        }
      }
    };
    let isConnected = false;
    const nativeGainNode = createNativeGainNode2(nativeContext, {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      gain: 0
    });
    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);
    const disconnectFakeGraph = () => {
      scriptProcessorNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };
    const whenConnected = () => {
      if (isActive) {
        disconnectFakeGraph();
        if (options.numberOfOutputs > 0) {
          scriptProcessorNode.connect(outputChannelSplitterNode);
        }
        for (let i2 = 0, outputChannelSplitterNodeOutput = 0; i2 < options.numberOfOutputs; i2 += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i2];
          for (let j = 0; j < outputChannelCount[i2]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }
          outputChannelSplitterNodeOutput += outputChannelCount[i2];
        }
      }
      isConnected = true;
    };
    const whenDisconnected = () => {
      if (isActive) {
        connectFakeGraph();
        disconnectOutputsGraph();
      }
      isConnected = false;
    };
    connectFakeGraph();
    return monitorConnections2(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);
  };
};
const createNativeBiquadFilterNode = (nativeContext, options) => {
  const nativeBiquadFilterNode = nativeContext.createBiquadFilter();
  assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);
  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, "Q");
  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, "detune");
  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, "frequency");
  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, "gain");
  assignNativeAudioNodeOption(nativeBiquadFilterNode, options, "type");
  return nativeBiquadFilterNode;
};
const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor2, wrapChannelMergerNode2) => {
  return (nativeContext, options) => {
    const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);
    if (nativeAudioContextConstructor2 !== null && nativeAudioContextConstructor2.name === "webkitAudioContext") {
      wrapChannelMergerNode2(nativeContext, nativeChannelMergerNode);
    }
    assignNativeAudioNodeOptions(nativeChannelMergerNode, options);
    return nativeChannelMergerNode;
  };
};
const wrapChannelSplitterNode = (channelSplitterNode) => {
  const channelCount = channelSplitterNode.numberOfOutputs;
  Object.defineProperty(channelSplitterNode, "channelCount", {
    get: () => channelCount,
    set: (value2) => {
      if (value2 !== channelCount) {
        throw createInvalidStateError();
      }
    }
  });
  Object.defineProperty(channelSplitterNode, "channelCountMode", {
    get: () => "explicit",
    set: (value2) => {
      if (value2 !== "explicit") {
        throw createInvalidStateError();
      }
    }
  });
  Object.defineProperty(channelSplitterNode, "channelInterpretation", {
    get: () => "discrete",
    set: (value2) => {
      if (value2 !== "discrete") {
        throw createInvalidStateError();
      }
    }
  });
};
const createNativeChannelSplitterNode = (nativeContext, options) => {
  const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);
  assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);
  wrapChannelSplitterNode(nativeChannelSplitterNode);
  return nativeChannelSplitterNode;
};
const createNativeConstantSourceNodeFactory = (addSilentConnection2, cacheTestResult2, createNativeConstantSourceNodeFaker2, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2) => {
  return (nativeContext, options) => {
    if (nativeContext.createConstantSource === void 0) {
      return createNativeConstantSourceNodeFaker2(nativeContext, options);
    }
    const nativeConstantSourceNode = nativeContext.createConstantSource();
    assignNativeAudioNodeOptions(nativeConstantSourceNode, options);
    assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, "offset");
    if (!cacheTestResult2(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);
    }
    addSilentConnection2(nativeContext, nativeConstantSourceNode);
    return nativeConstantSourceNode;
  };
};
const interceptConnections = (original, interceptor) => {
  original.connect = interceptor.connect.bind(interceptor);
  original.disconnect = interceptor.disconnect.bind(interceptor);
  return original;
};
const createNativeConstantSourceNodeFakerFactory = (addSilentConnection2, createNativeAudioBufferSourceNode2, createNativeGainNode2, monitorConnections2) => {
  return (nativeContext, { offset, ...audioNodeOptions }) => {
    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);
    const audioBufferSourceNode = createNativeAudioBufferSourceNode2(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: "max",
      channelInterpretation: "speakers",
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const gainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: offset });
    const channelData = audioBuffer.getChannelData(0);
    channelData[0] = 1;
    channelData[1] = 1;
    audioBufferSourceNode.buffer = audioBuffer;
    audioBufferSourceNode.loop = true;
    const nativeConstantSourceNodeFaker = {
      get bufferSize() {
        return void 0;
      },
      get channelCount() {
        return gainNode.channelCount;
      },
      set channelCount(value2) {
        gainNode.channelCount = value2;
      },
      get channelCountMode() {
        return gainNode.channelCountMode;
      },
      set channelCountMode(value2) {
        gainNode.channelCountMode = value2;
      },
      get channelInterpretation() {
        return gainNode.channelInterpretation;
      },
      set channelInterpretation(value2) {
        gainNode.channelInterpretation = value2;
      },
      get context() {
        return gainNode.context;
      },
      get inputs() {
        return [];
      },
      get numberOfInputs() {
        return audioBufferSourceNode.numberOfInputs;
      },
      get numberOfOutputs() {
        return gainNode.numberOfOutputs;
      },
      get offset() {
        return gainNode.gain;
      },
      get onended() {
        return audioBufferSourceNode.onended;
      },
      set onended(value2) {
        audioBufferSourceNode.onended = value2;
      },
      addEventListener(...args) {
        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);
      },
      dispatchEvent(...args) {
        return audioBufferSourceNode.dispatchEvent(args[0]);
      },
      removeEventListener(...args) {
        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);
      },
      start(when = 0) {
        audioBufferSourceNode.start.call(audioBufferSourceNode, when);
      },
      stop(when = 0) {
        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);
      }
    };
    const whenConnected = () => audioBufferSourceNode.connect(gainNode);
    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);
    addSilentConnection2(nativeContext, audioBufferSourceNode);
    return monitorConnections2(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);
  };
};
const createNativeConvolverNodeFactory = (createNotSupportedError2, overwriteAccessors2) => {
  return (nativeContext, options) => {
    const nativeConvolverNode = nativeContext.createConvolver();
    assignNativeAudioNodeOptions(nativeConvolverNode, options);
    if (options.disableNormalization === nativeConvolverNode.normalize) {
      nativeConvolverNode.normalize = !options.disableNormalization;
    }
    assignNativeAudioNodeOption(nativeConvolverNode, options, "buffer");
    if (options.channelCount > 2) {
      throw createNotSupportedError2();
    }
    overwriteAccessors2(nativeConvolverNode, "channelCount", (get) => () => get.call(nativeConvolverNode), (set) => (value2) => {
      if (value2 > 2) {
        throw createNotSupportedError2();
      }
      return set.call(nativeConvolverNode, value2);
    });
    if (options.channelCountMode === "max") {
      throw createNotSupportedError2();
    }
    overwriteAccessors2(nativeConvolverNode, "channelCountMode", (get) => () => get.call(nativeConvolverNode), (set) => (value2) => {
      if (value2 === "max") {
        throw createNotSupportedError2();
      }
      return set.call(nativeConvolverNode, value2);
    });
    return nativeConvolverNode;
  };
};
const createNativeDelayNode = (nativeContext, options) => {
  const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);
  assignNativeAudioNodeOptions(nativeDelayNode, options);
  assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, "delayTime");
  return nativeDelayNode;
};
const createNativeDynamicsCompressorNodeFactory = (createNotSupportedError2) => {
  return (nativeContext, options) => {
    const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();
    assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);
    if (options.channelCount > 2) {
      throw createNotSupportedError2();
    }
    if (options.channelCountMode === "max") {
      throw createNotSupportedError2();
    }
    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, "attack");
    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, "knee");
    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, "ratio");
    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, "release");
    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, "threshold");
    return nativeDynamicsCompressorNode;
  };
};
const createNativeGainNode = (nativeContext, options) => {
  const nativeGainNode = nativeContext.createGain();
  assignNativeAudioNodeOptions(nativeGainNode, options);
  assignNativeAudioNodeAudioParamValue(nativeGainNode, options, "gain");
  return nativeGainNode;
};
const createNativeIIRFilterNodeFactory = (createNativeIIRFilterNodeFaker2) => {
  return (nativeContext, baseLatency, options) => {
    if (nativeContext.createIIRFilter === void 0) {
      return createNativeIIRFilterNodeFaker2(nativeContext, baseLatency, options);
    }
    const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);
    assignNativeAudioNodeOptions(nativeIIRFilterNode, options);
    return nativeIIRFilterNode;
  };
};
function divide(a, b) {
  const denominator = b[0] * b[0] + b[1] * b[1];
  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}
function multiply(a, b) {
  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
}
function evaluatePolynomial(coefficient, z) {
  let result = [0, 0];
  for (let i2 = coefficient.length - 1; i2 >= 0; i2 -= 1) {
    result = multiply(result, z);
    result[0] += coefficient[i2];
  }
  return result;
}
const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError2, createInvalidStateError2, createNativeScriptProcessorNode2, createNotSupportedError2) => {
  return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {
    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);
    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
    const feedbackLength = convertedFeedback.length;
    const feedforwardLength = convertedFeedforward.length;
    const minLength = Math.min(feedbackLength, feedforwardLength);
    if (feedbackLength === 0 || feedbackLength > 20) {
      throw createNotSupportedError2();
    }
    if (convertedFeedback[0] === 0) {
      throw createInvalidStateError2();
    }
    if (feedforwardLength === 0 || feedforwardLength > 20) {
      throw createNotSupportedError2();
    }
    if (convertedFeedforward[0] === 0) {
      throw createInvalidStateError2();
    }
    if (convertedFeedback[0] !== 1) {
      for (let i2 = 0; i2 < feedforwardLength; i2 += 1) {
        convertedFeedforward[i2] /= convertedFeedback[0];
      }
      for (let i2 = 1; i2 < feedbackLength; i2 += 1) {
        convertedFeedback[i2] /= convertedFeedback[0];
      }
    }
    const scriptProcessorNode = createNativeScriptProcessorNode2(nativeContext, bufferSize, channelCount, channelCount);
    scriptProcessorNode.channelCount = channelCount;
    scriptProcessorNode.channelCountMode = channelCountMode;
    scriptProcessorNode.channelInterpretation = channelInterpretation;
    const bufferLength = 32;
    const bufferIndexes = [];
    const xBuffers = [];
    const yBuffers = [];
    for (let i2 = 0; i2 < channelCount; i2 += 1) {
      bufferIndexes.push(0);
      const xBuffer = new Float32Array(bufferLength);
      const yBuffer = new Float32Array(bufferLength);
      xBuffer.fill(0);
      yBuffer.fill(0);
      xBuffers.push(xBuffer);
      yBuffers.push(yBuffer);
    }
    scriptProcessorNode.onaudioprocess = (event) => {
      const inputBuffer = event.inputBuffer;
      const outputBuffer = event.outputBuffer;
      const numberOfChannels = inputBuffer.numberOfChannels;
      for (let i2 = 0; i2 < numberOfChannels; i2 += 1) {
        const input = inputBuffer.getChannelData(i2);
        const output = outputBuffer.getChannelData(i2);
        bufferIndexes[i2] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i2], yBuffers[i2], bufferIndexes[i2], bufferLength, input, output);
      }
    };
    const nyquist = nativeContext.sampleRate / 2;
    const nativeIIRFilterNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },
      get channelCount() {
        return scriptProcessorNode.channelCount;
      },
      set channelCount(value2) {
        scriptProcessorNode.channelCount = value2;
      },
      get channelCountMode() {
        return scriptProcessorNode.channelCountMode;
      },
      set channelCountMode(value2) {
        scriptProcessorNode.channelCountMode = value2;
      },
      get channelInterpretation() {
        return scriptProcessorNode.channelInterpretation;
      },
      set channelInterpretation(value2) {
        scriptProcessorNode.channelInterpretation = value2;
      },
      get context() {
        return scriptProcessorNode.context;
      },
      get inputs() {
        return [scriptProcessorNode];
      },
      get numberOfInputs() {
        return scriptProcessorNode.numberOfInputs;
      },
      get numberOfOutputs() {
        return scriptProcessorNode.numberOfOutputs;
      },
      addEventListener(...args) {
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },
      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },
      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
          throw createInvalidAccessError2();
        }
        const length2 = frequencyHz.length;
        for (let i2 = 0; i2 < length2; i2 += 1) {
          const omega = -Math.PI * (frequencyHz[i2] / nyquist);
          const z = [Math.cos(omega), Math.sin(omega)];
          const numerator = evaluatePolynomial(convertedFeedforward, z);
          const denominator = evaluatePolynomial(convertedFeedback, z);
          const response = divide(numerator, denominator);
          magResponse[i2] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);
          phaseResponse[i2] = Math.atan2(response[1], response[0]);
        }
      },
      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }
    };
    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);
  };
};
const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options) => {
  return nativeAudioContext.createMediaElementSource(options.mediaElement);
};
const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options) => {
  const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();
  assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);
  if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {
    Object.defineProperty(nativeMediaStreamAudioDestinationNode, "numberOfOutputs", { get: () => 0 });
  }
  return nativeMediaStreamAudioDestinationNode;
};
const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, { mediaStream }) => {
  const audioStreamTracks = mediaStream.getAudioTracks();
  audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);
  const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);
  const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));
  Object.defineProperty(nativeMediaStreamAudioSourceNode, "mediaStream", { value: mediaStream });
  return nativeMediaStreamAudioSourceNode;
};
const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError2, isNativeOfflineAudioContext2) => {
  return (nativeAudioContext, { mediaStreamTrack }) => {
    if (typeof nativeAudioContext.createMediaStreamTrackSource === "function") {
      return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);
    }
    const mediaStream = new MediaStream([mediaStreamTrack]);
    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);
    if (mediaStreamTrack.kind !== "audio") {
      throw createInvalidStateError2();
    }
    if (isNativeOfflineAudioContext2(nativeAudioContext)) {
      throw new TypeError();
    }
    return nativeMediaStreamAudioSourceNode;
  };
};
const createNativeOfflineAudioContextConstructor = (window2) => {
  if (window2 === null) {
    return null;
  }
  if (window2.hasOwnProperty("OfflineAudioContext")) {
    return window2.OfflineAudioContext;
  }
  return window2.hasOwnProperty("webkitOfflineAudioContext") ? window2.webkitOfflineAudioContext : null;
};
const createNativeOscillatorNodeFactory = (addSilentConnection2, cacheTestResult2, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls2) => {
  return (nativeContext, options) => {
    const nativeOscillatorNode = nativeContext.createOscillator();
    assignNativeAudioNodeOptions(nativeOscillatorNode, options);
    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, "detune");
    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, "frequency");
    if (options.periodicWave !== void 0) {
      nativeOscillatorNode.setPeriodicWave(options.periodicWave);
    } else {
      assignNativeAudioNodeOption(nativeOscillatorNode, options, "type");
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls2(nativeOscillatorNode, nativeContext);
    }
    if (!cacheTestResult2(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport2(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);
    }
    addSilentConnection2(nativeContext, nativeOscillatorNode);
    return nativeOscillatorNode;
  };
};
const createNativePannerNodeFactory = (createNativePannerNodeFaker2) => {
  return (nativeContext, options) => {
    const nativePannerNode = nativeContext.createPanner();
    if (nativePannerNode.orientationX === void 0) {
      return createNativePannerNodeFaker2(nativeContext, options);
    }
    assignNativeAudioNodeOptions(nativePannerNode, options);
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "orientationX");
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "orientationY");
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "orientationZ");
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "positionX");
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "positionY");
    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, "positionZ");
    assignNativeAudioNodeOption(nativePannerNode, options, "coneInnerAngle");
    assignNativeAudioNodeOption(nativePannerNode, options, "coneOuterAngle");
    assignNativeAudioNodeOption(nativePannerNode, options, "coneOuterGain");
    assignNativeAudioNodeOption(nativePannerNode, options, "distanceModel");
    assignNativeAudioNodeOption(nativePannerNode, options, "maxDistance");
    assignNativeAudioNodeOption(nativePannerNode, options, "panningModel");
    assignNativeAudioNodeOption(nativePannerNode, options, "refDistance");
    assignNativeAudioNodeOption(nativePannerNode, options, "rolloffFactor");
    return nativePannerNode;
  };
};
const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode2, createInvalidStateError2, createNativeChannelMergerNode2, createNativeGainNode2, createNativeScriptProcessorNode2, createNativeWaveShaperNode2, createNotSupportedError2, disconnectNativeAudioNodeFromNativeAudioNode2, getFirstSample2, monitorConnections2) => {
  return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {
    const pannerNode = nativeContext.createPanner();
    if (audioNodeOptions.channelCount > 2) {
      throw createNotSupportedError2();
    }
    if (audioNodeOptions.channelCountMode === "max") {
      throw createNotSupportedError2();
    }
    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);
    const SINGLE_CHANNEL_OPTIONS = {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "discrete"
    };
    const channelMergerNode = createNativeChannelMergerNode2(nativeContext, {
      ...SINGLE_CHANNEL_OPTIONS,
      channelInterpretation: "speakers",
      numberOfInputs: 6
    });
    const inputGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: 1 });
    const orientationXGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });
    const orientationYGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const orientationZGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const positionXGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const positionYGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const positionZGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const scriptProcessorNode = createNativeScriptProcessorNode2(nativeContext, 256, 6, 1);
    const waveShaperNode = createNativeWaveShaperNode2(nativeContext, {
      ...SINGLE_CHANNEL_OPTIONS,
      curve: new Float32Array([1, 1]),
      oversample: "none"
    });
    let lastOrientation = [orientationX, orientationY, orientationZ];
    let lastPosition = [positionX, positionY, positionZ];
    const buffer = new Float32Array(1);
    scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {
      const orientation = [
        getFirstSample2(inputBuffer, buffer, 0),
        getFirstSample2(inputBuffer, buffer, 1),
        getFirstSample2(inputBuffer, buffer, 2)
      ];
      if (orientation.some((value2, index) => value2 !== lastOrientation[index])) {
        pannerNode.setOrientation(...orientation);
        lastOrientation = orientation;
      }
      const positon = [
        getFirstSample2(inputBuffer, buffer, 3),
        getFirstSample2(inputBuffer, buffer, 4),
        getFirstSample2(inputBuffer, buffer, 5)
      ];
      if (positon.some((value2, index) => value2 !== lastPosition[index])) {
        pannerNode.setPosition(...positon);
        lastPosition = positon;
      }
    };
    Object.defineProperty(orientationYGainNode.gain, "defaultValue", { get: () => 0 });
    Object.defineProperty(orientationZGainNode.gain, "defaultValue", { get: () => 0 });
    Object.defineProperty(positionXGainNode.gain, "defaultValue", { get: () => 0 });
    Object.defineProperty(positionYGainNode.gain, "defaultValue", { get: () => 0 });
    Object.defineProperty(positionZGainNode.gain, "defaultValue", { get: () => 0 });
    const nativePannerNodeFaker = {
      get bufferSize() {
        return void 0;
      },
      get channelCount() {
        return pannerNode.channelCount;
      },
      set channelCount(value2) {
        if (value2 > 2) {
          throw createNotSupportedError2();
        }
        inputGainNode.channelCount = value2;
        pannerNode.channelCount = value2;
      },
      get channelCountMode() {
        return pannerNode.channelCountMode;
      },
      set channelCountMode(value2) {
        if (value2 === "max") {
          throw createNotSupportedError2();
        }
        inputGainNode.channelCountMode = value2;
        pannerNode.channelCountMode = value2;
      },
      get channelInterpretation() {
        return pannerNode.channelInterpretation;
      },
      set channelInterpretation(value2) {
        inputGainNode.channelInterpretation = value2;
        pannerNode.channelInterpretation = value2;
      },
      get coneInnerAngle() {
        return pannerNode.coneInnerAngle;
      },
      set coneInnerAngle(value2) {
        pannerNode.coneInnerAngle = value2;
      },
      get coneOuterAngle() {
        return pannerNode.coneOuterAngle;
      },
      set coneOuterAngle(value2) {
        pannerNode.coneOuterAngle = value2;
      },
      get coneOuterGain() {
        return pannerNode.coneOuterGain;
      },
      set coneOuterGain(value2) {
        if (value2 < 0 || value2 > 1) {
          throw createInvalidStateError2();
        }
        pannerNode.coneOuterGain = value2;
      },
      get context() {
        return pannerNode.context;
      },
      get distanceModel() {
        return pannerNode.distanceModel;
      },
      set distanceModel(value2) {
        pannerNode.distanceModel = value2;
      },
      get inputs() {
        return [inputGainNode];
      },
      get maxDistance() {
        return pannerNode.maxDistance;
      },
      set maxDistance(value2) {
        if (value2 < 0) {
          throw new RangeError();
        }
        pannerNode.maxDistance = value2;
      },
      get numberOfInputs() {
        return pannerNode.numberOfInputs;
      },
      get numberOfOutputs() {
        return pannerNode.numberOfOutputs;
      },
      get orientationX() {
        return orientationXGainNode.gain;
      },
      get orientationY() {
        return orientationYGainNode.gain;
      },
      get orientationZ() {
        return orientationZGainNode.gain;
      },
      get panningModel() {
        return pannerNode.panningModel;
      },
      set panningModel(value2) {
        pannerNode.panningModel = value2;
      },
      get positionX() {
        return positionXGainNode.gain;
      },
      get positionY() {
        return positionYGainNode.gain;
      },
      get positionZ() {
        return positionZGainNode.gain;
      },
      get refDistance() {
        return pannerNode.refDistance;
      },
      set refDistance(value2) {
        if (value2 < 0) {
          throw new RangeError();
        }
        pannerNode.refDistance = value2;
      },
      get rolloffFactor() {
        return pannerNode.rolloffFactor;
      },
      set rolloffFactor(value2) {
        if (value2 < 0) {
          throw new RangeError();
        }
        pannerNode.rolloffFactor = value2;
      },
      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },
      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },
      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }
    };
    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {
      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;
    }
    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {
      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;
    }
    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {
      nativePannerNodeFaker.coneOuterGain = coneOuterGain;
    }
    if (distanceModel !== nativePannerNodeFaker.distanceModel) {
      nativePannerNodeFaker.distanceModel = distanceModel;
    }
    if (maxDistance !== nativePannerNodeFaker.maxDistance) {
      nativePannerNodeFaker.maxDistance = maxDistance;
    }
    if (orientationX !== nativePannerNodeFaker.orientationX.value) {
      nativePannerNodeFaker.orientationX.value = orientationX;
    }
    if (orientationY !== nativePannerNodeFaker.orientationY.value) {
      nativePannerNodeFaker.orientationY.value = orientationY;
    }
    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {
      nativePannerNodeFaker.orientationZ.value = orientationZ;
    }
    if (panningModel !== nativePannerNodeFaker.panningModel) {
      nativePannerNodeFaker.panningModel = panningModel;
    }
    if (positionX !== nativePannerNodeFaker.positionX.value) {
      nativePannerNodeFaker.positionX.value = positionX;
    }
    if (positionY !== nativePannerNodeFaker.positionY.value) {
      nativePannerNodeFaker.positionY.value = positionY;
    }
    if (positionZ !== nativePannerNodeFaker.positionZ.value) {
      nativePannerNodeFaker.positionZ.value = positionZ;
    }
    if (refDistance !== nativePannerNodeFaker.refDistance) {
      nativePannerNodeFaker.refDistance = refDistance;
    }
    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {
      nativePannerNodeFaker.rolloffFactor = rolloffFactor;
    }
    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {
      pannerNode.setOrientation(...lastOrientation);
    }
    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {
      pannerNode.setPosition(...lastPosition);
    }
    const whenConnected = () => {
      inputGainNode.connect(pannerNode);
      connectNativeAudioNodeToNativeAudioNode2(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);
      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);
      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);
      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);
      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);
      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);
      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);
    };
    const whenDisconnected = () => {
      inputGainNode.disconnect(pannerNode);
      disconnectNativeAudioNodeFromNativeAudioNode2(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.disconnect(orientationXGainNode);
      orientationXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationYGainNode);
      orientationYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationZGainNode);
      orientationZGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionXGainNode);
      positionXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionYGainNode);
      positionYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionZGainNode);
      positionZGainNode.disconnect(channelMergerNode);
      channelMergerNode.disconnect(scriptProcessorNode);
      scriptProcessorNode.disconnect(nativeContext.destination);
    };
    return monitorConnections2(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);
  };
};
const createNativePeriodicWaveFactory = (createIndexSizeError2) => {
  return (nativeContext, { disableNormalization, imag, real }) => {
    const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);
    const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);
    const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, { disableNormalization });
    if (Array.from(imag).length < 2) {
      throw createIndexSizeError2();
    }
    return nativePeriodicWave;
  };
};
const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {
  return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);
};
const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError2) => {
  return (nativeContext, options) => {
    const channelCountMode = options.channelCountMode;
    if (channelCountMode === "clamped-max") {
      throw createNotSupportedError2();
    }
    if (nativeContext.createStereoPanner === void 0) {
      return createNativeStereoPannerNodeFaker(nativeContext, options);
    }
    const nativeStereoPannerNode = nativeContext.createStereoPanner();
    assignNativeAudioNodeOptions(nativeStereoPannerNode, options);
    assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, "pan");
    Object.defineProperty(nativeStereoPannerNode, "channelCountMode", {
      get: () => channelCountMode,
      set: (value2) => {
        if (value2 !== channelCountMode) {
          throw createNotSupportedError2();
        }
      }
    });
    return nativeStereoPannerNode;
  };
};
const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode2, createNativeChannelSplitterNode2, createNativeGainNode2, createNativeWaveShaperNode2, createNotSupportedError2, monitorConnections2) => {
  const CURVE_SIZE = 16385;
  const DC_CURVE = new Float32Array([1, 1]);
  const HALF_PI = Math.PI / 2;
  const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: "explicit", channelInterpretation: "discrete" };
  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: "none" };
  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);
    for (let i2 = 0; i2 < CURVE_SIZE; i2 += 1) {
      const x = i2 / (CURVE_SIZE - 1) * HALF_PI;
      leftWaveShaperCurve[i2] = Math.cos(x);
      rightWaveShaperCurve[i2] = Math.sin(x);
    }
    const leftGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const leftWaveShaperNode = createNativeWaveShaperNode2(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve });
    const panWaveShaperNode = createNativeWaveShaperNode2(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });
    const rightGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const rightWaveShaperNode = createNativeWaveShaperNode2(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve });
    return {
      connectGraph() {
        inputGainNode.connect(leftGainNode);
        inputGainNode.connect(panWaveShaperNode.inputs === void 0 ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        inputGainNode.connect(rightGainNode);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftWaveShaperNode.inputs === void 0 ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
        panGainNode.connect(rightWaveShaperNode.inputs === void 0 ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.connect(leftGainNode.gain);
        rightWaveShaperNode.connect(rightGainNode.gain);
        leftGainNode.connect(channelMergerNode, 0, 0);
        rightGainNode.connect(channelMergerNode, 0, 1);
      },
      disconnectGraph() {
        inputGainNode.disconnect(leftGainNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs === void 0 ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        inputGainNode.disconnect(rightGainNode);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftWaveShaperNode.inputs === void 0 ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightWaveShaperNode.inputs === void 0 ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.disconnect(leftGainNode.gain);
        rightWaveShaperNode.disconnect(rightGainNode.gain);
        leftGainNode.disconnect(channelMergerNode, 0, 0);
        rightGainNode.disconnect(channelMergerNode, 0, 1);
      }
    };
  };
  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const centerIndex = Math.floor(CURVE_SIZE / 2);
    for (let i2 = 0; i2 < CURVE_SIZE; i2 += 1) {
      if (i2 > centerIndex) {
        const x = (i2 - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i2] = Math.cos(x);
        leftInputForRightOutputWaveShaperCurve[i2] = Math.sin(x);
        rightInputForLeftOutputWaveShaperCurve[i2] = 0;
        rightInputForRightOutputWaveShaperCurve[i2] = 1;
      } else {
        const x = i2 / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i2] = 1;
        leftInputForRightOutputWaveShaperCurve[i2] = 0;
        rightInputForLeftOutputWaveShaperCurve[i2] = Math.cos(x);
        rightInputForRightOutputWaveShaperCurve[i2] = Math.sin(x);
      }
    }
    const channelSplitterNode = createNativeChannelSplitterNode2(nativeContext, {
      channelCount: 2,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      numberOfOutputs: 2
    });
    const leftInputForLeftOutputGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode2(nativeContext, {
      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForLeftOutputWaveShaperCurve
    });
    const leftInputForRightOutputGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode2(nativeContext, {
      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForRightOutputWaveShaperCurve
    });
    const panWaveShaperNode = createNativeWaveShaperNode2(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE });
    const rightInputForLeftOutputGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode2(nativeContext, {
      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForLeftOutputWaveShaperCurve
    });
    const rightInputForRightOutputGainNode = createNativeGainNode2(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });
    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode2(nativeContext, {
      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForRightOutputWaveShaperCurve
    });
    return {
      connectGraph() {
        inputGainNode.connect(channelSplitterNode);
        inputGainNode.connect(panWaveShaperNode.inputs === void 0 ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);
        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);
        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === void 0 ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === void 0 ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === void 0 ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === void 0 ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
      },
      disconnectGraph() {
        inputGainNode.disconnect(channelSplitterNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs === void 0 ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);
        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);
        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === void 0 ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === void 0 ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === void 0 ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === void 0 ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
      }
    };
  };
  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {
    if (channelCount === 1) {
      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }
    if (channelCount === 2) {
      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }
    throw createNotSupportedError2();
  };
  return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {
    if (channelCountMode === "max") {
      throw createNotSupportedError2();
    }
    const channelMergerNode = createNativeChannelMergerNode2(nativeContext, {
      ...audioNodeOptions,
      channelCount: 1,
      channelCountMode,
      numberOfInputs: 2
    });
    const inputGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });
    const panGainNode = createNativeGainNode2(nativeContext, {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      gain: pan
    });
    let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);
    Object.defineProperty(panGainNode.gain, "defaultValue", { get: () => 0 });
    Object.defineProperty(panGainNode.gain, "maxValue", { get: () => 1 });
    Object.defineProperty(panGainNode.gain, "minValue", { get: () => -1 });
    const nativeStereoPannerNodeFakerFactory2 = {
      get bufferSize() {
        return void 0;
      },
      get channelCount() {
        return inputGainNode.channelCount;
      },
      set channelCount(value2) {
        if (inputGainNode.channelCount !== value2) {
          if (isConnected) {
            disconnectGraph();
          }
          ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value2, inputGainNode, panGainNode, channelMergerNode));
          if (isConnected) {
            connectGraph();
          }
        }
        inputGainNode.channelCount = value2;
      },
      get channelCountMode() {
        return inputGainNode.channelCountMode;
      },
      set channelCountMode(value2) {
        if (value2 === "clamped-max" || value2 === "max") {
          throw createNotSupportedError2();
        }
        inputGainNode.channelCountMode = value2;
      },
      get channelInterpretation() {
        return inputGainNode.channelInterpretation;
      },
      set channelInterpretation(value2) {
        inputGainNode.channelInterpretation = value2;
      },
      get context() {
        return inputGainNode.context;
      },
      get inputs() {
        return [inputGainNode];
      },
      get numberOfInputs() {
        return inputGainNode.numberOfInputs;
      },
      get numberOfOutputs() {
        return inputGainNode.numberOfOutputs;
      },
      get pan() {
        return panGainNode.gain;
      },
      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },
      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },
      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }
    };
    let isConnected = false;
    const whenConnected = () => {
      connectGraph();
      isConnected = true;
    };
    const whenDisconnected = () => {
      disconnectGraph();
      isConnected = false;
    };
    return monitorConnections2(interceptConnections(nativeStereoPannerNodeFakerFactory2, channelMergerNode), whenConnected, whenDisconnected);
  };
};
const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode2, createInvalidStateError2, createNativeWaveShaperNodeFaker2, isDCCurve2, monitorConnections2, nativeAudioContextConstructor2, overwriteAccessors2) => {
  return (nativeContext, options) => {
    const nativeWaveShaperNode = nativeContext.createWaveShaper();
    if (nativeAudioContextConstructor2 !== null && nativeAudioContextConstructor2.name === "webkitAudioContext" && nativeContext.createGain().gain.automationRate === void 0) {
      return createNativeWaveShaperNodeFaker2(nativeContext, options);
    }
    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);
    const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);
    if (curve !== null && curve.length < 2) {
      throw createInvalidStateError2();
    }
    assignNativeAudioNodeOption(nativeWaveShaperNode, { curve }, "curve");
    assignNativeAudioNodeOption(nativeWaveShaperNode, options, "oversample");
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    overwriteAccessors2(nativeWaveShaperNode, "curve", (get) => () => get.call(nativeWaveShaperNode), (set) => (value2) => {
      set.call(nativeWaveShaperNode, value2);
      if (isConnected) {
        if (isDCCurve2(value2) && disconnectNativeAudioBufferSourceNode === null) {
          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode2(nativeContext, nativeWaveShaperNode);
        } else if (!isDCCurve2(value2) && disconnectNativeAudioBufferSourceNode !== null) {
          disconnectNativeAudioBufferSourceNode();
          disconnectNativeAudioBufferSourceNode = null;
        }
      }
      return value2;
    });
    const whenConnected = () => {
      isConnected = true;
      if (isDCCurve2(nativeWaveShaperNode.curve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode2(nativeContext, nativeWaveShaperNode);
      }
    };
    const whenDisconnected = () => {
      isConnected = false;
      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };
    return monitorConnections2(nativeWaveShaperNode, whenConnected, whenDisconnected);
  };
};
const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode2, createInvalidStateError2, createNativeGainNode2, isDCCurve2, monitorConnections2) => {
  return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {
    const negativeWaveShaperNode = nativeContext.createWaveShaper();
    const positiveWaveShaperNode = nativeContext.createWaveShaper();
    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);
    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);
    const inputGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: 1 });
    const invertGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: -1 });
    const outputGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: 1 });
    const revertGainNode = createNativeGainNode2(nativeContext, { ...audioNodeOptions, gain: -1 });
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    let unmodifiedCurve = null;
    const nativeWaveShaperNodeFaker = {
      get bufferSize() {
        return void 0;
      },
      get channelCount() {
        return negativeWaveShaperNode.channelCount;
      },
      set channelCount(value2) {
        inputGainNode.channelCount = value2;
        invertGainNode.channelCount = value2;
        negativeWaveShaperNode.channelCount = value2;
        outputGainNode.channelCount = value2;
        positiveWaveShaperNode.channelCount = value2;
        revertGainNode.channelCount = value2;
      },
      get channelCountMode() {
        return negativeWaveShaperNode.channelCountMode;
      },
      set channelCountMode(value2) {
        inputGainNode.channelCountMode = value2;
        invertGainNode.channelCountMode = value2;
        negativeWaveShaperNode.channelCountMode = value2;
        outputGainNode.channelCountMode = value2;
        positiveWaveShaperNode.channelCountMode = value2;
        revertGainNode.channelCountMode = value2;
      },
      get channelInterpretation() {
        return negativeWaveShaperNode.channelInterpretation;
      },
      set channelInterpretation(value2) {
        inputGainNode.channelInterpretation = value2;
        invertGainNode.channelInterpretation = value2;
        negativeWaveShaperNode.channelInterpretation = value2;
        outputGainNode.channelInterpretation = value2;
        positiveWaveShaperNode.channelInterpretation = value2;
        revertGainNode.channelInterpretation = value2;
      },
      get context() {
        return negativeWaveShaperNode.context;
      },
      get curve() {
        return unmodifiedCurve;
      },
      set curve(value2) {
        if (value2 !== null && value2.length < 2) {
          throw createInvalidStateError2();
        }
        if (value2 === null) {
          negativeWaveShaperNode.curve = value2;
          positiveWaveShaperNode.curve = value2;
        } else {
          const curveLength = value2.length;
          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          negativeCurve[0] = value2[0];
          positiveCurve[0] = -value2[curveLength - 1];
          const length2 = Math.ceil((curveLength + 1) / 2);
          const centerIndex = (curveLength + 1) / 2 - 1;
          for (let i2 = 1; i2 < length2; i2 += 1) {
            const theoreticIndex = i2 / length2 * centerIndex;
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            negativeCurve[i2] = lowerIndex === upperIndex ? value2[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value2[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value2[upperIndex];
            positiveCurve[i2] = lowerIndex === upperIndex ? -value2[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value2[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value2[curveLength - 1 - upperIndex];
          }
          negativeCurve[length2] = curveLength % 2 === 1 ? value2[length2 - 1] : (value2[length2 - 2] + value2[length2 - 1]) / 2;
          negativeWaveShaperNode.curve = negativeCurve;
          positiveWaveShaperNode.curve = positiveCurve;
        }
        unmodifiedCurve = value2;
        if (isConnected) {
          if (isDCCurve2(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {
            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode2(nativeContext, inputGainNode);
          } else if (disconnectNativeAudioBufferSourceNode !== null) {
            disconnectNativeAudioBufferSourceNode();
            disconnectNativeAudioBufferSourceNode = null;
          }
        }
      },
      get inputs() {
        return [inputGainNode];
      },
      get numberOfInputs() {
        return negativeWaveShaperNode.numberOfInputs;
      },
      get numberOfOutputs() {
        return negativeWaveShaperNode.numberOfOutputs;
      },
      get oversample() {
        return negativeWaveShaperNode.oversample;
      },
      set oversample(value2) {
        negativeWaveShaperNode.oversample = value2;
        positiveWaveShaperNode.oversample = value2;
      },
      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },
      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },
      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }
    };
    if (curve !== null) {
      nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);
    }
    if (oversample !== nativeWaveShaperNodeFaker.oversample) {
      nativeWaveShaperNodeFaker.oversample = oversample;
    }
    const whenConnected = () => {
      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);
      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);
      isConnected = true;
      if (isDCCurve2(unmodifiedCurve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode2(nativeContext, inputGainNode);
      }
    };
    const whenDisconnected = () => {
      inputGainNode.disconnect(negativeWaveShaperNode);
      negativeWaveShaperNode.disconnect(outputGainNode);
      inputGainNode.disconnect(invertGainNode);
      invertGainNode.disconnect(positiveWaveShaperNode);
      positiveWaveShaperNode.disconnect(revertGainNode);
      revertGainNode.disconnect(outputGainNode);
      isConnected = false;
      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };
    return monitorConnections2(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);
  };
};
const createNotSupportedError = () => new DOMException("", "NotSupportedError");
const DEFAULT_OPTIONS$5 = {
  numberOfChannels: 1
};
const createOfflineAudioContextConstructor = (baseAudioContextConstructor2, cacheTestResult2, createInvalidStateError2, createNativeOfflineAudioContext2, startRendering2) => {
  return class OfflineAudioContext extends baseAudioContextConstructor2 {
    constructor(a, b, c) {
      let options;
      if (typeof a === "number" && b !== void 0 && c !== void 0) {
        options = { length: b, numberOfChannels: a, sampleRate: c };
      } else if (typeof a === "object") {
        options = a;
      } else {
        throw new Error("The given parameters are not valid.");
      }
      const { length: length2, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS$5, ...options };
      const nativeOfflineAudioContext = createNativeOfflineAudioContext2(numberOfChannels, length2, sampleRate);
      if (!cacheTestResult2(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {
        nativeOfflineAudioContext.addEventListener("statechange", (() => {
          let i2 = 0;
          const delayStateChangeEvent = (event) => {
            if (this._state === "running") {
              if (i2 > 0) {
                nativeOfflineAudioContext.removeEventListener("statechange", delayStateChangeEvent);
                event.stopImmediatePropagation();
                this._waitForThePromiseToSettle(event);
              } else {
                i2 += 1;
              }
            }
          };
          return delayStateChangeEvent;
        })());
      }
      super(nativeOfflineAudioContext, numberOfChannels);
      this._length = length2;
      this._nativeOfflineAudioContext = nativeOfflineAudioContext;
      this._state = null;
    }
    get length() {
      if (this._nativeOfflineAudioContext.length === void 0) {
        return this._length;
      }
      return this._nativeOfflineAudioContext.length;
    }
    get state() {
      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
    }
    startRendering() {
      if (this._state === "running") {
        return Promise.reject(createInvalidStateError2());
      }
      this._state = "running";
      return startRendering2(this.destination, this._nativeOfflineAudioContext).finally(() => {
        this._state = null;
        deactivateAudioGraph(this);
      });
    }
    _waitForThePromiseToSettle(event) {
      if (this._state === null) {
        this._nativeOfflineAudioContext.dispatchEvent(event);
      } else {
        setTimeout(() => this._waitForThePromiseToSettle(event));
      }
    }
  };
};
const DEFAULT_OPTIONS$4 = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  detune: 0,
  frequency: 440,
  periodicWave: void 0,
  type: "sine"
};
const createOscillatorNodeConstructor = (audioNodeConstructor2, createAudioParam2, createNativeOscillatorNode2, createOscillatorNodeRenderer2, getNativeContext2, isNativeOfflineAudioContext2, wrapEventListener2) => {
  return class OscillatorNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$4, ...options };
      const nativeOscillatorNode = createNativeOscillatorNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer2() : null;
      const nyquist = context.sampleRate / 2;
      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);
      this._detune = createAudioParam2(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);
      this._frequency = createAudioParam2(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);
      this._nativeOscillatorNode = nativeOscillatorNode;
      this._onended = null;
      this._oscillatorNodeRenderer = oscillatorNodeRenderer;
      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== void 0) {
        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;
      }
    }
    get detune() {
      return this._detune;
    }
    get frequency() {
      return this._frequency;
    }
    get onended() {
      return this._onended;
    }
    set onended(value2) {
      const wrappedListener = typeof value2 === "function" ? wrapEventListener2(this, value2) : null;
      this._nativeOscillatorNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeOscillatorNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value2 : nativeOnEnded;
    }
    get type() {
      return this._nativeOscillatorNode.type;
    }
    set type(value2) {
      this._nativeOscillatorNode.type = value2;
      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = null;
      }
    }
    setPeriodicWave(periodicWave) {
      this._nativeOscillatorNode.setPeriodicWave(periodicWave);
      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = periodicWave;
      }
    }
    start(when = 0) {
      this._nativeOscillatorNode.start(when);
      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.start = when;
      }
      if (this.context.state !== "closed") {
        setInternalStateToActive(this);
        const resetInternalStateToPassive = () => {
          this._nativeOscillatorNode.removeEventListener("ended", resetInternalStateToPassive);
          if (isActiveAudioNode(this)) {
            setInternalStateToPassive(this);
          }
        };
        this._nativeOscillatorNode.addEventListener("ended", resetInternalStateToPassive);
      }
    }
    stop(when = 0) {
      this._nativeOscillatorNode.stop(when);
      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.stop = when;
      }
    }
  };
};
const createOscillatorNodeRendererFactory = (connectAudioParam2, createNativeOscillatorNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeOscillatorNodes = /* @__PURE__ */ new WeakMap();
    let periodicWave = null;
    let start = null;
    let stop = null;
    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeOscillatorNode = getNativeAudioNode2(proxy);
      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);
      if (!nativeOscillatorNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeOscillatorNode.channelCount,
          channelCountMode: nativeOscillatorNode.channelCountMode,
          channelInterpretation: nativeOscillatorNode.channelInterpretation,
          detune: nativeOscillatorNode.detune.value,
          frequency: nativeOscillatorNode.frequency.value,
          periodicWave: periodicWave === null ? void 0 : periodicWave,
          type: nativeOscillatorNode.type
        };
        nativeOscillatorNode = createNativeOscillatorNode2(nativeOfflineAudioContext, options);
        if (start !== null) {
          nativeOscillatorNode.start(start);
        }
        if (stop !== null) {
          nativeOscillatorNode.stop(stop);
        }
      }
      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);
      if (!nativeOscillatorNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
        await renderAutomation2(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
      }
      await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeOscillatorNode);
      return nativeOscillatorNode;
    };
    return {
      set periodicWave(value2) {
        periodicWave = value2;
      },
      set start(value2) {
        start = value2;
      },
      set stop(value2) {
        stop = value2;
      },
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);
        if (renderedNativeOscillatorNode !== void 0) {
          return Promise.resolve(renderedNativeOscillatorNode);
        }
        return createOscillatorNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const DEFAULT_OPTIONS$3 = {
  channelCount: 2,
  channelCountMode: "clamped-max",
  channelInterpretation: "speakers",
  coneInnerAngle: 360,
  coneOuterAngle: 360,
  coneOuterGain: 0,
  distanceModel: "inverse",
  maxDistance: 1e4,
  orientationX: 1,
  orientationY: 0,
  orientationZ: 0,
  panningModel: "equalpower",
  positionX: 0,
  positionY: 0,
  positionZ: 0,
  refDistance: 1,
  rolloffFactor: 1
};
const createPannerNodeConstructor = (audioNodeConstructor2, createAudioParam2, createNativePannerNode2, createPannerNodeRenderer2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class PannerNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$3, ...options };
      const nativePannerNode = createNativePannerNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer2() : null;
      super(context, false, nativePannerNode, pannerNodeRenderer);
      this._nativePannerNode = nativePannerNode;
      this._orientationX = createAudioParam2(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationY = createAudioParam2(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationZ = createAudioParam2(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionX = createAudioParam2(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionY = createAudioParam2(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionZ = createAudioParam2(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);
      setAudioNodeTailTime2(this, 1);
    }
    get coneInnerAngle() {
      return this._nativePannerNode.coneInnerAngle;
    }
    set coneInnerAngle(value2) {
      this._nativePannerNode.coneInnerAngle = value2;
    }
    get coneOuterAngle() {
      return this._nativePannerNode.coneOuterAngle;
    }
    set coneOuterAngle(value2) {
      this._nativePannerNode.coneOuterAngle = value2;
    }
    get coneOuterGain() {
      return this._nativePannerNode.coneOuterGain;
    }
    set coneOuterGain(value2) {
      this._nativePannerNode.coneOuterGain = value2;
    }
    get distanceModel() {
      return this._nativePannerNode.distanceModel;
    }
    set distanceModel(value2) {
      this._nativePannerNode.distanceModel = value2;
    }
    get maxDistance() {
      return this._nativePannerNode.maxDistance;
    }
    set maxDistance(value2) {
      this._nativePannerNode.maxDistance = value2;
    }
    get orientationX() {
      return this._orientationX;
    }
    get orientationY() {
      return this._orientationY;
    }
    get orientationZ() {
      return this._orientationZ;
    }
    get panningModel() {
      return this._nativePannerNode.panningModel;
    }
    set panningModel(value2) {
      this._nativePannerNode.panningModel = value2;
    }
    get positionX() {
      return this._positionX;
    }
    get positionY() {
      return this._positionY;
    }
    get positionZ() {
      return this._positionZ;
    }
    get refDistance() {
      return this._nativePannerNode.refDistance;
    }
    set refDistance(value2) {
      this._nativePannerNode.refDistance = value2;
    }
    get rolloffFactor() {
      return this._nativePannerNode.rolloffFactor;
    }
    set rolloffFactor(value2) {
      this._nativePannerNode.rolloffFactor = value2;
    }
  };
};
const createPannerNodeRendererFactory = (connectAudioParam2, createNativeChannelMergerNode2, createNativeConstantSourceNode2, createNativeGainNode2, createNativePannerNode2, getNativeAudioNode2, nativeOfflineAudioContextConstructor2, renderAutomation2, renderInputsOfAudioNode2, renderNativeOfflineAudioContext2) => {
  return () => {
    const renderedNativeAudioNodes = /* @__PURE__ */ new WeakMap();
    let renderedBufferPromise = null;
    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeGainNode = null;
      let nativePannerNode = getNativeAudioNode2(proxy);
      const commonAudioNodeOptions = {
        channelCount: nativePannerNode.channelCount,
        channelCountMode: nativePannerNode.channelCountMode,
        channelInterpretation: nativePannerNode.channelInterpretation
      };
      const commonNativePannerNodeOptions = {
        ...commonAudioNodeOptions,
        coneInnerAngle: nativePannerNode.coneInnerAngle,
        coneOuterAngle: nativePannerNode.coneOuterAngle,
        coneOuterGain: nativePannerNode.coneOuterGain,
        distanceModel: nativePannerNode.distanceModel,
        maxDistance: nativePannerNode.maxDistance,
        panningModel: nativePannerNode.panningModel,
        refDistance: nativePannerNode.refDistance,
        rolloffFactor: nativePannerNode.rolloffFactor
      };
      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);
      if ("bufferSize" in nativePannerNode) {
        nativeGainNode = createNativeGainNode2(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
      } else if (!nativePannerNodeIsOwnedByContext) {
        const options = {
          ...commonNativePannerNodeOptions,
          orientationX: nativePannerNode.orientationX.value,
          orientationY: nativePannerNode.orientationY.value,
          orientationZ: nativePannerNode.orientationZ.value,
          positionX: nativePannerNode.positionX.value,
          positionY: nativePannerNode.positionY.value,
          positionZ: nativePannerNode.positionZ.value
        };
        nativePannerNode = createNativePannerNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);
      if (nativeGainNode !== null) {
        if (renderedBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor2 === null) {
            throw new Error("Missing the native OfflineAudioContext constructor.");
          }
          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor2(
            6,
            proxy.context.length,
            nativeOfflineAudioContext.sampleRate
          );
          const nativeChannelMergerNode = createNativeChannelMergerNode2(partialOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: "explicit",
            channelInterpretation: "speakers",
            numberOfInputs: 6
          });
          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);
          renderedBufferPromise = (async () => {
            const nativeConstantSourceNodes = await Promise.all([
              proxy.orientationX,
              proxy.orientationY,
              proxy.orientationZ,
              proxy.positionX,
              proxy.positionY,
              proxy.positionZ
            ].map(async (audioParam, index) => {
              const nativeConstantSourceNode = createNativeConstantSourceNode2(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: "explicit",
                channelInterpretation: "discrete",
                offset: index === 0 ? 1 : 0
              });
              await renderAutomation2(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);
              return nativeConstantSourceNode;
            }));
            for (let i2 = 0; i2 < 6; i2 += 1) {
              nativeConstantSourceNodes[i2].connect(nativeChannelMergerNode, 0, i2);
              nativeConstantSourceNodes[i2].start(0);
            }
            return renderNativeOfflineAudioContext2(partialOfflineAudioContext);
          })();
        }
        const renderedBuffer = await renderedBufferPromise;
        const inputGainNode = createNativeGainNode2(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, inputGainNode);
        const channelDatas = [];
        for (let i2 = 0; i2 < renderedBuffer.numberOfChannels; i2 += 1) {
          channelDatas.push(renderedBuffer.getChannelData(i2));
        }
        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];
        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];
        let gateGainNode = createNativeGainNode2(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });
        let partialPannerNode = createNativePannerNode2(nativeOfflineAudioContext, {
          ...commonNativePannerNodeOptions,
          orientationX: lastOrientation[0],
          orientationY: lastOrientation[1],
          orientationZ: lastOrientation[2],
          positionX: lastPosition[0],
          positionY: lastPosition[1],
          positionZ: lastPosition[2]
        });
        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
        partialPannerNode.connect(nativeGainNode);
        for (let i2 = 128; i2 < renderedBuffer.length; i2 += 128) {
          const orientation = [channelDatas[0][i2], channelDatas[1][i2], channelDatas[2][i2]];
          const positon = [channelDatas[3][i2], channelDatas[4][i2], channelDatas[5][i2]];
          if (orientation.some((value2, index) => value2 !== lastOrientation[index]) || positon.some((value2, index) => value2 !== lastPosition[index])) {
            lastOrientation = orientation;
            lastPosition = positon;
            const currentTime = i2 / nativeOfflineAudioContext.sampleRate;
            gateGainNode.gain.setValueAtTime(0, currentTime);
            gateGainNode = createNativeGainNode2(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });
            partialPannerNode = createNativePannerNode2(nativeOfflineAudioContext, {
              ...commonNativePannerNodeOptions,
              orientationX: lastOrientation[0],
              orientationY: lastOrientation[1],
              orientationZ: lastOrientation[2],
              positionX: lastPosition[0],
              positionY: lastPosition[1],
              positionZ: lastPosition[2]
            });
            gateGainNode.gain.setValueAtTime(1, currentTime);
            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
            partialPannerNode.connect(nativeGainNode);
          }
        }
        return nativeGainNode;
      }
      if (!nativePannerNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
        await renderAutomation2(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
        await renderAutomation2(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
        await renderAutomation2(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
        await renderAutomation2(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
        await renderAutomation2(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
        await connectAudioParam2(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
      }
      if (isNativeAudioNodeFaker(nativePannerNode)) {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);
      } else {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativePannerNode);
      }
      return nativePannerNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
        if (renderedNativeGainNodeOrNativePannerNode !== void 0) {
          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);
        }
        return createAudioNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const DEFAULT_OPTIONS$2 = {
  disableNormalization: false
};
const createPeriodicWaveConstructor = (createNativePeriodicWave2, getNativeContext2, periodicWaveStore, sanitizePeriodicWaveOptions2) => {
  return class PeriodicWave {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = sanitizePeriodicWaveOptions2({ ...DEFAULT_OPTIONS$2, ...options });
      const periodicWave = createNativePeriodicWave2(nativeContext, mergedOptions);
      periodicWaveStore.add(periodicWave);
      return periodicWave;
    }
    static [Symbol.hasInstance](instance2) {
      return instance2 !== null && typeof instance2 === "object" && Object.getPrototypeOf(instance2) === PeriodicWave.prototype || periodicWaveStore.has(instance2);
    }
  };
};
const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam2) => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {
    const audioParamRenderer = getAudioParamRenderer(audioParam);
    audioParamRenderer.replay(nativeAudioParam);
    return renderInputsOfAudioParam2(audioParam, nativeOfflineAudioContext, nativeAudioParam);
  };
};
const createRenderInputsOfAudioNode = (getAudioNodeConnections2, getAudioNodeRenderer2, isPartOfACycle2) => {
  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {
    const audioNodeConnections = getAudioNodeConnections2(audioNode);
    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer2(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
      const destination = audioNode.context.destination;
      if (!isPartOfACycle2(source) && (audioNode !== destination || !isPartOfACycle2(audioNode))) {
        renderedNativeAudioNode.connect(nativeAudioNode, output, input);
      }
    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));
  };
};
const createRenderInputsOfAudioParam = (getAudioNodeRenderer2, getAudioParamConnections2, isPartOfACycle2) => {
  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {
    const audioParamConnections = getAudioParamConnections2(audioParam);
    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer2(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
      if (!isPartOfACycle2(source)) {
        renderedNativeAudioNode.connect(nativeAudioParam, output);
      }
    }));
  };
};
const createRenderNativeOfflineAudioContext = (cacheTestResult2, createNativeGainNode2, createNativeScriptProcessorNode2, testOfflineAudioContextCurrentTimeSupport) => {
  return (nativeOfflineAudioContext) => {
    if (cacheTestResult2(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {
      return Promise.resolve(cacheTestResult2(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported) => {
        if (!isOfflineAudioContextCurrentTimeSupported) {
          const scriptProcessorNode = createNativeScriptProcessorNode2(nativeOfflineAudioContext, 512, 0, 1);
          nativeOfflineAudioContext.oncomplete = () => {
            scriptProcessorNode.onaudioprocess = null;
            scriptProcessorNode.disconnect();
          };
          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime;
          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);
        }
        return nativeOfflineAudioContext.startRendering();
      });
    }
    return new Promise((resolve) => {
      const gainNode = createNativeGainNode2(nativeOfflineAudioContext, {
        channelCount: 1,
        channelCountMode: "explicit",
        channelInterpretation: "discrete",
        gain: 0
      });
      nativeOfflineAudioContext.oncomplete = (event) => {
        gainNode.disconnect();
        resolve(event.renderedBuffer);
      };
      gainNode.connect(nativeOfflineAudioContext.destination);
      nativeOfflineAudioContext.startRendering();
    });
  };
};
const createSetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore2) => {
  return (nativeAudioWorkletNode, activeInputs) => {
    activeAudioWorkletNodeInputsStore2.set(nativeAudioWorkletNode, activeInputs);
  };
};
const createSetAudioNodeTailTime = (audioNodeTailTimeStore2) => {
  return (audioNode, tailTime) => audioNodeTailTimeStore2.set(audioNode, tailTime);
};
const createStartRendering = (audioBufferStore2, cacheTestResult2, getAudioNodeRenderer2, getUnrenderedAudioWorkletNodes2, renderNativeOfflineAudioContext2, testAudioBufferCopyChannelMethodsOutOfBoundsSupport2, wrapAudioBufferCopyChannelMethods2, wrapAudioBufferCopyChannelMethodsOutOfBounds2) => {
  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer2(destination).render(destination, nativeOfflineAudioContext).then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes2(nativeOfflineAudioContext)).map((audioWorkletNode) => getAudioNodeRenderer2(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)))).then(() => renderNativeOfflineAudioContext2(nativeOfflineAudioContext)).then((audioBuffer) => {
    if (typeof audioBuffer.copyFromChannel !== "function") {
      wrapAudioBufferCopyChannelMethods2(audioBuffer);
      wrapAudioBufferGetChannelDataMethod(audioBuffer);
    } else if (!cacheTestResult2(testAudioBufferCopyChannelMethodsOutOfBoundsSupport2, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport2(audioBuffer))) {
      wrapAudioBufferCopyChannelMethodsOutOfBounds2(audioBuffer);
    }
    audioBufferStore2.add(audioBuffer);
    return audioBuffer;
  });
};
const DEFAULT_OPTIONS$1 = {
  channelCount: 2,
  channelCountMode: "explicit",
  channelInterpretation: "speakers",
  pan: 0
};
const createStereoPannerNodeConstructor = (audioNodeConstructor2, createAudioParam2, createNativeStereoPannerNode2, createStereoPannerNodeRenderer2, getNativeContext2, isNativeOfflineAudioContext2) => {
  return class StereoPannerNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS$1, ...options };
      const nativeStereoPannerNode = createNativeStereoPannerNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer2() : null;
      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);
      this._pan = createAudioParam2(this, isOffline, nativeStereoPannerNode.pan);
    }
    get pan() {
      return this._pan;
    }
  };
};
const createStereoPannerNodeRendererFactory = (connectAudioParam2, createNativeStereoPannerNode2, getNativeAudioNode2, renderAutomation2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeStereoPannerNodes = /* @__PURE__ */ new WeakMap();
    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeStereoPannerNode = getNativeAudioNode2(proxy);
      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);
      if (!nativeStereoPannerNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeStereoPannerNode.channelCount,
          channelCountMode: nativeStereoPannerNode.channelCountMode,
          channelInterpretation: nativeStereoPannerNode.channelInterpretation,
          pan: nativeStereoPannerNode.pan.value
        };
        nativeStereoPannerNode = createNativeStereoPannerNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);
      if (!nativeStereoPannerNodeIsOwnedByContext) {
        await renderAutomation2(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
      } else {
        await connectAudioParam2(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
      }
      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);
      } else {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);
      }
      return nativeStereoPannerNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);
        if (renderedNativeStereoPannerNode !== void 0) {
          return Promise.resolve(renderedNativeStereoPannerNode);
        }
        return createStereoPannerNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor2) => {
  return () => {
    if (nativeAudioBufferConstructor2 === null) {
      return false;
    }
    try {
      new nativeAudioBufferConstructor2({ length: 1, sampleRate: 44100 });
    } catch {
      return false;
    }
    return true;
  };
};
const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor2, nativeOfflineAudioContextConstructor2) => {
  return async () => {
    if (nativeAudioWorkletNodeConstructor2 === null) {
      return true;
    }
    if (nativeOfflineAudioContextConstructor2 === null) {
      return false;
    }
    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'], {
      type: "application/javascript; charset=utf-8"
    });
    const offlineAudioContext = new nativeOfflineAudioContextConstructor2(1, 128, 44100);
    const url2 = URL.createObjectURL(blob);
    let isEmittingMessageEvents = false;
    let isEmittingProcessorErrorEvents = false;
    try {
      await offlineAudioContext.audioWorklet.addModule(url2);
      const audioWorkletNode = new nativeAudioWorkletNodeConstructor2(offlineAudioContext, "a", { numberOfOutputs: 0 });
      const oscillator = offlineAudioContext.createOscillator();
      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;
      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;
      oscillator.connect(audioWorkletNode);
      oscillator.start(0);
      await offlineAudioContext.startRendering();
    } catch {
    } finally {
      URL.revokeObjectURL(url2);
    }
    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;
  };
};
const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode2, nativeOfflineAudioContextConstructor2) => {
  return () => {
    if (nativeOfflineAudioContextConstructor2 === null) {
      return Promise.resolve(false);
    }
    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor2(1, 1, 44100);
    const gainNode = createNativeGainNode2(nativeOfflineAudioContext, {
      channelCount: 1,
      channelCountMode: "explicit",
      channelInterpretation: "discrete",
      gain: 0
    });
    return new Promise((resolve) => {
      nativeOfflineAudioContext.oncomplete = () => {
        gainNode.disconnect();
        resolve(nativeOfflineAudioContext.currentTime !== 0);
      };
      nativeOfflineAudioContext.startRendering();
    });
  };
};
const createUnknownError = () => new DOMException("", "UnknownError");
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: "max",
  channelInterpretation: "speakers",
  curve: null,
  oversample: "none"
};
const createWaveShaperNodeConstructor = (audioNodeConstructor2, createInvalidStateError2, createNativeWaveShaperNode2, createWaveShaperNodeRenderer2, getNativeContext2, isNativeOfflineAudioContext2, setAudioNodeTailTime2) => {
  return class WaveShaperNode extends audioNodeConstructor2 {
    constructor(context, options) {
      const nativeContext = getNativeContext2(context);
      const mergedOptions = { ...DEFAULT_OPTIONS, ...options };
      const nativeWaveShaperNode = createNativeWaveShaperNode2(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext2(nativeContext);
      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer2() : null;
      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);
      this._isCurveNullified = false;
      this._nativeWaveShaperNode = nativeWaveShaperNode;
      setAudioNodeTailTime2(this, 1);
    }
    get curve() {
      if (this._isCurveNullified) {
        return null;
      }
      return this._nativeWaveShaperNode.curve;
    }
    set curve(value2) {
      if (value2 === null) {
        this._isCurveNullified = true;
        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);
      } else {
        if (value2.length < 2) {
          throw createInvalidStateError2();
        }
        this._isCurveNullified = false;
        this._nativeWaveShaperNode.curve = value2;
      }
    }
    get oversample() {
      return this._nativeWaveShaperNode.oversample;
    }
    set oversample(value2) {
      this._nativeWaveShaperNode.oversample = value2;
    }
  };
};
const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode2, getNativeAudioNode2, renderInputsOfAudioNode2) => {
  return () => {
    const renderedNativeWaveShaperNodes = /* @__PURE__ */ new WeakMap();
    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {
      let nativeWaveShaperNode = getNativeAudioNode2(proxy);
      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);
      if (!nativeWaveShaperNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeWaveShaperNode.channelCount,
          channelCountMode: nativeWaveShaperNode.channelCountMode,
          channelInterpretation: nativeWaveShaperNode.channelInterpretation,
          curve: nativeWaveShaperNode.curve,
          oversample: nativeWaveShaperNode.oversample
        };
        nativeWaveShaperNode = createNativeWaveShaperNode2(nativeOfflineAudioContext, options);
      }
      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);
      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);
      } else {
        await renderInputsOfAudioNode2(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);
      }
      return nativeWaveShaperNode;
    };
    return {
      render(proxy, nativeOfflineAudioContext) {
        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);
        if (renderedNativeWaveShaperNode !== void 0) {
          return Promise.resolve(renderedNativeWaveShaperNode);
        }
        return createWaveShaperNode(proxy, nativeOfflineAudioContext);
      }
    };
  };
};
const createWindow = () => typeof window === "undefined" ? null : window;
const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong2, createIndexSizeError2) => {
  return (audioBuffer) => {
    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong2(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong2(channelNumberAsNumber);
      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError2();
      }
      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const destinationLength = destination.length;
      for (let i2 = bufferOffset < 0 ? -bufferOffset : 0; i2 + bufferOffset < audioBufferLength && i2 < destinationLength; i2 += 1) {
        destination[i2] = channelData[i2 + bufferOffset];
      }
    };
    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong2(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong2(channelNumberAsNumber);
      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError2();
      }
      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const sourceLength = source.length;
      for (let i2 = bufferOffset < 0 ? -bufferOffset : 0; i2 + bufferOffset < audioBufferLength && i2 < sourceLength; i2 += 1) {
        channelData[i2 + bufferOffset] = source[i2];
      }
    };
  };
};
const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong2) => {
  return (audioBuffer) => {
    audioBuffer.copyFromChannel = ((copyFromChannel2) => {
      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong2(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong2(channelNumberAsNumber);
        if (bufferOffset < audioBuffer.length) {
          return copyFromChannel2.call(audioBuffer, destination, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyFromChannel);
    audioBuffer.copyToChannel = ((copyToChannel2) => {
      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong2(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong2(channelNumberAsNumber);
        if (bufferOffset < audioBuffer.length) {
          return copyToChannel2.call(audioBuffer, source, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyToChannel);
  };
};
const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors2) => {
  return (nativeAudioBufferSourceNode, nativeContext) => {
    const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);
    if (nativeAudioBufferSourceNode.buffer === null) {
      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;
    }
    overwriteAccessors2(nativeAudioBufferSourceNode, "buffer", (get) => () => {
      const value2 = get.call(nativeAudioBufferSourceNode);
      return value2 === nullifiedBuffer ? null : value2;
    }, (set) => (value2) => {
      return set.call(nativeAudioBufferSourceNode, value2 === null ? nullifiedBuffer : value2);
    });
  };
};
const createWrapChannelMergerNode = (createInvalidStateError2, monitorConnections2) => {
  return (nativeContext, channelMergerNode) => {
    channelMergerNode.channelCount = 1;
    channelMergerNode.channelCountMode = "explicit";
    Object.defineProperty(channelMergerNode, "channelCount", {
      get: () => 1,
      set: () => {
        throw createInvalidStateError2();
      }
    });
    Object.defineProperty(channelMergerNode, "channelCountMode", {
      get: () => "explicit",
      set: () => {
        throw createInvalidStateError2();
      }
    });
    const audioBufferSourceNode = nativeContext.createBufferSource();
    const whenConnected = () => {
      const length2 = channelMergerNode.numberOfInputs;
      for (let i2 = 0; i2 < length2; i2 += 1) {
        audioBufferSourceNode.connect(channelMergerNode, 0, i2);
      }
    };
    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);
    monitorConnections2(channelMergerNode, whenConnected, whenDisconnected);
  };
};
const getFirstSample = (audioBuffer, buffer, channelNumber) => {
  if (audioBuffer.copyFromChannel === void 0) {
    return audioBuffer.getChannelData(channelNumber)[0];
  }
  audioBuffer.copyFromChannel(buffer, channelNumber);
  return buffer[0];
};
const isDCCurve = (curve) => {
  if (curve === null) {
    return false;
  }
  const length2 = curve.length;
  if (length2 % 2 !== 0) {
    return curve[Math.floor(length2 / 2)] !== 0;
  }
  return curve[length2 / 2 - 1] + curve[length2 / 2] !== 0;
};
const overwriteAccessors = (object, property, createGetter, createSetter) => {
  let prototype = object;
  while (!prototype.hasOwnProperty(property)) {
    prototype = Object.getPrototypeOf(prototype);
  }
  const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);
  Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });
};
const sanitizeAudioWorkletNodeOptions = (options) => {
  return {
    ...options,
    outputChannelCount: options.outputChannelCount !== void 0 ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ? [options.channelCount] : Array.from({ length: options.numberOfOutputs }, () => 1)
  };
};
const sanitizeChannelSplitterOptions = (options) => {
  return { ...options, channelCount: options.numberOfOutputs };
};
const sanitizePeriodicWaveOptions = (options) => {
  const { imag, real } = options;
  if (imag === void 0) {
    if (real === void 0) {
      return { ...options, imag: [0, 0], real: [0, 0] };
    }
    return { ...options, imag: Array.from(real, () => 0), real };
  }
  if (real === void 0) {
    return { ...options, imag, real: Array.from(imag, () => 0) };
  }
  return { ...options, imag, real };
};
const setValueAtTimeUntilPossible = (audioParam, value2, startTime) => {
  try {
    audioParam.setValueAtTime(value2, startTime);
  } catch (err) {
    if (err.code !== 9) {
      throw err;
    }
    setValueAtTimeUntilPossible(audioParam, value2, startTime + 1e-7);
  }
};
const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext) => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.start();
  try {
    nativeAudioBufferSourceNode.start();
  } catch {
    return true;
  }
  return false;
};
const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = (nativeContext) => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
  try {
    nativeAudioBufferSourceNode.start(0, 1);
  } catch {
    return false;
  }
  return true;
};
const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (nativeContext) => {
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.start();
  try {
    nativeAudioBufferSourceNode.stop();
  } catch {
    return false;
  }
  return true;
};
const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (nativeContext) => {
  const nativeAudioBufferSourceNode = nativeContext.createOscillator();
  try {
    nativeAudioBufferSourceNode.start(-1);
  } catch (err) {
    return err instanceof RangeError;
  }
  return false;
};
const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext) => {
  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
  nativeAudioBufferSourceNode.start();
  nativeAudioBufferSourceNode.stop();
  try {
    nativeAudioBufferSourceNode.stop();
    return true;
  } catch {
    return false;
  }
};
const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (nativeContext) => {
  const nativeAudioBufferSourceNode = nativeContext.createOscillator();
  try {
    nativeAudioBufferSourceNode.stop(-1);
  } catch (err) {
    return err instanceof RangeError;
  }
  return false;
};
const testAudioWorkletNodeOptionsClonability = (audioWorkletNodeOptions) => {
  const { port1, port2 } = new MessageChannel();
  try {
    port1.postMessage(audioWorkletNodeOptions);
  } finally {
    port1.close();
    port2.close();
  }
};
const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {
  nativeAudioBufferSourceNode.start = ((start) => {
    return (when = 0, offset = 0, duration) => {
      const buffer = nativeAudioBufferSourceNode.buffer;
      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);
      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {
        start.call(nativeAudioBufferSourceNode, when, 0, 0);
      } else {
        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);
      }
    };
  })(nativeAudioBufferSourceNode.start);
};
const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {
  const nativeGainNode = nativeContext.createGain();
  nativeAudioScheduledSourceNode.connect(nativeGainNode);
  const disconnectGainNode = ((disconnect2) => {
    return () => {
      disconnect2.call(nativeAudioScheduledSourceNode, nativeGainNode);
      nativeAudioScheduledSourceNode.removeEventListener("ended", disconnectGainNode);
    };
  })(nativeAudioScheduledSourceNode.disconnect);
  nativeAudioScheduledSourceNode.addEventListener("ended", disconnectGainNode);
  interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);
  nativeAudioScheduledSourceNode.stop = ((stop) => {
    let isStopped = false;
    return (when = 0) => {
      if (isStopped) {
        try {
          stop.call(nativeAudioScheduledSourceNode, when);
        } catch {
          nativeGainNode.gain.setValueAtTime(0, when);
        }
      } else {
        stop.call(nativeAudioScheduledSourceNode, when);
        isStopped = true;
      }
    };
  })(nativeAudioScheduledSourceNode.stop);
};
const wrapEventListener = (target, eventListener) => {
  return (event) => {
    const descriptor = { value: target };
    Object.defineProperties(event, {
      currentTarget: descriptor,
      target: descriptor
    });
    if (typeof eventListener === "function") {
      return eventListener.call(target, event);
    }
    return eventListener.handleEvent.call(target, event);
  };
};
const addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);
const addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);
const deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);
const audioNodeTailTimeStore = /* @__PURE__ */ new WeakMap();
const getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);
const cacheTestResult = createCacheTestResult(/* @__PURE__ */ new Map(), /* @__PURE__ */ new WeakMap());
const window$1 = createWindow();
const createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);
const getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);
const renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);
const createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);
const getNativeContext = createGetNativeContext(CONTEXT_STORE);
const nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window$1);
const isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);
const audioParamAudioNodeStore = /* @__PURE__ */ new WeakMap();
const eventTargetConstructor = createEventTargetConstructor(wrapEventListener);
const nativeAudioContextConstructor = createNativeAudioContextConstructor(window$1);
const isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);
const isNativeAudioNode = createIsNativeAudioNode(window$1);
const isNativeAudioParam = createIsNativeAudioParam(window$1);
const nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window$1);
const audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);
const analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);
const audioBufferStore = /* @__PURE__ */ new WeakSet();
const nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window$1);
const convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);
const audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const addSilentConnection = createAddSilentConnection(createNativeGainNode);
const renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);
const connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);
const audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
const audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);
const biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);
const wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);
const createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);
const channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
const createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);
const channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);
const createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);
const createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);
const createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
const createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);
const createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);
const convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);
const createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);
const renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);
const unrenderedAudioWorkletNodeStore = /* @__PURE__ */ new WeakMap();
const minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);
const createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);
const createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);
const createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);
const createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);
const createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);
const createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);
const periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, /* @__PURE__ */ new WeakSet(), sanitizePeriodicWaveOptions);
const nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);
const createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);
const createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
const createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);
const waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const isSecureContext = createIsSecureContext(window$1);
const exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window$1);
const backupOfflineAudioContextStore = /* @__PURE__ */ new WeakMap();
const getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);
const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(
  cacheTestResult,
  createNotSupportedError,
  createEvaluateSource(window$1),
  exposeCurrentFrameAndCurrentTime,
  createFetchSource(createAbortError),
  getNativeContext,
  getOrCreateBackupOfflineAudioContext,
  isNativeOfflineAudioContext,
  nativeAudioWorkletNodeConstructor,
  /* @__PURE__ */ new WeakMap(),
  /* @__PURE__ */ new WeakMap(),
  createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),
  window$1
) : void 0;
const isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);
const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, /* @__PURE__ */ new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
const createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
const audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);
const getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);
const deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);
const activeAudioWorkletNodeInputsStore = /* @__PURE__ */ new WeakMap();
const getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);
const createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);
const createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);
const createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);
const setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);
const audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : void 0;
const createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);
const startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);
const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);
const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);
const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);
const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);
function assert(statement, error) {
  if (!statement) {
    throw new Error(error);
  }
}
function assertRange(value2, gte, lte = Infinity) {
  if (!(gte <= value2 && value2 <= lte)) {
    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value2}`);
  }
}
function assertContextRunning(context) {
  if (!context.isOffline && context.state !== "running") {
    warn('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.');
  }
}
let defaultLogger = console;
function log(...args) {
  defaultLogger.log(...args);
}
function warn(...args) {
  defaultLogger.warn(...args);
}
function isUndef(arg) {
  return typeof arg === "undefined";
}
function isDefined(arg) {
  return !isUndef(arg);
}
function isFunction(arg) {
  return typeof arg === "function";
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isObject(arg) {
  return Object.prototype.toString.call(arg) === "[object Object]" && arg.constructor === Object;
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isArray(arg) {
  return Array.isArray(arg);
}
function isString(arg) {
  return typeof arg === "string";
}
function isNote(arg) {
  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
}
function createAudioContext(options) {
  return new audioContextConstructor(options);
}
function createOfflineAudioContext(channels, length2, sampleRate) {
  return new offlineAudioContextConstructor(channels, length2, sampleRate);
}
const theWindow = typeof self === "object" ? self : null;
const hasAudioContext = theWindow && (theWindow.hasOwnProperty("AudioContext") || theWindow.hasOwnProperty("webkitAudioContext"));
function createAudioWorkletNode(context, name, options) {
  assert(isDefined(audioWorkletNodeConstructor), "This node only works in a secure context (https or localhost)");
  return new audioWorkletNodeConstructor(context, name, options);
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i2 = decorators.length - 1; i2 >= 0; i2--)
      if (d = decorators[i2])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value2) {
    return value2 instanceof P ? value2 : new P(function(resolve) {
      resolve(value2);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
class Ticker {
  constructor(callback, type, updateInterval) {
    this._callback = callback;
    this._type = type;
    this._updateInterval = updateInterval;
    this._createClock();
  }
  _createWorker() {
    const blob = new Blob([
      `
			// the initial timeout time
			let timeoutTime =  ${(this._updateInterval * 1e3).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`
    ], { type: "text/javascript" });
    const blobUrl = URL.createObjectURL(blob);
    const worker = new Worker(blobUrl);
    worker.onmessage = this._callback.bind(this);
    this._worker = worker;
  }
  _createTimeout() {
    this._timeout = setTimeout(() => {
      this._createTimeout();
      this._callback();
    }, this._updateInterval * 1e3);
  }
  _createClock() {
    if (this._type === "worker") {
      try {
        this._createWorker();
      } catch (e) {
        this._type = "timeout";
        this._createClock();
      }
    } else if (this._type === "timeout") {
      this._createTimeout();
    }
  }
  _disposeClock() {
    if (this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = 0;
    }
    if (this._worker) {
      this._worker.terminate();
      this._worker.onmessage = null;
    }
  }
  get updateInterval() {
    return this._updateInterval;
  }
  set updateInterval(interval) {
    this._updateInterval = Math.max(interval, 128 / 44100);
    if (this._type === "worker") {
      this._worker.postMessage(Math.max(interval * 1e3, 1));
    }
  }
  get type() {
    return this._type;
  }
  set type(type) {
    this._disposeClock();
    this._type = type;
    this._createClock();
  }
  dispose() {
    this._disposeClock();
  }
}
function isAudioParam(arg) {
  return isAnyAudioParam(arg);
}
function isAudioNode(arg) {
  return isAnyAudioNode(arg);
}
function isOfflineAudioContext(arg) {
  return isAnyOfflineAudioContext(arg);
}
function isAudioContext(arg) {
  return isAnyAudioContext(arg);
}
function isAudioBuffer(arg) {
  return arg instanceof AudioBuffer;
}
function noCopy(key, arg) {
  return key === "value" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);
}
function deepMerge(target, ...sources) {
  if (!sources.length) {
    return target;
  }
  const source = sources.shift();
  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (noCopy(key, source[key])) {
        target[key] = source[key];
      } else if (isObject(source[key])) {
        if (!target[key]) {
          Object.assign(target, { [key]: {} });
        }
        deepMerge(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }
  return deepMerge(target, ...sources);
}
function deepEquals(arrayA, arrayB) {
  return arrayA.length === arrayB.length && arrayA.every((element2, index) => arrayB[index] === element2);
}
function optionsFromArguments(defaults, argsArray, keys = [], objKey) {
  const opts = {};
  const args = Array.from(argsArray);
  if (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {
    const partOfDefaults = Object.keys(args[0]).some((key) => Reflect.has(defaults, key));
    if (!partOfDefaults) {
      deepMerge(opts, { [objKey]: args[0] });
      keys.splice(keys.indexOf(objKey), 1);
      args.shift();
    }
  }
  if (args.length === 1 && isObject(args[0])) {
    deepMerge(opts, args[0]);
  } else {
    for (let i2 = 0; i2 < keys.length; i2++) {
      if (isDefined(args[i2])) {
        opts[keys[i2]] = args[i2];
      }
    }
  }
  return deepMerge(defaults, opts);
}
function getDefaultsFromInstance(instance2) {
  return instance2.constructor.getDefaults();
}
function defaultArg(given, fallback) {
  if (isUndef(given)) {
    return fallback;
  } else {
    return given;
  }
}
function omitFromObject(obj, omit) {
  omit.forEach((prop) => {
    if (Reflect.has(obj, prop)) {
      delete obj[prop];
    }
  });
  return obj;
}
class Tone {
  constructor() {
    this.debug = false;
    this._wasDisposed = false;
  }
  static getDefaults() {
    return {};
  }
  log(...args) {
    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {
      log(this, ...args);
    }
  }
  dispose() {
    this._wasDisposed = true;
    return this;
  }
  get disposed() {
    return this._wasDisposed;
  }
  toString() {
    return this.name;
  }
}
Tone.version = version;
const EPSILON = 1e-6;
function GT(a, b) {
  return a > b + EPSILON;
}
function GTE(a, b) {
  return GT(a, b) || EQ(a, b);
}
function LT(a, b) {
  return a + EPSILON < b;
}
function EQ(a, b) {
  return Math.abs(a - b) < EPSILON;
}
function clamp(value2, min, max) {
  return Math.max(Math.min(value2, max), min);
}
class Timeline extends Tone {
  constructor() {
    super();
    this.name = "Timeline";
    this._timeline = [];
    const options = optionsFromArguments(Timeline.getDefaults(), arguments, ["memory"]);
    this.memory = options.memory;
    this.increasing = options.increasing;
  }
  static getDefaults() {
    return {
      memory: Infinity,
      increasing: false
    };
  }
  get length() {
    return this._timeline.length;
  }
  add(event) {
    assert(Reflect.has(event, "time"), "Timeline: events must have a time attribute");
    event.time = event.time.valueOf();
    if (this.increasing && this.length) {
      const lastValue = this._timeline[this.length - 1];
      assert(GTE(event.time, lastValue.time), "The time must be greater than or equal to the last scheduled time");
      this._timeline.push(event);
    } else {
      const index = this._search(event.time);
      this._timeline.splice(index + 1, 0, event);
    }
    if (this.length > this.memory) {
      const diff = this.length - this.memory;
      this._timeline.splice(0, diff);
    }
    return this;
  }
  remove(event) {
    const index = this._timeline.indexOf(event);
    if (index !== -1) {
      this._timeline.splice(index, 1);
    }
    return this;
  }
  get(time, param = "time") {
    const index = this._search(time, param);
    if (index !== -1) {
      return this._timeline[index];
    } else {
      return null;
    }
  }
  peek() {
    return this._timeline[0];
  }
  shift() {
    return this._timeline.shift();
  }
  getAfter(time, param = "time") {
    const index = this._search(time, param);
    if (index + 1 < this._timeline.length) {
      return this._timeline[index + 1];
    } else {
      return null;
    }
  }
  getBefore(time) {
    const len = this._timeline.length;
    if (len > 0 && this._timeline[len - 1].time < time) {
      return this._timeline[len - 1];
    }
    const index = this._search(time);
    if (index - 1 >= 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  cancel(after) {
    if (this._timeline.length > 1) {
      let index = this._search(after);
      if (index >= 0) {
        if (EQ(this._timeline[index].time, after)) {
          for (let i2 = index; i2 >= 0; i2--) {
            if (EQ(this._timeline[i2].time, after)) {
              index = i2;
            } else {
              break;
            }
          }
          this._timeline = this._timeline.slice(0, index);
        } else {
          this._timeline = this._timeline.slice(0, index + 1);
        }
      } else {
        this._timeline = [];
      }
    } else if (this._timeline.length === 1) {
      if (GTE(this._timeline[0].time, after)) {
        this._timeline = [];
      }
    }
    return this;
  }
  cancelBefore(time) {
    const index = this._search(time);
    if (index >= 0) {
      this._timeline = this._timeline.slice(index + 1);
    }
    return this;
  }
  previousEvent(event) {
    const index = this._timeline.indexOf(event);
    if (index > 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  _search(time, param = "time") {
    if (this._timeline.length === 0) {
      return -1;
    }
    let beginning = 0;
    const len = this._timeline.length;
    let end = len;
    if (len > 0 && this._timeline[len - 1][param] <= time) {
      return len - 1;
    }
    while (beginning < end) {
      let midPoint = Math.floor(beginning + (end - beginning) / 2);
      const event = this._timeline[midPoint];
      const nextEvent = this._timeline[midPoint + 1];
      if (EQ(event[param], time)) {
        for (let i2 = midPoint; i2 < this._timeline.length; i2++) {
          const testEvent = this._timeline[i2];
          if (EQ(testEvent[param], time)) {
            midPoint = i2;
          } else {
            break;
          }
        }
        return midPoint;
      } else if (LT(event[param], time) && GT(nextEvent[param], time)) {
        return midPoint;
      } else if (GT(event[param], time)) {
        end = midPoint;
      } else {
        beginning = midPoint + 1;
      }
    }
    return -1;
  }
  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {
    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);
  }
  forEach(callback) {
    this._iterate(callback);
    return this;
  }
  forEachBefore(time, callback) {
    const upperBound = this._search(time);
    if (upperBound !== -1) {
      this._iterate(callback, 0, upperBound);
    }
    return this;
  }
  forEachAfter(time, callback) {
    const lowerBound = this._search(time);
    this._iterate(callback, lowerBound + 1);
    return this;
  }
  forEachBetween(startTime, endTime, callback) {
    let lowerBound = this._search(startTime);
    let upperBound = this._search(endTime);
    if (lowerBound !== -1 && upperBound !== -1) {
      if (this._timeline[lowerBound].time !== startTime) {
        lowerBound += 1;
      }
      if (this._timeline[upperBound].time === endTime) {
        upperBound -= 1;
      }
      this._iterate(callback, lowerBound, upperBound);
    } else if (lowerBound === -1) {
      this._iterate(callback, 0, upperBound);
    }
    return this;
  }
  forEachFrom(time, callback) {
    let lowerBound = this._search(time);
    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
      lowerBound--;
    }
    this._iterate(callback, lowerBound + 1);
    return this;
  }
  forEachAtTime(time, callback) {
    const upperBound = this._search(time);
    if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {
      let lowerBound = upperBound;
      for (let i2 = upperBound; i2 >= 0; i2--) {
        if (EQ(this._timeline[i2].time, time)) {
          lowerBound = i2;
        } else {
          break;
        }
      }
      this._iterate((event) => {
        callback(event);
      }, lowerBound, upperBound);
    }
    return this;
  }
  dispose() {
    super.dispose();
    this._timeline = [];
    return this;
  }
}
const notifyNewContext = [];
function onContextInit(cb) {
  notifyNewContext.push(cb);
}
function initializeContext(ctx) {
  notifyNewContext.forEach((cb) => cb(ctx));
}
const notifyCloseContext = [];
function onContextClose(cb) {
  notifyCloseContext.push(cb);
}
function closeContext(ctx) {
  notifyCloseContext.forEach((cb) => cb(ctx));
}
let Emitter$1 = class Emitter extends Tone {
  constructor() {
    super(...arguments);
    this.name = "Emitter";
  }
  on(event, callback) {
    const events = event.split(/\W+/);
    events.forEach((eventName) => {
      if (isUndef(this._events)) {
        this._events = {};
      }
      if (!this._events.hasOwnProperty(eventName)) {
        this._events[eventName] = [];
      }
      this._events[eventName].push(callback);
    });
    return this;
  }
  once(event, callback) {
    const boundCallback = (...args) => {
      callback(...args);
      this.off(event, boundCallback);
    };
    this.on(event, boundCallback);
    return this;
  }
  off(event, callback) {
    const events = event.split(/\W+/);
    events.forEach((eventName) => {
      if (isUndef(this._events)) {
        this._events = {};
      }
      if (this._events.hasOwnProperty(event)) {
        if (isUndef(callback)) {
          this._events[event] = [];
        } else {
          const eventList = this._events[event];
          for (let i2 = eventList.length - 1; i2 >= 0; i2--) {
            if (eventList[i2] === callback) {
              eventList.splice(i2, 1);
            }
          }
        }
      }
    });
    return this;
  }
  emit(event, ...args) {
    if (this._events) {
      if (this._events.hasOwnProperty(event)) {
        const eventList = this._events[event].slice(0);
        for (let i2 = 0, len = eventList.length; i2 < len; i2++) {
          eventList[i2].apply(this, args);
        }
      }
    }
    return this;
  }
  static mixin(constr) {
    ["on", "once", "off", "emit"].forEach((name) => {
      const property = Object.getOwnPropertyDescriptor(Emitter$1.prototype, name);
      Object.defineProperty(constr.prototype, name, property);
    });
  }
  dispose() {
    super.dispose();
    this._events = void 0;
    return this;
  }
};
class BaseContext extends Emitter$1 {
  constructor() {
    super(...arguments);
    this.isOffline = false;
  }
  toJSON() {
    return {};
  }
}
class Context extends BaseContext {
  constructor() {
    super();
    this.name = "Context";
    this._constants = /* @__PURE__ */ new Map();
    this._timeouts = new Timeline();
    this._timeoutIds = 0;
    this._initialized = false;
    this.isOffline = false;
    this._workletModules = /* @__PURE__ */ new Map();
    const options = optionsFromArguments(Context.getDefaults(), arguments, [
      "context"
    ]);
    if (options.context) {
      this._context = options.context;
    } else {
      this._context = createAudioContext({
        latencyHint: options.latencyHint
      });
    }
    this._ticker = new Ticker(this.emit.bind(this, "tick"), options.clockSource, options.updateInterval);
    this.on("tick", this._timeoutLoop.bind(this));
    this._context.onstatechange = () => {
      this.emit("statechange", this.state);
    };
    this._setLatencyHint(options.latencyHint);
    this.lookAhead = options.lookAhead;
  }
  static getDefaults() {
    return {
      clockSource: "worker",
      latencyHint: "interactive",
      lookAhead: 0.1,
      updateInterval: 0.05
    };
  }
  initialize() {
    if (!this._initialized) {
      initializeContext(this);
      this._initialized = true;
    }
    return this;
  }
  createAnalyser() {
    return this._context.createAnalyser();
  }
  createOscillator() {
    return this._context.createOscillator();
  }
  createBufferSource() {
    return this._context.createBufferSource();
  }
  createBiquadFilter() {
    return this._context.createBiquadFilter();
  }
  createBuffer(numberOfChannels, length2, sampleRate) {
    return this._context.createBuffer(numberOfChannels, length2, sampleRate);
  }
  createChannelMerger(numberOfInputs) {
    return this._context.createChannelMerger(numberOfInputs);
  }
  createChannelSplitter(numberOfOutputs) {
    return this._context.createChannelSplitter(numberOfOutputs);
  }
  createConstantSource() {
    return this._context.createConstantSource();
  }
  createConvolver() {
    return this._context.createConvolver();
  }
  createDelay(maxDelayTime) {
    return this._context.createDelay(maxDelayTime);
  }
  createDynamicsCompressor() {
    return this._context.createDynamicsCompressor();
  }
  createGain() {
    return this._context.createGain();
  }
  createIIRFilter(feedForward, feedback) {
    return this._context.createIIRFilter(feedForward, feedback);
  }
  createPanner() {
    return this._context.createPanner();
  }
  createPeriodicWave(real, imag, constraints) {
    return this._context.createPeriodicWave(real, imag, constraints);
  }
  createStereoPanner() {
    return this._context.createStereoPanner();
  }
  createWaveShaper() {
    return this._context.createWaveShaper();
  }
  createMediaStreamSource(stream) {
    assert(isAudioContext(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamSource(stream);
  }
  createMediaElementSource(element2) {
    assert(isAudioContext(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaElementSource(element2);
  }
  createMediaStreamDestination() {
    assert(isAudioContext(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamDestination();
  }
  decodeAudioData(audioData) {
    return this._context.decodeAudioData(audioData);
  }
  get currentTime() {
    return this._context.currentTime;
  }
  get state() {
    return this._context.state;
  }
  get sampleRate() {
    return this._context.sampleRate;
  }
  get listener() {
    this.initialize();
    return this._listener;
  }
  set listener(l) {
    assert(!this._initialized, "The listener cannot be set after initialization.");
    this._listener = l;
  }
  get transport() {
    this.initialize();
    return this._transport;
  }
  set transport(t) {
    assert(!this._initialized, "The transport cannot be set after initialization.");
    this._transport = t;
  }
  get draw() {
    this.initialize();
    return this._draw;
  }
  set draw(d) {
    assert(!this._initialized, "Draw cannot be set after initialization.");
    this._draw = d;
  }
  get destination() {
    this.initialize();
    return this._destination;
  }
  set destination(d) {
    assert(!this._initialized, "The destination cannot be set after initialization.");
    this._destination = d;
  }
  createAudioWorkletNode(name, options) {
    return createAudioWorkletNode(this.rawContext, name, options);
  }
  addAudioWorkletModule(url2, name) {
    return __awaiter(this, void 0, void 0, function* () {
      assert(isDefined(this.rawContext.audioWorklet), "AudioWorkletNode is only available in a secure context (https or localhost)");
      if (!this._workletModules.has(name)) {
        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url2));
      }
      yield this._workletModules.get(name);
    });
  }
  workletsAreReady() {
    return __awaiter(this, void 0, void 0, function* () {
      const promises = [];
      this._workletModules.forEach((promise) => promises.push(promise));
      yield Promise.all(promises);
    });
  }
  get updateInterval() {
    return this._ticker.updateInterval;
  }
  set updateInterval(interval) {
    this._ticker.updateInterval = interval;
  }
  get clockSource() {
    return this._ticker.type;
  }
  set clockSource(type) {
    this._ticker.type = type;
  }
  get latencyHint() {
    return this._latencyHint;
  }
  _setLatencyHint(hint) {
    let lookAheadValue = 0;
    this._latencyHint = hint;
    if (isString(hint)) {
      switch (hint) {
        case "interactive":
          lookAheadValue = 0.1;
          break;
        case "playback":
          lookAheadValue = 0.5;
          break;
        case "balanced":
          lookAheadValue = 0.25;
          break;
      }
    }
    this.lookAhead = lookAheadValue;
    this.updateInterval = lookAheadValue / 2;
  }
  get rawContext() {
    return this._context;
  }
  now() {
    return this._context.currentTime + this.lookAhead;
  }
  immediate() {
    return this._context.currentTime;
  }
  resume() {
    if (isAudioContext(this._context)) {
      return this._context.resume();
    } else {
      return Promise.resolve();
    }
  }
  close() {
    return __awaiter(this, void 0, void 0, function* () {
      if (isAudioContext(this._context)) {
        yield this._context.close();
      }
      if (this._initialized) {
        closeContext(this);
      }
    });
  }
  getConstant(val) {
    if (this._constants.has(val)) {
      return this._constants.get(val);
    } else {
      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);
      const arr = buffer.getChannelData(0);
      for (let i2 = 0; i2 < arr.length; i2++) {
        arr[i2] = val;
      }
      const constant = this._context.createBufferSource();
      constant.channelCount = 1;
      constant.channelCountMode = "explicit";
      constant.buffer = buffer;
      constant.loop = true;
      constant.start(0);
      this._constants.set(val, constant);
      return constant;
    }
  }
  dispose() {
    super.dispose();
    this._ticker.dispose();
    this._timeouts.dispose();
    Object.keys(this._constants).map((val) => this._constants[val].disconnect());
    return this;
  }
  _timeoutLoop() {
    const now = this.now();
    let firstEvent = this._timeouts.peek();
    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {
      firstEvent.callback();
      this._timeouts.shift();
      firstEvent = this._timeouts.peek();
    }
  }
  setTimeout(fn, timeout) {
    this._timeoutIds++;
    const now = this.now();
    this._timeouts.add({
      callback: fn,
      id: this._timeoutIds,
      time: now + timeout
    });
    return this._timeoutIds;
  }
  clearTimeout(id) {
    this._timeouts.forEach((event) => {
      if (event.id === id) {
        this._timeouts.remove(event);
      }
    });
    return this;
  }
  clearInterval(id) {
    return this.clearTimeout(id);
  }
  setInterval(fn, interval) {
    const id = ++this._timeoutIds;
    const intervalFn = () => {
      const now = this.now();
      this._timeouts.add({
        callback: () => {
          fn();
          intervalFn();
        },
        id,
        time: now + interval
      });
    };
    intervalFn();
    return id;
  }
}
class DummyContext extends BaseContext {
  constructor() {
    super(...arguments);
    this.lookAhead = 0;
    this.latencyHint = 0;
    this.isOffline = false;
  }
  createAnalyser() {
    return {};
  }
  createOscillator() {
    return {};
  }
  createBufferSource() {
    return {};
  }
  createBiquadFilter() {
    return {};
  }
  createBuffer(_numberOfChannels, _length, _sampleRate) {
    return {};
  }
  createChannelMerger(_numberOfInputs) {
    return {};
  }
  createChannelSplitter(_numberOfOutputs) {
    return {};
  }
  createConstantSource() {
    return {};
  }
  createConvolver() {
    return {};
  }
  createDelay(_maxDelayTime) {
    return {};
  }
  createDynamicsCompressor() {
    return {};
  }
  createGain() {
    return {};
  }
  createIIRFilter(_feedForward, _feedback) {
    return {};
  }
  createPanner() {
    return {};
  }
  createPeriodicWave(_real, _imag, _constraints) {
    return {};
  }
  createStereoPanner() {
    return {};
  }
  createWaveShaper() {
    return {};
  }
  createMediaStreamSource(_stream) {
    return {};
  }
  createMediaElementSource(_element) {
    return {};
  }
  createMediaStreamDestination() {
    return {};
  }
  decodeAudioData(_audioData) {
    return Promise.resolve({});
  }
  createAudioWorkletNode(_name, _options) {
    return {};
  }
  get rawContext() {
    return {};
  }
  addAudioWorkletModule(_url, _name) {
    return __awaiter(this, void 0, void 0, function* () {
      return Promise.resolve();
    });
  }
  resume() {
    return Promise.resolve();
  }
  setTimeout(_fn, _timeout) {
    return 0;
  }
  clearTimeout(_id) {
    return this;
  }
  setInterval(_fn, _interval) {
    return 0;
  }
  clearInterval(_id) {
    return this;
  }
  getConstant(_val) {
    return {};
  }
  get currentTime() {
    return 0;
  }
  get state() {
    return {};
  }
  get sampleRate() {
    return 0;
  }
  get listener() {
    return {};
  }
  get transport() {
    return {};
  }
  get draw() {
    return {};
  }
  set draw(_d) {
  }
  get destination() {
    return {};
  }
  set destination(_d) {
  }
  now() {
    return 0;
  }
  immediate() {
    return 0;
  }
}
function readOnly(target, property) {
  if (isArray(property)) {
    property.forEach((str) => readOnly(target, str));
  } else {
    Object.defineProperty(target, property, {
      enumerable: true,
      writable: false
    });
  }
}
function writable(target, property) {
  if (isArray(property)) {
    property.forEach((str) => writable(target, str));
  } else {
    Object.defineProperty(target, property, {
      writable: true
    });
  }
}
const noOp = () => {
};
class ToneAudioBuffer extends Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffer";
    this.onload = noOp;
    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, ["url", "onload", "onerror"]);
    this.reverse = options.reverse;
    this.onload = options.onload;
    if (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {
      this.set(options.url);
    } else if (isString(options.url)) {
      this.load(options.url).catch(options.onerror);
    }
  }
  static getDefaults() {
    return {
      onerror: noOp,
      onload: noOp,
      reverse: false
    };
  }
  get sampleRate() {
    if (this._buffer) {
      return this._buffer.sampleRate;
    } else {
      return getContext().sampleRate;
    }
  }
  set(buffer) {
    if (buffer instanceof ToneAudioBuffer) {
      if (buffer.loaded) {
        this._buffer = buffer.get();
      } else {
        buffer.onload = () => {
          this.set(buffer);
          this.onload(this);
        };
      }
    } else {
      this._buffer = buffer;
    }
    if (this._reversed) {
      this._reverse();
    }
    return this;
  }
  get() {
    return this._buffer;
  }
  load(url2) {
    return __awaiter(this, void 0, void 0, function* () {
      const doneLoading = ToneAudioBuffer.load(url2).then((audioBuffer) => {
        this.set(audioBuffer);
        this.onload(this);
      });
      ToneAudioBuffer.downloads.push(doneLoading);
      try {
        yield doneLoading;
      } finally {
        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);
        ToneAudioBuffer.downloads.splice(index, 1);
      }
      return this;
    });
  }
  dispose() {
    super.dispose();
    this._buffer = void 0;
    return this;
  }
  fromArray(array) {
    const isMultidimensional = isArray(array) && array[0].length > 0;
    const channels = isMultidimensional ? array.length : 1;
    const len = isMultidimensional ? array[0].length : array.length;
    const context = getContext();
    const buffer = context.createBuffer(channels, len, context.sampleRate);
    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;
    for (let c = 0; c < channels; c++) {
      buffer.copyToChannel(multiChannelArray[c], c);
    }
    this._buffer = buffer;
    return this;
  }
  toMono(chanNum) {
    if (isNumber(chanNum)) {
      this.fromArray(this.toArray(chanNum));
    } else {
      let outputArray = new Float32Array(this.length);
      const numChannels = this.numberOfChannels;
      for (let channel = 0; channel < numChannels; channel++) {
        const channelArray = this.toArray(channel);
        for (let i2 = 0; i2 < channelArray.length; i2++) {
          outputArray[i2] += channelArray[i2];
        }
      }
      outputArray = outputArray.map((sample) => sample / numChannels);
      this.fromArray(outputArray);
    }
    return this;
  }
  toArray(channel) {
    if (isNumber(channel)) {
      return this.getChannelData(channel);
    } else if (this.numberOfChannels === 1) {
      return this.toArray(0);
    } else {
      const ret = [];
      for (let c = 0; c < this.numberOfChannels; c++) {
        ret[c] = this.getChannelData(c);
      }
      return ret;
    }
  }
  getChannelData(channel) {
    if (this._buffer) {
      return this._buffer.getChannelData(channel);
    } else {
      return new Float32Array(0);
    }
  }
  slice(start, end = this.duration) {
    const startSamples = Math.floor(start * this.sampleRate);
    const endSamples = Math.floor(end * this.sampleRate);
    assert(startSamples < endSamples, "The start time must be less than the end time");
    const length2 = endSamples - startSamples;
    const retBuffer = getContext().createBuffer(this.numberOfChannels, length2, this.sampleRate);
    for (let channel = 0; channel < this.numberOfChannels; channel++) {
      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);
    }
    return new ToneAudioBuffer(retBuffer);
  }
  _reverse() {
    if (this.loaded) {
      for (let i2 = 0; i2 < this.numberOfChannels; i2++) {
        this.getChannelData(i2).reverse();
      }
    }
    return this;
  }
  get loaded() {
    return this.length > 0;
  }
  get duration() {
    if (this._buffer) {
      return this._buffer.duration;
    } else {
      return 0;
    }
  }
  get length() {
    if (this._buffer) {
      return this._buffer.length;
    } else {
      return 0;
    }
  }
  get numberOfChannels() {
    if (this._buffer) {
      return this._buffer.numberOfChannels;
    } else {
      return 0;
    }
  }
  get reverse() {
    return this._reversed;
  }
  set reverse(rev) {
    if (this._reversed !== rev) {
      this._reversed = rev;
      this._reverse();
    }
  }
  static fromArray(array) {
    return new ToneAudioBuffer().fromArray(array);
  }
  static fromUrl(url2) {
    return __awaiter(this, void 0, void 0, function* () {
      const buffer = new ToneAudioBuffer();
      return yield buffer.load(url2);
    });
  }
  static load(url2) {
    return __awaiter(this, void 0, void 0, function* () {
      const matches = url2.match(/\[([^\]\[]+\|.+)\]$/);
      if (matches) {
        const extensions = matches[1].split("|");
        let extension = extensions[0];
        for (const ext of extensions) {
          if (ToneAudioBuffer.supportsType(ext)) {
            extension = ext;
            break;
          }
        }
        url2 = url2.replace(matches[0], extension);
      }
      const baseUrl = ToneAudioBuffer.baseUrl === "" || ToneAudioBuffer.baseUrl.endsWith("/") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + "/";
      const response = yield fetch(baseUrl + url2);
      if (!response.ok) {
        throw new Error(`could not load url: ${url2}`);
      }
      const arrayBuffer = yield response.arrayBuffer();
      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);
      return audioBuffer;
    });
  }
  static supportsType(url2) {
    const extensions = url2.split(".");
    const extension = extensions[extensions.length - 1];
    const response = document.createElement("audio").canPlayType("audio/" + extension);
    return response !== "";
  }
  static loaded() {
    return __awaiter(this, void 0, void 0, function* () {
      yield Promise.resolve();
      while (ToneAudioBuffer.downloads.length) {
        yield ToneAudioBuffer.downloads[0];
      }
    });
  }
}
ToneAudioBuffer.baseUrl = "";
ToneAudioBuffer.downloads = [];
class OfflineContext extends Context {
  constructor() {
    super({
      clockSource: "offline",
      context: isOfflineAudioContext(arguments[0]) ? arguments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),
      lookAhead: 0,
      updateInterval: isOfflineAudioContext(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]
    });
    this.name = "OfflineContext";
    this._currentTime = 0;
    this.isOffline = true;
    this._duration = isOfflineAudioContext(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];
  }
  now() {
    return this._currentTime;
  }
  get currentTime() {
    return this._currentTime;
  }
  _renderClock(asynchronous) {
    return __awaiter(this, void 0, void 0, function* () {
      let index = 0;
      while (this._duration - this._currentTime >= 0) {
        this.emit("tick");
        this._currentTime += 128 / this.sampleRate;
        index++;
        const yieldEvery = Math.floor(this.sampleRate / 128);
        if (asynchronous && index % yieldEvery === 0) {
          yield new Promise((done) => setTimeout(done, 1));
        }
      }
    });
  }
  render(asynchronous = true) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.workletsAreReady();
      yield this._renderClock(asynchronous);
      const buffer = yield this._context.startRendering();
      return new ToneAudioBuffer(buffer);
    });
  }
  close() {
    return Promise.resolve();
  }
}
const dummyContext = new DummyContext();
let globalContext = dummyContext;
function getContext() {
  if (globalContext === dummyContext && hasAudioContext) {
    setContext(new Context());
  }
  return globalContext;
}
function setContext(context) {
  if (isAudioContext(context)) {
    globalContext = new Context(context);
  } else if (isOfflineAudioContext(context)) {
    globalContext = new OfflineContext(context);
  } else {
    globalContext = context;
  }
}
if (theWindow && !theWindow.TONE_SILENCE_LOGGING) {
  let prefix = "v";
  const printString = ` * Tone.js ${prefix}${version} * `;
  console.log(`%c${printString}`, "background: #000; color: #fff");
}
function dbToGain(db) {
  return Math.pow(10, db / 20);
}
function gainToDb(gain) {
  return 20 * (Math.log(gain) / Math.LN10);
}
function intervalToFrequencyRatio(interval) {
  return Math.pow(2, interval / 12);
}
let A4 = 440;
function getA4() {
  return A4;
}
function setA4(freq) {
  A4 = freq;
}
function ftom(frequency) {
  return Math.round(ftomf(frequency));
}
function ftomf(frequency) {
  return 69 + 12 * Math.log2(frequency / A4);
}
function mtof(midi) {
  return A4 * Math.pow(2, (midi - 69) / 12);
}
class TimeBaseClass extends Tone {
  constructor(context, value2, units) {
    super();
    this.defaultUnits = "s";
    this._val = value2;
    this._units = units;
    this.context = context;
    this._expressions = this._getExpressions();
  }
  _getExpressions() {
    return {
      hz: {
        method: (value2) => {
          return this._frequencyToUnits(parseFloat(value2));
        },
        regexp: /^(\d+(?:\.\d+)?)hz$/i
      },
      i: {
        method: (value2) => {
          return this._ticksToUnits(parseInt(value2, 10));
        },
        regexp: /^(\d+)i$/i
      },
      m: {
        method: (value2) => {
          return this._beatsToUnits(parseInt(value2, 10) * this._getTimeSignature());
        },
        regexp: /^(\d+)m$/i
      },
      n: {
        method: (value2, dot) => {
          const numericValue = parseInt(value2, 10);
          const scalar = dot === "." ? 1.5 : 1;
          if (numericValue === 1) {
            return this._beatsToUnits(this._getTimeSignature()) * scalar;
          } else {
            return this._beatsToUnits(4 / numericValue) * scalar;
          }
        },
        regexp: /^(\d+)n(\.?)$/i
      },
      number: {
        method: (value2) => {
          return this._expressions[this.defaultUnits].method.call(this, value2);
        },
        regexp: /^(\d+(?:\.\d+)?)$/
      },
      s: {
        method: (value2) => {
          return this._secondsToUnits(parseFloat(value2));
        },
        regexp: /^(\d+(?:\.\d+)?)s$/
      },
      samples: {
        method: (value2) => {
          return parseInt(value2, 10) / this.context.sampleRate;
        },
        regexp: /^(\d+)samples$/
      },
      t: {
        method: (value2) => {
          const numericValue = parseInt(value2, 10);
          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));
        },
        regexp: /^(\d+)t$/i
      },
      tr: {
        method: (m, q, s) => {
          let total = 0;
          if (m && m !== "0") {
            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }
          if (q && q !== "0") {
            total += this._beatsToUnits(parseFloat(q));
          }
          if (s && s !== "0") {
            total += this._beatsToUnits(parseFloat(s) / 4);
          }
          return total;
        },
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/
      }
    };
  }
  valueOf() {
    if (this._val instanceof TimeBaseClass) {
      this.fromType(this._val);
    }
    if (isUndef(this._val)) {
      return this._noArg();
    } else if (isString(this._val) && isUndef(this._units)) {
      for (const units in this._expressions) {
        if (this._expressions[units].regexp.test(this._val.trim())) {
          this._units = units;
          break;
        }
      }
    } else if (isObject(this._val)) {
      let total = 0;
      for (const typeName in this._val) {
        if (isDefined(this._val[typeName])) {
          const quantity = this._val[typeName];
          const time = new this.constructor(this.context, typeName).valueOf() * quantity;
          total += time;
        }
      }
      return total;
    }
    if (isDefined(this._units)) {
      const expr = this._expressions[this._units];
      const matching = this._val.toString().trim().match(expr.regexp);
      if (matching) {
        return expr.method.apply(this, matching.slice(1));
      } else {
        return expr.method.call(this, this._val);
      }
    } else if (isString(this._val)) {
      return parseFloat(this._val);
    } else {
      return this._val;
    }
  }
  _frequencyToUnits(freq) {
    return 1 / freq;
  }
  _beatsToUnits(beats) {
    return 60 / this._getBpm() * beats;
  }
  _secondsToUnits(seconds) {
    return seconds;
  }
  _ticksToUnits(ticks) {
    return ticks * this._beatsToUnits(1) / this._getPPQ();
  }
  _noArg() {
    return this._now();
  }
  _getBpm() {
    return this.context.transport.bpm.value;
  }
  _getTimeSignature() {
    return this.context.transport.timeSignature;
  }
  _getPPQ() {
    return this.context.transport.PPQ;
  }
  fromType(type) {
    this._units = void 0;
    switch (this.defaultUnits) {
      case "s":
        this._val = type.toSeconds();
        break;
      case "i":
        this._val = type.toTicks();
        break;
      case "hz":
        this._val = type.toFrequency();
        break;
      case "midi":
        this._val = type.toMidi();
        break;
    }
    return this;
  }
  toFrequency() {
    return 1 / this.toSeconds();
  }
  toSamples() {
    return this.toSeconds() * this.context.sampleRate;
  }
  toMilliseconds() {
    return this.toSeconds() * 1e3;
  }
}
class TimeClass extends TimeBaseClass {
  constructor() {
    super(...arguments);
    this.name = "TimeClass";
  }
  _getExpressions() {
    return Object.assign(super._getExpressions(), {
      now: {
        method: (capture) => {
          return this._now() + new this.constructor(this.context, capture).valueOf();
        },
        regexp: /^\+(.+)/
      },
      quantize: {
        method: (capture) => {
          const quantTo = new TimeClass(this.context, capture).valueOf();
          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));
        },
        regexp: /^@(.+)/
      }
    });
  }
  quantize(subdiv, percent = 1) {
    const subdivision = new this.constructor(this.context, subdiv).valueOf();
    const value2 = this.valueOf();
    const multiple = Math.round(value2 / subdivision);
    const ideal = multiple * subdivision;
    const diff = ideal - value2;
    return value2 + diff * percent;
  }
  toNotation() {
    const time = this.toSeconds();
    const testNotations = ["1m"];
    for (let power = 1; power < 9; power++) {
      const subdiv = Math.pow(2, power);
      testNotations.push(subdiv + "n.");
      testNotations.push(subdiv + "n");
      testNotations.push(subdiv + "t");
    }
    testNotations.push("0");
    let closest = testNotations[0];
    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();
    testNotations.forEach((notation) => {
      const notationSeconds = new TimeClass(this.context, notation).toSeconds();
      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {
        closest = notation;
        closestSeconds = notationSeconds;
      }
    });
    return closest;
  }
  toBarsBeatsSixteenths() {
    const quarterTime = this._beatsToUnits(1);
    let quarters = this.valueOf() / quarterTime;
    quarters = parseFloat(quarters.toFixed(4));
    const measures = Math.floor(quarters / this._getTimeSignature());
    let sixteenths = quarters % 1 * 4;
    quarters = Math.floor(quarters) % this._getTimeSignature();
    const sixteenthString = sixteenths.toString();
    if (sixteenthString.length > 3) {
      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));
    }
    const progress = [measures, quarters, sixteenths];
    return progress.join(":");
  }
  toTicks() {
    const quarterTime = this._beatsToUnits(1);
    const quarters = this.valueOf() / quarterTime;
    return Math.round(quarters * this._getPPQ());
  }
  toSeconds() {
    return this.valueOf();
  }
  toMidi() {
    return ftom(this.toFrequency());
  }
  _now() {
    return this.context.now();
  }
}
class FrequencyClass extends TimeClass {
  constructor() {
    super(...arguments);
    this.name = "Frequency";
    this.defaultUnits = "hz";
  }
  static get A4() {
    return getA4();
  }
  static set A4(freq) {
    setA4(freq);
  }
  _getExpressions() {
    return Object.assign({}, super._getExpressions(), {
      midi: {
        regexp: /^(\d+(?:\.\d+)?midi)/,
        method(value2) {
          if (this.defaultUnits === "midi") {
            return value2;
          } else {
            return FrequencyClass.mtof(value2);
          }
        }
      },
      note: {
        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
        method(pitch, octave) {
          const index = noteToScaleIndex[pitch.toLowerCase()];
          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;
          if (this.defaultUnits === "midi") {
            return noteNumber;
          } else {
            return FrequencyClass.mtof(noteNumber);
          }
        }
      },
      tr: {
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
        method(m, q, s) {
          let total = 1;
          if (m && m !== "0") {
            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }
          if (q && q !== "0") {
            total *= this._beatsToUnits(parseFloat(q));
          }
          if (s && s !== "0") {
            total *= this._beatsToUnits(parseFloat(s) / 4);
          }
          return total;
        }
      }
    });
  }
  transpose(interval) {
    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));
  }
  harmonize(intervals) {
    return intervals.map((interval) => {
      return this.transpose(interval);
    });
  }
  toMidi() {
    return ftom(this.valueOf());
  }
  toNote() {
    const freq = this.toFrequency();
    const log2 = Math.log2(freq / FrequencyClass.A4);
    let noteNumber = Math.round(12 * log2) + 57;
    const octave = Math.floor(noteNumber / 12);
    if (octave < 0) {
      noteNumber += -12 * octave;
    }
    const noteName = scaleIndexToNote[noteNumber % 12];
    return noteName + octave.toString();
  }
  toSeconds() {
    return 1 / super.toSeconds();
  }
  toTicks() {
    const quarterTime = this._beatsToUnits(1);
    const quarters = this.valueOf() / quarterTime;
    return Math.floor(quarters * this._getPPQ());
  }
  _noArg() {
    return 0;
  }
  _frequencyToUnits(freq) {
    return freq;
  }
  _ticksToUnits(ticks) {
    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));
  }
  _beatsToUnits(beats) {
    return 1 / super._beatsToUnits(beats);
  }
  _secondsToUnits(seconds) {
    return 1 / seconds;
  }
  static mtof(midi) {
    return mtof(midi);
  }
  static ftom(frequency) {
    return ftom(frequency);
  }
}
const noteToScaleIndex = {
  cbb: -2,
  cb: -1,
  c: 0,
  "c#": 1,
  cx: 2,
  dbb: 0,
  db: 1,
  d: 2,
  "d#": 3,
  dx: 4,
  ebb: 2,
  eb: 3,
  e: 4,
  "e#": 5,
  ex: 6,
  fbb: 3,
  fb: 4,
  f: 5,
  "f#": 6,
  fx: 7,
  gbb: 5,
  gb: 6,
  g: 7,
  "g#": 8,
  gx: 9,
  abb: 7,
  ab: 8,
  a: 9,
  "a#": 10,
  ax: 11,
  bbb: 9,
  bb: 10,
  b: 11,
  "b#": 12,
  bx: 13
};
const scaleIndexToNote = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
class TransportTimeClass extends TimeClass {
  constructor() {
    super(...arguments);
    this.name = "TransportTime";
  }
  _now() {
    return this.context.transport.seconds;
  }
}
class ToneWithContext extends Tone {
  constructor() {
    super();
    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, ["context"]);
    if (this.defaultContext) {
      this.context = this.defaultContext;
    } else {
      this.context = options.context;
    }
  }
  static getDefaults() {
    return {
      context: getContext()
    };
  }
  now() {
    return this.context.currentTime + this.context.lookAhead;
  }
  immediate() {
    return this.context.currentTime;
  }
  get sampleTime() {
    return 1 / this.context.sampleRate;
  }
  get blockTime() {
    return 128 / this.context.sampleRate;
  }
  toSeconds(time) {
    return new TimeClass(this.context, time).toSeconds();
  }
  toFrequency(freq) {
    return new FrequencyClass(this.context, freq).toFrequency();
  }
  toTicks(time) {
    return new TransportTimeClass(this.context, time).toTicks();
  }
  _getPartialProperties(props) {
    const options = this.get();
    Object.keys(options).forEach((name) => {
      if (isUndef(props[name])) {
        delete options[name];
      }
    });
    return options;
  }
  get() {
    const defaults = getDefaultsFromInstance(this);
    Object.keys(defaults).forEach((attribute) => {
      if (Reflect.has(this, attribute)) {
        const member = this[attribute];
        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {
          defaults[attribute] = member.value;
        } else if (member instanceof ToneWithContext) {
          defaults[attribute] = member._getPartialProperties(defaults[attribute]);
        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {
          defaults[attribute] = member;
        } else {
          delete defaults[attribute];
        }
      }
    });
    return defaults;
  }
  set(props) {
    Object.keys(props).forEach((attribute) => {
      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {
        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {
          if (this[attribute].value !== props[attribute]) {
            this[attribute].value = props[attribute];
          }
        } else if (this[attribute] instanceof ToneWithContext) {
          this[attribute].set(props[attribute]);
        } else {
          this[attribute] = props[attribute];
        }
      }
    });
    return this;
  }
}
class StateTimeline extends Timeline {
  constructor(initial = "stopped") {
    super();
    this.name = "StateTimeline";
    this._initial = initial;
    this.setStateAtTime(this._initial, 0);
  }
  getValueAtTime(time) {
    const event = this.get(time);
    if (event !== null) {
      return event.state;
    } else {
      return this._initial;
    }
  }
  setStateAtTime(state, time, options) {
    assertRange(time, 0);
    this.add(Object.assign({}, options, {
      state,
      time
    }));
    return this;
  }
  getLastState(state, time) {
    const index = this._search(time);
    for (let i2 = index; i2 >= 0; i2--) {
      const event = this._timeline[i2];
      if (event.state === state) {
        return event;
      }
    }
  }
  getNextState(state, time) {
    const index = this._search(time);
    if (index !== -1) {
      for (let i2 = index; i2 < this._timeline.length; i2++) {
        const event = this._timeline[i2];
        if (event.state === state) {
          return event;
        }
      }
    }
  }
}
class Param extends ToneWithContext {
  constructor() {
    super(optionsFromArguments(Param.getDefaults(), arguments, ["param", "units", "convert"]));
    this.name = "Param";
    this.overridden = false;
    this._minOutput = 1e-7;
    const options = optionsFromArguments(Param.getDefaults(), arguments, ["param", "units", "convert"]);
    assert(isDefined(options.param) && (isAudioParam(options.param) || options.param instanceof Param), "param must be an AudioParam");
    while (!isAudioParam(options.param)) {
      options.param = options.param._param;
    }
    this._swappable = isDefined(options.swappable) ? options.swappable : false;
    if (this._swappable) {
      this.input = this.context.createGain();
      this._param = options.param;
      this.input.connect(this._param);
    } else {
      this._param = this.input = options.param;
    }
    this._events = new Timeline(1e3);
    this._initialValue = this._param.defaultValue;
    this.units = options.units;
    this.convert = options.convert;
    this._minValue = options.minValue;
    this._maxValue = options.maxValue;
    if (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {
      this.setValueAtTime(options.value, 0);
    }
  }
  static getDefaults() {
    return Object.assign(ToneWithContext.getDefaults(), {
      convert: true,
      units: "number"
    });
  }
  get value() {
    const now = this.now();
    return this.getValueAtTime(now);
  }
  set value(value2) {
    this.cancelScheduledValues(this.now());
    this.setValueAtTime(value2, this.now());
  }
  get minValue() {
    if (isDefined(this._minValue)) {
      return this._minValue;
    } else if (this.units === "time" || this.units === "frequency" || this.units === "normalRange" || this.units === "positive" || this.units === "transportTime" || this.units === "ticks" || this.units === "bpm" || this.units === "hertz" || this.units === "samples") {
      return 0;
    } else if (this.units === "audioRange") {
      return -1;
    } else if (this.units === "decibels") {
      return -Infinity;
    } else {
      return this._param.minValue;
    }
  }
  get maxValue() {
    if (isDefined(this._maxValue)) {
      return this._maxValue;
    } else if (this.units === "normalRange" || this.units === "audioRange") {
      return 1;
    } else {
      return this._param.maxValue;
    }
  }
  _is(arg, type) {
    return this.units === type;
  }
  _assertRange(value2) {
    if (isDefined(this.maxValue) && isDefined(this.minValue)) {
      assertRange(value2, this._fromType(this.minValue), this._fromType(this.maxValue));
    }
    return value2;
  }
  _fromType(val) {
    if (this.convert && !this.overridden) {
      if (this._is(val, "time")) {
        return this.toSeconds(val);
      } else if (this._is(val, "decibels")) {
        return dbToGain(val);
      } else if (this._is(val, "frequency")) {
        return this.toFrequency(val);
      } else {
        return val;
      }
    } else if (this.overridden) {
      return 0;
    } else {
      return val;
    }
  }
  _toType(val) {
    if (this.convert && this.units === "decibels") {
      return gainToDb(val);
    } else {
      return val;
    }
  }
  setValueAtTime(value2, time) {
    const computedTime = this.toSeconds(time);
    const numericValue = this._fromType(value2);
    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value2)}, ${JSON.stringify(time)}`);
    this._assertRange(numericValue);
    this.log(this.units, "setValueAtTime", value2, computedTime);
    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: numericValue
    });
    this._param.setValueAtTime(numericValue, computedTime);
    return this;
  }
  getValueAtTime(time) {
    const computedTime = Math.max(this.toSeconds(time), 0);
    const after = this._events.getAfter(computedTime);
    const before = this._events.get(computedTime);
    let value2 = this._initialValue;
    if (before === null) {
      value2 = this._initialValue;
    } else if (before.type === "setTargetAtTime" && (after === null || after.type === "setValueAtTime")) {
      const previous = this._events.getBefore(before.time);
      let previousVal;
      if (previous === null) {
        previousVal = this._initialValue;
      } else {
        previousVal = previous.value;
      }
      if (before.type === "setTargetAtTime") {
        value2 = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);
      }
    } else if (after === null) {
      value2 = before.value;
    } else if (after.type === "linearRampToValueAtTime" || after.type === "exponentialRampToValueAtTime") {
      let beforeValue = before.value;
      if (before.type === "setTargetAtTime") {
        const previous = this._events.getBefore(before.time);
        if (previous === null) {
          beforeValue = this._initialValue;
        } else {
          beforeValue = previous.value;
        }
      }
      if (after.type === "linearRampToValueAtTime") {
        value2 = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      } else {
        value2 = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      }
    } else {
      value2 = before.value;
    }
    return this._toType(value2);
  }
  setRampPoint(time) {
    time = this.toSeconds(time);
    let currentVal = this.getValueAtTime(time);
    this.cancelAndHoldAtTime(time);
    if (this._fromType(currentVal) === 0) {
      currentVal = this._toType(this._minOutput);
    }
    this.setValueAtTime(currentVal, time);
    return this;
  }
  linearRampToValueAtTime(value2, endTime) {
    const numericValue = this._fromType(value2);
    const computedTime = this.toSeconds(endTime);
    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value2)}, ${JSON.stringify(endTime)}`);
    this._assertRange(numericValue);
    this._events.add({
      time: computedTime,
      type: "linearRampToValueAtTime",
      value: numericValue
    });
    this.log(this.units, "linearRampToValueAtTime", value2, computedTime);
    this._param.linearRampToValueAtTime(numericValue, computedTime);
    return this;
  }
  exponentialRampToValueAtTime(value2, endTime) {
    let numericValue = this._fromType(value2);
    numericValue = EQ(numericValue, 0) ? this._minOutput : numericValue;
    this._assertRange(numericValue);
    const computedTime = this.toSeconds(endTime);
    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value2)}, ${JSON.stringify(endTime)}`);
    this._events.add({
      time: computedTime,
      type: "exponentialRampToValueAtTime",
      value: numericValue
    });
    this.log(this.units, "exponentialRampToValueAtTime", value2, computedTime);
    this._param.exponentialRampToValueAtTime(numericValue, computedTime);
    return this;
  }
  exponentialRampTo(value2, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialRampToValueAtTime(value2, startTime + this.toSeconds(rampTime));
    return this;
  }
  linearRampTo(value2, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.linearRampToValueAtTime(value2, startTime + this.toSeconds(rampTime));
    return this;
  }
  targetRampTo(value2, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialApproachValueAtTime(value2, startTime, rampTime);
    return this;
  }
  exponentialApproachValueAtTime(value2, time, rampTime) {
    time = this.toSeconds(time);
    rampTime = this.toSeconds(rampTime);
    const timeConstant = Math.log(rampTime + 1) / Math.log(200);
    this.setTargetAtTime(value2, time, timeConstant);
    this.cancelAndHoldAtTime(time + rampTime * 0.9);
    this.linearRampToValueAtTime(value2, time + rampTime);
    return this;
  }
  setTargetAtTime(value2, startTime, timeConstant) {
    const numericValue = this._fromType(value2);
    assert(isFinite(timeConstant) && timeConstant > 0, "timeConstant must be a number greater than 0");
    const computedTime = this.toSeconds(startTime);
    this._assertRange(numericValue);
    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value2)}, ${JSON.stringify(startTime)}`);
    this._events.add({
      constant: timeConstant,
      time: computedTime,
      type: "setTargetAtTime",
      value: numericValue
    });
    this.log(this.units, "setTargetAtTime", value2, computedTime, timeConstant);
    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);
    return this;
  }
  setValueCurveAtTime(values, startTime, duration, scaling = 1) {
    duration = this.toSeconds(duration);
    startTime = this.toSeconds(startTime);
    const startingValue = this._fromType(values[0]) * scaling;
    this.setValueAtTime(this._toType(startingValue), startTime);
    const segTime = duration / (values.length - 1);
    for (let i2 = 1; i2 < values.length; i2++) {
      const numericValue = this._fromType(values[i2]) * scaling;
      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i2 * segTime);
    }
    return this;
  }
  cancelScheduledValues(time) {
    const computedTime = this.toSeconds(time);
    assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);
    this._events.cancel(computedTime);
    this._param.cancelScheduledValues(computedTime);
    this.log(this.units, "cancelScheduledValues", computedTime);
    return this;
  }
  cancelAndHoldAtTime(time) {
    const computedTime = this.toSeconds(time);
    const valueAtTime = this._fromType(this.getValueAtTime(computedTime));
    assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);
    this.log(this.units, "cancelAndHoldAtTime", computedTime, "value=" + valueAtTime);
    const before = this._events.get(computedTime);
    const after = this._events.getAfter(computedTime);
    if (before && EQ(before.time, computedTime)) {
      if (after) {
        this._param.cancelScheduledValues(after.time);
        this._events.cancel(after.time);
      } else {
        this._param.cancelAndHoldAtTime(computedTime);
        this._events.cancel(computedTime + this.sampleTime);
      }
    } else if (after) {
      this._param.cancelScheduledValues(after.time);
      this._events.cancel(after.time);
      if (after.type === "linearRampToValueAtTime") {
        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);
      } else if (after.type === "exponentialRampToValueAtTime") {
        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);
      }
    }
    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: valueAtTime
    });
    this._param.setValueAtTime(valueAtTime, computedTime);
    return this;
  }
  rampTo(value2, rampTime = 0.1, startTime) {
    if (this.units === "frequency" || this.units === "bpm" || this.units === "decibels") {
      this.exponentialRampTo(value2, rampTime, startTime);
    } else {
      this.linearRampTo(value2, rampTime, startTime);
    }
    return this;
  }
  apply(param) {
    const now = this.context.currentTime;
    param.setValueAtTime(this.getValueAtTime(now), now);
    const previousEvent = this._events.get(now);
    if (previousEvent && previousEvent.type === "setTargetAtTime") {
      const nextEvent = this._events.getAfter(previousEvent.time);
      const endTime = nextEvent ? nextEvent.time : now + 2;
      const subdivisions = (endTime - now) / 10;
      for (let i2 = now; i2 < endTime; i2 += subdivisions) {
        param.linearRampToValueAtTime(this.getValueAtTime(i2), i2);
      }
    }
    this._events.forEachAfter(this.context.currentTime, (event) => {
      if (event.type === "cancelScheduledValues") {
        param.cancelScheduledValues(event.time);
      } else if (event.type === "setTargetAtTime") {
        param.setTargetAtTime(event.value, event.time, event.constant);
      } else {
        param[event.type](event.value, event.time);
      }
    });
    return this;
  }
  setParam(param) {
    assert(this._swappable, "The Param must be assigned as 'swappable' in the constructor");
    const input = this.input;
    input.disconnect(this._param);
    this.apply(param);
    this._param = param;
    input.connect(this._param);
    return this;
  }
  dispose() {
    super.dispose();
    this._events.dispose();
    return this;
  }
  get defaultValue() {
    return this._toType(this._param.defaultValue);
  }
  _exponentialApproach(t0, v0, v1, timeConstant, t) {
    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
  }
  _linearInterpolate(t0, v0, t1, v1, t) {
    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
  }
  _exponentialInterpolate(t0, v0, t1, v1, t) {
    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
  }
}
class ToneAudioNode extends ToneWithContext {
  constructor() {
    super(...arguments);
    this.name = "ToneAudioNode";
    this._internalChannels = [];
  }
  get numberOfInputs() {
    if (isDefined(this.input)) {
      if (isAudioParam(this.input) || this.input instanceof Param) {
        return 1;
      } else {
        return this.input.numberOfInputs;
      }
    } else {
      return 0;
    }
  }
  get numberOfOutputs() {
    if (isDefined(this.output)) {
      return this.output.numberOfOutputs;
    } else {
      return 0;
    }
  }
  _isAudioNode(node) {
    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));
  }
  _getInternalNodes() {
    const nodeList = this._internalChannels.slice(0);
    if (this._isAudioNode(this.input)) {
      nodeList.push(this.input);
    }
    if (this._isAudioNode(this.output)) {
      if (this.input !== this.output) {
        nodeList.push(this.output);
      }
    }
    return nodeList;
  }
  _setChannelProperties(options) {
    const nodeList = this._getInternalNodes();
    nodeList.forEach((node) => {
      node.channelCount = options.channelCount;
      node.channelCountMode = options.channelCountMode;
      node.channelInterpretation = options.channelInterpretation;
    });
  }
  _getChannelProperties() {
    const nodeList = this._getInternalNodes();
    assert(nodeList.length > 0, "ToneAudioNode does not have any internal nodes");
    const node = nodeList[0];
    return {
      channelCount: node.channelCount,
      channelCountMode: node.channelCountMode,
      channelInterpretation: node.channelInterpretation
    };
  }
  get channelCount() {
    return this._getChannelProperties().channelCount;
  }
  set channelCount(channelCount) {
    const props = this._getChannelProperties();
    this._setChannelProperties(Object.assign(props, { channelCount }));
  }
  get channelCountMode() {
    return this._getChannelProperties().channelCountMode;
  }
  set channelCountMode(channelCountMode) {
    const props = this._getChannelProperties();
    this._setChannelProperties(Object.assign(props, { channelCountMode }));
  }
  get channelInterpretation() {
    return this._getChannelProperties().channelInterpretation;
  }
  set channelInterpretation(channelInterpretation) {
    const props = this._getChannelProperties();
    this._setChannelProperties(Object.assign(props, { channelInterpretation }));
  }
  connect(destination, outputNum = 0, inputNum = 0) {
    connect(this, destination, outputNum, inputNum);
    return this;
  }
  toDestination() {
    this.connect(this.context.destination);
    return this;
  }
  toMaster() {
    warn("toMaster() has been renamed toDestination()");
    return this.toDestination();
  }
  disconnect(destination, outputNum = 0, inputNum = 0) {
    disconnect(this, destination, outputNum, inputNum);
    return this;
  }
  chain(...nodes) {
    connectSeries(this, ...nodes);
    return this;
  }
  fan(...nodes) {
    nodes.forEach((node) => this.connect(node));
    return this;
  }
  dispose() {
    super.dispose();
    if (isDefined(this.input)) {
      if (this.input instanceof ToneAudioNode) {
        this.input.dispose();
      } else if (isAudioNode(this.input)) {
        this.input.disconnect();
      }
    }
    if (isDefined(this.output)) {
      if (this.output instanceof ToneAudioNode) {
        this.output.dispose();
      } else if (isAudioNode(this.output)) {
        this.output.disconnect();
      }
    }
    this._internalChannels = [];
    return this;
  }
}
function connectSeries(...nodes) {
  const first = nodes.shift();
  nodes.reduce((prev2, current) => {
    if (prev2 instanceof ToneAudioNode) {
      prev2.connect(current);
    } else if (isAudioNode(prev2)) {
      connect(prev2, current);
    }
    return current;
  }, first);
}
function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  assert(isDefined(srcNode), "Cannot connect from undefined node");
  assert(isDefined(dstNode), "Cannot connect to undefined node");
  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {
    assert(dstNode.numberOfInputs > 0, "Cannot connect to node with no inputs");
  }
  assert(srcNode.numberOfOutputs > 0, "Cannot connect from node with no outputs");
  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {
    if (isDefined(dstNode.input)) {
      dstNode = dstNode.input;
    }
  }
  while (srcNode instanceof ToneAudioNode) {
    if (isDefined(srcNode.output)) {
      srcNode = srcNode.output;
    }
  }
  if (isAudioParam(dstNode)) {
    srcNode.connect(dstNode, outputNumber);
  } else {
    srcNode.connect(dstNode, outputNumber, inputNumber);
  }
}
function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  if (isDefined(dstNode)) {
    while (dstNode instanceof ToneAudioNode) {
      dstNode = dstNode.input;
    }
  }
  while (!isAudioNode(srcNode)) {
    if (isDefined(srcNode.output)) {
      srcNode = srcNode.output;
    }
  }
  if (isAudioParam(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber);
  } else if (isAudioNode(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber, inputNumber);
  } else {
    srcNode.disconnect();
  }
}
class Gain extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Gain.getDefaults(), arguments, ["gain", "units"]));
    this.name = "Gain";
    this._gainNode = this.context.createGain();
    this.input = this._gainNode;
    this.output = this._gainNode;
    const options = optionsFromArguments(Gain.getDefaults(), arguments, ["gain", "units"]);
    this.gain = new Param({
      context: this.context,
      convert: options.convert,
      param: this._gainNode.gain,
      units: options.units,
      value: options.gain,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    readOnly(this, "gain");
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      convert: true,
      gain: 1,
      units: "gain"
    });
  }
  dispose() {
    super.dispose();
    this._gainNode.disconnect();
    this.gain.dispose();
    return this;
  }
}
class OneShotSource extends ToneAudioNode {
  constructor(options) {
    super(options);
    this.onended = noOp;
    this._startTime = -1;
    this._stopTime = -1;
    this._timeout = -1;
    this.output = new Gain({
      context: this.context,
      gain: 0
    });
    this._gainNode = this.output;
    this.getStateAtTime = function(time) {
      const computedTime = this.toSeconds(time);
      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {
        return "started";
      } else {
        return "stopped";
      }
    };
    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
    this._curve = options.curve;
    this.onended = options.onended;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      curve: "linear",
      fadeIn: 0,
      fadeOut: 0,
      onended: noOp
    });
  }
  _startGain(time, gain = 1) {
    assert(this._startTime === -1, "Source cannot be started more than once");
    const fadeInTime = this.toSeconds(this._fadeIn);
    this._startTime = time + fadeInTime;
    this._startTime = Math.max(this._startTime, this.context.currentTime);
    if (fadeInTime > 0) {
      this._gainNode.gain.setValueAtTime(0, time);
      if (this._curve === "linear") {
        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);
      } else {
        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);
      }
    } else {
      this._gainNode.gain.setValueAtTime(gain, time);
    }
    return this;
  }
  stop(time) {
    this.log("stop", time);
    this._stopGain(this.toSeconds(time));
    return this;
  }
  _stopGain(time) {
    assert(this._startTime !== -1, "'start' must be called before 'stop'");
    this.cancelStop();
    const fadeOutTime = this.toSeconds(this._fadeOut);
    this._stopTime = this.toSeconds(time) + fadeOutTime;
    this._stopTime = Math.max(this._stopTime, this.context.currentTime);
    if (fadeOutTime > 0) {
      if (this._curve === "linear") {
        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);
      } else {
        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);
      }
    } else {
      this._gainNode.gain.cancelAndHoldAtTime(time);
      this._gainNode.gain.setValueAtTime(0, time);
    }
    this.context.clearTimeout(this._timeout);
    this._timeout = this.context.setTimeout(() => {
      const additionalTail = this._curve === "exponential" ? fadeOutTime * 2 : 0;
      this._stopSource(this.now() + additionalTail);
      this._onended();
    }, this._stopTime - this.context.currentTime);
    return this;
  }
  _onended() {
    if (this.onended !== noOp) {
      this.onended(this);
      this.onended = noOp;
      if (!this.context.isOffline) {
        const disposeCallback = () => this.dispose();
        if (typeof window.requestIdleCallback !== "undefined") {
          window.requestIdleCallback(disposeCallback);
        } else {
          setTimeout(disposeCallback, 1e3);
        }
      }
    }
  }
  get state() {
    return this.getStateAtTime(this.now());
  }
  cancelStop() {
    this.log("cancelStop");
    assert(this._startTime !== -1, "Source is not started");
    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);
    this.context.clearTimeout(this._timeout);
    this._stopTime = -1;
    return this;
  }
  dispose() {
    super.dispose();
    this._gainNode.disconnect();
    return this;
  }
}
class ToneConstantSource extends OneShotSource {
  constructor() {
    super(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, ["offset"]));
    this.name = "ToneConstantSource";
    this._source = this.context.createConstantSource();
    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, ["offset"]);
    connect(this._source, this._gainNode);
    this.offset = new Param({
      context: this.context,
      convert: options.convert,
      param: this._source.offset,
      units: options.units,
      value: options.offset,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
  }
  static getDefaults() {
    return Object.assign(OneShotSource.getDefaults(), {
      convert: true,
      offset: 1,
      units: "number"
    });
  }
  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);
    this._startGain(computedTime);
    this._source.start(computedTime);
    return this;
  }
  _stopSource(time) {
    this._source.stop(time);
  }
  dispose() {
    super.dispose();
    if (this.state === "started") {
      this.stop();
    }
    this._source.disconnect();
    this.offset.dispose();
    return this;
  }
}
class Signal extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Signal.getDefaults(), arguments, ["value", "units"]));
    this.name = "Signal";
    this.override = true;
    const options = optionsFromArguments(Signal.getDefaults(), arguments, ["value", "units"]);
    this.output = this._constantSource = new ToneConstantSource({
      context: this.context,
      convert: options.convert,
      offset: options.value,
      units: options.units,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    this._constantSource.start(0);
    this.input = this._param = this._constantSource.offset;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      convert: true,
      units: "number",
      value: 0
    });
  }
  connect(destination, outputNum = 0, inputNum = 0) {
    connectSignal(this, destination, outputNum, inputNum);
    return this;
  }
  dispose() {
    super.dispose();
    this._param.dispose();
    this._constantSource.dispose();
    return this;
  }
  setValueAtTime(value2, time) {
    this._param.setValueAtTime(value2, time);
    return this;
  }
  getValueAtTime(time) {
    return this._param.getValueAtTime(time);
  }
  setRampPoint(time) {
    this._param.setRampPoint(time);
    return this;
  }
  linearRampToValueAtTime(value2, time) {
    this._param.linearRampToValueAtTime(value2, time);
    return this;
  }
  exponentialRampToValueAtTime(value2, time) {
    this._param.exponentialRampToValueAtTime(value2, time);
    return this;
  }
  exponentialRampTo(value2, rampTime, startTime) {
    this._param.exponentialRampTo(value2, rampTime, startTime);
    return this;
  }
  linearRampTo(value2, rampTime, startTime) {
    this._param.linearRampTo(value2, rampTime, startTime);
    return this;
  }
  targetRampTo(value2, rampTime, startTime) {
    this._param.targetRampTo(value2, rampTime, startTime);
    return this;
  }
  exponentialApproachValueAtTime(value2, time, rampTime) {
    this._param.exponentialApproachValueAtTime(value2, time, rampTime);
    return this;
  }
  setTargetAtTime(value2, startTime, timeConstant) {
    this._param.setTargetAtTime(value2, startTime, timeConstant);
    return this;
  }
  setValueCurveAtTime(values, startTime, duration, scaling) {
    this._param.setValueCurveAtTime(values, startTime, duration, scaling);
    return this;
  }
  cancelScheduledValues(time) {
    this._param.cancelScheduledValues(time);
    return this;
  }
  cancelAndHoldAtTime(time) {
    this._param.cancelAndHoldAtTime(time);
    return this;
  }
  rampTo(value2, rampTime, startTime) {
    this._param.rampTo(value2, rampTime, startTime);
    return this;
  }
  get value() {
    return this._param.value;
  }
  set value(value2) {
    this._param.value = value2;
  }
  get convert() {
    return this._param.convert;
  }
  set convert(convert) {
    this._param.convert = convert;
  }
  get units() {
    return this._param.units;
  }
  get overridden() {
    return this._param.overridden;
  }
  set overridden(overridden) {
    this._param.overridden = overridden;
  }
  get maxValue() {
    return this._param.maxValue;
  }
  get minValue() {
    return this._param.minValue;
  }
  apply(param) {
    this._param.apply(param);
    return this;
  }
}
function connectSignal(signal, destination, outputNum, inputNum) {
  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {
    destination.cancelScheduledValues(0);
    destination.setValueAtTime(0, 0);
    if (destination instanceof Signal) {
      destination.overridden = true;
    }
  }
  connect(signal, destination, outputNum, inputNum);
}
class TickParam extends Param {
  constructor() {
    super(optionsFromArguments(TickParam.getDefaults(), arguments, ["value"]));
    this.name = "TickParam";
    this._events = new Timeline(Infinity);
    this._multiplier = 1;
    const options = optionsFromArguments(TickParam.getDefaults(), arguments, ["value"]);
    this._multiplier = options.multiplier;
    this._events.cancel(0);
    this._events.add({
      ticks: 0,
      time: 0,
      type: "setValueAtTime",
      value: this._fromType(options.value)
    });
    this.setValueAtTime(options.value, 0);
  }
  static getDefaults() {
    return Object.assign(Param.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }
  setTargetAtTime(value2, time, constant) {
    time = this.toSeconds(time);
    this.setRampPoint(time);
    const computedValue = this._fromType(value2);
    const prevEvent = this._events.get(time);
    const segments = Math.round(Math.max(1 / constant, 1));
    for (let i2 = 0; i2 <= segments; i2++) {
      const segTime = constant * i2 + time;
      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);
      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }
    return this;
  }
  setValueAtTime(value2, time) {
    const computedTime = this.toSeconds(time);
    super.setValueAtTime(value2, time);
    const event = this._events.get(computedTime);
    const previousEvent = this._events.previousEvent(event);
    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);
    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }
  linearRampToValueAtTime(value2, time) {
    const computedTime = this.toSeconds(time);
    super.linearRampToValueAtTime(value2, time);
    const event = this._events.get(computedTime);
    const previousEvent = this._events.previousEvent(event);
    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);
    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }
  exponentialRampToValueAtTime(value2, time) {
    time = this.toSeconds(time);
    const computedVal = this._fromType(value2);
    const prevEvent = this._events.get(time);
    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));
    const segmentDur = (time - prevEvent.time) / segments;
    for (let i2 = 0; i2 <= segments; i2++) {
      const segTime = segmentDur * i2 + prevEvent.time;
      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);
      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }
    return this;
  }
  _getTicksUntilEvent(event, time) {
    if (event === null) {
      event = {
        ticks: 0,
        time: 0,
        type: "setValueAtTime",
        value: 0
      };
    } else if (isUndef(event.ticks)) {
      const previousEvent = this._events.previousEvent(event);
      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);
    }
    const val0 = this._fromType(this.getValueAtTime(event.time));
    let val1 = this._fromType(this.getValueAtTime(time));
    const onTheLineEvent = this._events.get(time);
    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === "setValueAtTime") {
      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));
    }
    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;
  }
  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);
    const event = this._events.get(computedTime);
    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);
  }
  getDurationOfTicks(ticks, time) {
    const computedTime = this.toSeconds(time);
    const currentTick = this.getTicksAtTime(time);
    return this.getTimeOfTick(currentTick + ticks) - computedTime;
  }
  getTimeOfTick(tick) {
    const before = this._events.get(tick, "ticks");
    const after = this._events.getAfter(tick, "ticks");
    if (before && before.ticks === tick) {
      return before.time;
    } else if (before && after && after.type === "linearRampToValueAtTime" && before.value !== after.value) {
      const val0 = this._fromType(this.getValueAtTime(before.time));
      const val1 = this._fromType(this.getValueAtTime(after.time));
      const delta = (val1 - val0) / (after.time - before.time);
      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));
      const sol1 = (-val0 + k) / delta;
      const sol2 = (-val0 - k) / delta;
      return (sol1 > 0 ? sol1 : sol2) + before.time;
    } else if (before) {
      if (before.value === 0) {
        return Infinity;
      } else {
        return before.time + (tick - before.ticks) / before.value;
      }
    } else {
      return tick / this._initialValue;
    }
  }
  ticksToTime(ticks, when) {
    return this.getDurationOfTicks(ticks, when);
  }
  timeToTicks(duration, when) {
    const computedTime = this.toSeconds(when);
    const computedDuration = this.toSeconds(duration);
    const startTicks = this.getTicksAtTime(computedTime);
    const endTicks = this.getTicksAtTime(computedTime + computedDuration);
    return endTicks - startTicks;
  }
  _fromType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return 1 / (60 / val / this.multiplier);
    } else {
      return super._fromType(val);
    }
  }
  _toType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return val / this.multiplier * 60;
    } else {
      return super._toType(val);
    }
  }
  get multiplier() {
    return this._multiplier;
  }
  set multiplier(m) {
    const currentVal = this.value;
    this._multiplier = m;
    this.cancelScheduledValues(0);
    this.setValueAtTime(currentVal, 0);
  }
}
class TickSignal extends Signal {
  constructor() {
    super(optionsFromArguments(TickSignal.getDefaults(), arguments, ["value"]));
    this.name = "TickSignal";
    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, ["value"]);
    this.input = this._param = new TickParam({
      context: this.context,
      convert: options.convert,
      multiplier: options.multiplier,
      param: this._constantSource.offset,
      units: options.units,
      value: options.value
    });
  }
  static getDefaults() {
    return Object.assign(Signal.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }
  ticksToTime(ticks, when) {
    return this._param.ticksToTime(ticks, when);
  }
  timeToTicks(duration, when) {
    return this._param.timeToTicks(duration, when);
  }
  getTimeOfTick(tick) {
    return this._param.getTimeOfTick(tick);
  }
  getDurationOfTicks(ticks, time) {
    return this._param.getDurationOfTicks(ticks, time);
  }
  getTicksAtTime(time) {
    return this._param.getTicksAtTime(time);
  }
  get multiplier() {
    return this._param.multiplier;
  }
  set multiplier(m) {
    this._param.multiplier = m;
  }
  dispose() {
    super.dispose();
    this._param.dispose();
    return this;
  }
}
class TickSource extends ToneWithContext {
  constructor() {
    super(optionsFromArguments(TickSource.getDefaults(), arguments, ["frequency"]));
    this.name = "TickSource";
    this._state = new StateTimeline();
    this._tickOffset = new Timeline();
    const options = optionsFromArguments(TickSource.getDefaults(), arguments, ["frequency"]);
    this.frequency = new TickSignal({
      context: this.context,
      units: options.units,
      value: options.frequency
    });
    readOnly(this, "frequency");
    this._state.setStateAtTime("stopped", 0);
    this.setTicksAtTime(0, 0);
  }
  static getDefaults() {
    return Object.assign({
      frequency: 1,
      units: "hertz"
    }, ToneWithContext.getDefaults());
  }
  get state() {
    return this.getStateAtTime(this.now());
  }
  start(time, offset) {
    const computedTime = this.toSeconds(time);
    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);
      if (isDefined(offset)) {
        this.setTicksAtTime(offset, computedTime);
      }
    }
    return this;
  }
  stop(time) {
    const computedTime = this.toSeconds(time);
    if (this._state.getValueAtTime(computedTime) === "stopped") {
      const event = this._state.get(computedTime);
      if (event && event.time > 0) {
        this._tickOffset.cancel(event.time);
        this._state.cancel(event.time);
      }
    }
    this._state.cancel(computedTime);
    this._state.setStateAtTime("stopped", computedTime);
    this.setTicksAtTime(0, computedTime);
    return this;
  }
  pause(time) {
    const computedTime = this.toSeconds(time);
    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);
    }
    return this;
  }
  cancel(time) {
    time = this.toSeconds(time);
    this._state.cancel(time);
    this._tickOffset.cancel(time);
    return this;
  }
  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);
    const stopEvent = this._state.getLastState("stopped", computedTime);
    const tmpEvent = { state: "paused", time: computedTime };
    this._state.add(tmpEvent);
    let lastState = stopEvent;
    let elapsedTicks = 0;
    this._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, (e) => {
      let periodStartTime = lastState.time;
      const offsetEvent = this._tickOffset.get(e.time);
      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedTicks = offsetEvent.ticks;
        periodStartTime = offsetEvent.time;
      }
      if (lastState.state === "started" && e.state !== "started") {
        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);
      }
      lastState = e;
    });
    this._state.remove(tmpEvent);
    return elapsedTicks;
  }
  get ticks() {
    return this.getTicksAtTime(this.now());
  }
  set ticks(t) {
    this.setTicksAtTime(t, this.now());
  }
  get seconds() {
    return this.getSecondsAtTime(this.now());
  }
  set seconds(s) {
    const now = this.now();
    const ticks = this.frequency.timeToTicks(s, now);
    this.setTicksAtTime(ticks, now);
  }
  getSecondsAtTime(time) {
    time = this.toSeconds(time);
    const stopEvent = this._state.getLastState("stopped", time);
    const tmpEvent = { state: "paused", time };
    this._state.add(tmpEvent);
    let lastState = stopEvent;
    let elapsedSeconds = 0;
    this._state.forEachBetween(stopEvent.time, time + this.sampleTime, (e) => {
      let periodStartTime = lastState.time;
      const offsetEvent = this._tickOffset.get(e.time);
      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedSeconds = offsetEvent.seconds;
        periodStartTime = offsetEvent.time;
      }
      if (lastState.state === "started" && e.state !== "started") {
        elapsedSeconds += e.time - periodStartTime;
      }
      lastState = e;
    });
    this._state.remove(tmpEvent);
    return elapsedSeconds;
  }
  setTicksAtTime(ticks, time) {
    time = this.toSeconds(time);
    this._tickOffset.cancel(time);
    this._tickOffset.add({
      seconds: this.frequency.getDurationOfTicks(ticks, time),
      ticks,
      time
    });
    return this;
  }
  getStateAtTime(time) {
    time = this.toSeconds(time);
    return this._state.getValueAtTime(time);
  }
  getTimeOfTick(tick, before = this.now()) {
    const offset = this._tickOffset.get(before);
    const event = this._state.get(before);
    const startTime = Math.max(offset.time, event.time);
    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;
    return this.frequency.getTimeOfTick(absoluteTicks);
  }
  forEachTickBetween(startTime, endTime, callback) {
    let lastStateEvent = this._state.get(startTime);
    this._state.forEachBetween(startTime, endTime, (event) => {
      if (lastStateEvent && lastStateEvent.state === "started" && event.state !== "started") {
        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);
      }
      lastStateEvent = event;
    });
    let error = null;
    if (lastStateEvent && lastStateEvent.state === "started") {
      const maxStartTime = Math.max(lastStateEvent.time, startTime);
      const startTicks = this.frequency.getTicksAtTime(maxStartTime);
      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);
      const diff = startTicks - ticksAtStart;
      let offset = Math.ceil(diff) - diff;
      offset = EQ(offset, 1) ? 0 : offset;
      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);
      while (nextTickTime < endTime) {
        try {
          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));
        } catch (e) {
          error = e;
          break;
        }
        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);
      }
    }
    if (error) {
      throw error;
    }
    return this;
  }
  dispose() {
    super.dispose();
    this._state.dispose();
    this._tickOffset.dispose();
    this.frequency.dispose();
    return this;
  }
}
class Clock extends ToneWithContext {
  constructor() {
    super(optionsFromArguments(Clock.getDefaults(), arguments, ["callback", "frequency"]));
    this.name = "Clock";
    this.callback = noOp;
    this._lastUpdate = 0;
    this._state = new StateTimeline("stopped");
    this._boundLoop = this._loop.bind(this);
    const options = optionsFromArguments(Clock.getDefaults(), arguments, ["callback", "frequency"]);
    this.callback = options.callback;
    this._tickSource = new TickSource({
      context: this.context,
      frequency: options.frequency,
      units: options.units
    });
    this._lastUpdate = 0;
    this.frequency = this._tickSource.frequency;
    readOnly(this, "frequency");
    this._state.setStateAtTime("stopped", 0);
    this.context.on("tick", this._boundLoop);
  }
  static getDefaults() {
    return Object.assign(ToneWithContext.getDefaults(), {
      callback: noOp,
      frequency: 1,
      units: "hertz"
    });
  }
  get state() {
    return this._state.getValueAtTime(this.now());
  }
  start(time, offset) {
    assertContextRunning(this.context);
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);
    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);
      this._tickSource.start(computedTime, offset);
      if (computedTime < this._lastUpdate) {
        this.emit("start", computedTime, offset);
      }
    }
    return this;
  }
  stop(time) {
    const computedTime = this.toSeconds(time);
    this.log("stop", computedTime);
    this._state.cancel(computedTime);
    this._state.setStateAtTime("stopped", computedTime);
    this._tickSource.stop(computedTime);
    if (computedTime < this._lastUpdate) {
      this.emit("stop", computedTime);
    }
    return this;
  }
  pause(time) {
    const computedTime = this.toSeconds(time);
    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);
      this._tickSource.pause(computedTime);
      if (computedTime < this._lastUpdate) {
        this.emit("pause", computedTime);
      }
    }
    return this;
  }
  get ticks() {
    return Math.ceil(this.getTicksAtTime(this.now()));
  }
  set ticks(t) {
    this._tickSource.ticks = t;
  }
  get seconds() {
    return this._tickSource.seconds;
  }
  set seconds(s) {
    this._tickSource.seconds = s;
  }
  getSecondsAtTime(time) {
    return this._tickSource.getSecondsAtTime(time);
  }
  setTicksAtTime(ticks, time) {
    this._tickSource.setTicksAtTime(ticks, time);
    return this;
  }
  getTimeOfTick(tick, before = this.now()) {
    return this._tickSource.getTimeOfTick(tick, before);
  }
  getTicksAtTime(time) {
    return this._tickSource.getTicksAtTime(time);
  }
  nextTickTime(offset, when) {
    const computedTime = this.toSeconds(when);
    const currentTick = this.getTicksAtTime(computedTime);
    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);
  }
  _loop() {
    const startTime = this._lastUpdate;
    const endTime = this.now();
    this._lastUpdate = endTime;
    this.log("loop", startTime, endTime);
    if (startTime !== endTime) {
      this._state.forEachBetween(startTime, endTime, (e) => {
        switch (e.state) {
          case "started":
            const offset = this._tickSource.getTicksAtTime(e.time);
            this.emit("start", e.time, offset);
            break;
          case "stopped":
            if (e.time !== 0) {
              this.emit("stop", e.time);
            }
            break;
          case "paused":
            this.emit("pause", e.time);
            break;
        }
      });
      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {
        this.callback(time, ticks);
      });
    }
  }
  getStateAtTime(time) {
    const computedTime = this.toSeconds(time);
    return this._state.getValueAtTime(computedTime);
  }
  dispose() {
    super.dispose();
    this.context.off("tick", this._boundLoop);
    this._tickSource.dispose();
    this._state.dispose();
    return this;
  }
}
Emitter$1.mixin(Clock);
class ToneAudioBuffers extends Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffers";
    this._buffers = /* @__PURE__ */ new Map();
    this._loadingCount = 0;
    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    this.baseUrl = options.baseUrl;
    Object.keys(options.urls).forEach((name) => {
      this._loadingCount++;
      const url2 = options.urls[name];
      this.add(name, url2, this._bufferLoaded.bind(this, options.onload), options.onerror);
    });
  }
  static getDefaults() {
    return {
      baseUrl: "",
      onerror: noOp,
      onload: noOp,
      urls: {}
    };
  }
  has(name) {
    return this._buffers.has(name.toString());
  }
  get(name) {
    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);
    return this._buffers.get(name.toString());
  }
  _bufferLoaded(callback) {
    this._loadingCount--;
    if (this._loadingCount === 0 && callback) {
      callback();
    }
  }
  get loaded() {
    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);
  }
  add(name, url2, callback = noOp, onerror = noOp) {
    if (isString(url2)) {
      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url2, callback, onerror));
    } else {
      this._buffers.set(name.toString(), new ToneAudioBuffer(url2, callback, onerror));
    }
    return this;
  }
  dispose() {
    super.dispose();
    this._buffers.forEach((buffer) => buffer.dispose());
    this._buffers.clear();
    return this;
  }
}
class MidiClass extends FrequencyClass {
  constructor() {
    super(...arguments);
    this.name = "MidiClass";
    this.defaultUnits = "midi";
  }
  _frequencyToUnits(freq) {
    return ftom(super._frequencyToUnits(freq));
  }
  _ticksToUnits(ticks) {
    return ftom(super._ticksToUnits(ticks));
  }
  _beatsToUnits(beats) {
    return ftom(super._beatsToUnits(beats));
  }
  _secondsToUnits(seconds) {
    return ftom(super._secondsToUnits(seconds));
  }
  toMidi() {
    return this.valueOf();
  }
  toFrequency() {
    return mtof(this.toMidi());
  }
  transpose(interval) {
    return new MidiClass(this.context, this.toMidi() + interval);
  }
}
class TicksClass extends TransportTimeClass {
  constructor() {
    super(...arguments);
    this.name = "Ticks";
    this.defaultUnits = "i";
  }
  _now() {
    return this.context.transport.ticks;
  }
  _beatsToUnits(beats) {
    return this._getPPQ() * beats;
  }
  _secondsToUnits(seconds) {
    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());
  }
  _ticksToUnits(ticks) {
    return ticks;
  }
  toTicks() {
    return this.valueOf();
  }
  toSeconds() {
    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
  }
}
class Draw extends ToneWithContext {
  constructor() {
    super(...arguments);
    this.name = "Draw";
    this.expiration = 0.25;
    this.anticipation = 8e-3;
    this._events = new Timeline();
    this._boundDrawLoop = this._drawLoop.bind(this);
    this._animationFrame = -1;
  }
  schedule(callback, time) {
    this._events.add({
      callback,
      time: this.toSeconds(time)
    });
    if (this._events.length === 1) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }
    return this;
  }
  cancel(after) {
    this._events.cancel(this.toSeconds(after));
    return this;
  }
  _drawLoop() {
    const now = this.context.currentTime;
    while (this._events.length && this._events.peek().time - this.anticipation <= now) {
      const event = this._events.shift();
      if (event && now - event.time <= this.expiration) {
        event.callback();
      }
    }
    if (this._events.length > 0) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }
  }
  dispose() {
    super.dispose();
    this._events.dispose();
    cancelAnimationFrame(this._animationFrame);
    return this;
  }
}
onContextInit((context) => {
  context.draw = new Draw({ context });
});
onContextClose((context) => {
  context.draw.dispose();
});
class IntervalTimeline extends Tone {
  constructor() {
    super(...arguments);
    this.name = "IntervalTimeline";
    this._root = null;
    this._length = 0;
  }
  add(event) {
    assert(isDefined(event.time), "Events must have a time property");
    assert(isDefined(event.duration), "Events must have a duration parameter");
    event.time = event.time.valueOf();
    let node = new IntervalNode(event.time, event.time + event.duration, event);
    if (this._root === null) {
      this._root = node;
    } else {
      this._root.insert(node);
    }
    this._length++;
    while (node !== null) {
      node.updateHeight();
      node.updateMax();
      this._rebalance(node);
      node = node.parent;
    }
    return this;
  }
  remove(event) {
    if (this._root !== null) {
      const results = [];
      this._root.search(event.time, results);
      for (const node of results) {
        if (node.event === event) {
          this._removeNode(node);
          this._length--;
          break;
        }
      }
    }
    return this;
  }
  get length() {
    return this._length;
  }
  cancel(after) {
    this.forEachFrom(after, (event) => this.remove(event));
    return this;
  }
  _setRoot(node) {
    this._root = node;
    if (this._root !== null) {
      this._root.parent = null;
    }
  }
  _replaceNodeInParent(node, replacement) {
    if (node.parent !== null) {
      if (node.isLeftChild()) {
        node.parent.left = replacement;
      } else {
        node.parent.right = replacement;
      }
      this._rebalance(node.parent);
    } else {
      this._setRoot(replacement);
    }
  }
  _removeNode(node) {
    if (node.left === null && node.right === null) {
      this._replaceNodeInParent(node, null);
    } else if (node.right === null) {
      this._replaceNodeInParent(node, node.left);
    } else if (node.left === null) {
      this._replaceNodeInParent(node, node.right);
    } else {
      const balance = node.getBalance();
      let replacement;
      let temp = null;
      if (balance > 0) {
        if (node.left.right === null) {
          replacement = node.left;
          replacement.right = node.right;
          temp = replacement;
        } else {
          replacement = node.left.right;
          while (replacement.right !== null) {
            replacement = replacement.right;
          }
          if (replacement.parent) {
            replacement.parent.right = replacement.left;
            temp = replacement.parent;
            replacement.left = node.left;
            replacement.right = node.right;
          }
        }
      } else if (node.right.left === null) {
        replacement = node.right;
        replacement.left = node.left;
        temp = replacement;
      } else {
        replacement = node.right.left;
        while (replacement.left !== null) {
          replacement = replacement.left;
        }
        if (replacement.parent) {
          replacement.parent.left = replacement.right;
          temp = replacement.parent;
          replacement.left = node.left;
          replacement.right = node.right;
        }
      }
      if (node.parent !== null) {
        if (node.isLeftChild()) {
          node.parent.left = replacement;
        } else {
          node.parent.right = replacement;
        }
      } else {
        this._setRoot(replacement);
      }
      if (temp) {
        this._rebalance(temp);
      }
    }
    node.dispose();
  }
  _rotateLeft(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild();
    const pivotNode = node.right;
    if (pivotNode) {
      node.right = pivotNode.left;
      pivotNode.left = node;
    }
    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  _rotateRight(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild();
    const pivotNode = node.left;
    if (pivotNode) {
      node.left = pivotNode.right;
      pivotNode.right = node;
    }
    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  _rebalance(node) {
    const balance = node.getBalance();
    if (balance > 1 && node.left) {
      if (node.left.getBalance() < 0) {
        this._rotateLeft(node.left);
      } else {
        this._rotateRight(node);
      }
    } else if (balance < -1 && node.right) {
      if (node.right.getBalance() > 0) {
        this._rotateRight(node.right);
      } else {
        this._rotateLeft(node);
      }
    }
  }
  get(time) {
    if (this._root !== null) {
      const results = [];
      this._root.search(time, results);
      if (results.length > 0) {
        let max = results[0];
        for (let i2 = 1; i2 < results.length; i2++) {
          if (results[i2].low > max.low) {
            max = results[i2];
          }
        }
        return max.event;
      }
    }
    return null;
  }
  forEach(callback) {
    if (this._root !== null) {
      const allNodes = [];
      this._root.traverse((node) => allNodes.push(node));
      allNodes.forEach((node) => {
        if (node.event) {
          callback(node.event);
        }
      });
    }
    return this;
  }
  forEachAtTime(time, callback) {
    if (this._root !== null) {
      const results = [];
      this._root.search(time, results);
      results.forEach((node) => {
        if (node.event) {
          callback(node.event);
        }
      });
    }
    return this;
  }
  forEachFrom(time, callback) {
    if (this._root !== null) {
      const results = [];
      this._root.searchAfter(time, results);
      results.forEach((node) => {
        if (node.event) {
          callback(node.event);
        }
      });
    }
    return this;
  }
  dispose() {
    super.dispose();
    if (this._root !== null) {
      this._root.traverse((node) => node.dispose());
    }
    this._root = null;
    return this;
  }
}
class IntervalNode {
  constructor(low, high, event) {
    this._left = null;
    this._right = null;
    this.parent = null;
    this.height = 0;
    this.event = event;
    this.low = low;
    this.high = high;
    this.max = this.high;
  }
  insert(node) {
    if (node.low <= this.low) {
      if (this.left === null) {
        this.left = node;
      } else {
        this.left.insert(node);
      }
    } else if (this.right === null) {
      this.right = node;
    } else {
      this.right.insert(node);
    }
  }
  search(point, results) {
    if (point > this.max) {
      return;
    }
    if (this.left !== null) {
      this.left.search(point, results);
    }
    if (this.low <= point && this.high > point) {
      results.push(this);
    }
    if (this.low > point) {
      return;
    }
    if (this.right !== null) {
      this.right.search(point, results);
    }
  }
  searchAfter(point, results) {
    if (this.low >= point) {
      results.push(this);
      if (this.left !== null) {
        this.left.searchAfter(point, results);
      }
    }
    if (this.right !== null) {
      this.right.searchAfter(point, results);
    }
  }
  traverse(callback) {
    callback(this);
    if (this.left !== null) {
      this.left.traverse(callback);
    }
    if (this.right !== null) {
      this.right.traverse(callback);
    }
  }
  updateHeight() {
    if (this.left !== null && this.right !== null) {
      this.height = Math.max(this.left.height, this.right.height) + 1;
    } else if (this.right !== null) {
      this.height = this.right.height + 1;
    } else if (this.left !== null) {
      this.height = this.left.height + 1;
    } else {
      this.height = 0;
    }
  }
  updateMax() {
    this.max = this.high;
    if (this.left !== null) {
      this.max = Math.max(this.max, this.left.max);
    }
    if (this.right !== null) {
      this.max = Math.max(this.max, this.right.max);
    }
  }
  getBalance() {
    let balance = 0;
    if (this.left !== null && this.right !== null) {
      balance = this.left.height - this.right.height;
    } else if (this.left !== null) {
      balance = this.left.height + 1;
    } else if (this.right !== null) {
      balance = -(this.right.height + 1);
    }
    return balance;
  }
  isLeftChild() {
    return this.parent !== null && this.parent.left === this;
  }
  get left() {
    return this._left;
  }
  set left(node) {
    this._left = node;
    if (node !== null) {
      node.parent = this;
    }
    this.updateHeight();
    this.updateMax();
  }
  get right() {
    return this._right;
  }
  set right(node) {
    this._right = node;
    if (node !== null) {
      node.parent = this;
    }
    this.updateHeight();
    this.updateMax();
  }
  dispose() {
    this.parent = null;
    this._left = null;
    this._right = null;
    this.event = null;
  }
}
class Volume extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Volume.getDefaults(), arguments, ["volume"]));
    this.name = "Volume";
    const options = optionsFromArguments(Volume.getDefaults(), arguments, ["volume"]);
    this.input = this.output = new Gain({
      context: this.context,
      gain: options.volume,
      units: "decibels"
    });
    this.volume = this.output.gain;
    readOnly(this, "volume");
    this._unmutedVolume = options.volume;
    this.mute = options.mute;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  get mute() {
    return this.volume.value === -Infinity;
  }
  set mute(mute) {
    if (!this.mute && mute) {
      this._unmutedVolume = this.volume.value;
      this.volume.value = -Infinity;
    } else if (this.mute && !mute) {
      this.volume.value = this._unmutedVolume;
    }
  }
  dispose() {
    super.dispose();
    this.input.dispose();
    this.volume.dispose();
    return this;
  }
}
class Destination extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Destination.getDefaults(), arguments));
    this.name = "Destination";
    this.input = new Volume({ context: this.context });
    this.output = new Gain({ context: this.context });
    this.volume = this.input.volume;
    const options = optionsFromArguments(Destination.getDefaults(), arguments);
    connectSeries(this.input, this.output, this.context.rawContext.destination);
    this.mute = options.mute;
    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  get mute() {
    return this.input.mute;
  }
  set mute(mute) {
    this.input.mute = mute;
  }
  chain(...args) {
    this.input.disconnect();
    args.unshift(this.input);
    args.push(this.output);
    connectSeries(...args);
    return this;
  }
  get maxChannelCount() {
    return this.context.rawContext.destination.maxChannelCount;
  }
  dispose() {
    super.dispose();
    this.volume.dispose();
    return this;
  }
}
onContextInit((context) => {
  context.destination = new Destination({ context });
});
onContextClose((context) => {
  context.destination.dispose();
});
class TimelineValue extends Tone {
  constructor(initialValue) {
    super();
    this.name = "TimelineValue";
    this._timeline = new Timeline({ memory: 10 });
    this._initialValue = initialValue;
  }
  set(value2, time) {
    this._timeline.add({
      value: value2,
      time
    });
    return this;
  }
  get(time) {
    const event = this._timeline.get(time);
    if (event) {
      return event.value;
    } else {
      return this._initialValue;
    }
  }
}
class TransportEvent {
  constructor(transport, opts) {
    this.id = TransportEvent._eventId++;
    const options = Object.assign(TransportEvent.getDefaults(), opts);
    this.transport = transport;
    this.callback = options.callback;
    this._once = options.once;
    this.time = options.time;
  }
  static getDefaults() {
    return {
      callback: noOp,
      once: false,
      time: 0
    };
  }
  invoke(time) {
    if (this.callback) {
      this.callback(time);
      if (this._once) {
        this.transport.clear(this.id);
      }
    }
  }
  dispose() {
    this.callback = void 0;
    return this;
  }
}
TransportEvent._eventId = 0;
class TransportRepeatEvent extends TransportEvent {
  constructor(transport, opts) {
    super(transport, opts);
    this._currentId = -1;
    this._nextId = -1;
    this._nextTick = this.time;
    this._boundRestart = this._restart.bind(this);
    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);
    this.duration = new TicksClass(transport.context, options.duration).valueOf();
    this._interval = new TicksClass(transport.context, options.interval).valueOf();
    this._nextTick = options.time;
    this.transport.on("start", this._boundRestart);
    this.transport.on("loopStart", this._boundRestart);
    this.context = this.transport.context;
    this._restart();
  }
  static getDefaults() {
    return Object.assign({}, TransportEvent.getDefaults(), {
      duration: Infinity,
      interval: 1,
      once: false
    });
  }
  invoke(time) {
    this._createEvents(time);
    super.invoke(time);
  }
  _createEvents(time) {
    const ticks = this.transport.getTicksAtTime(time);
    if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {
      this._nextTick += this._interval;
      this._currentId = this._nextId;
      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());
    }
  }
  _restart(time) {
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this._nextTick = this.time;
    const ticks = this.transport.getTicksAtTime(time);
    if (ticks > this.time) {
      this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;
    }
    this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());
    this._nextTick += this._interval;
    this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());
  }
  dispose() {
    super.dispose();
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this.transport.off("start", this._boundRestart);
    this.transport.off("loopStart", this._boundRestart);
    return this;
  }
}
let Transport$1 = class Transport extends ToneWithContext {
  constructor() {
    super(optionsFromArguments(Transport$1.getDefaults(), arguments));
    this.name = "Transport";
    this._loop = new TimelineValue(false);
    this._loopStart = 0;
    this._loopEnd = 0;
    this._scheduledEvents = {};
    this._timeline = new Timeline();
    this._repeatedEvents = new IntervalTimeline();
    this._syncedSignals = [];
    this._swingAmount = 0;
    const options = optionsFromArguments(Transport$1.getDefaults(), arguments);
    this._ppq = options.ppq;
    this._clock = new Clock({
      callback: this._processTick.bind(this),
      context: this.context,
      frequency: 0,
      units: "bpm"
    });
    this._bindClockEvents();
    this.bpm = this._clock.frequency;
    this._clock.frequency.multiplier = options.ppq;
    this.bpm.setValueAtTime(options.bpm, 0);
    readOnly(this, "bpm");
    this._timeSignature = options.timeSignature;
    this._swingTicks = options.ppq / 2;
  }
  static getDefaults() {
    return Object.assign(ToneWithContext.getDefaults(), {
      bpm: 120,
      loopEnd: "4m",
      loopStart: 0,
      ppq: 192,
      swing: 0,
      swingSubdivision: "8n",
      timeSignature: 4
    });
  }
  _processTick(tickTime, ticks) {
    if (this._loop.get(tickTime)) {
      if (ticks >= this._loopEnd) {
        this.emit("loopEnd", tickTime);
        this._clock.setTicksAtTime(this._loopStart, tickTime);
        ticks = this._loopStart;
        this.emit("loopStart", tickTime, this._clock.getSecondsAtTime(tickTime));
        this.emit("loop", tickTime);
      }
    }
    if (this._swingAmount > 0 && ticks % this._ppq !== 0 && ticks % (this._swingTicks * 2) !== 0) {
      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);
      const amount = Math.sin(progress * Math.PI) * this._swingAmount;
      tickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;
    }
    this._timeline.forEachAtTime(ticks, (event) => event.invoke(tickTime));
  }
  schedule(callback, time) {
    const event = new TransportEvent(this, {
      callback,
      time: new TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  scheduleRepeat(callback, interval, startTime, duration = Infinity) {
    const event = new TransportRepeatEvent(this, {
      callback,
      duration: new TimeClass(this.context, duration).toTicks(),
      interval: new TimeClass(this.context, interval).toTicks(),
      time: new TransportTimeClass(this.context, startTime).toTicks()
    });
    return this._addEvent(event, this._repeatedEvents);
  }
  scheduleOnce(callback, time) {
    const event = new TransportEvent(this, {
      callback,
      once: true,
      time: new TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  clear(eventId) {
    if (this._scheduledEvents.hasOwnProperty(eventId)) {
      const item = this._scheduledEvents[eventId.toString()];
      item.timeline.remove(item.event);
      item.event.dispose();
      delete this._scheduledEvents[eventId.toString()];
    }
    return this;
  }
  _addEvent(event, timeline) {
    this._scheduledEvents[event.id.toString()] = {
      event,
      timeline
    };
    timeline.add(event);
    return event.id;
  }
  cancel(after = 0) {
    const computedAfter = this.toTicks(after);
    this._timeline.forEachFrom(computedAfter, (event) => this.clear(event.id));
    this._repeatedEvents.forEachFrom(computedAfter, (event) => this.clear(event.id));
    return this;
  }
  _bindClockEvents() {
    this._clock.on("start", (time, offset) => {
      offset = new TicksClass(this.context, offset).toSeconds();
      this.emit("start", time, offset);
    });
    this._clock.on("stop", (time) => {
      this.emit("stop", time);
    });
    this._clock.on("pause", (time) => {
      this.emit("pause", time);
    });
  }
  get state() {
    return this._clock.getStateAtTime(this.now());
  }
  start(time, offset) {
    let offsetTicks;
    if (isDefined(offset)) {
      offsetTicks = this.toTicks(offset);
    }
    this._clock.start(time, offsetTicks);
    return this;
  }
  stop(time) {
    this._clock.stop(time);
    return this;
  }
  pause(time) {
    this._clock.pause(time);
    return this;
  }
  toggle(time) {
    time = this.toSeconds(time);
    if (this._clock.getStateAtTime(time) !== "started") {
      this.start(time);
    } else {
      this.stop(time);
    }
    return this;
  }
  get timeSignature() {
    return this._timeSignature;
  }
  set timeSignature(timeSig) {
    if (isArray(timeSig)) {
      timeSig = timeSig[0] / timeSig[1] * 4;
    }
    this._timeSignature = timeSig;
  }
  get loopStart() {
    return new TimeClass(this.context, this._loopStart, "i").toSeconds();
  }
  set loopStart(startPosition) {
    this._loopStart = this.toTicks(startPosition);
  }
  get loopEnd() {
    return new TimeClass(this.context, this._loopEnd, "i").toSeconds();
  }
  set loopEnd(endPosition) {
    this._loopEnd = this.toTicks(endPosition);
  }
  get loop() {
    return this._loop.get(this.now());
  }
  set loop(loop) {
    this._loop.set(loop, this.now());
  }
  setLoopPoints(startPosition, endPosition) {
    this.loopStart = startPosition;
    this.loopEnd = endPosition;
    return this;
  }
  get swing() {
    return this._swingAmount;
  }
  set swing(amount) {
    this._swingAmount = amount;
  }
  get swingSubdivision() {
    return new TicksClass(this.context, this._swingTicks).toNotation();
  }
  set swingSubdivision(subdivision) {
    this._swingTicks = this.toTicks(subdivision);
  }
  get position() {
    const now = this.now();
    const ticks = this._clock.getTicksAtTime(now);
    return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();
  }
  set position(progress) {
    const ticks = this.toTicks(progress);
    this.ticks = ticks;
  }
  get seconds() {
    return this._clock.seconds;
  }
  set seconds(s) {
    const now = this.now();
    const ticks = this._clock.frequency.timeToTicks(s, now);
    this.ticks = ticks;
  }
  get progress() {
    if (this.loop) {
      const now = this.now();
      const ticks = this._clock.getTicksAtTime(now);
      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);
    } else {
      return 0;
    }
  }
  get ticks() {
    return this._clock.ticks;
  }
  set ticks(t) {
    if (this._clock.ticks !== t) {
      const now = this.now();
      if (this.state === "started") {
        const ticks = this._clock.getTicksAtTime(now);
        const remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);
        const time = now + remainingTick;
        this.emit("stop", time);
        this._clock.setTicksAtTime(t, time);
        this.emit("start", time, this._clock.getSecondsAtTime(time));
      } else {
        this._clock.setTicksAtTime(t, now);
      }
    }
  }
  getTicksAtTime(time) {
    return Math.round(this._clock.getTicksAtTime(time));
  }
  getSecondsAtTime(time) {
    return this._clock.getSecondsAtTime(time);
  }
  get PPQ() {
    return this._clock.frequency.multiplier;
  }
  set PPQ(ppq) {
    this._clock.frequency.multiplier = ppq;
  }
  nextSubdivision(subdivision) {
    subdivision = this.toTicks(subdivision);
    if (this.state !== "started") {
      return 0;
    } else {
      const now = this.now();
      const transportPos = this.getTicksAtTime(now);
      const remainingTicks = subdivision - transportPos % subdivision;
      return this._clock.nextTickTime(remainingTicks, now);
    }
  }
  syncSignal(signal, ratio) {
    if (!ratio) {
      const now = this.now();
      if (signal.getValueAtTime(now) !== 0) {
        const bpm = this.bpm.getValueAtTime(now);
        const computedFreq = 1 / (60 / bpm / this.PPQ);
        ratio = signal.getValueAtTime(now) / computedFreq;
      } else {
        ratio = 0;
      }
    }
    const ratioSignal = new Gain(ratio);
    this.bpm.connect(ratioSignal);
    ratioSignal.connect(signal._param);
    this._syncedSignals.push({
      initial: signal.value,
      ratio: ratioSignal,
      signal
    });
    signal.value = 0;
    return this;
  }
  unsyncSignal(signal) {
    for (let i2 = this._syncedSignals.length - 1; i2 >= 0; i2--) {
      const syncedSignal = this._syncedSignals[i2];
      if (syncedSignal.signal === signal) {
        syncedSignal.ratio.dispose();
        syncedSignal.signal.value = syncedSignal.initial;
        this._syncedSignals.splice(i2, 1);
      }
    }
    return this;
  }
  dispose() {
    super.dispose();
    this._clock.dispose();
    writable(this, "bpm");
    this._timeline.dispose();
    this._repeatedEvents.dispose();
    return this;
  }
};
Emitter$1.mixin(Transport$1);
onContextInit((context) => {
  context.transport = new Transport$1({ context });
});
onContextClose((context) => {
  context.transport.dispose();
});
class Source extends ToneAudioNode {
  constructor(options) {
    super(options);
    this.input = void 0;
    this._state = new StateTimeline("stopped");
    this._synced = false;
    this._scheduled = [];
    this._syncedStart = noOp;
    this._syncedStop = noOp;
    this._state.memory = 100;
    this._state.increasing = true;
    this._volume = this.output = new Volume({
      context: this.context,
      mute: options.mute,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    readOnly(this, "volume");
    this.onstop = options.onstop;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      mute: false,
      onstop: noOp,
      volume: 0
    });
  }
  get state() {
    if (this._synced) {
      if (this.context.transport.state === "started") {
        return this._state.getValueAtTime(this.context.transport.seconds);
      } else {
        return "stopped";
      }
    } else {
      return this._state.getValueAtTime(this.now());
    }
  }
  get mute() {
    return this._volume.mute;
  }
  set mute(mute) {
    this._volume.mute = mute;
  }
  _clampToCurrentTime(time) {
    if (this._synced) {
      return time;
    } else {
      return Math.max(time, this.context.currentTime);
    }
  }
  start(time, offset, duration) {
    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime);
    if (!this._synced && this._state.getValueAtTime(computedTime) === "started") {
      assert(GT(computedTime, this._state.get(computedTime).time), "Start time must be strictly greater than previous start time");
      this._state.cancel(computedTime);
      this._state.setStateAtTime("started", computedTime);
      this.log("restart", computedTime);
      this.restart(computedTime, offset, duration);
    } else {
      this.log("start", computedTime);
      this._state.setStateAtTime("started", computedTime);
      if (this._synced) {
        const event = this._state.get(computedTime);
        if (event) {
          event.offset = this.toSeconds(defaultArg(offset, 0));
          event.duration = duration ? this.toSeconds(duration) : void 0;
        }
        const sched = this.context.transport.schedule((t) => {
          this._start(t, offset, duration);
        }, computedTime);
        this._scheduled.push(sched);
        if (this.context.transport.state === "started" && this.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {
          this._syncedStart(this.now(), this.context.transport.seconds);
        }
      } else {
        assertContextRunning(this.context);
        this._start(computedTime, offset, duration);
      }
    }
    return this;
  }
  stop(time) {
    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime);
    if (this._state.getValueAtTime(computedTime) === "started" || isDefined(this._state.getNextState("started", computedTime))) {
      this.log("stop", computedTime);
      if (!this._synced) {
        this._stop(computedTime);
      } else {
        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);
        this._scheduled.push(sched);
      }
      this._state.cancel(computedTime);
      this._state.setStateAtTime("stopped", computedTime);
    }
    return this;
  }
  restart(time, offset, duration) {
    time = this.toSeconds(time);
    if (this._state.getValueAtTime(time) === "started") {
      this._state.cancel(time);
      this._restart(time, offset, duration);
    }
    return this;
  }
  sync() {
    if (!this._synced) {
      this._synced = true;
      this._syncedStart = (time, offset) => {
        if (offset > 0) {
          const stateEvent = this._state.get(offset);
          if (stateEvent && stateEvent.state === "started" && stateEvent.time !== offset) {
            const startOffset = offset - this.toSeconds(stateEvent.time);
            let duration;
            if (stateEvent.duration) {
              duration = this.toSeconds(stateEvent.duration) - startOffset;
            }
            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
          }
        }
      };
      this._syncedStop = (time) => {
        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));
        if (this._state.getValueAtTime(seconds) === "started") {
          this._stop(time);
        }
      };
      this.context.transport.on("start", this._syncedStart);
      this.context.transport.on("loopStart", this._syncedStart);
      this.context.transport.on("stop", this._syncedStop);
      this.context.transport.on("pause", this._syncedStop);
      this.context.transport.on("loopEnd", this._syncedStop);
    }
    return this;
  }
  unsync() {
    if (this._synced) {
      this.context.transport.off("stop", this._syncedStop);
      this.context.transport.off("pause", this._syncedStop);
      this.context.transport.off("loopEnd", this._syncedStop);
      this.context.transport.off("start", this._syncedStart);
      this.context.transport.off("loopStart", this._syncedStart);
    }
    this._synced = false;
    this._scheduled.forEach((id) => this.context.transport.clear(id));
    this._scheduled = [];
    this._state.cancel(0);
    this._stop(0);
    return this;
  }
  dispose() {
    super.dispose();
    this.onstop = noOp;
    this.unsync();
    this._volume.dispose();
    this._state.dispose();
    return this;
  }
}
class ToneBufferSource extends OneShotSource {
  constructor() {
    super(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]));
    this.name = "ToneBufferSource";
    this._source = this.context.createBufferSource();
    this._internalChannels = [this._source];
    this._sourceStarted = false;
    this._sourceStopped = false;
    const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]);
    connect(this._source, this._gainNode);
    this._source.onended = () => this._stopSource();
    this.playbackRate = new Param({
      context: this.context,
      param: this._source.playbackRate,
      units: "positive",
      value: options.playbackRate
    });
    this.loop = options.loop;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);
    this._internalChannels.push(this._source);
  }
  static getDefaults() {
    return Object.assign(OneShotSource.getDefaults(), {
      url: new ToneAudioBuffer(),
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: noOp,
      onerror: noOp,
      playbackRate: 1
    });
  }
  get fadeIn() {
    return this._fadeIn;
  }
  set fadeIn(t) {
    this._fadeIn = t;
  }
  get fadeOut() {
    return this._fadeOut;
  }
  set fadeOut(t) {
    this._fadeOut = t;
  }
  get curve() {
    return this._curve;
  }
  set curve(t) {
    this._curve = t;
  }
  start(time, offset, duration, gain = 1) {
    assert(this.buffer.loaded, "buffer is either not set or not loaded");
    const computedTime = this.toSeconds(time);
    this._startGain(computedTime, gain);
    if (this.loop) {
      offset = defaultArg(offset, this.loopStart);
    } else {
      offset = defaultArg(offset, 0);
    }
    let computedOffset = Math.max(this.toSeconds(offset), 0);
    if (this.loop) {
      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;
      const loopStart = this.toSeconds(this.loopStart);
      const loopDuration = loopEnd - loopStart;
      if (GTE(computedOffset, loopEnd)) {
        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;
      }
      if (EQ(computedOffset, this.buffer.duration)) {
        computedOffset = 0;
      }
    }
    this._source.buffer = this.buffer.get();
    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;
    if (LT(computedOffset, this.buffer.duration)) {
      this._sourceStarted = true;
      this._source.start(computedTime, computedOffset);
    }
    if (isDefined(duration)) {
      let computedDur = this.toSeconds(duration);
      computedDur = Math.max(computedDur, 0);
      this.stop(computedTime + computedDur);
    }
    return this;
  }
  _stopSource(time) {
    if (!this._sourceStopped && this._sourceStarted) {
      this._sourceStopped = true;
      this._source.stop(this.toSeconds(time));
      this._onended();
    }
  }
  get loopStart() {
    return this._source.loopStart;
  }
  set loopStart(loopStart) {
    this._source.loopStart = this.toSeconds(loopStart);
  }
  get loopEnd() {
    return this._source.loopEnd;
  }
  set loopEnd(loopEnd) {
    this._source.loopEnd = this.toSeconds(loopEnd);
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  get loop() {
    return this._source.loop;
  }
  set loop(loop) {
    this._source.loop = loop;
    if (this._sourceStarted) {
      this.cancelStop();
    }
  }
  dispose() {
    super.dispose();
    this._source.onended = null;
    this._source.disconnect();
    this._buffer.dispose();
    this.playbackRate.dispose();
    return this;
  }
}
function generateWaveform(instance2, length2) {
  return __awaiter(this, void 0, void 0, function* () {
    const duration = length2 / instance2.context.sampleRate;
    const context = new OfflineContext(1, duration, instance2.context.sampleRate);
    const clone = new instance2.constructor(Object.assign(instance2.get(), {
      frequency: 2 / duration,
      detune: 0,
      context
    })).toDestination();
    clone.start(0);
    const buffer = yield context.render();
    return buffer.getChannelData(0);
  });
}
class ToneOscillatorNode extends OneShotSource {
  constructor() {
    super(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "ToneOscillatorNode";
    this._oscillator = this.context.createOscillator();
    this._internalChannels = [this._oscillator];
    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]);
    connect(this._oscillator, this._gainNode);
    this.type = options.type;
    this.frequency = new Param({
      context: this.context,
      param: this._oscillator.frequency,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new Param({
      context: this.context,
      param: this._oscillator.detune,
      units: "cents",
      value: options.detune
    });
    readOnly(this, ["frequency", "detune"]);
  }
  static getDefaults() {
    return Object.assign(OneShotSource.getDefaults(), {
      detune: 0,
      frequency: 440,
      type: "sine"
    });
  }
  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);
    this._startGain(computedTime);
    this._oscillator.start(computedTime);
    return this;
  }
  _stopSource(time) {
    this._oscillator.stop(time);
  }
  setPeriodicWave(periodicWave) {
    this._oscillator.setPeriodicWave(periodicWave);
    return this;
  }
  get type() {
    return this._oscillator.type;
  }
  set type(type) {
    this._oscillator.type = type;
  }
  dispose() {
    super.dispose();
    if (this.state === "started") {
      this.stop();
    }
    this._oscillator.disconnect();
    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }
}
class Oscillator extends Source {
  constructor() {
    super(optionsFromArguments(Oscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "Oscillator";
    this._oscillator = null;
    const options = optionsFromArguments(Oscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    readOnly(this, "frequency");
    this.detune = new Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    readOnly(this, "detune");
    this._partials = options.partials;
    this._partialCount = options.partialCount;
    this._type = options.type;
    if (options.partialCount && options.type !== "custom") {
      this._type = this.baseType + options.partialCount.toString();
    }
    this.phase = options.phase;
  }
  static getDefaults() {
    return Object.assign(Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      partialCount: 0,
      partials: [],
      phase: 0,
      type: "sine"
    });
  }
  _start(time) {
    const computedTime = this.toSeconds(time);
    const oscillator = new ToneOscillatorNode({
      context: this.context,
      onended: () => this.onstop(this)
    });
    this._oscillator = oscillator;
    if (this._wave) {
      this._oscillator.setPeriodicWave(this._wave);
    } else {
      this._oscillator.type = this._type;
    }
    this._oscillator.connect(this.output);
    this.frequency.connect(this._oscillator.frequency);
    this.detune.connect(this._oscillator.detune);
    this._oscillator.start(computedTime);
  }
  _stop(time) {
    const computedTime = this.toSeconds(time);
    if (this._oscillator) {
      this._oscillator.stop(computedTime);
    }
  }
  _restart(time) {
    const computedTime = this.toSeconds(time);
    this.log("restart", computedTime);
    if (this._oscillator) {
      this._oscillator.cancelStop();
    }
    this._state.cancel(computedTime);
    return this;
  }
  syncFrequency() {
    this.context.transport.syncSignal(this.frequency);
    return this;
  }
  unsyncFrequency() {
    this.context.transport.unsyncSignal(this.frequency);
    return this;
  }
  _getCachedPeriodicWave() {
    if (this._type === "custom") {
      const oscProps = Oscillator._periodicWaveCache.find((description) => {
        return description.phase === this._phase && deepEquals(description.partials, this._partials);
      });
      return oscProps;
    } else {
      const oscProps = Oscillator._periodicWaveCache.find((description) => {
        return description.type === this._type && description.phase === this._phase;
      });
      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;
      return oscProps;
    }
  }
  get type() {
    return this._type;
  }
  set type(type) {
    this._type = type;
    const isBasicType = ["sine", "square", "sawtooth", "triangle"].indexOf(type) !== -1;
    if (this._phase === 0 && isBasicType) {
      this._wave = void 0;
      this._partialCount = 0;
      if (this._oscillator !== null) {
        this._oscillator.type = type;
      }
    } else {
      const cache2 = this._getCachedPeriodicWave();
      if (isDefined(cache2)) {
        const { partials, wave } = cache2;
        this._wave = wave;
        this._partials = partials;
        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        }
      } else {
        const [real, imag] = this._getRealImaginary(type, this._phase);
        const periodicWave = this.context.createPeriodicWave(real, imag);
        this._wave = periodicWave;
        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        }
        Oscillator._periodicWaveCache.push({
          imag,
          partialCount: this._partialCount,
          partials: this._partials,
          phase: this._phase,
          real,
          type: this._type,
          wave: this._wave
        });
        if (Oscillator._periodicWaveCache.length > 100) {
          Oscillator._periodicWaveCache.shift();
        }
      }
    }
  }
  get baseType() {
    return this._type.replace(this.partialCount.toString(), "");
  }
  set baseType(baseType) {
    if (this.partialCount && this._type !== "custom" && baseType !== "custom") {
      this.type = baseType + this.partialCount;
    } else {
      this.type = baseType;
    }
  }
  get partialCount() {
    return this._partialCount;
  }
  set partialCount(p) {
    assertRange(p, 0);
    let type = this._type;
    const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);
    if (partial) {
      type = partial[1];
    }
    if (this._type !== "custom") {
      if (p === 0) {
        this.type = type;
      } else {
        this.type = type + p.toString();
      }
    } else {
      const fullPartials = new Float32Array(p);
      this._partials.forEach((v, i2) => fullPartials[i2] = v);
      this._partials = Array.from(fullPartials);
      this.type = this._type;
    }
  }
  _getRealImaginary(type, phase) {
    const fftSize = 4096;
    let periodicWaveSize = fftSize / 2;
    const real = new Float32Array(periodicWaveSize);
    const imag = new Float32Array(periodicWaveSize);
    let partialCount = 1;
    if (type === "custom") {
      partialCount = this._partials.length + 1;
      this._partialCount = this._partials.length;
      periodicWaveSize = partialCount;
      if (this._partials.length === 0) {
        return [real, imag];
      }
    } else {
      const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);
      if (partial) {
        partialCount = parseInt(partial[2], 10) + 1;
        this._partialCount = parseInt(partial[2], 10);
        type = partial[1];
        partialCount = Math.max(partialCount, 2);
        periodicWaveSize = partialCount;
      } else {
        this._partialCount = 0;
      }
      this._partials = [];
    }
    for (let n = 1; n < periodicWaveSize; ++n) {
      const piFactor = 2 / (n * Math.PI);
      let b;
      switch (type) {
        case "sine":
          b = n <= partialCount ? 1 : 0;
          this._partials[n - 1] = b;
          break;
        case "square":
          b = n & 1 ? 2 * piFactor : 0;
          this._partials[n - 1] = b;
          break;
        case "sawtooth":
          b = piFactor * (n & 1 ? 1 : -1);
          this._partials[n - 1] = b;
          break;
        case "triangle":
          if (n & 1) {
            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
          } else {
            b = 0;
          }
          this._partials[n - 1] = b;
          break;
        case "custom":
          b = this._partials[n - 1];
          break;
        default:
          throw new TypeError("Oscillator: invalid type: " + type);
      }
      if (b !== 0) {
        real[n] = -b * Math.sin(phase * n);
        imag[n] = b * Math.cos(phase * n);
      } else {
        real[n] = 0;
        imag[n] = 0;
      }
    }
    return [real, imag];
  }
  _inverseFFT(real, imag, phase) {
    let sum = 0;
    const len = real.length;
    for (let i2 = 0; i2 < len; i2++) {
      sum += real[i2] * Math.cos(i2 * phase) + imag[i2] * Math.sin(i2 * phase);
    }
    return sum;
  }
  getInitialValue() {
    const [real, imag] = this._getRealImaginary(this._type, 0);
    let maxValue = 0;
    const twoPi = Math.PI * 2;
    const testPositions = 32;
    for (let i2 = 0; i2 < testPositions; i2++) {
      maxValue = Math.max(this._inverseFFT(real, imag, i2 / testPositions * twoPi), maxValue);
    }
    return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);
  }
  get partials() {
    return this._partials.slice(0, this.partialCount);
  }
  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;
    if (partials.length) {
      this.type = "custom";
    }
  }
  get phase() {
    return this._phase * (180 / Math.PI);
  }
  set phase(phase) {
    this._phase = phase * Math.PI / 180;
    this.type = this._type;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    if (this._oscillator !== null) {
      this._oscillator.dispose();
    }
    this._wave = void 0;
    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }
}
Oscillator._periodicWaveCache = [];
class SignalOperator extends ToneAudioNode {
  constructor() {
    super(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, ["context"])));
  }
  connect(destination, outputNum = 0, inputNum = 0) {
    connectSignal(this, destination, outputNum, inputNum);
    return this;
  }
}
class WaveShaper extends SignalOperator {
  constructor() {
    super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, ["mapping", "length"])));
    this.name = "WaveShaper";
    this._shaper = this.context.createWaveShaper();
    this.input = this._shaper;
    this.output = this._shaper;
    const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, ["mapping", "length"]);
    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {
      this.curve = Float32Array.from(options.mapping);
    } else if (isFunction(options.mapping)) {
      this.setMap(options.mapping, options.length);
    }
  }
  static getDefaults() {
    return Object.assign(Signal.getDefaults(), {
      length: 1024
    });
  }
  setMap(mapping, length2 = 1024) {
    const array = new Float32Array(length2);
    for (let i2 = 0, len = length2; i2 < len; i2++) {
      const normalized = i2 / (len - 1) * 2 - 1;
      array[i2] = mapping(normalized, i2);
    }
    this.curve = array;
    return this;
  }
  get curve() {
    return this._shaper.curve;
  }
  set curve(mapping) {
    this._shaper.curve = mapping;
  }
  get oversample() {
    return this._shaper.oversample;
  }
  set oversample(oversampling) {
    const isOverSampleType = ["none", "2x", "4x"].some((str) => str.includes(oversampling));
    assert(isOverSampleType, "oversampling must be either 'none', '2x', or '4x'");
    this._shaper.oversample = oversampling;
  }
  dispose() {
    super.dispose();
    this._shaper.disconnect();
    return this;
  }
}
class AudioToGain extends SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "AudioToGain";
    this._norm = new WaveShaper({
      context: this.context,
      mapping: (x) => (x + 1) / 2
    });
    this.input = this._norm;
    this.output = this._norm;
  }
  dispose() {
    super.dispose();
    this._norm.dispose();
    return this;
  }
}
class Multiply extends Signal {
  constructor() {
    super(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, ["value"])));
    this.name = "Multiply";
    this.override = false;
    const options = optionsFromArguments(Multiply.getDefaults(), arguments, ["value"]);
    this._mult = this.input = this.output = new Gain({
      context: this.context,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    this.factor = this._param = this._mult.gain;
    this.factor.setValueAtTime(options.value, 0);
  }
  static getDefaults() {
    return Object.assign(Signal.getDefaults(), {
      value: 0
    });
  }
  dispose() {
    super.dispose();
    this._mult.dispose();
    return this;
  }
}
class AMOscillator extends Source {
  constructor() {
    super(optionsFromArguments(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "AMOscillator";
    this._modulationScale = new AudioToGain({ context: this.context });
    this._modulationNode = new Gain({
      context: this.context
    });
    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;
    this._modulator = new Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this._modulator.chain(this._modulationScale, this._modulationNode.gain);
    this._carrier.chain(this._modulationNode, this.output);
    readOnly(this, ["frequency", "detune", "harmonicity"]);
  }
  static getDefaults() {
    return Object.assign(Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationType: "square"
    });
  }
  _start(time) {
    this._modulator.start(time);
    this._carrier.start(time);
  }
  _stop(time) {
    this._modulator.stop(time);
    this._carrier.stop(time);
  }
  _restart(time) {
    this._modulator.restart(time);
    this._carrier.restart(time);
  }
  get type() {
    return this._carrier.type;
  }
  set type(type) {
    this._carrier.type = type;
  }
  get baseType() {
    return this._carrier.baseType;
  }
  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }
  get partialCount() {
    return this._carrier.partialCount;
  }
  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  get modulationType() {
    return this._modulator.type;
  }
  set modulationType(type) {
    this._modulator.type = type;
  }
  get phase() {
    return this._carrier.phase;
  }
  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }
  get partials() {
    return this._carrier.partials;
  }
  set partials(partials) {
    this._carrier.partials = partials;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();
    this.harmonicity.dispose();
    this._carrier.dispose();
    this._modulator.dispose();
    this._modulationNode.dispose();
    this._modulationScale.dispose();
    return this;
  }
}
class FMOscillator extends Source {
  constructor() {
    super(optionsFromArguments(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "FMOscillator";
    this._modulationNode = new Gain({
      context: this.context,
      gain: 0
    });
    const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: 0,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.detune = this._carrier.detune;
    this.frequency = new Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this._modulator = new Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this.modulationIndex = new Multiply({
      context: this.context,
      units: "positive",
      value: options.modulationIndex
    });
    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.frequency.chain(this.modulationIndex, this._modulationNode);
    this._modulator.connect(this._modulationNode.gain);
    this._modulationNode.connect(this._carrier.frequency);
    this._carrier.connect(this.output);
    this.detune.connect(this._modulator.detune);
    readOnly(this, ["modulationIndex", "frequency", "detune", "harmonicity"]);
  }
  static getDefaults() {
    return Object.assign(Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationIndex: 2,
      modulationType: "square"
    });
  }
  _start(time) {
    this._modulator.start(time);
    this._carrier.start(time);
  }
  _stop(time) {
    this._modulator.stop(time);
    this._carrier.stop(time);
  }
  _restart(time) {
    this._modulator.restart(time);
    this._carrier.restart(time);
    return this;
  }
  get type() {
    return this._carrier.type;
  }
  set type(type) {
    this._carrier.type = type;
  }
  get baseType() {
    return this._carrier.baseType;
  }
  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }
  get partialCount() {
    return this._carrier.partialCount;
  }
  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  get modulationType() {
    return this._modulator.type;
  }
  set modulationType(type) {
    this._modulator.type = type;
  }
  get phase() {
    return this._carrier.phase;
  }
  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }
  get partials() {
    return this._carrier.partials;
  }
  set partials(partials) {
    this._carrier.partials = partials;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.harmonicity.dispose();
    this._carrier.dispose();
    this._modulator.dispose();
    this._modulationNode.dispose();
    this.modulationIndex.dispose();
    return this;
  }
}
class PulseOscillator extends Source {
  constructor() {
    super(optionsFromArguments(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]));
    this.name = "PulseOscillator";
    this._widthGate = new Gain({
      context: this.context,
      gain: 0
    });
    this._thresh = new WaveShaper({
      context: this.context,
      mapping: (val) => val <= 0 ? -1 : 1
    });
    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]);
    this.width = new Signal({
      context: this.context,
      units: "audioRange",
      value: options.width
    });
    this._triangle = new Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: "triangle"
    });
    this.frequency = this._triangle.frequency;
    this.detune = this._triangle.detune;
    this._triangle.chain(this._thresh, this.output);
    this.width.chain(this._widthGate, this._thresh);
    readOnly(this, ["width", "frequency", "detune"]);
  }
  static getDefaults() {
    return Object.assign(Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      phase: 0,
      type: "pulse",
      width: 0.2
    });
  }
  _start(time) {
    time = this.toSeconds(time);
    this._triangle.start(time);
    this._widthGate.gain.setValueAtTime(1, time);
  }
  _stop(time) {
    time = this.toSeconds(time);
    this._triangle.stop(time);
    this._widthGate.gain.cancelScheduledValues(time);
    this._widthGate.gain.setValueAtTime(0, time);
  }
  _restart(time) {
    this._triangle.restart(time);
    this._widthGate.gain.cancelScheduledValues(time);
    this._widthGate.gain.setValueAtTime(1, time);
  }
  get phase() {
    return this._triangle.phase;
  }
  set phase(phase) {
    this._triangle.phase = phase;
  }
  get type() {
    return "pulse";
  }
  get baseType() {
    return "pulse";
  }
  get partials() {
    return [];
  }
  get partialCount() {
    return 0;
  }
  set carrierType(type) {
    this._triangle.type = type;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this._triangle.dispose();
    this.width.dispose();
    this._widthGate.dispose();
    this._thresh.dispose();
    return this;
  }
}
class FatOscillator extends Source {
  constructor() {
    super(optionsFromArguments(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]));
    this.name = "FatOscillator";
    this._oscillators = [];
    const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]);
    this.frequency = new Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this._spread = options.spread;
    this._type = options.type;
    this._phase = options.phase;
    this._partials = options.partials;
    this._partialCount = options.partialCount;
    this.count = options.count;
    readOnly(this, ["frequency", "detune"]);
  }
  static getDefaults() {
    return Object.assign(Oscillator.getDefaults(), {
      count: 3,
      spread: 20,
      type: "sawtooth"
    });
  }
  _start(time) {
    time = this.toSeconds(time);
    this._forEach((osc) => osc.start(time));
  }
  _stop(time) {
    time = this.toSeconds(time);
    this._forEach((osc) => osc.stop(time));
  }
  _restart(time) {
    this._forEach((osc) => osc.restart(time));
  }
  _forEach(iterator) {
    for (let i2 = 0; i2 < this._oscillators.length; i2++) {
      iterator(this._oscillators[i2], i2);
    }
  }
  get type() {
    return this._type;
  }
  set type(type) {
    this._type = type;
    this._forEach((osc) => osc.type = type);
  }
  get spread() {
    return this._spread;
  }
  set spread(spread) {
    this._spread = spread;
    if (this._oscillators.length > 1) {
      const start = -spread / 2;
      const step = spread / (this._oscillators.length - 1);
      this._forEach((osc, i2) => osc.detune.value = start + step * i2);
    }
  }
  get count() {
    return this._oscillators.length;
  }
  set count(count) {
    assertRange(count, 1);
    if (this._oscillators.length !== count) {
      this._forEach((osc) => osc.dispose());
      this._oscillators = [];
      for (let i2 = 0; i2 < count; i2++) {
        const osc = new Oscillator({
          context: this.context,
          volume: -6 - count * 1.1,
          type: this._type,
          phase: this._phase + i2 / count * 360,
          partialCount: this._partialCount,
          onstop: i2 === 0 ? () => this.onstop(this) : noOp
        });
        if (this.type === "custom") {
          osc.partials = this._partials;
        }
        this.frequency.connect(osc.frequency);
        this.detune.connect(osc.detune);
        osc.detune.overridden = false;
        osc.connect(this.output);
        this._oscillators[i2] = osc;
      }
      this.spread = this._spread;
      if (this.state === "started") {
        this._forEach((osc) => osc.start());
      }
    }
  }
  get phase() {
    return this._phase;
  }
  set phase(phase) {
    this._phase = phase;
    this._forEach((osc, i2) => osc.phase = this._phase + i2 / this.count * 360);
  }
  get baseType() {
    return this._oscillators[0].baseType;
  }
  set baseType(baseType) {
    this._forEach((osc) => osc.baseType = baseType);
    this._type = this._oscillators[0].type;
  }
  get partials() {
    return this._oscillators[0].partials;
  }
  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;
    if (partials.length) {
      this._type = "custom";
      this._forEach((osc) => osc.partials = partials);
    }
  }
  get partialCount() {
    return this._oscillators[0].partialCount;
  }
  set partialCount(partialCount) {
    this._partialCount = partialCount;
    this._forEach((osc) => osc.partialCount = partialCount);
    this._type = this._oscillators[0].type;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();
    this._forEach((osc) => osc.dispose());
    return this;
  }
}
class PWMOscillator extends Source {
  constructor() {
    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]));
    this.name = "PWMOscillator";
    this.sourceType = "pwm";
    this._scale = new Multiply({
      context: this.context,
      value: 2
    });
    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]);
    this._pulse = new PulseOscillator({
      context: this.context,
      frequency: options.modulationFrequency
    });
    this._pulse.carrierType = "sine";
    this.modulationFrequency = this._pulse.frequency;
    this._modulator = new Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase
    });
    this.frequency = this._modulator.frequency;
    this.detune = this._modulator.detune;
    this._modulator.chain(this._scale, this._pulse.width);
    this._pulse.connect(this.output);
    readOnly(this, ["modulationFrequency", "frequency", "detune"]);
  }
  static getDefaults() {
    return Object.assign(Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      modulationFrequency: 0.4,
      phase: 0,
      type: "pwm"
    });
  }
  _start(time) {
    time = this.toSeconds(time);
    this._modulator.start(time);
    this._pulse.start(time);
  }
  _stop(time) {
    time = this.toSeconds(time);
    this._modulator.stop(time);
    this._pulse.stop(time);
  }
  _restart(time) {
    this._modulator.restart(time);
    this._pulse.restart(time);
  }
  get type() {
    return "pwm";
  }
  get baseType() {
    return "pwm";
  }
  get partials() {
    return [];
  }
  get partialCount() {
    return 0;
  }
  get phase() {
    return this._modulator.phase;
  }
  set phase(phase) {
    this._modulator.phase = phase;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this._pulse.dispose();
    this._scale.dispose();
    this._modulator.dispose();
    return this;
  }
}
const OmniOscillatorSourceMap = {
  am: AMOscillator,
  fat: FatOscillator,
  fm: FMOscillator,
  oscillator: Oscillator,
  pulse: PulseOscillator,
  pwm: PWMOscillator
};
class OmniOscillator extends Source {
  constructor() {
    super(optionsFromArguments(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "OmniOscillator";
    const options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    readOnly(this, ["frequency", "detune"]);
    this.set(options);
  }
  static getDefaults() {
    return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());
  }
  _start(time) {
    this._oscillator.start(time);
  }
  _stop(time) {
    this._oscillator.stop(time);
  }
  _restart(time) {
    this._oscillator.restart(time);
    return this;
  }
  get type() {
    let prefix = "";
    if (["am", "fm", "fat"].some((p) => this._sourceType === p)) {
      prefix = this._sourceType;
    }
    return prefix + this._oscillator.type;
  }
  set type(type) {
    if (type.substr(0, 2) === "fm") {
      this._createNewOscillator("fm");
      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 2) === "am") {
      this._createNewOscillator("am");
      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 3) === "fat") {
      this._createNewOscillator("fat");
      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(3);
    } else if (type === "pwm") {
      this._createNewOscillator("pwm");
      this._oscillator = this._oscillator;
    } else if (type === "pulse") {
      this._createNewOscillator("pulse");
    } else {
      this._createNewOscillator("oscillator");
      this._oscillator = this._oscillator;
      this._oscillator.type = type;
    }
  }
  get partials() {
    return this._oscillator.partials;
  }
  set partials(partials) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partials = partials;
    }
  }
  get partialCount() {
    return this._oscillator.partialCount;
  }
  set partialCount(partialCount) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partialCount = partialCount;
    }
  }
  set(props) {
    if (Reflect.has(props, "type") && props.type) {
      this.type = props.type;
    }
    super.set(props);
    return this;
  }
  _createNewOscillator(oscType) {
    if (oscType !== this._sourceType) {
      this._sourceType = oscType;
      const OscConstructor = OmniOscillatorSourceMap[oscType];
      const now = this.now();
      if (this._oscillator) {
        const oldOsc = this._oscillator;
        oldOsc.stop(now);
        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);
      }
      this._oscillator = new OscConstructor({
        context: this.context
      });
      this.frequency.connect(this._oscillator.frequency);
      this.detune.connect(this._oscillator.detune);
      this._oscillator.connect(this.output);
      this._oscillator.onstop = () => this.onstop(this);
      if (this.state === "started") {
        this._oscillator.start(now);
      }
    }
  }
  get phase() {
    return this._oscillator.phase;
  }
  set phase(phase) {
    this._oscillator.phase = phase;
  }
  get sourceType() {
    return this._sourceType;
  }
  set sourceType(sType) {
    let baseType = "sine";
    if (this._oscillator.type !== "pwm" && this._oscillator.type !== "pulse") {
      baseType = this._oscillator.type;
    }
    if (sType === "fm") {
      this.type = "fm" + baseType;
    } else if (sType === "am") {
      this.type = "am" + baseType;
    } else if (sType === "fat") {
      this.type = "fat" + baseType;
    } else if (sType === "oscillator") {
      this.type = baseType;
    } else if (sType === "pulse") {
      this.type = "pulse";
    } else if (sType === "pwm") {
      this.type = "pwm";
    }
  }
  _getOscType(osc, sourceType) {
    return osc instanceof OmniOscillatorSourceMap[sourceType];
  }
  get baseType() {
    return this._oscillator.baseType;
  }
  set baseType(baseType) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && baseType !== "pulse" && baseType !== "pwm") {
      this._oscillator.baseType = baseType;
    }
  }
  get width() {
    if (this._getOscType(this._oscillator, "pulse")) {
      return this._oscillator.width;
    } else {
      return void 0;
    }
  }
  get count() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.count;
    } else {
      return void 0;
    }
  }
  set count(count) {
    if (this._getOscType(this._oscillator, "fat") && isNumber(count)) {
      this._oscillator.count = count;
    }
  }
  get spread() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.spread;
    } else {
      return void 0;
    }
  }
  set spread(spread) {
    if (this._getOscType(this._oscillator, "fat") && isNumber(spread)) {
      this._oscillator.spread = spread;
    }
  }
  get modulationType() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.modulationType;
    } else {
      return void 0;
    }
  }
  set modulationType(mType) {
    if ((this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) && isString(mType)) {
      this._oscillator.modulationType = mType;
    }
  }
  get modulationIndex() {
    if (this._getOscType(this._oscillator, "fm")) {
      return this._oscillator.modulationIndex;
    } else {
      return void 0;
    }
  }
  get harmonicity() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.harmonicity;
    } else {
      return void 0;
    }
  }
  get modulationFrequency() {
    if (this._getOscType(this._oscillator, "pwm")) {
      return this._oscillator.modulationFrequency;
    } else {
      return void 0;
    }
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      return generateWaveform(this, length2);
    });
  }
  dispose() {
    super.dispose();
    this.detune.dispose();
    this.frequency.dispose();
    this._oscillator.dispose();
    return this;
  }
}
function range(min, max = Infinity) {
  const valueMap = /* @__PURE__ */ new WeakMap();
  return function(target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function() {
        return valueMap.get(this);
      },
      set: function(newValue) {
        assertRange(newValue, min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
function timeRange(min, max = Infinity) {
  const valueMap = /* @__PURE__ */ new WeakMap();
  return function(target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function() {
        return valueMap.get(this);
      },
      set: function(newValue) {
        assertRange(this.toSeconds(newValue), min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
class Player extends Source {
  constructor() {
    super(optionsFromArguments(Player.getDefaults(), arguments, ["url", "onload"]));
    this.name = "Player";
    this._activeSources = /* @__PURE__ */ new Set();
    const options = optionsFromArguments(Player.getDefaults(), arguments, ["url", "onload"]);
    this._buffer = new ToneAudioBuffer({
      onload: this._onload.bind(this, options.onload),
      onerror: options.onerror,
      reverse: options.reverse,
      url: options.url
    });
    this.autostart = options.autostart;
    this._loop = options.loop;
    this._loopStart = options.loopStart;
    this._loopEnd = options.loopEnd;
    this._playbackRate = options.playbackRate;
    this.fadeIn = options.fadeIn;
    this.fadeOut = options.fadeOut;
  }
  static getDefaults() {
    return Object.assign(Source.getDefaults(), {
      autostart: false,
      fadeIn: 0,
      fadeOut: 0,
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: noOp,
      onerror: noOp,
      playbackRate: 1,
      reverse: false
    });
  }
  load(url2) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this._buffer.load(url2);
      this._onload();
      return this;
    });
  }
  _onload(callback = noOp) {
    callback();
    if (this.autostart) {
      this.start();
    }
  }
  _onSourceEnd(source) {
    this.onstop(this);
    this._activeSources.delete(source);
    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === "started") {
      this._state.cancel(this.now());
      this._state.setStateAtTime("stopped", this.now());
    }
  }
  start(time, offset, duration) {
    super.start(time, offset, duration);
    return this;
  }
  _start(startTime, offset, duration) {
    if (this._loop) {
      offset = defaultArg(offset, this._loopStart);
    } else {
      offset = defaultArg(offset, 0);
    }
    const computedOffset = this.toSeconds(offset);
    const origDuration = duration;
    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));
    let computedDuration = this.toSeconds(duration);
    computedDuration = computedDuration / this._playbackRate;
    startTime = this.toSeconds(startTime);
    const source = new ToneBufferSource({
      url: this._buffer,
      context: this.context,
      fadeIn: this.fadeIn,
      fadeOut: this.fadeOut,
      loop: this._loop,
      loopEnd: this._loopEnd,
      loopStart: this._loopStart,
      onended: this._onSourceEnd.bind(this),
      playbackRate: this._playbackRate
    }).connect(this.output);
    if (!this._loop && !this._synced) {
      this._state.cancel(startTime + computedDuration);
      this._state.setStateAtTime("stopped", startTime + computedDuration, {
        implicitEnd: true
      });
    }
    this._activeSources.add(source);
    if (this._loop && isUndef(origDuration)) {
      source.start(startTime, computedOffset);
    } else {
      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));
    }
  }
  _stop(time) {
    const computedTime = this.toSeconds(time);
    this._activeSources.forEach((source) => source.stop(computedTime));
  }
  restart(time, offset, duration) {
    super.restart(time, offset, duration);
    return this;
  }
  _restart(time, offset, duration) {
    this._stop(time);
    this._start(time, offset, duration);
  }
  seek(offset, when) {
    const computedTime = this.toSeconds(when);
    if (this._state.getValueAtTime(computedTime) === "started") {
      const computedOffset = this.toSeconds(offset);
      this._stop(computedTime);
      this._start(computedTime, computedOffset);
    }
    return this;
  }
  setLoopPoints(loopStart, loopEnd) {
    this.loopStart = loopStart;
    this.loopEnd = loopEnd;
    return this;
  }
  get loopStart() {
    return this._loopStart;
  }
  set loopStart(loopStart) {
    this._loopStart = loopStart;
    if (this.buffer.loaded) {
      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);
    }
    this._activeSources.forEach((source) => {
      source.loopStart = loopStart;
    });
  }
  get loopEnd() {
    return this._loopEnd;
  }
  set loopEnd(loopEnd) {
    this._loopEnd = loopEnd;
    if (this.buffer.loaded) {
      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);
    }
    this._activeSources.forEach((source) => {
      source.loopEnd = loopEnd;
    });
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  get loop() {
    return this._loop;
  }
  set loop(loop) {
    if (this._loop === loop) {
      return;
    }
    this._loop = loop;
    this._activeSources.forEach((source) => {
      source.loop = loop;
    });
    if (loop) {
      const stopEvent = this._state.getNextState("stopped", this.now());
      if (stopEvent) {
        this._state.cancel(stopEvent.time);
      }
    }
  }
  get playbackRate() {
    return this._playbackRate;
  }
  set playbackRate(rate) {
    this._playbackRate = rate;
    const now = this.now();
    const stopEvent = this._state.getNextState("stopped", now);
    if (stopEvent && stopEvent.implicitEnd) {
      this._state.cancel(stopEvent.time);
      this._activeSources.forEach((source) => source.cancelStop());
    }
    this._activeSources.forEach((source) => {
      source.playbackRate.setValueAtTime(rate, now);
    });
  }
  get reverse() {
    return this._buffer.reverse;
  }
  set reverse(rev) {
    this._buffer.reverse = rev;
  }
  get loaded() {
    return this._buffer.loaded;
  }
  dispose() {
    super.dispose();
    this._activeSources.forEach((source) => source.dispose());
    this._activeSources.clear();
    this._buffer.dispose();
    return this;
  }
}
__decorate([
  timeRange(0)
], Player.prototype, "fadeIn", void 0);
__decorate([
  timeRange(0)
], Player.prototype, "fadeOut", void 0);
class Envelope extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "Envelope";
    this._sig = new Signal({
      context: this.context,
      value: 0
    });
    this.output = this._sig;
    this.input = void 0;
    const options = optionsFromArguments(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
    this.attack = options.attack;
    this.decay = options.decay;
    this.sustain = options.sustain;
    this.release = options.release;
    this.attackCurve = options.attackCurve;
    this.releaseCurve = options.releaseCurve;
    this.decayCurve = options.decayCurve;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      attack: 0.01,
      attackCurve: "linear",
      decay: 0.1,
      decayCurve: "exponential",
      release: 1,
      releaseCurve: "exponential",
      sustain: 0.5
    });
  }
  get value() {
    return this.getValueAtTime(this.now());
  }
  _getCurve(curve, direction) {
    if (isString(curve)) {
      return curve;
    } else {
      let curveName;
      for (curveName in EnvelopeCurves) {
        if (EnvelopeCurves[curveName][direction] === curve) {
          return curveName;
        }
      }
      return curve;
    }
  }
  _setCurve(name, direction, curve) {
    if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {
      const curveDef = EnvelopeCurves[curve];
      if (isObject(curveDef)) {
        if (name !== "_decayCurve") {
          this[name] = curveDef[direction];
        }
      } else {
        this[name] = curveDef;
      }
    } else if (isArray(curve) && name !== "_decayCurve") {
      this[name] = curve;
    } else {
      throw new Error("Envelope: invalid curve: " + curve);
    }
  }
  get attackCurve() {
    return this._getCurve(this._attackCurve, "In");
  }
  set attackCurve(curve) {
    this._setCurve("_attackCurve", "In", curve);
  }
  get releaseCurve() {
    return this._getCurve(this._releaseCurve, "Out");
  }
  set releaseCurve(curve) {
    this._setCurve("_releaseCurve", "Out", curve);
  }
  get decayCurve() {
    return this._decayCurve;
  }
  set decayCurve(curve) {
    assert(["linear", "exponential"].some((c) => c === curve), `Invalid envelope curve: ${curve}`);
    this._decayCurve = curve;
  }
  triggerAttack(time, velocity = 1) {
    this.log("triggerAttack", time, velocity);
    time = this.toSeconds(time);
    const originalAttack = this.toSeconds(this.attack);
    let attack = originalAttack;
    const decay = this.toSeconds(this.decay);
    const currentValue = this.getValueAtTime(time);
    if (currentValue > 0) {
      const attackRate = 1 / attack;
      const remainingDistance = 1 - currentValue;
      attack = remainingDistance / attackRate;
    }
    if (attack < this.sampleTime) {
      this._sig.cancelScheduledValues(time);
      this._sig.setValueAtTime(velocity, time);
    } else if (this._attackCurve === "linear") {
      this._sig.linearRampTo(velocity, attack, time);
    } else if (this._attackCurve === "exponential") {
      this._sig.targetRampTo(velocity, attack, time);
    } else {
      this._sig.cancelAndHoldAtTime(time);
      let curve = this._attackCurve;
      for (let i2 = 1; i2 < curve.length; i2++) {
        if (curve[i2 - 1] <= currentValue && currentValue <= curve[i2]) {
          curve = this._attackCurve.slice(i2);
          curve[0] = currentValue;
          break;
        }
      }
      this._sig.setValueCurveAtTime(curve, time, attack, velocity);
    }
    if (decay && this.sustain < 1) {
      const decayValue = velocity * this.sustain;
      const decayStart = time + attack;
      this.log("decay", decayStart);
      if (this._decayCurve === "linear") {
        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);
      } else {
        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);
      }
    }
    return this;
  }
  triggerRelease(time) {
    this.log("triggerRelease", time);
    time = this.toSeconds(time);
    const currentValue = this.getValueAtTime(time);
    if (currentValue > 0) {
      const release = this.toSeconds(this.release);
      if (release < this.sampleTime) {
        this._sig.setValueAtTime(0, time);
      } else if (this._releaseCurve === "linear") {
        this._sig.linearRampTo(0, release, time);
      } else if (this._releaseCurve === "exponential") {
        this._sig.targetRampTo(0, release, time);
      } else {
        assert(isArray(this._releaseCurve), "releaseCurve must be either 'linear', 'exponential' or an array");
        this._sig.cancelAndHoldAtTime(time);
        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);
      }
    }
    return this;
  }
  getValueAtTime(time) {
    return this._sig.getValueAtTime(time);
  }
  triggerAttackRelease(duration, time, velocity = 1) {
    time = this.toSeconds(time);
    this.triggerAttack(time, velocity);
    this.triggerRelease(time + this.toSeconds(duration));
    return this;
  }
  cancel(after) {
    this._sig.cancelScheduledValues(this.toSeconds(after));
    return this;
  }
  connect(destination, outputNumber = 0, inputNumber = 0) {
    connectSignal(this, destination, outputNumber, inputNumber);
    return this;
  }
  asArray(length2 = 1024) {
    return __awaiter(this, void 0, void 0, function* () {
      const duration = length2 / this.context.sampleRate;
      const context = new OfflineContext(1, duration, this.context.sampleRate);
      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);
      const envelopeDuration = attackPortion + this.toSeconds(this.release);
      const sustainTime = envelopeDuration * 0.1;
      const totalDuration = envelopeDuration + sustainTime;
      const clone = new this.constructor(Object.assign(this.get(), {
        attack: duration * this.toSeconds(this.attack) / totalDuration,
        decay: duration * this.toSeconds(this.decay) / totalDuration,
        release: duration * this.toSeconds(this.release) / totalDuration,
        context
      }));
      clone._sig.toDestination();
      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);
      const buffer = yield context.render();
      return buffer.getChannelData(0);
    });
  }
  dispose() {
    super.dispose();
    this._sig.dispose();
    return this;
  }
}
__decorate([
  timeRange(0)
], Envelope.prototype, "attack", void 0);
__decorate([
  timeRange(0)
], Envelope.prototype, "decay", void 0);
__decorate([
  range(0, 1)
], Envelope.prototype, "sustain", void 0);
__decorate([
  timeRange(0)
], Envelope.prototype, "release", void 0);
const EnvelopeCurves = (() => {
  const curveLen = 128;
  let i2;
  let k;
  const cosineCurve = [];
  for (i2 = 0; i2 < curveLen; i2++) {
    cosineCurve[i2] = Math.sin(i2 / (curveLen - 1) * (Math.PI / 2));
  }
  const rippleCurve = [];
  const rippleCurveFreq = 6.4;
  for (i2 = 0; i2 < curveLen - 1; i2++) {
    k = i2 / (curveLen - 1);
    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
    rippleCurve[i2] = sineWave / 10 + k * 0.83;
  }
  rippleCurve[curveLen - 1] = 1;
  const stairsCurve = [];
  const steps = 5;
  for (i2 = 0; i2 < curveLen; i2++) {
    stairsCurve[i2] = Math.ceil(i2 / (curveLen - 1) * steps) / steps;
  }
  const sineCurve = [];
  for (i2 = 0; i2 < curveLen; i2++) {
    k = i2 / (curveLen - 1);
    sineCurve[i2] = 0.5 * (1 - Math.cos(Math.PI * k));
  }
  const bounceCurve = [];
  for (i2 = 0; i2 < curveLen; i2++) {
    k = i2 / (curveLen - 1);
    const freq = Math.pow(k, 3) * 4 + 0.2;
    const val = Math.cos(freq * Math.PI * 2 * k);
    bounceCurve[i2] = Math.abs(val * (1 - k));
  }
  function invertCurve(curve) {
    const out = new Array(curve.length);
    for (let j = 0; j < curve.length; j++) {
      out[j] = 1 - curve[j];
    }
    return out;
  }
  function reverseCurve(curve) {
    return curve.slice(0).reverse();
  }
  return {
    bounce: {
      In: invertCurve(bounceCurve),
      Out: bounceCurve
    },
    cosine: {
      In: cosineCurve,
      Out: reverseCurve(cosineCurve)
    },
    exponential: "exponential",
    linear: "linear",
    ripple: {
      In: rippleCurve,
      Out: invertCurve(rippleCurve)
    },
    sine: {
      In: sineCurve,
      Out: invertCurve(sineCurve)
    },
    step: {
      In: stairsCurve,
      Out: invertCurve(stairsCurve)
    }
  };
})();
class Instrument extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Instrument.getDefaults(), arguments));
    this._scheduledEvents = [];
    this._synced = false;
    this._original_triggerAttack = this.triggerAttack;
    this._original_triggerRelease = this.triggerRelease;
    const options = optionsFromArguments(Instrument.getDefaults(), arguments);
    this._volume = this.output = new Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    readOnly(this, "volume");
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      volume: 0
    });
  }
  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);
      this._syncMethod("triggerRelease", 0);
    }
    return this;
  }
  _syncState() {
    let changed = false;
    if (!this._synced) {
      this._synced = true;
      changed = true;
    }
    return changed;
  }
  _syncMethod(method, timePosition) {
    const originalMethod = this["_original_" + method] = this[method];
    this[method] = (...args) => {
      const time = args[timePosition];
      const id = this.context.transport.schedule((t) => {
        args[timePosition] = t;
        originalMethod.apply(this, args);
      }, time);
      this._scheduledEvents.push(id);
    };
  }
  unsync() {
    this._scheduledEvents.forEach((id) => this.context.transport.clear(id));
    this._scheduledEvents = [];
    if (this._synced) {
      this._synced = false;
      this.triggerAttack = this._original_triggerAttack;
      this.triggerRelease = this._original_triggerRelease;
    }
    return this;
  }
  triggerAttackRelease(note, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    const computedDuration = this.toSeconds(duration);
    this.triggerAttack(note, computedTime, velocity);
    this.triggerRelease(computedTime + computedDuration);
    return this;
  }
  dispose() {
    super.dispose();
    this._volume.dispose();
    this.unsync();
    this._scheduledEvents = [];
    return this;
  }
}
class Monophonic extends Instrument {
  constructor() {
    super(optionsFromArguments(Monophonic.getDefaults(), arguments));
    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);
    this.portamento = options.portamento;
    this.onsilence = options.onsilence;
  }
  static getDefaults() {
    return Object.assign(Instrument.getDefaults(), {
      detune: 0,
      onsilence: noOp,
      portamento: 0
    });
  }
  triggerAttack(note, time, velocity = 1) {
    this.log("triggerAttack", note, time, velocity);
    const seconds = this.toSeconds(time);
    this._triggerEnvelopeAttack(seconds, velocity);
    this.setNote(note, seconds);
    return this;
  }
  triggerRelease(time) {
    this.log("triggerRelease", time);
    const seconds = this.toSeconds(time);
    this._triggerEnvelopeRelease(seconds);
    return this;
  }
  setNote(note, time) {
    const computedTime = this.toSeconds(time);
    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;
    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {
      const portTime = this.toSeconds(this.portamento);
      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);
    } else {
      this.frequency.setValueAtTime(computedFrequency, computedTime);
    }
    return this;
  }
}
__decorate([
  timeRange(0)
], Monophonic.prototype, "portamento", void 0);
class AmplitudeEnvelope extends Envelope {
  constructor() {
    super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "AmplitudeEnvelope";
    this._gainNode = new Gain({
      context: this.context,
      gain: 0
    });
    this.output = this._gainNode;
    this.input = this._gainNode;
    this._sig.connect(this._gainNode.gain);
    this.output = this._gainNode;
    this.input = this._gainNode;
  }
  dispose() {
    super.dispose();
    this._gainNode.dispose();
    return this;
  }
}
class Synth extends Monophonic {
  constructor() {
    super(optionsFromArguments(Synth.getDefaults(), arguments));
    this.name = "Synth";
    const options = optionsFromArguments(Synth.getDefaults(), arguments);
    this.oscillator = new OmniOscillator(Object.assign({
      context: this.context,
      detune: options.detune,
      onstop: () => this.onsilence(this)
    }, options.oscillator));
    this.frequency = this.oscillator.frequency;
    this.detune = this.oscillator.detune;
    this.envelope = new AmplitudeEnvelope(Object.assign({
      context: this.context
    }, options.envelope));
    this.oscillator.chain(this.envelope, this.output);
    readOnly(this, ["oscillator", "frequency", "detune", "envelope"]);
  }
  static getDefaults() {
    return Object.assign(Monophonic.getDefaults(), {
      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {
        attack: 5e-3,
        decay: 0.1,
        release: 1,
        sustain: 0.3
      }),
      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), "frequency", "detune"]), {
        type: "triangle"
      })
    });
  }
  _triggerEnvelopeAttack(time, velocity) {
    this.envelope.triggerAttack(time, velocity);
    this.oscillator.start(time);
    if (this.envelope.sustain === 0) {
      const computedAttack = this.toSeconds(this.envelope.attack);
      const computedDecay = this.toSeconds(this.envelope.decay);
      this.oscillator.stop(time + computedAttack + computedDecay);
    }
  }
  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);
    this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  }
  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }
  dispose() {
    super.dispose();
    this.oscillator.dispose();
    this.envelope.dispose();
    return this;
  }
}
class MembraneSynth extends Synth {
  constructor() {
    super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));
    this.name = "MembraneSynth";
    this.portamento = 0;
    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);
    this.pitchDecay = options.pitchDecay;
    this.octaves = options.octaves;
    readOnly(this, ["oscillator", "envelope"]);
  }
  static getDefaults() {
    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {
      envelope: {
        attack: 1e-3,
        attackCurve: "exponential",
        decay: 0.4,
        release: 1.4,
        sustain: 0.01
      },
      octaves: 10,
      oscillator: {
        type: "sine"
      },
      pitchDecay: 0.05
    });
  }
  setNote(note, time) {
    const seconds = this.toSeconds(time);
    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);
    const maxNote = hertz * this.octaves;
    this.oscillator.frequency.setValueAtTime(maxNote, seconds);
    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));
    return this;
  }
  dispose() {
    super.dispose();
    return this;
  }
}
__decorate([
  range(0)
], MembraneSynth.prototype, "octaves", void 0);
__decorate([
  timeRange(0)
], MembraneSynth.prototype, "pitchDecay", void 0);
const workletContext = /* @__PURE__ */ new Set();
function addToWorklet(classOrFunction) {
  workletContext.add(classOrFunction);
}
function registerProcessor(name, classDesc) {
  const processor = `registerProcessor("${name}", ${classDesc})`;
  workletContext.add(processor);
}
const toneAudioWorkletProcessor = `
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;
addToWorklet(toneAudioWorkletProcessor);
const singleIOProcess = `
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;
addToWorklet(singleIOProcess);
const delayLine = `
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;
addToWorklet(delayLine);
const workletName$1 = "feedback-comb-filter";
const feedbackCombFilter = `
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;
registerProcessor(workletName$1, feedbackCombFilter);
class PolySynth extends Instrument {
  constructor() {
    super(optionsFromArguments(PolySynth.getDefaults(), arguments, ["voice", "options"]));
    this.name = "PolySynth";
    this._availableVoices = [];
    this._activeVoices = [];
    this._voices = [];
    this._gcTimeout = -1;
    this._averageActiveVoices = 0;
    const options = optionsFromArguments(PolySynth.getDefaults(), arguments, ["voice", "options"]);
    assert(!isNumber(options.voice), "DEPRECATED: The polyphony count is no longer the first argument.");
    const defaults = options.voice.getDefaults();
    this.options = Object.assign(defaults, options.options);
    this.voice = options.voice;
    this.maxPolyphony = options.maxPolyphony;
    this._dummyVoice = this._getNextAvailableVoice();
    const index = this._voices.indexOf(this._dummyVoice);
    this._voices.splice(index, 1);
    this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);
  }
  static getDefaults() {
    return Object.assign(Instrument.getDefaults(), {
      maxPolyphony: 32,
      options: {},
      voice: Synth
    });
  }
  get activeVoices() {
    return this._activeVoices.length;
  }
  _makeVoiceAvailable(voice) {
    this._availableVoices.push(voice);
    const activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);
    this._activeVoices.splice(activeVoiceIndex, 1);
  }
  _getNextAvailableVoice() {
    if (this._availableVoices.length) {
      return this._availableVoices.shift();
    } else if (this._voices.length < this.maxPolyphony) {
      const voice = new this.voice(Object.assign(this.options, {
        context: this.context,
        onsilence: this._makeVoiceAvailable.bind(this)
      }));
      voice.connect(this.output);
      this._voices.push(voice);
      return voice;
    } else {
      warn("Max polyphony exceeded. Note dropped.");
    }
  }
  _collectGarbage() {
    this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);
    if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {
      const firstAvail = this._availableVoices.shift();
      const index = this._voices.indexOf(firstAvail);
      this._voices.splice(index, 1);
      if (!this.context.isOffline) {
        firstAvail.dispose();
      }
    }
  }
  _triggerAttack(notes, time, velocity) {
    notes.forEach((note) => {
      const midiNote = new MidiClass(this.context, note).toMidi();
      const voice = this._getNextAvailableVoice();
      if (voice) {
        voice.triggerAttack(note, time, velocity);
        this._activeVoices.push({
          midi: midiNote,
          voice,
          released: false
        });
        this.log("triggerAttack", note, time);
      }
    });
  }
  _triggerRelease(notes, time) {
    notes.forEach((note) => {
      const midiNote = new MidiClass(this.context, note).toMidi();
      const event = this._activeVoices.find(({ midi, released }) => midi === midiNote && !released);
      if (event) {
        event.voice.triggerRelease(time);
        event.released = true;
        this.log("triggerRelease", note, time);
      }
    });
  }
  _scheduleEvent(type, notes, time, velocity) {
    assert(!this.disposed, "Synth was already disposed");
    if (time <= this.now()) {
      if (type === "attack") {
        this._triggerAttack(notes, time, velocity);
      } else {
        this._triggerRelease(notes, time);
      }
    } else {
      this.context.setTimeout(() => {
        this._scheduleEvent(type, notes, time, velocity);
      }, time - this.now());
    }
  }
  triggerAttack(notes, time, velocity) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }
    const computedTime = this.toSeconds(time);
    this._scheduleEvent("attack", notes, computedTime, velocity);
    return this;
  }
  triggerRelease(notes, time) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }
    const computedTime = this.toSeconds(time);
    this._scheduleEvent("release", notes, computedTime);
    return this;
  }
  triggerAttackRelease(notes, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);
    if (isArray(duration)) {
      assert(isArray(notes), "If the duration is an array, the notes must also be an array");
      notes = notes;
      for (let i2 = 0; i2 < notes.length; i2++) {
        const d = duration[Math.min(i2, duration.length - 1)];
        const durationSeconds = this.toSeconds(d);
        assert(durationSeconds > 0, "The duration must be greater than 0");
        this.triggerRelease(notes[i2], computedTime + durationSeconds);
      }
    } else {
      const durationSeconds = this.toSeconds(duration);
      assert(durationSeconds > 0, "The duration must be greater than 0");
      this.triggerRelease(notes, computedTime + durationSeconds);
    }
    return this;
  }
  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);
      this._syncMethod("triggerRelease", 1);
    }
    return this;
  }
  set(options) {
    const sanitizedOptions = omitFromObject(options, ["onsilence", "context"]);
    this.options = deepMerge(this.options, sanitizedOptions);
    this._voices.forEach((voice) => voice.set(sanitizedOptions));
    this._dummyVoice.set(sanitizedOptions);
    return this;
  }
  get() {
    return this._dummyVoice.get();
  }
  releaseAll(time) {
    const computedTime = this.toSeconds(time);
    this._activeVoices.forEach(({ voice }) => {
      voice.triggerRelease(computedTime);
    });
    return this;
  }
  dispose() {
    super.dispose();
    this._dummyVoice.dispose();
    this._voices.forEach((v) => v.dispose());
    this._activeVoices = [];
    this._availableVoices = [];
    this.context.clearInterval(this._gcTimeout);
    return this;
  }
}
class Sampler extends Instrument {
  constructor() {
    super(optionsFromArguments(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls"));
    this.name = "Sampler";
    this._activeSources = /* @__PURE__ */ new Map();
    const options = optionsFromArguments(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    const urlMap = {};
    Object.keys(options.urls).forEach((note) => {
      const noteNumber = parseInt(note, 10);
      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);
      if (isNote(note)) {
        const mid = new FrequencyClass(this.context, note).toMidi();
        urlMap[mid] = options.urls[note];
      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {
        urlMap[noteNumber] = options.urls[noteNumber];
      }
    });
    this._buffers = new ToneAudioBuffers({
      urls: urlMap,
      onload: options.onload,
      baseUrl: options.baseUrl,
      onerror: options.onerror
    });
    this.attack = options.attack;
    this.release = options.release;
    this.curve = options.curve;
    if (this._buffers.loaded) {
      Promise.resolve().then(options.onload);
    }
  }
  static getDefaults() {
    return Object.assign(Instrument.getDefaults(), {
      attack: 0,
      baseUrl: "",
      curve: "exponential",
      onload: noOp,
      onerror: noOp,
      release: 0.1,
      urls: {}
    });
  }
  _findClosest(midi) {
    const MAX_INTERVAL = 96;
    let interval = 0;
    while (interval < MAX_INTERVAL) {
      if (this._buffers.has(midi + interval)) {
        return -interval;
      } else if (this._buffers.has(midi - interval)) {
        return interval;
      }
      interval++;
    }
    throw new Error(`No available buffers for note: ${midi}`);
  }
  triggerAttack(notes, time, velocity = 1) {
    this.log("triggerAttack", notes, time, velocity);
    if (!Array.isArray(notes)) {
      notes = [notes];
    }
    notes.forEach((note) => {
      const midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());
      const midi = Math.round(midiFloat);
      const remainder = midiFloat - midi;
      const difference = this._findClosest(midi);
      const closestNote = midi - difference;
      const buffer = this._buffers.get(closestNote);
      const playbackRate = intervalToFrequencyRatio(difference + remainder);
      const source = new ToneBufferSource({
        url: buffer,
        context: this.context,
        curve: this.curve,
        fadeIn: this.attack,
        fadeOut: this.release,
        playbackRate
      }).connect(this.output);
      source.start(time, 0, buffer.duration / playbackRate, velocity);
      if (!isArray(this._activeSources.get(midi))) {
        this._activeSources.set(midi, []);
      }
      this._activeSources.get(midi).push(source);
      source.onended = () => {
        if (this._activeSources && this._activeSources.has(midi)) {
          const sources = this._activeSources.get(midi);
          const index = sources.indexOf(source);
          if (index !== -1) {
            sources.splice(index, 1);
          }
        }
      };
    });
    return this;
  }
  triggerRelease(notes, time) {
    this.log("triggerRelease", notes, time);
    if (!Array.isArray(notes)) {
      notes = [notes];
    }
    notes.forEach((note) => {
      const midi = new FrequencyClass(this.context, note).toMidi();
      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {
        const sources = this._activeSources.get(midi);
        time = this.toSeconds(time);
        sources.forEach((source) => {
          source.stop(time);
        });
        this._activeSources.set(midi, []);
      }
    });
    return this;
  }
  releaseAll(time) {
    const computedTime = this.toSeconds(time);
    this._activeSources.forEach((sources) => {
      while (sources.length) {
        const source = sources.shift();
        source.stop(computedTime);
      }
    });
    return this;
  }
  sync() {
    if (this._syncState()) {
      this._syncMethod("triggerAttack", 1);
      this._syncMethod("triggerRelease", 1);
    }
    return this;
  }
  triggerAttackRelease(notes, duration, time, velocity = 1) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);
    if (isArray(duration)) {
      assert(isArray(notes), "notes must be an array when duration is array");
      notes.forEach((note, index) => {
        const d = duration[Math.min(index, duration.length - 1)];
        this.triggerRelease(note, computedTime + this.toSeconds(d));
      });
    } else {
      this.triggerRelease(notes, computedTime + this.toSeconds(duration));
    }
    return this;
  }
  add(note, url2, callback) {
    assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);
    if (isNote(note)) {
      const mid = new FrequencyClass(this.context, note).toMidi();
      this._buffers.add(mid, url2, callback);
    } else {
      this._buffers.add(note, url2, callback);
    }
    return this;
  }
  get loaded() {
    return this._buffers.loaded;
  }
  dispose() {
    super.dispose();
    this._buffers.dispose();
    this._activeSources.forEach((sources) => {
      sources.forEach((source) => source.dispose());
    });
    this._activeSources.clear();
    return this;
  }
}
__decorate([
  timeRange(0)
], Sampler.prototype, "attack", void 0);
__decorate([
  timeRange(0)
], Sampler.prototype, "release", void 0);
class Panner extends ToneAudioNode {
  constructor() {
    super(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, ["pan"])));
    this.name = "Panner";
    this._panner = this.context.createStereoPanner();
    this.input = this._panner;
    this.output = this._panner;
    const options = optionsFromArguments(Panner.getDefaults(), arguments, ["pan"]);
    this.pan = new Param({
      context: this.context,
      param: this._panner.pan,
      value: options.pan,
      minValue: -1,
      maxValue: 1
    });
    this._panner.channelCount = options.channelCount;
    this._panner.channelCountMode = "explicit";
    readOnly(this, "pan");
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      pan: 0,
      channelCount: 1
    });
  }
  dispose() {
    super.dispose();
    this._panner.disconnect();
    this.pan.dispose();
    return this;
  }
}
const workletName = "bit-crusher";
const bitCrusherWorklet = `
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;
registerProcessor(workletName, bitCrusherWorklet);
class Solo extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Solo.getDefaults(), arguments, ["solo"]));
    this.name = "Solo";
    const options = optionsFromArguments(Solo.getDefaults(), arguments, ["solo"]);
    this.input = this.output = new Gain({
      context: this.context
    });
    if (!Solo._allSolos.has(this.context)) {
      Solo._allSolos.set(this.context, /* @__PURE__ */ new Set());
    }
    Solo._allSolos.get(this.context).add(this);
    this.solo = options.solo;
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      solo: false
    });
  }
  get solo() {
    return this._isSoloed();
  }
  set solo(solo) {
    if (solo) {
      this._addSolo();
    } else {
      this._removeSolo();
    }
    Solo._allSolos.get(this.context).forEach((instance2) => instance2._updateSolo());
  }
  get muted() {
    return this.input.gain.value === 0;
  }
  _addSolo() {
    if (!Solo._soloed.has(this.context)) {
      Solo._soloed.set(this.context, /* @__PURE__ */ new Set());
    }
    Solo._soloed.get(this.context).add(this);
  }
  _removeSolo() {
    if (Solo._soloed.has(this.context)) {
      Solo._soloed.get(this.context).delete(this);
    }
  }
  _isSoloed() {
    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);
  }
  _noSolos() {
    return !Solo._soloed.has(this.context) || Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;
  }
  _updateSolo() {
    if (this._isSoloed()) {
      this.input.gain.value = 1;
    } else if (this._noSolos()) {
      this.input.gain.value = 1;
    } else {
      this.input.gain.value = 0;
    }
  }
  dispose() {
    super.dispose();
    Solo._allSolos.get(this.context).delete(this);
    this._removeSolo();
    return this;
  }
}
Solo._allSolos = /* @__PURE__ */ new Map();
Solo._soloed = /* @__PURE__ */ new Map();
class PanVol extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(PanVol.getDefaults(), arguments, ["pan", "volume"]));
    this.name = "PanVol";
    const options = optionsFromArguments(PanVol.getDefaults(), arguments, ["pan", "volume"]);
    this._panner = this.input = new Panner({
      context: this.context,
      pan: options.pan,
      channelCount: options.channelCount
    });
    this.pan = this._panner.pan;
    this._volume = this.output = new Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    this._panner.connect(this._volume);
    this.mute = options.mute;
    readOnly(this, ["pan", "volume"]);
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      mute: false,
      pan: 0,
      volume: 0,
      channelCount: 1
    });
  }
  get mute() {
    return this._volume.mute;
  }
  set mute(mute) {
    this._volume.mute = mute;
  }
  dispose() {
    super.dispose();
    this._panner.dispose();
    this.pan.dispose();
    this._volume.dispose();
    this.volume.dispose();
    return this;
  }
}
class Channel extends ToneAudioNode {
  constructor() {
    super(optionsFromArguments(Channel.getDefaults(), arguments, ["volume", "pan"]));
    this.name = "Channel";
    const options = optionsFromArguments(Channel.getDefaults(), arguments, ["volume", "pan"]);
    this._solo = this.input = new Solo({
      solo: options.solo,
      context: this.context
    });
    this._panVol = this.output = new PanVol({
      context: this.context,
      pan: options.pan,
      volume: options.volume,
      mute: options.mute,
      channelCount: options.channelCount
    });
    this.pan = this._panVol.pan;
    this.volume = this._panVol.volume;
    this._solo.connect(this._panVol);
    readOnly(this, ["pan", "volume"]);
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      pan: 0,
      volume: 0,
      mute: false,
      solo: false,
      channelCount: 1
    });
  }
  get solo() {
    return this._solo.solo;
  }
  set solo(solo) {
    this._solo.solo = solo;
  }
  get muted() {
    return this._solo.muted || this.mute;
  }
  get mute() {
    return this._panVol.mute;
  }
  set mute(mute) {
    this._panVol.mute = mute;
  }
  _getBus(name) {
    if (!Channel.buses.has(name)) {
      Channel.buses.set(name, new Gain({ context: this.context }));
    }
    return Channel.buses.get(name);
  }
  send(name, volume = 0) {
    const bus = this._getBus(name);
    const sendKnob = new Gain({
      context: this.context,
      units: "decibels",
      gain: volume
    });
    this.connect(sendKnob);
    sendKnob.connect(bus);
    return sendKnob;
  }
  receive(name) {
    const bus = this._getBus(name);
    bus.connect(this);
    return this;
  }
  dispose() {
    super.dispose();
    this._panVol.dispose();
    this.pan.dispose();
    this.volume.dispose();
    this._solo.dispose();
    return this;
  }
}
Channel.buses = /* @__PURE__ */ new Map();
class Listener extends ToneAudioNode {
  constructor() {
    super(...arguments);
    this.name = "Listener";
    this.positionX = new Param({
      context: this.context,
      param: this.context.rawContext.listener.positionX
    });
    this.positionY = new Param({
      context: this.context,
      param: this.context.rawContext.listener.positionY
    });
    this.positionZ = new Param({
      context: this.context,
      param: this.context.rawContext.listener.positionZ
    });
    this.forwardX = new Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardX
    });
    this.forwardY = new Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardY
    });
    this.forwardZ = new Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardZ
    });
    this.upX = new Param({
      context: this.context,
      param: this.context.rawContext.listener.upX
    });
    this.upY = new Param({
      context: this.context,
      param: this.context.rawContext.listener.upY
    });
    this.upZ = new Param({
      context: this.context,
      param: this.context.rawContext.listener.upZ
    });
  }
  static getDefaults() {
    return Object.assign(ToneAudioNode.getDefaults(), {
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      forwardX: 0,
      forwardY: 0,
      forwardZ: -1,
      upX: 0,
      upY: 1,
      upZ: 0
    });
  }
  dispose() {
    super.dispose();
    this.positionX.dispose();
    this.positionY.dispose();
    this.positionZ.dispose();
    this.forwardX.dispose();
    this.forwardY.dispose();
    this.forwardZ.dispose();
    this.upX.dispose();
    this.upY.dispose();
    this.upZ.dispose();
    return this;
  }
}
onContextInit((context) => {
  context.listener = new Listener({ context });
});
onContextClose((context) => {
  context.listener.dispose();
});
getContext().transport;
getContext().destination;
getContext().destination;
getContext().listener;
getContext().draw;
getContext();
class Key {
  constructor(x, y, width2, height2, note, colour) {
    this.x = x;
    this.y = y;
    this.width = width2;
    this.height = height2;
    this.note = note;
    this.colour = colour;
    this.playing = false;
    this.fingersOnNote = /* @__PURE__ */ new Set();
    this.oscillator = new PolySynth().toDestination();
  }
  draw(p) {
    p.fill(255);
    p.stroke(0);
    p.rect(this.x, this.y, this.width, this.height);
    p.fill(0);
    if (this.note[0] === "C" || this.note[0] === "D" || this.note[0] === "F" || this.note[0] === "G" || this.note[0] === "A") {
      p.rect(this.x + this.width - 25, 0, 25, 250, 2, 0, 0, 0);
    }
    if (this.note[0] === "D" || this.note[0] === "E" || this.note[0] === "G" || this.note[0] === "A" || this.note[0] === "B") {
      p.rect(this.x, 0, 25, 250, 0, 0, 0, 5);
    }
  }
  detectFingers(fingers) {
    for (let finger in fingers) {
      const fingerX = fingers[finger][0][0];
      const fingerY = fingers[finger][0][1];
      if (fingerX - 10 > this.x && fingerX + 10 < this.x + this.width && fingerY - 10 > this.y && fingerY + 10 < this.y + this.height) {
        this.fingersOnNote.add(finger);
      } else {
        this.fingersOnNote.delete(finger);
      }
    }
  }
}
class Piano {
  constructor() {
    this.keys = [];
    this.notes = ["C4", "D4", "E4", "F4", "G4", "A4", "B4", "C4"];
    this.notesToPlay = /* @__PURE__ */ new Set();
    this.notesPlaying = /* @__PURE__ */ new Set();
    this.notesToRelease = /* @__PURE__ */ new Set();
    this.createKeys();
  }
  createKeys() {
    for (let i2 = 0; i2 < this.notes.length; i2++) {
      let tempKey = new Key(i2 * 80, 0, 80, 480, this.notes[i2], "white");
      this.keys.push(tempKey);
    }
  }
  drawKeys(p) {
    this.keys.forEach((key) => {
      key.draw(p);
    });
  }
  playNotes() {
    if (this.notesToPlay.size > 0) {
      this.keys.forEach((key) => {
        if (this.notesToPlay.has(key.note)) {
          key.oscillator.triggerAttack(key.note);
        }
      });
      this.notesToPlay.forEach((note) => {
        this.notesPlaying.add(note);
      });
      this.notesToPlay.clear();
    }
  }
  releaseNotes() {
    if (this.notesToRelease.size > 0) {
      this.keys.forEach((key) => {
        if (this.notesToRelease.has(key.note)) {
          key.oscillator.triggerRelease(key.note);
        }
      });
      this.notesToRelease.clear();
    }
  }
  checkNotesToPlay(curledFingers) {
    this.keys.forEach((key) => {
      if (!this.notesPlaying.has(key.note)) {
        curledFingers.forEach((curledFinger) => {
          if (key.fingersOnNote.has(curledFinger)) {
            this.notesToPlay.add(key.note);
          }
        });
      }
    });
    this.playNotes();
  }
  checkNotesReleased(curledFingers) {
    this.keys.forEach((key) => {
      let stopNote = true;
      if (this.notesPlaying.has(key.note)) {
        curledFingers.forEach((curledFinger) => {
          if (key.fingersOnNote.has(curledFinger)) {
            stopNote = false;
          }
        });
      }
      if (stopNote) {
        this.notesPlaying.delete(key.note);
        this.notesToRelease.add(key.note);
      }
    });
    this.releaseNotes();
  }
}
const PACKET_TYPES = /* @__PURE__ */ Object.create(null);
PACKET_TYPES["open"] = "0";
PACKET_TYPES["close"] = "1";
PACKET_TYPES["ping"] = "2";
PACKET_TYPES["pong"] = "3";
PACKET_TYPES["message"] = "4";
PACKET_TYPES["upgrade"] = "5";
PACKET_TYPES["noop"] = "6";
const PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
Object.keys(PACKET_TYPES).forEach((key) => {
  PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
});
const ERROR_PACKET = { type: "error", data: "parser error" };
const withNativeBlob$1 = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
const withNativeArrayBuffer$2 = typeof ArrayBuffer === "function";
const isView$1 = (obj) => {
  return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
};
const encodePacket = ({ type, data }, supportsBinary, callback) => {
  if (withNativeBlob$1 && data instanceof Blob) {
    if (supportsBinary) {
      return callback(data);
    } else {
      return encodeBlobAsBase64(data, callback);
    }
  } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {
    if (supportsBinary) {
      return callback(data);
    } else {
      return encodeBlobAsBase64(new Blob([data]), callback);
    }
  }
  return callback(PACKET_TYPES[type] + (data || ""));
};
const encodeBlobAsBase64 = (data, callback) => {
  const fileReader = new FileReader();
  fileReader.onload = function() {
    const content = fileReader.result.split(",")[1];
    callback("b" + (content || ""));
  };
  return fileReader.readAsDataURL(data);
};
const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const lookup$1 = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
for (let i2 = 0; i2 < chars.length; i2++) {
  lookup$1[chars.charCodeAt(i2)] = i2;
}
const decode$1 = (base64) => {
  let bufferLength = base64.length * 0.75, len = base64.length, i2, p = 0, encoded1, encoded2, encoded3, encoded4;
  if (base64[base64.length - 1] === "=") {
    bufferLength--;
    if (base64[base64.length - 2] === "=") {
      bufferLength--;
    }
  }
  const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
  for (i2 = 0; i2 < len; i2 += 4) {
    encoded1 = lookup$1[base64.charCodeAt(i2)];
    encoded2 = lookup$1[base64.charCodeAt(i2 + 1)];
    encoded3 = lookup$1[base64.charCodeAt(i2 + 2)];
    encoded4 = lookup$1[base64.charCodeAt(i2 + 3)];
    bytes[p++] = encoded1 << 2 | encoded2 >> 4;
    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
  }
  return arraybuffer;
};
const withNativeArrayBuffer$1 = typeof ArrayBuffer === "function";
const decodePacket = (encodedPacket, binaryType) => {
  if (typeof encodedPacket !== "string") {
    return {
      type: "message",
      data: mapBinary(encodedPacket, binaryType)
    };
  }
  const type = encodedPacket.charAt(0);
  if (type === "b") {
    return {
      type: "message",
      data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
    };
  }
  const packetType = PACKET_TYPES_REVERSE[type];
  if (!packetType) {
    return ERROR_PACKET;
  }
  return encodedPacket.length > 1 ? {
    type: PACKET_TYPES_REVERSE[type],
    data: encodedPacket.substring(1)
  } : {
    type: PACKET_TYPES_REVERSE[type]
  };
};
const decodeBase64Packet = (data, binaryType) => {
  if (withNativeArrayBuffer$1) {
    const decoded = decode$1(data);
    return mapBinary(decoded, binaryType);
  } else {
    return { base64: true, data };
  }
};
const mapBinary = (data, binaryType) => {
  switch (binaryType) {
    case "blob":
      return data instanceof ArrayBuffer ? new Blob([data]) : data;
    case "arraybuffer":
    default:
      return data;
  }
};
const SEPARATOR = String.fromCharCode(30);
const encodePayload = (packets, callback) => {
  const length2 = packets.length;
  const encodedPackets = new Array(length2);
  let count = 0;
  packets.forEach((packet, i2) => {
    encodePacket(packet, false, (encodedPacket) => {
      encodedPackets[i2] = encodedPacket;
      if (++count === length2) {
        callback(encodedPackets.join(SEPARATOR));
      }
    });
  });
};
const decodePayload = (encodedPayload, binaryType) => {
  const encodedPackets = encodedPayload.split(SEPARATOR);
  const packets = [];
  for (let i2 = 0; i2 < encodedPackets.length; i2++) {
    const decodedPacket = decodePacket(encodedPackets[i2], binaryType);
    packets.push(decodedPacket);
    if (decodedPacket.type === "error") {
      break;
    }
  }
  return packets;
};
const protocol$1 = 4;
function Emitter2(obj) {
  if (obj)
    return mixin(obj);
}
function mixin(obj) {
  for (var key in Emitter2.prototype) {
    obj[key] = Emitter2.prototype[key];
  }
  return obj;
}
Emitter2.prototype.on = Emitter2.prototype.addEventListener = function(event, fn) {
  this._callbacks = this._callbacks || {};
  (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
  return this;
};
Emitter2.prototype.once = function(event, fn) {
  function on2() {
    this.off(event, on2);
    fn.apply(this, arguments);
  }
  on2.fn = fn;
  this.on(event, on2);
  return this;
};
Emitter2.prototype.off = Emitter2.prototype.removeListener = Emitter2.prototype.removeAllListeners = Emitter2.prototype.removeEventListener = function(event, fn) {
  this._callbacks = this._callbacks || {};
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }
  var callbacks = this._callbacks["$" + event];
  if (!callbacks)
    return this;
  if (1 == arguments.length) {
    delete this._callbacks["$" + event];
    return this;
  }
  var cb;
  for (var i2 = 0; i2 < callbacks.length; i2++) {
    cb = callbacks[i2];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i2, 1);
      break;
    }
  }
  if (callbacks.length === 0) {
    delete this._callbacks["$" + event];
  }
  return this;
};
Emitter2.prototype.emit = function(event) {
  this._callbacks = this._callbacks || {};
  var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
  for (var i2 = 1; i2 < arguments.length; i2++) {
    args[i2 - 1] = arguments[i2];
  }
  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
      callbacks[i2].apply(this, args);
    }
  }
  return this;
};
Emitter2.prototype.emitReserved = Emitter2.prototype.emit;
Emitter2.prototype.listeners = function(event) {
  this._callbacks = this._callbacks || {};
  return this._callbacks["$" + event] || [];
};
Emitter2.prototype.hasListeners = function(event) {
  return !!this.listeners(event).length;
};
const globalThisShim = (() => {
  if (typeof self !== "undefined") {
    return self;
  } else if (typeof window !== "undefined") {
    return window;
  } else {
    return Function("return this")();
  }
})();
function pick(obj, ...attr2) {
  return attr2.reduce((acc, k) => {
    if (obj.hasOwnProperty(k)) {
      acc[k] = obj[k];
    }
    return acc;
  }, {});
}
const NATIVE_SET_TIMEOUT = setTimeout;
const NATIVE_CLEAR_TIMEOUT = clearTimeout;
function installTimerFunctions(obj, opts) {
  if (opts.useNativeTimers) {
    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
  } else {
    obj.setTimeoutFn = setTimeout.bind(globalThisShim);
    obj.clearTimeoutFn = clearTimeout.bind(globalThisShim);
  }
}
const BASE64_OVERHEAD = 1.33;
function byteLength(obj) {
  if (typeof obj === "string") {
    return utf8Length(obj);
  }
  return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
}
function utf8Length(str) {
  let c = 0, length2 = 0;
  for (let i2 = 0, l = str.length; i2 < l; i2++) {
    c = str.charCodeAt(i2);
    if (c < 128) {
      length2 += 1;
    } else if (c < 2048) {
      length2 += 2;
    } else if (c < 55296 || c >= 57344) {
      length2 += 3;
    } else {
      i2++;
      length2 += 4;
    }
  }
  return length2;
}
class TransportError extends Error {
  constructor(reason, description, context) {
    super(reason);
    this.description = description;
    this.context = context;
    this.type = "TransportError";
  }
}
class Transport2 extends Emitter2 {
  constructor(opts) {
    super();
    this.writable = false;
    installTimerFunctions(this, opts);
    this.opts = opts;
    this.query = opts.query;
    this.readyState = "";
    this.socket = opts.socket;
  }
  onError(reason, description, context) {
    super.emitReserved("error", new TransportError(reason, description, context));
    return this;
  }
  open() {
    if ("closed" === this.readyState || "" === this.readyState) {
      this.readyState = "opening";
      this.doOpen();
    }
    return this;
  }
  close() {
    if ("opening" === this.readyState || "open" === this.readyState) {
      this.doClose();
      this.onClose();
    }
    return this;
  }
  send(packets) {
    if ("open" === this.readyState) {
      this.write(packets);
    }
  }
  onOpen() {
    this.readyState = "open";
    this.writable = true;
    super.emitReserved("open");
  }
  onData(data) {
    const packet = decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  }
  onPacket(packet) {
    super.emitReserved("packet", packet);
  }
  onClose(details) {
    this.readyState = "closed";
    super.emitReserved("close", details);
  }
}
const alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), length = 64, map = {};
let seed = 0, i = 0, prev;
function encode$1(num) {
  let encoded = "";
  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);
  return encoded;
}
function yeast() {
  const now = encode$1(+new Date());
  if (now !== prev)
    return seed = 0, prev = now;
  return now + "." + encode$1(seed++);
}
for (; i < length; i++)
  map[alphabet[i]] = i;
function encode(obj) {
  let str = "";
  for (let i2 in obj) {
    if (obj.hasOwnProperty(i2)) {
      if (str.length)
        str += "&";
      str += encodeURIComponent(i2) + "=" + encodeURIComponent(obj[i2]);
    }
  }
  return str;
}
function decode(qs) {
  let qry = {};
  let pairs = qs.split("&");
  for (let i2 = 0, l = pairs.length; i2 < l; i2++) {
    let pair = pairs[i2].split("=");
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
}
let value = false;
try {
  value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
} catch (err) {
}
const hasCORS = value;
function XHR(opts) {
  const xdomain = opts.xdomain;
  try {
    if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) {
  }
  if (!xdomain) {
    try {
      return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch (e) {
    }
  }
}
function empty() {
}
const hasXHR2 = function() {
  const xhr = new XHR({
    xdomain: false
  });
  return null != xhr.responseType;
}();
class Polling extends Transport2 {
  constructor(opts) {
    super(opts);
    this.polling = false;
    if (typeof location !== "undefined") {
      const isSSL = "https:" === location.protocol;
      let port = location.port;
      if (!port) {
        port = isSSL ? "443" : "80";
      }
      this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
      this.xs = opts.secure !== isSSL;
    }
    const forceBase64 = opts && opts.forceBase64;
    this.supportsBinary = hasXHR2 && !forceBase64;
  }
  get name() {
    return "polling";
  }
  doOpen() {
    this.poll();
  }
  pause(onPause) {
    this.readyState = "pausing";
    const pause = () => {
      this.readyState = "paused";
      onPause();
    };
    if (this.polling || !this.writable) {
      let total = 0;
      if (this.polling) {
        total++;
        this.once("pollComplete", function() {
          --total || pause();
        });
      }
      if (!this.writable) {
        total++;
        this.once("drain", function() {
          --total || pause();
        });
      }
    } else {
      pause();
    }
  }
  poll() {
    this.polling = true;
    this.doPoll();
    this.emitReserved("poll");
  }
  onData(data) {
    const callback = (packet) => {
      if ("opening" === this.readyState && packet.type === "open") {
        this.onOpen();
      }
      if ("close" === packet.type) {
        this.onClose({ description: "transport closed by the server" });
        return false;
      }
      this.onPacket(packet);
    };
    decodePayload(data, this.socket.binaryType).forEach(callback);
    if ("closed" !== this.readyState) {
      this.polling = false;
      this.emitReserved("pollComplete");
      if ("open" === this.readyState) {
        this.poll();
      }
    }
  }
  doClose() {
    const close = () => {
      this.write([{ type: "close" }]);
    };
    if ("open" === this.readyState) {
      close();
    } else {
      this.once("open", close);
    }
  }
  write(packets) {
    this.writable = false;
    encodePayload(packets, (data) => {
      this.doWrite(data, () => {
        this.writable = true;
        this.emitReserved("drain");
      });
    });
  }
  uri() {
    let query = this.query || {};
    const schema = this.opts.secure ? "https" : "http";
    let port = "";
    if (false !== this.opts.timestampRequests) {
      query[this.opts.timestampParam] = yeast();
    }
    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }
    if (this.opts.port && ("https" === schema && Number(this.opts.port) !== 443 || "http" === schema && Number(this.opts.port) !== 80)) {
      port = ":" + this.opts.port;
    }
    const encodedQuery = encode(query);
    const ipv6 = this.opts.hostname.indexOf(":") !== -1;
    return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
  }
  request(opts = {}) {
    Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
    return new Request$1(this.uri(), opts);
  }
  doWrite(data, fn) {
    const req = this.request({
      method: "POST",
      data
    });
    req.on("success", fn);
    req.on("error", (xhrStatus, context) => {
      this.onError("xhr post error", xhrStatus, context);
    });
  }
  doPoll() {
    const req = this.request();
    req.on("data", this.onData.bind(this));
    req.on("error", (xhrStatus, context) => {
      this.onError("xhr poll error", xhrStatus, context);
    });
    this.pollXhr = req;
  }
}
let Request$1 = class Request2 extends Emitter2 {
  constructor(uri, opts) {
    super();
    installTimerFunctions(this, opts);
    this.opts = opts;
    this.method = opts.method || "GET";
    this.uri = uri;
    this.async = false !== opts.async;
    this.data = void 0 !== opts.data ? opts.data : null;
    this.create();
  }
  create() {
    const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    opts.xdomain = !!this.opts.xd;
    opts.xscheme = !!this.opts.xs;
    const xhr = this.xhr = new XHR(opts);
    try {
      xhr.open(this.method, this.uri, this.async);
      try {
        if (this.opts.extraHeaders) {
          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
          for (let i2 in this.opts.extraHeaders) {
            if (this.opts.extraHeaders.hasOwnProperty(i2)) {
              xhr.setRequestHeader(i2, this.opts.extraHeaders[i2]);
            }
          }
        }
      } catch (e) {
      }
      if ("POST" === this.method) {
        try {
          xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch (e) {
        }
      }
      try {
        xhr.setRequestHeader("Accept", "*/*");
      } catch (e) {
      }
      if ("withCredentials" in xhr) {
        xhr.withCredentials = this.opts.withCredentials;
      }
      if (this.opts.requestTimeout) {
        xhr.timeout = this.opts.requestTimeout;
      }
      xhr.onreadystatechange = () => {
        if (4 !== xhr.readyState)
          return;
        if (200 === xhr.status || 1223 === xhr.status) {
          this.onLoad();
        } else {
          this.setTimeoutFn(() => {
            this.onError(typeof xhr.status === "number" ? xhr.status : 0);
          }, 0);
        }
      };
      xhr.send(this.data);
    } catch (e) {
      this.setTimeoutFn(() => {
        this.onError(e);
      }, 0);
      return;
    }
    if (typeof document !== "undefined") {
      this.index = Request$1.requestsCount++;
      Request$1.requests[this.index] = this;
    }
  }
  onError(err) {
    this.emitReserved("error", err, this.xhr);
    this.cleanup(true);
  }
  cleanup(fromError) {
    if ("undefined" === typeof this.xhr || null === this.xhr) {
      return;
    }
    this.xhr.onreadystatechange = empty;
    if (fromError) {
      try {
        this.xhr.abort();
      } catch (e) {
      }
    }
    if (typeof document !== "undefined") {
      delete Request$1.requests[this.index];
    }
    this.xhr = null;
  }
  onLoad() {
    const data = this.xhr.responseText;
    if (data !== null) {
      this.emitReserved("data", data);
      this.emitReserved("success");
      this.cleanup();
    }
  }
  abort() {
    this.cleanup();
  }
};
Request$1.requestsCount = 0;
Request$1.requests = {};
if (typeof document !== "undefined") {
  if (typeof attachEvent === "function") {
    attachEvent("onunload", unloadHandler);
  } else if (typeof addEventListener === "function") {
    const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
    addEventListener(terminationEvent, unloadHandler, false);
  }
}
function unloadHandler() {
  for (let i2 in Request$1.requests) {
    if (Request$1.requests.hasOwnProperty(i2)) {
      Request$1.requests[i2].abort();
    }
  }
}
const nextTick = (() => {
  const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
  if (isPromiseAvailable) {
    return (cb) => Promise.resolve().then(cb);
  } else {
    return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
  }
})();
const WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
const usingBrowserWebSocket = true;
const defaultBinaryType = "arraybuffer";
const isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
class WS extends Transport2 {
  constructor(opts) {
    super(opts);
    this.supportsBinary = !opts.forceBase64;
  }
  get name() {
    return "websocket";
  }
  doOpen() {
    if (!this.check()) {
      return;
    }
    const uri = this.uri();
    const protocols = this.opts.protocols;
    const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
    if (this.opts.extraHeaders) {
      opts.headers = this.opts.extraHeaders;
    }
    try {
      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
    } catch (err) {
      return this.emitReserved("error", err);
    }
    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
    this.addEventListeners();
  }
  addEventListeners() {
    this.ws.onopen = () => {
      if (this.opts.autoUnref) {
        this.ws._socket.unref();
      }
      this.onOpen();
    };
    this.ws.onclose = (closeEvent) => this.onClose({
      description: "websocket connection closed",
      context: closeEvent
    });
    this.ws.onmessage = (ev) => this.onData(ev.data);
    this.ws.onerror = (e) => this.onError("websocket error", e);
  }
  write(packets) {
    this.writable = false;
    for (let i2 = 0; i2 < packets.length; i2++) {
      const packet = packets[i2];
      const lastPacket = i2 === packets.length - 1;
      encodePacket(packet, this.supportsBinary, (data) => {
        const opts = {};
        try {
          if (usingBrowserWebSocket) {
            this.ws.send(data);
          }
        } catch (e) {
        }
        if (lastPacket) {
          nextTick(() => {
            this.writable = true;
            this.emitReserved("drain");
          }, this.setTimeoutFn);
        }
      });
    }
  }
  doClose() {
    if (typeof this.ws !== "undefined") {
      this.ws.close();
      this.ws = null;
    }
  }
  uri() {
    let query = this.query || {};
    const schema = this.opts.secure ? "wss" : "ws";
    let port = "";
    if (this.opts.port && ("wss" === schema && Number(this.opts.port) !== 443 || "ws" === schema && Number(this.opts.port) !== 80)) {
      port = ":" + this.opts.port;
    }
    if (this.opts.timestampRequests) {
      query[this.opts.timestampParam] = yeast();
    }
    if (!this.supportsBinary) {
      query.b64 = 1;
    }
    const encodedQuery = encode(query);
    const ipv6 = this.opts.hostname.indexOf(":") !== -1;
    return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? "?" + encodedQuery : "");
  }
  check() {
    return !!WebSocket;
  }
}
const transports = {
  websocket: WS,
  polling: Polling
};
const re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
const parts = [
  "source",
  "protocol",
  "authority",
  "userInfo",
  "user",
  "password",
  "host",
  "port",
  "relative",
  "path",
  "directory",
  "file",
  "query",
  "anchor"
];
function parse(str) {
  const src = str, b = str.indexOf("["), e = str.indexOf("]");
  if (b != -1 && e != -1) {
    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
  }
  let m = re.exec(str || ""), uri = {}, i2 = 14;
  while (i2--) {
    uri[parts[i2]] = m[i2] || "";
  }
  if (b != -1 && e != -1) {
    uri.source = src;
    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
    uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
    uri.ipv6uri = true;
  }
  uri.pathNames = pathNames(uri, uri["path"]);
  uri.queryKey = queryKey(uri, uri["query"]);
  return uri;
}
function pathNames(obj, path) {
  const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
  if (path.slice(0, 1) == "/" || path.length === 0) {
    names.splice(0, 1);
  }
  if (path.slice(-1) == "/") {
    names.splice(names.length - 1, 1);
  }
  return names;
}
function queryKey(uri, query) {
  const data = {};
  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
    if ($1) {
      data[$1] = $2;
    }
  });
  return data;
}
let Socket$1 = class Socket extends Emitter2 {
  constructor(uri, opts = {}) {
    super();
    if (uri && "object" === typeof uri) {
      opts = uri;
      uri = null;
    }
    if (uri) {
      uri = parse(uri);
      opts.hostname = uri.host;
      opts.secure = uri.protocol === "https" || uri.protocol === "wss";
      opts.port = uri.port;
      if (uri.query)
        opts.query = uri.query;
    } else if (opts.host) {
      opts.hostname = parse(opts.host).host;
    }
    installTimerFunctions(this, opts);
    this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
    if (opts.hostname && !opts.port) {
      opts.port = this.secure ? "443" : "80";
    }
    this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
    this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
    this.transports = opts.transports || ["polling", "websocket"];
    this.readyState = "";
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.opts = Object.assign({
      path: "/engine.io",
      agent: false,
      withCredentials: false,
      upgrade: true,
      timestampParam: "t",
      rememberUpgrade: false,
      rejectUnauthorized: true,
      perMessageDeflate: {
        threshold: 1024
      },
      transportOptions: {},
      closeOnBeforeunload: true
    }, opts);
    this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
    if (typeof this.opts.query === "string") {
      this.opts.query = decode(this.opts.query);
    }
    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;
    this.pingTimeoutTimer = null;
    if (typeof addEventListener === "function") {
      if (this.opts.closeOnBeforeunload) {
        this.beforeunloadEventListener = () => {
          if (this.transport) {
            this.transport.removeAllListeners();
            this.transport.close();
          }
        };
        addEventListener("beforeunload", this.beforeunloadEventListener, false);
      }
      if (this.hostname !== "localhost") {
        this.offlineEventListener = () => {
          this.onClose("transport close", {
            description: "network connection lost"
          });
        };
        addEventListener("offline", this.offlineEventListener, false);
      }
    }
    this.open();
  }
  createTransport(name) {
    const query = Object.assign({}, this.opts.query);
    query.EIO = protocol$1;
    query.transport = name;
    if (this.id)
      query.sid = this.id;
    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
      query,
      socket: this,
      hostname: this.hostname,
      secure: this.secure,
      port: this.port
    });
    return new transports[name](opts);
  }
  open() {
    let transport;
    if (this.opts.rememberUpgrade && Socket$1.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
      transport = "websocket";
    } else if (0 === this.transports.length) {
      this.setTimeoutFn(() => {
        this.emitReserved("error", "No transports available");
      }, 0);
      return;
    } else {
      transport = this.transports[0];
    }
    this.readyState = "opening";
    try {
      transport = this.createTransport(transport);
    } catch (e) {
      this.transports.shift();
      this.open();
      return;
    }
    transport.open();
    this.setTransport(transport);
  }
  setTransport(transport) {
    if (this.transport) {
      this.transport.removeAllListeners();
    }
    this.transport = transport;
    transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
  }
  probe(name) {
    let transport = this.createTransport(name);
    let failed = false;
    Socket$1.priorWebsocketSuccess = false;
    const onTransportOpen = () => {
      if (failed)
        return;
      transport.send([{ type: "ping", data: "probe" }]);
      transport.once("packet", (msg) => {
        if (failed)
          return;
        if ("pong" === msg.type && "probe" === msg.data) {
          this.upgrading = true;
          this.emitReserved("upgrading", transport);
          if (!transport)
            return;
          Socket$1.priorWebsocketSuccess = "websocket" === transport.name;
          this.transport.pause(() => {
            if (failed)
              return;
            if ("closed" === this.readyState)
              return;
            cleanup();
            this.setTransport(transport);
            transport.send([{ type: "upgrade" }]);
            this.emitReserved("upgrade", transport);
            transport = null;
            this.upgrading = false;
            this.flush();
          });
        } else {
          const err = new Error("probe error");
          err.transport = transport.name;
          this.emitReserved("upgradeError", err);
        }
      });
    };
    function freezeTransport() {
      if (failed)
        return;
      failed = true;
      cleanup();
      transport.close();
      transport = null;
    }
    const onerror = (err) => {
      const error = new Error("probe error: " + err);
      error.transport = transport.name;
      freezeTransport();
      this.emitReserved("upgradeError", error);
    };
    function onTransportClose() {
      onerror("transport closed");
    }
    function onclose() {
      onerror("socket closed");
    }
    function onupgrade(to) {
      if (transport && to.name !== transport.name) {
        freezeTransport();
      }
    }
    const cleanup = () => {
      transport.removeListener("open", onTransportOpen);
      transport.removeListener("error", onerror);
      transport.removeListener("close", onTransportClose);
      this.off("close", onclose);
      this.off("upgrading", onupgrade);
    };
    transport.once("open", onTransportOpen);
    transport.once("error", onerror);
    transport.once("close", onTransportClose);
    this.once("close", onclose);
    this.once("upgrading", onupgrade);
    transport.open();
  }
  onOpen() {
    this.readyState = "open";
    Socket$1.priorWebsocketSuccess = "websocket" === this.transport.name;
    this.emitReserved("open");
    this.flush();
    if ("open" === this.readyState && this.opts.upgrade && this.transport.pause) {
      let i2 = 0;
      const l = this.upgrades.length;
      for (; i2 < l; i2++) {
        this.probe(this.upgrades[i2]);
      }
    }
  }
  onPacket(packet) {
    if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
      this.emitReserved("packet", packet);
      this.emitReserved("heartbeat");
      switch (packet.type) {
        case "open":
          this.onHandshake(JSON.parse(packet.data));
          break;
        case "ping":
          this.resetPingTimeout();
          this.sendPacket("pong");
          this.emitReserved("ping");
          this.emitReserved("pong");
          break;
        case "error":
          const err = new Error("server error");
          err.code = packet.data;
          this.onError(err);
          break;
        case "message":
          this.emitReserved("data", packet.data);
          this.emitReserved("message", packet.data);
          break;
      }
    }
  }
  onHandshake(data) {
    this.emitReserved("handshake", data);
    this.id = data.sid;
    this.transport.query.sid = data.sid;
    this.upgrades = this.filterUpgrades(data.upgrades);
    this.pingInterval = data.pingInterval;
    this.pingTimeout = data.pingTimeout;
    this.maxPayload = data.maxPayload;
    this.onOpen();
    if ("closed" === this.readyState)
      return;
    this.resetPingTimeout();
  }
  resetPingTimeout() {
    this.clearTimeoutFn(this.pingTimeoutTimer);
    this.pingTimeoutTimer = this.setTimeoutFn(() => {
      this.onClose("ping timeout");
    }, this.pingInterval + this.pingTimeout);
    if (this.opts.autoUnref) {
      this.pingTimeoutTimer.unref();
    }
  }
  onDrain() {
    this.writeBuffer.splice(0, this.prevBufferLen);
    this.prevBufferLen = 0;
    if (0 === this.writeBuffer.length) {
      this.emitReserved("drain");
    } else {
      this.flush();
    }
  }
  flush() {
    if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      const packets = this.getWritablePackets();
      this.transport.send(packets);
      this.prevBufferLen = packets.length;
      this.emitReserved("flush");
    }
  }
  getWritablePackets() {
    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
    if (!shouldCheckPayloadSize) {
      return this.writeBuffer;
    }
    let payloadSize = 1;
    for (let i2 = 0; i2 < this.writeBuffer.length; i2++) {
      const data = this.writeBuffer[i2].data;
      if (data) {
        payloadSize += byteLength(data);
      }
      if (i2 > 0 && payloadSize > this.maxPayload) {
        return this.writeBuffer.slice(0, i2);
      }
      payloadSize += 2;
    }
    return this.writeBuffer;
  }
  write(msg, options, fn) {
    this.sendPacket("message", msg, options, fn);
    return this;
  }
  send(msg, options, fn) {
    this.sendPacket("message", msg, options, fn);
    return this;
  }
  sendPacket(type, data, options, fn) {
    if ("function" === typeof data) {
      fn = data;
      data = void 0;
    }
    if ("function" === typeof options) {
      fn = options;
      options = null;
    }
    if ("closing" === this.readyState || "closed" === this.readyState) {
      return;
    }
    options = options || {};
    options.compress = false !== options.compress;
    const packet = {
      type,
      data,
      options
    };
    this.emitReserved("packetCreate", packet);
    this.writeBuffer.push(packet);
    if (fn)
      this.once("flush", fn);
    this.flush();
  }
  close() {
    const close = () => {
      this.onClose("forced close");
      this.transport.close();
    };
    const cleanupAndClose = () => {
      this.off("upgrade", cleanupAndClose);
      this.off("upgradeError", cleanupAndClose);
      close();
    };
    const waitForUpgrade = () => {
      this.once("upgrade", cleanupAndClose);
      this.once("upgradeError", cleanupAndClose);
    };
    if ("opening" === this.readyState || "open" === this.readyState) {
      this.readyState = "closing";
      if (this.writeBuffer.length) {
        this.once("drain", () => {
          if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        });
      } else if (this.upgrading) {
        waitForUpgrade();
      } else {
        close();
      }
    }
    return this;
  }
  onError(err) {
    Socket$1.priorWebsocketSuccess = false;
    this.emitReserved("error", err);
    this.onClose("transport error", err);
  }
  onClose(reason, description) {
    if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
      this.clearTimeoutFn(this.pingTimeoutTimer);
      this.transport.removeAllListeners("close");
      this.transport.close();
      this.transport.removeAllListeners();
      if (typeof removeEventListener === "function") {
        removeEventListener("beforeunload", this.beforeunloadEventListener, false);
        removeEventListener("offline", this.offlineEventListener, false);
      }
      this.readyState = "closed";
      this.id = null;
      this.emitReserved("close", reason, description);
      this.writeBuffer = [];
      this.prevBufferLen = 0;
    }
  }
  filterUpgrades(upgrades) {
    const filteredUpgrades = [];
    let i2 = 0;
    const j = upgrades.length;
    for (; i2 < j; i2++) {
      if (~this.transports.indexOf(upgrades[i2]))
        filteredUpgrades.push(upgrades[i2]);
    }
    return filteredUpgrades;
  }
};
Socket$1.protocol = protocol$1;
function url(uri, path = "", loc) {
  let obj = uri;
  loc = loc || typeof location !== "undefined" && location;
  if (null == uri)
    uri = loc.protocol + "//" + loc.host;
  if (typeof uri === "string") {
    if ("/" === uri.charAt(0)) {
      if ("/" === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }
    if (!/^(https?|wss?):\/\//.test(uri)) {
      if ("undefined" !== typeof loc) {
        uri = loc.protocol + "//" + uri;
      } else {
        uri = "https://" + uri;
      }
    }
    obj = parse(uri);
  }
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = "80";
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = "443";
    }
  }
  obj.path = obj.path || "/";
  const ipv6 = obj.host.indexOf(":") !== -1;
  const host = ipv6 ? "[" + obj.host + "]" : obj.host;
  obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
  obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
  return obj;
}
const withNativeArrayBuffer = typeof ArrayBuffer === "function";
const isView = (obj) => {
  return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
};
const toString = Object.prototype.toString;
const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
const withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
function isBinary(obj) {
  return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
}
function hasBinary(obj, toJSON) {
  if (!obj || typeof obj !== "object") {
    return false;
  }
  if (Array.isArray(obj)) {
    for (let i2 = 0, l = obj.length; i2 < l; i2++) {
      if (hasBinary(obj[i2])) {
        return true;
      }
    }
    return false;
  }
  if (isBinary(obj)) {
    return true;
  }
  if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }
  return false;
}
function deconstructPacket(packet) {
  const buffers = [];
  const packetData = packet.data;
  const pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length;
  return { packet: pack, buffers };
}
function _deconstructPacket(data, buffers) {
  if (!data)
    return data;
  if (isBinary(data)) {
    const placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (Array.isArray(data)) {
    const newData = new Array(data.length);
    for (let i2 = 0; i2 < data.length; i2++) {
      newData[i2] = _deconstructPacket(data[i2], buffers);
    }
    return newData;
  } else if (typeof data === "object" && !(data instanceof Date)) {
    const newData = {};
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        newData[key] = _deconstructPacket(data[key], buffers);
      }
    }
    return newData;
  }
  return data;
}
function reconstructPacket(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  delete packet.attachments;
  return packet;
}
function _reconstructPacket(data, buffers) {
  if (!data)
    return data;
  if (data && data._placeholder === true) {
    const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
    if (isIndexValid) {
      return buffers[data.num];
    } else {
      throw new Error("illegal attachments");
    }
  } else if (Array.isArray(data)) {
    for (let i2 = 0; i2 < data.length; i2++) {
      data[i2] = _reconstructPacket(data[i2], buffers);
    }
  } else if (typeof data === "object") {
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        data[key] = _reconstructPacket(data[key], buffers);
      }
    }
  }
  return data;
}
const protocol = 5;
var PacketType;
(function(PacketType2) {
  PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
  PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
  PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
  PacketType2[PacketType2["ACK"] = 3] = "ACK";
  PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
  PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
  PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
})(PacketType || (PacketType = {}));
class Encoder {
  constructor(replacer) {
    this.replacer = replacer;
  }
  encode(obj) {
    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
      if (hasBinary(obj)) {
        return this.encodeAsBinary({
          type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
          nsp: obj.nsp,
          data: obj.data,
          id: obj.id
        });
      }
    }
    return [this.encodeAsString(obj)];
  }
  encodeAsString(obj) {
    let str = "" + obj.type;
    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
      str += obj.attachments + "-";
    }
    if (obj.nsp && "/" !== obj.nsp) {
      str += obj.nsp + ",";
    }
    if (null != obj.id) {
      str += obj.id;
    }
    if (null != obj.data) {
      str += JSON.stringify(obj.data, this.replacer);
    }
    return str;
  }
  encodeAsBinary(obj) {
    const deconstruction = deconstructPacket(obj);
    const pack = this.encodeAsString(deconstruction.packet);
    const buffers = deconstruction.buffers;
    buffers.unshift(pack);
    return buffers;
  }
}
class Decoder extends Emitter2 {
  constructor(reviver) {
    super();
    this.reviver = reviver;
  }
  add(obj) {
    let packet;
    if (typeof obj === "string") {
      if (this.reconstructor) {
        throw new Error("got plaintext data when reconstructing a packet");
      }
      packet = this.decodeString(obj);
      const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
      if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
        packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
        this.reconstructor = new BinaryReconstructor(packet);
        if (packet.attachments === 0) {
          super.emitReserved("decoded", packet);
        }
      } else {
        super.emitReserved("decoded", packet);
      }
    } else if (isBinary(obj) || obj.base64) {
      if (!this.reconstructor) {
        throw new Error("got binary data when not reconstructing a packet");
      } else {
        packet = this.reconstructor.takeBinaryData(obj);
        if (packet) {
          this.reconstructor = null;
          super.emitReserved("decoded", packet);
        }
      }
    } else {
      throw new Error("Unknown type: " + obj);
    }
  }
  decodeString(str) {
    let i2 = 0;
    const p = {
      type: Number(str.charAt(0))
    };
    if (PacketType[p.type] === void 0) {
      throw new Error("unknown packet type " + p.type);
    }
    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
      const start = i2 + 1;
      while (str.charAt(++i2) !== "-" && i2 != str.length) {
      }
      const buf = str.substring(start, i2);
      if (buf != Number(buf) || str.charAt(i2) !== "-") {
        throw new Error("Illegal attachments");
      }
      p.attachments = Number(buf);
    }
    if ("/" === str.charAt(i2 + 1)) {
      const start = i2 + 1;
      while (++i2) {
        const c = str.charAt(i2);
        if ("," === c)
          break;
        if (i2 === str.length)
          break;
      }
      p.nsp = str.substring(start, i2);
    } else {
      p.nsp = "/";
    }
    const next = str.charAt(i2 + 1);
    if ("" !== next && Number(next) == next) {
      const start = i2 + 1;
      while (++i2) {
        const c = str.charAt(i2);
        if (null == c || Number(c) != c) {
          --i2;
          break;
        }
        if (i2 === str.length)
          break;
      }
      p.id = Number(str.substring(start, i2 + 1));
    }
    if (str.charAt(++i2)) {
      const payload = this.tryParse(str.substr(i2));
      if (Decoder.isPayloadValid(p.type, payload)) {
        p.data = payload;
      } else {
        throw new Error("invalid payload");
      }
    }
    return p;
  }
  tryParse(str) {
    try {
      return JSON.parse(str, this.reviver);
    } catch (e) {
      return false;
    }
  }
  static isPayloadValid(type, payload) {
    switch (type) {
      case PacketType.CONNECT:
        return typeof payload === "object";
      case PacketType.DISCONNECT:
        return payload === void 0;
      case PacketType.CONNECT_ERROR:
        return typeof payload === "string" || typeof payload === "object";
      case PacketType.EVENT:
      case PacketType.BINARY_EVENT:
        return Array.isArray(payload) && payload.length > 0;
      case PacketType.ACK:
      case PacketType.BINARY_ACK:
        return Array.isArray(payload);
    }
  }
  destroy() {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
      this.reconstructor = null;
    }
  }
}
class BinaryReconstructor {
  constructor(packet) {
    this.packet = packet;
    this.buffers = [];
    this.reconPack = packet;
  }
  takeBinaryData(binData) {
    this.buffers.push(binData);
    if (this.buffers.length === this.reconPack.attachments) {
      const packet = reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }
    return null;
  }
  finishedReconstruction() {
    this.reconPack = null;
    this.buffers = [];
  }
}
const parser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  protocol,
  get PacketType() {
    return PacketType;
  },
  Encoder,
  Decoder
}, Symbol.toStringTag, { value: "Module" }));
function on(obj, ev, fn) {
  obj.on(ev, fn);
  return function subDestroy() {
    obj.off(ev, fn);
  };
}
const RESERVED_EVENTS = Object.freeze({
  connect: 1,
  connect_error: 1,
  disconnect: 1,
  disconnecting: 1,
  newListener: 1,
  removeListener: 1
});
class Socket2 extends Emitter2 {
  constructor(io, nsp, opts) {
    super();
    this.connected = false;
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.ids = 0;
    this.acks = {};
    this.flags = {};
    this.io = io;
    this.nsp = nsp;
    if (opts && opts.auth) {
      this.auth = opts.auth;
    }
    if (this.io._autoConnect)
      this.open();
  }
  get disconnected() {
    return !this.connected;
  }
  subEvents() {
    if (this.subs)
      return;
    const io = this.io;
    this.subs = [
      on(io, "open", this.onopen.bind(this)),
      on(io, "packet", this.onpacket.bind(this)),
      on(io, "error", this.onerror.bind(this)),
      on(io, "close", this.onclose.bind(this))
    ];
  }
  get active() {
    return !!this.subs;
  }
  connect() {
    if (this.connected)
      return this;
    this.subEvents();
    if (!this.io["_reconnecting"])
      this.io.open();
    if ("open" === this.io._readyState)
      this.onopen();
    return this;
  }
  open() {
    return this.connect();
  }
  send(...args) {
    args.unshift("message");
    this.emit.apply(this, args);
    return this;
  }
  emit(ev, ...args) {
    if (RESERVED_EVENTS.hasOwnProperty(ev)) {
      throw new Error('"' + ev.toString() + '" is a reserved event name');
    }
    args.unshift(ev);
    const packet = {
      type: PacketType.EVENT,
      data: args
    };
    packet.options = {};
    packet.options.compress = this.flags.compress !== false;
    if ("function" === typeof args[args.length - 1]) {
      const id = this.ids++;
      const ack = args.pop();
      this._registerAckCallback(id, ack);
      packet.id = id;
    }
    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
    if (discardPacket)
      ;
    else if (this.connected) {
      this.notifyOutgoingListeners(packet);
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }
    this.flags = {};
    return this;
  }
  _registerAckCallback(id, ack) {
    const timeout = this.flags.timeout;
    if (timeout === void 0) {
      this.acks[id] = ack;
      return;
    }
    const timer = this.io.setTimeoutFn(() => {
      delete this.acks[id];
      for (let i2 = 0; i2 < this.sendBuffer.length; i2++) {
        if (this.sendBuffer[i2].id === id) {
          this.sendBuffer.splice(i2, 1);
        }
      }
      ack.call(this, new Error("operation has timed out"));
    }, timeout);
    this.acks[id] = (...args) => {
      this.io.clearTimeoutFn(timer);
      ack.apply(this, [null, ...args]);
    };
  }
  packet(packet) {
    packet.nsp = this.nsp;
    this.io._packet(packet);
  }
  onopen() {
    if (typeof this.auth == "function") {
      this.auth((data) => {
        this.packet({ type: PacketType.CONNECT, data });
      });
    } else {
      this.packet({ type: PacketType.CONNECT, data: this.auth });
    }
  }
  onerror(err) {
    if (!this.connected) {
      this.emitReserved("connect_error", err);
    }
  }
  onclose(reason, description) {
    this.connected = false;
    delete this.id;
    this.emitReserved("disconnect", reason, description);
  }
  onpacket(packet) {
    const sameNamespace = packet.nsp === this.nsp;
    if (!sameNamespace)
      return;
    switch (packet.type) {
      case PacketType.CONNECT:
        if (packet.data && packet.data.sid) {
          const id = packet.data.sid;
          this.onconnect(id);
        } else {
          this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
        }
        break;
      case PacketType.EVENT:
      case PacketType.BINARY_EVENT:
        this.onevent(packet);
        break;
      case PacketType.ACK:
      case PacketType.BINARY_ACK:
        this.onack(packet);
        break;
      case PacketType.DISCONNECT:
        this.ondisconnect();
        break;
      case PacketType.CONNECT_ERROR:
        this.destroy();
        const err = new Error(packet.data.message);
        err.data = packet.data.data;
        this.emitReserved("connect_error", err);
        break;
    }
  }
  onevent(packet) {
    const args = packet.data || [];
    if (null != packet.id) {
      args.push(this.ack(packet.id));
    }
    if (this.connected) {
      this.emitEvent(args);
    } else {
      this.receiveBuffer.push(Object.freeze(args));
    }
  }
  emitEvent(args) {
    if (this._anyListeners && this._anyListeners.length) {
      const listeners = this._anyListeners.slice();
      for (const listener of listeners) {
        listener.apply(this, args);
      }
    }
    super.emit.apply(this, args);
  }
  ack(id) {
    const self2 = this;
    let sent = false;
    return function(...args) {
      if (sent)
        return;
      sent = true;
      self2.packet({
        type: PacketType.ACK,
        id,
        data: args
      });
    };
  }
  onack(packet) {
    const ack = this.acks[packet.id];
    if ("function" === typeof ack) {
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    }
  }
  onconnect(id) {
    this.id = id;
    this.connected = true;
    this.emitBuffered();
    this.emitReserved("connect");
  }
  emitBuffered() {
    this.receiveBuffer.forEach((args) => this.emitEvent(args));
    this.receiveBuffer = [];
    this.sendBuffer.forEach((packet) => {
      this.notifyOutgoingListeners(packet);
      this.packet(packet);
    });
    this.sendBuffer = [];
  }
  ondisconnect() {
    this.destroy();
    this.onclose("io server disconnect");
  }
  destroy() {
    if (this.subs) {
      this.subs.forEach((subDestroy) => subDestroy());
      this.subs = void 0;
    }
    this.io["_destroy"](this);
  }
  disconnect() {
    if (this.connected) {
      this.packet({ type: PacketType.DISCONNECT });
    }
    this.destroy();
    if (this.connected) {
      this.onclose("io client disconnect");
    }
    return this;
  }
  close() {
    return this.disconnect();
  }
  compress(compress) {
    this.flags.compress = compress;
    return this;
  }
  get volatile() {
    this.flags.volatile = true;
    return this;
  }
  timeout(timeout) {
    this.flags.timeout = timeout;
    return this;
  }
  onAny(listener) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.push(listener);
    return this;
  }
  prependAny(listener) {
    this._anyListeners = this._anyListeners || [];
    this._anyListeners.unshift(listener);
    return this;
  }
  offAny(listener) {
    if (!this._anyListeners) {
      return this;
    }
    if (listener) {
      const listeners = this._anyListeners;
      for (let i2 = 0; i2 < listeners.length; i2++) {
        if (listener === listeners[i2]) {
          listeners.splice(i2, 1);
          return this;
        }
      }
    } else {
      this._anyListeners = [];
    }
    return this;
  }
  listenersAny() {
    return this._anyListeners || [];
  }
  onAnyOutgoing(listener) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.push(listener);
    return this;
  }
  prependAnyOutgoing(listener) {
    this._anyOutgoingListeners = this._anyOutgoingListeners || [];
    this._anyOutgoingListeners.unshift(listener);
    return this;
  }
  offAnyOutgoing(listener) {
    if (!this._anyOutgoingListeners) {
      return this;
    }
    if (listener) {
      const listeners = this._anyOutgoingListeners;
      for (let i2 = 0; i2 < listeners.length; i2++) {
        if (listener === listeners[i2]) {
          listeners.splice(i2, 1);
          return this;
        }
      }
    } else {
      this._anyOutgoingListeners = [];
    }
    return this;
  }
  listenersAnyOutgoing() {
    return this._anyOutgoingListeners || [];
  }
  notifyOutgoingListeners(packet) {
    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
      const listeners = this._anyOutgoingListeners.slice();
      for (const listener of listeners) {
        listener.apply(this, packet.data);
      }
    }
  }
}
function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 1e4;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}
Backoff.prototype.duration = function() {
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand = Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};
Backoff.prototype.reset = function() {
  this.attempts = 0;
};
Backoff.prototype.setMin = function(min) {
  this.ms = min;
};
Backoff.prototype.setMax = function(max) {
  this.max = max;
};
Backoff.prototype.setJitter = function(jitter) {
  this.jitter = jitter;
};
class Manager extends Emitter2 {
  constructor(uri, opts) {
    var _a;
    super();
    this.nsps = {};
    this.subs = [];
    if (uri && "object" === typeof uri) {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    opts.path = opts.path || "/socket.io";
    this.opts = opts;
    installTimerFunctions(this, opts);
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1e3);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
    this.backoff = new Backoff({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
    this._readyState = "closed";
    this.uri = uri;
    const _parser = opts.parser || parser;
    this.encoder = new _parser.Encoder();
    this.decoder = new _parser.Decoder();
    this._autoConnect = opts.autoConnect !== false;
    if (this._autoConnect)
      this.open();
  }
  reconnection(v) {
    if (!arguments.length)
      return this._reconnection;
    this._reconnection = !!v;
    return this;
  }
  reconnectionAttempts(v) {
    if (v === void 0)
      return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  }
  reconnectionDelay(v) {
    var _a;
    if (v === void 0)
      return this._reconnectionDelay;
    this._reconnectionDelay = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
    return this;
  }
  randomizationFactor(v) {
    var _a;
    if (v === void 0)
      return this._randomizationFactor;
    this._randomizationFactor = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
    return this;
  }
  reconnectionDelayMax(v) {
    var _a;
    if (v === void 0)
      return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
    return this;
  }
  timeout(v) {
    if (!arguments.length)
      return this._timeout;
    this._timeout = v;
    return this;
  }
  maybeReconnectOnOpen() {
    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
      this.reconnect();
    }
  }
  open(fn) {
    if (~this._readyState.indexOf("open"))
      return this;
    this.engine = new Socket$1(this.uri, this.opts);
    const socket = this.engine;
    const self2 = this;
    this._readyState = "opening";
    this.skipReconnect = false;
    const openSubDestroy = on(socket, "open", function() {
      self2.onopen();
      fn && fn();
    });
    const errorSub = on(socket, "error", (err) => {
      self2.cleanup();
      self2._readyState = "closed";
      this.emitReserved("error", err);
      if (fn) {
        fn(err);
      } else {
        self2.maybeReconnectOnOpen();
      }
    });
    if (false !== this._timeout) {
      const timeout = this._timeout;
      if (timeout === 0) {
        openSubDestroy();
      }
      const timer = this.setTimeoutFn(() => {
        openSubDestroy();
        socket.close();
        socket.emit("error", new Error("timeout"));
      }, timeout);
      if (this.opts.autoUnref) {
        timer.unref();
      }
      this.subs.push(function subDestroy() {
        clearTimeout(timer);
      });
    }
    this.subs.push(openSubDestroy);
    this.subs.push(errorSub);
    return this;
  }
  connect(fn) {
    return this.open(fn);
  }
  onopen() {
    this.cleanup();
    this._readyState = "open";
    this.emitReserved("open");
    const socket = this.engine;
    this.subs.push(on(socket, "ping", this.onping.bind(this)), on(socket, "data", this.ondata.bind(this)), on(socket, "error", this.onerror.bind(this)), on(socket, "close", this.onclose.bind(this)), on(this.decoder, "decoded", this.ondecoded.bind(this)));
  }
  onping() {
    this.emitReserved("ping");
  }
  ondata(data) {
    try {
      this.decoder.add(data);
    } catch (e) {
      this.onclose("parse error", e);
    }
  }
  ondecoded(packet) {
    nextTick(() => {
      this.emitReserved("packet", packet);
    }, this.setTimeoutFn);
  }
  onerror(err) {
    this.emitReserved("error", err);
  }
  socket(nsp, opts) {
    let socket = this.nsps[nsp];
    if (!socket) {
      socket = new Socket2(this, nsp, opts);
      this.nsps[nsp] = socket;
    }
    return socket;
  }
  _destroy(socket) {
    const nsps = Object.keys(this.nsps);
    for (const nsp of nsps) {
      const socket2 = this.nsps[nsp];
      if (socket2.active) {
        return;
      }
    }
    this._close();
  }
  _packet(packet) {
    const encodedPackets = this.encoder.encode(packet);
    for (let i2 = 0; i2 < encodedPackets.length; i2++) {
      this.engine.write(encodedPackets[i2], packet.options);
    }
  }
  cleanup() {
    this.subs.forEach((subDestroy) => subDestroy());
    this.subs.length = 0;
    this.decoder.destroy();
  }
  _close() {
    this.skipReconnect = true;
    this._reconnecting = false;
    this.onclose("forced close");
    if (this.engine)
      this.engine.close();
  }
  disconnect() {
    return this._close();
  }
  onclose(reason, description) {
    this.cleanup();
    this.backoff.reset();
    this._readyState = "closed";
    this.emitReserved("close", reason, description);
    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  }
  reconnect() {
    if (this._reconnecting || this.skipReconnect)
      return this;
    const self2 = this;
    if (this.backoff.attempts >= this._reconnectionAttempts) {
      this.backoff.reset();
      this.emitReserved("reconnect_failed");
      this._reconnecting = false;
    } else {
      const delay = this.backoff.duration();
      this._reconnecting = true;
      const timer = this.setTimeoutFn(() => {
        if (self2.skipReconnect)
          return;
        this.emitReserved("reconnect_attempt", self2.backoff.attempts);
        if (self2.skipReconnect)
          return;
        self2.open((err) => {
          if (err) {
            self2._reconnecting = false;
            self2.reconnect();
            this.emitReserved("reconnect_error", err);
          } else {
            self2.onreconnect();
          }
        });
      }, delay);
      if (this.opts.autoUnref) {
        timer.unref();
      }
      this.subs.push(function subDestroy() {
        clearTimeout(timer);
      });
    }
  }
  onreconnect() {
    const attempt = this.backoff.attempts;
    this._reconnecting = false;
    this.backoff.reset();
    this.emitReserved("reconnect", attempt);
  }
}
const cache = {};
function lookup(uri, opts) {
  if (typeof uri === "object") {
    opts = uri;
    uri = void 0;
  }
  opts = opts || {};
  const parsed = url(uri, opts.path || "/socket.io");
  const source = parsed.source;
  const id = parsed.id;
  const path = parsed.path;
  const sameNamespace = cache[id] && path in cache[id]["nsps"];
  const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
  let io;
  if (newConnection) {
    io = new Manager(source, opts);
  } else {
    if (!cache[id]) {
      cache[id] = new Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.queryKey;
  }
  return io.socket(parsed.path, opts);
}
Object.assign(lookup, {
  Manager,
  Socket: Socket2,
  io: lookup,
  connect: lookup
});
class SocketPiano extends Piano {
  constructor(name, id) {
    super();
    this.io = lookup("wss://handpiano-backend.glitch.me/");
    this.name = name;
    this.id = id;
    this.otherSynths = [];
    this.connectToServer();
    this.createOtherSynths();
    this.handleData();
  }
  createOtherSynths() {
    for (let i2 = 0; i2 < this.keys.length; i2++) {
      this.otherSynths.push({ note: this.keys[i2].note, synth: new PolySynth() });
    }
  }
  connectToServer() {
    const socket = this.io.connect();
    if (this.id) {
      socket.emit("create", { id: this.id, name: this.name });
    }
  }
  handleData() {
    this.io.on("notes-to-play", (data) => {
      this.otherSynths.forEach((synth) => {
        for (let i2 = 0; i2 < data.length; i2++) {
          console.log(`${synth.note} : ${data[i2]}`);
          if (synth.note === data[i2]) {
            console.log(data[i2]);
            synth.synth.triggerAttack(data[i2]);
          }
        }
      });
    });
    this.io.on("notes-to-release", (data) => {
      this.otherSynths.forEach((synth) => {
        for (let i2 = 0; i2 < data.length; i2++) {
          if (synth.note === data[i2]) {
            synth.synth.triggerRelease(data[i2]);
          }
        }
      });
    });
  }
  playNotes() {
    if (this.notesToPlay.size > 0) {
      console.log(typeof this.notesToPlay);
      this.io.emit("notes-to-play", [...this.notesToPlay]);
      this.keys.forEach((key) => {
        if (this.notesToPlay.has(key.note)) {
          key.oscillator.triggerAttack(key.note);
        }
      });
      this.notesToPlay.forEach((note) => {
        this.notesPlaying.add(note);
      });
      this.notesToPlay.clear();
    }
  }
  releaseNotes() {
    if (this.notesToRelease.size > 0) {
      this.io.emit("notes-to-release", [...this.notesToRelease]);
      this.keys.forEach((key) => {
        if (this.notesToRelease.has(key.note)) {
          key.oscillator.triggerRelease(key.note);
        }
      });
      this.notesToRelease.clear();
    }
  }
}
const pianoSketch = (p) => {
  p.state = "start";
  p.hand = new Hand();
  p.piano;
  p.container = "pianoContainer";
  p.setup = () => {
    const canvas = p.createCanvas(640, 480);
    canvas.parent("pianoContainer");
    const video = p.createCapture(p.VIDEO);
    p.hand.setupHandpose(p.width, p.height, video);
  };
  p.draw = () => {
    p.fill(0);
    p.rect(0, 0, 640, 480);
    switch (p.state) {
      case "start":
        p.drawStart();
        break;
      case "piano":
        p.drawPiano();
        break;
      default:
        console.log(`The state ${p.state} doesn't exist`);
        break;
    }
  };
  p.drawPiano = () => {
    p.piano.drawKeys(p);
    p.hand.draw(p);
    p.hand.checkFingerPositions();
    p.piano.keys.forEach((key) => {
      key.detectFingers(p.hand.fingers);
    });
    p.piano.checkNotesToPlay(p.hand.curledFingers);
    p.piano.checkNotesReleased(p.hand.curledFingers);
  };
  p.drawStart = () => {
    p.fill(255);
    p.noStroke();
    p.textAlign(p.CENTER, p.CENTER);
    p.text(p.hand.startMessage, p.width / 2, p.height / 2);
    if (p.mouseIsPressed) {
      p.state = "piano";
    }
  };
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var p5_min$1 = { exports: {} };
(function(module, exports) {
  !function(e) {
    module.exports = e();
  }(function() {
    var s;
    return function o(n, s2, i2) {
      function a(t, e2) {
        if (!s2[t]) {
          if (!n[t]) {
            var r = "function" == typeof commonjsRequire && commonjsRequire;
            if (!e2 && r)
              return r(t, true);
            if (l)
              return l(t, true);
            throw (e2 = new Error("Cannot find module '" + t + "'")).code = "MODULE_NOT_FOUND", e2;
          }
          r = s2[t] = { exports: {} }, n[t][0].call(r.exports, function(e3) {
            return a(n[t][1][e3] || e3);
          }, r, r.exports, o, n, s2, i2);
        }
        return s2[t].exports;
      }
      for (var l = "function" == typeof commonjsRequire && commonjsRequire, e = 0; e < i2.length; e++)
        a(i2[e]);
      return a;
    }({ 1: [function(e, t, r) {
      r.byteLength = function(e2) {
        var e2 = c(e2), t2 = e2[0], e2 = e2[1];
        return 3 * (t2 + e2) / 4 - e2;
      }, r.toByteArray = function(e2) {
        var t2, r2, o2 = c(e2), n2 = o2[0], o2 = o2[1], s3 = new u(function(e3, t3) {
          return 3 * (e3 + t3) / 4 - t3;
        }(n2, o2)), i2 = 0, a2 = 0 < o2 ? n2 - 4 : n2;
        for (r2 = 0; r2 < a2; r2 += 4)
          t2 = l[e2.charCodeAt(r2)] << 18 | l[e2.charCodeAt(r2 + 1)] << 12 | l[e2.charCodeAt(r2 + 2)] << 6 | l[e2.charCodeAt(r2 + 3)], s3[i2++] = t2 >> 16 & 255, s3[i2++] = t2 >> 8 & 255, s3[i2++] = 255 & t2;
        2 === o2 && (t2 = l[e2.charCodeAt(r2)] << 2 | l[e2.charCodeAt(r2 + 1)] >> 4, s3[i2++] = 255 & t2);
        1 === o2 && (t2 = l[e2.charCodeAt(r2)] << 10 | l[e2.charCodeAt(r2 + 1)] << 4 | l[e2.charCodeAt(r2 + 2)] >> 2, s3[i2++] = t2 >> 8 & 255, s3[i2++] = 255 & t2);
        return s3;
      }, r.fromByteArray = function(e2) {
        for (var t2, r2 = e2.length, o2 = r2 % 3, n2 = [], s3 = 0, i2 = r2 - o2; s3 < i2; s3 += 16383)
          n2.push(function(e3, t3, r3) {
            for (var o3, n3 = [], s4 = t3; s4 < r3; s4 += 3)
              o3 = (e3[s4] << 16 & 16711680) + (e3[s4 + 1] << 8 & 65280) + (255 & e3[s4 + 2]), n3.push(function(e4) {
                return a[e4 >> 18 & 63] + a[e4 >> 12 & 63] + a[e4 >> 6 & 63] + a[63 & e4];
              }(o3));
            return n3.join("");
          }(e2, s3, i2 < s3 + 16383 ? i2 : s3 + 16383));
        1 == o2 ? (t2 = e2[r2 - 1], n2.push(a[t2 >> 2] + a[t2 << 4 & 63] + "==")) : 2 == o2 && (t2 = (e2[r2 - 2] << 8) + e2[r2 - 1], n2.push(a[t2 >> 10] + a[t2 >> 4 & 63] + a[t2 << 2 & 63] + "="));
        return n2.join("");
      };
      for (var a = [], l = [], u = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = 0, s2 = o.length; n < s2; ++n)
        a[n] = o[n], l[o.charCodeAt(n)] = n;
      function c(e2) {
        var t2 = e2.length;
        if (0 < t2 % 4)
          throw new Error("Invalid string. Length must be a multiple of 4");
        e2 = e2.indexOf("="), t2 = (e2 = -1 === e2 ? t2 : e2) === t2 ? 0 : 4 - e2 % 4;
        return [e2, t2];
      }
      l["-".charCodeAt(0)] = 62, l["_".charCodeAt(0)] = 63;
    }, {}], 2: [function(e, t, r) {
    }, {}], 3: [function(e, t, r) {
      arguments[4][2][0].apply(r, arguments);
    }, { dup: 2 }], 4: [function(A, e, P) {
      !function(d) {
        var S = A("base64-js"), s2 = A("ieee754"), e2 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null, t = (P.Buffer = d, P.SlowBuffer = function(e3) {
          +e3 != e3 && (e3 = 0);
          return d.alloc(+e3);
        }, P.INSPECT_MAX_BYTES = 50, 2147483647);
        function l(e3) {
          if (t < e3)
            throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
          e3 = new Uint8Array(e3);
          return Object.setPrototypeOf(e3, d.prototype), e3;
        }
        function d(e3, t2, r2) {
          if ("number" != typeof e3)
            return o(e3, t2, r2);
          if ("string" == typeof t2)
            throw new TypeError('The "string" argument must be of type string. Received type number');
          return i2(e3);
        }
        function o(e3, t2, r2) {
          if ("string" == typeof e3) {
            var o2 = e3, n2 = t2;
            if (d.isEncoding(n2 = "string" == typeof n2 && "" !== n2 ? n2 : "utf8"))
              return s3 = 0 | f(o2, n2), i3 = l(s3), i3 = (o2 = i3.write(o2, n2)) !== s3 ? i3.slice(0, o2) : i3;
            throw new TypeError("Unknown encoding: " + n2);
          }
          if (ArrayBuffer.isView(e3))
            return u(e3);
          if (null != e3) {
            if (O(e3, ArrayBuffer) || e3 && O(e3.buffer, ArrayBuffer)) {
              var s3 = e3, o2 = t2, i3 = r2;
              if (o2 < 0 || s3.byteLength < o2)
                throw new RangeError('"offset" is outside of buffer bounds');
              if (s3.byteLength < o2 + (i3 || 0))
                throw new RangeError('"length" is outside of buffer bounds');
              return s3 = void 0 === o2 && void 0 === i3 ? new Uint8Array(s3) : void 0 === i3 ? new Uint8Array(s3, o2) : new Uint8Array(s3, o2, i3), Object.setPrototypeOf(s3, d.prototype), s3;
            }
            if ("number" == typeof e3)
              throw new TypeError('The "value" argument must not be of type number. Received type number');
            n2 = e3.valueOf && e3.valueOf();
            if (null != n2 && n2 !== e3)
              return d.from(n2, t2, r2);
            var a2 = function(e4) {
              {
                var t3, r3;
                if (d.isBuffer(e4))
                  return t3 = 0 | c(e4.length), 0 !== (r3 = l(t3)).length && e4.copy(r3, 0, 0, t3), r3;
              }
              if (void 0 !== e4.length)
                return "number" != typeof e4.length || L(e4.length) ? l(0) : u(e4);
              if ("Buffer" === e4.type && Array.isArray(e4.data))
                return u(e4.data);
            }(e3);
            if (a2)
              return a2;
            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e3[Symbol.toPrimitive])
              return d.from(e3[Symbol.toPrimitive]("string"), t2, r2);
          }
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e3);
        }
        function n(e3) {
          if ("number" != typeof e3)
            throw new TypeError('"size" argument must be of type number');
          if (e3 < 0)
            throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
        }
        function i2(e3) {
          return n(e3), l(e3 < 0 ? 0 : 0 | c(e3));
        }
        function u(e3) {
          for (var t2 = e3.length < 0 ? 0 : 0 | c(e3.length), r2 = l(t2), o2 = 0; o2 < t2; o2 += 1)
            r2[o2] = 255 & e3[o2];
          return r2;
        }
        function c(e3) {
          if (t <= e3)
            throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + t.toString(16) + " bytes");
          return 0 | e3;
        }
        function f(e3, t2) {
          if (d.isBuffer(e3))
            return e3.length;
          if (ArrayBuffer.isView(e3) || O(e3, ArrayBuffer))
            return e3.byteLength;
          if ("string" != typeof e3)
            throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e3);
          var r2 = e3.length, o2 = 2 < arguments.length && true === arguments[2];
          if (!o2 && 0 === r2)
            return 0;
          for (var n2 = false; ; )
            switch (t2) {
              case "ascii":
              case "latin1":
              case "binary":
                return r2;
              case "utf8":
              case "utf-8":
                return E(e3).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * r2;
              case "hex":
                return r2 >>> 1;
              case "base64":
                return T(e3).length;
              default:
                if (n2)
                  return o2 ? -1 : E(e3).length;
                t2 = ("" + t2).toLowerCase(), n2 = true;
            }
        }
        function r(e3, t2, r2) {
          var o2, n2 = false;
          if ((t2 = void 0 === t2 || t2 < 0 ? 0 : t2) > this.length)
            return "";
          if ((r2 = void 0 === r2 || r2 > this.length ? this.length : r2) <= 0)
            return "";
          if ((r2 >>>= 0) <= (t2 >>>= 0))
            return "";
          for (e3 = e3 || "utf8"; ; )
            switch (e3) {
              case "hex":
                var s3 = this, i3 = t2, a2 = r2, l2 = s3.length;
                (!a2 || a2 < 0 || l2 < a2) && (a2 = l2);
                for (var u2 = "", c2 = i3 = !i3 || i3 < 0 ? 0 : i3; c2 < a2; ++c2)
                  u2 += k[s3[c2]];
                return u2;
              case "utf8":
              case "utf-8":
                return M(this, t2, r2);
              case "ascii":
                var d2 = this, l2 = t2, f2 = r2, h2 = "";
                f2 = Math.min(d2.length, f2);
                for (var p2 = l2; p2 < f2; ++p2)
                  h2 += String.fromCharCode(127 & d2[p2]);
                return h2;
              case "latin1":
              case "binary":
                var m2 = this, i3 = t2, y2 = r2, g2 = "";
                y2 = Math.min(m2.length, y2);
                for (var v2 = i3; v2 < y2; ++v2)
                  g2 += String.fromCharCode(m2[v2]);
                return g2;
              case "base64":
                return b2 = this, o2 = r2, 0 === (j2 = t2) && o2 === b2.length ? S.fromByteArray(b2) : S.fromByteArray(b2.slice(j2, o2));
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                for (var b2 = t2, j2 = r2, _2 = this.slice(b2, j2), x2 = "", w2 = 0; w2 < _2.length; w2 += 2)
                  x2 += String.fromCharCode(_2[w2] + 256 * _2[w2 + 1]);
                return x2;
              default:
                if (n2)
                  throw new TypeError("Unknown encoding: " + e3);
                e3 = (e3 + "").toLowerCase(), n2 = true;
            }
        }
        function a(e3, t2, r2) {
          var o2 = e3[t2];
          e3[t2] = e3[r2], e3[r2] = o2;
        }
        function h(e3, t2, r2, o2, n2) {
          if (0 === e3.length)
            return -1;
          if ("string" == typeof r2 ? (o2 = r2, r2 = 0) : 2147483647 < r2 ? r2 = 2147483647 : r2 < -2147483648 && (r2 = -2147483648), (r2 = (r2 = L(r2 = +r2) ? n2 ? 0 : e3.length - 1 : r2) < 0 ? e3.length + r2 : r2) >= e3.length) {
            if (n2)
              return -1;
            r2 = e3.length - 1;
          } else if (r2 < 0) {
            if (!n2)
              return -1;
            r2 = 0;
          }
          if ("string" == typeof t2 && (t2 = d.from(t2, o2)), d.isBuffer(t2))
            return 0 === t2.length ? -1 : p(e3, t2, r2, o2, n2);
          if ("number" == typeof t2)
            return t2 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? (n2 ? Uint8Array.prototype.indexOf : Uint8Array.prototype.lastIndexOf).call(e3, t2, r2) : p(e3, [t2], r2, o2, n2);
          throw new TypeError("val must be string, number or Buffer");
        }
        function p(e3, t2, r2, o2, n2) {
          var s3 = 1, i3 = e3.length, a2 = t2.length;
          if (void 0 !== o2 && ("ucs2" === (o2 = String(o2).toLowerCase()) || "ucs-2" === o2 || "utf16le" === o2 || "utf-16le" === o2)) {
            if (e3.length < 2 || t2.length < 2)
              return -1;
            i3 /= s3 = 2, a2 /= 2, r2 /= 2;
          }
          function l2(e4, t3) {
            return 1 === s3 ? e4[t3] : e4.readUInt16BE(t3 * s3);
          }
          if (n2)
            for (var u2 = -1, c2 = r2; c2 < i3; c2++)
              if (l2(e3, c2) === l2(t2, -1 === u2 ? 0 : c2 - u2)) {
                if (c2 - (u2 = -1 === u2 ? c2 : u2) + 1 === a2)
                  return u2 * s3;
              } else
                -1 !== u2 && (c2 -= c2 - u2), u2 = -1;
          else
            for (c2 = r2 = i3 < r2 + a2 ? i3 - a2 : r2; 0 <= c2; c2--) {
              for (var d2 = true, f2 = 0; f2 < a2; f2++)
                if (l2(e3, c2 + f2) !== l2(t2, f2)) {
                  d2 = false;
                  break;
                }
              if (d2)
                return c2;
            }
          return -1;
        }
        function y(e3, t2, r2, o2) {
          return C(function(e4) {
            for (var t3 = [], r3 = 0; r3 < e4.length; ++r3)
              t3.push(255 & e4.charCodeAt(r3));
            return t3;
          }(t2), e3, r2, o2);
        }
        function g(e3, t2, r2, o2) {
          return C(function(e4, t3) {
            for (var r3, o3, n2 = [], s3 = 0; s3 < e4.length && !((t3 -= 2) < 0); ++s3)
              o3 = e4.charCodeAt(s3), r3 = o3 >> 8, o3 = o3 % 256, n2.push(o3), n2.push(r3);
            return n2;
          }(t2, e3.length - r2), e3, r2, o2);
        }
        function M(e3, t2, r2) {
          r2 = Math.min(e3.length, r2);
          for (var o2 = [], n2 = t2; n2 < r2; ) {
            var s3, i3, a2, l2, u2 = e3[n2], c2 = null, d2 = 239 < u2 ? 4 : 223 < u2 ? 3 : 191 < u2 ? 2 : 1;
            if (n2 + d2 <= r2)
              switch (d2) {
                case 1:
                  u2 < 128 && (c2 = u2);
                  break;
                case 2:
                  128 == (192 & (s3 = e3[n2 + 1])) && 127 < (l2 = (31 & u2) << 6 | 63 & s3) && (c2 = l2);
                  break;
                case 3:
                  s3 = e3[n2 + 1], i3 = e3[n2 + 2], 128 == (192 & s3) && 128 == (192 & i3) && 2047 < (l2 = (15 & u2) << 12 | (63 & s3) << 6 | 63 & i3) && (l2 < 55296 || 57343 < l2) && (c2 = l2);
                  break;
                case 4:
                  s3 = e3[n2 + 1], i3 = e3[n2 + 2], a2 = e3[n2 + 3], 128 == (192 & s3) && 128 == (192 & i3) && 128 == (192 & a2) && 65535 < (l2 = (15 & u2) << 18 | (63 & s3) << 12 | (63 & i3) << 6 | 63 & a2) && l2 < 1114112 && (c2 = l2);
              }
            null === c2 ? (c2 = 65533, d2 = 1) : 65535 < c2 && (c2 -= 65536, o2.push(c2 >>> 10 & 1023 | 55296), c2 = 56320 | 1023 & c2), o2.push(c2), n2 += d2;
          }
          var f2 = o2, h2 = f2.length;
          if (h2 <= v)
            return String.fromCharCode.apply(String, f2);
          for (var p2 = "", m2 = 0; m2 < h2; )
            p2 += String.fromCharCode.apply(String, f2.slice(m2, m2 += v));
          return p2;
        }
        P.kMaxLength = t, (d.TYPED_ARRAY_SUPPORT = function() {
          try {
            var e3 = new Uint8Array(1), t2 = { foo: function() {
              return 42;
            } };
            return Object.setPrototypeOf(t2, Uint8Array.prototype), Object.setPrototypeOf(e3, t2), 42 === e3.foo();
          } catch (e4) {
            return false;
          }
        }()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(d.prototype, "parent", { enumerable: true, get: function() {
          if (d.isBuffer(this))
            return this.buffer;
        } }), Object.defineProperty(d.prototype, "offset", { enumerable: true, get: function() {
          if (d.isBuffer(this))
            return this.byteOffset;
        } }), "undefined" != typeof Symbol && null != Symbol.species && d[Symbol.species] === d && Object.defineProperty(d, Symbol.species, { value: null, configurable: true, enumerable: false, writable: false }), d.poolSize = 8192, d.from = o, Object.setPrototypeOf(d.prototype, Uint8Array.prototype), Object.setPrototypeOf(d, Uint8Array), d.alloc = function(e3, t2, r2) {
          return t2 = t2, r2 = r2, n(e3 = e3), !(e3 <= 0) && void 0 !== t2 ? "string" == typeof r2 ? l(e3).fill(t2, r2) : l(e3).fill(t2) : l(e3);
        }, d.allocUnsafe = i2, d.allocUnsafeSlow = i2, d.isBuffer = function(e3) {
          return null != e3 && true === e3._isBuffer && e3 !== d.prototype;
        }, d.compare = function(e3, t2) {
          if (O(e3, Uint8Array) && (e3 = d.from(e3, e3.offset, e3.byteLength)), O(t2, Uint8Array) && (t2 = d.from(t2, t2.offset, t2.byteLength)), !d.isBuffer(e3) || !d.isBuffer(t2))
            throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
          if (e3 === t2)
            return 0;
          for (var r2 = e3.length, o2 = t2.length, n2 = 0, s3 = Math.min(r2, o2); n2 < s3; ++n2)
            if (e3[n2] !== t2[n2]) {
              r2 = e3[n2], o2 = t2[n2];
              break;
            }
          return r2 < o2 ? -1 : o2 < r2 ? 1 : 0;
        }, d.isEncoding = function(e3) {
          switch (String(e3).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        }, d.concat = function(e3, t2) {
          if (!Array.isArray(e3))
            throw new TypeError('"list" argument must be an Array of Buffers');
          if (0 === e3.length)
            return d.alloc(0);
          if (void 0 === t2)
            for (n2 = t2 = 0; n2 < e3.length; ++n2)
              t2 += e3[n2].length;
          for (var r2 = d.allocUnsafe(t2), o2 = 0, n2 = 0; n2 < e3.length; ++n2) {
            var s3 = e3[n2];
            if (O(s3, Uint8Array) && (s3 = d.from(s3)), !d.isBuffer(s3))
              throw new TypeError('"list" argument must be an Array of Buffers');
            s3.copy(r2, o2), o2 += s3.length;
          }
          return r2;
        }, d.byteLength = f, d.prototype._isBuffer = true, d.prototype.swap16 = function() {
          var e3 = this.length;
          if (e3 % 2 != 0)
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          for (var t2 = 0; t2 < e3; t2 += 2)
            a(this, t2, t2 + 1);
          return this;
        }, d.prototype.swap32 = function() {
          var e3 = this.length;
          if (e3 % 4 != 0)
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          for (var t2 = 0; t2 < e3; t2 += 4)
            a(this, t2, t2 + 3), a(this, t2 + 1, t2 + 2);
          return this;
        }, d.prototype.swap64 = function() {
          var e3 = this.length;
          if (e3 % 8 != 0)
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          for (var t2 = 0; t2 < e3; t2 += 8)
            a(this, t2, t2 + 7), a(this, t2 + 1, t2 + 6), a(this, t2 + 2, t2 + 5), a(this, t2 + 3, t2 + 4);
          return this;
        }, d.prototype.toLocaleString = d.prototype.toString = function() {
          var e3 = this.length;
          return 0 === e3 ? "" : 0 === arguments.length ? M(this, 0, e3) : r.apply(this, arguments);
        }, d.prototype.equals = function(e3) {
          if (d.isBuffer(e3))
            return this === e3 || 0 === d.compare(this, e3);
          throw new TypeError("Argument must be a Buffer");
        }, d.prototype.inspect = function() {
          var e3 = "", t2 = P.INSPECT_MAX_BYTES, e3 = this.toString("hex", 0, t2).replace(/(.{2})/g, "$1 ").trim();
          return this.length > t2 && (e3 += " ... "), "<Buffer " + e3 + ">";
        }, e2 && (d.prototype[e2] = d.prototype.inspect), d.prototype.compare = function(e3, t2, r2, o2, n2) {
          if (O(e3, Uint8Array) && (e3 = d.from(e3, e3.offset, e3.byteLength)), !d.isBuffer(e3))
            throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e3);
          if (void 0 === r2 && (r2 = e3 ? e3.length : 0), void 0 === o2 && (o2 = 0), void 0 === n2 && (n2 = this.length), (t2 = void 0 === t2 ? 0 : t2) < 0 || r2 > e3.length || o2 < 0 || n2 > this.length)
            throw new RangeError("out of range index");
          if (n2 <= o2 && r2 <= t2)
            return 0;
          if (n2 <= o2)
            return -1;
          if (r2 <= t2)
            return 1;
          if (this === e3)
            return 0;
          for (var s3 = (n2 >>>= 0) - (o2 >>>= 0), i3 = (r2 >>>= 0) - (t2 >>>= 0), a2 = Math.min(s3, i3), l2 = this.slice(o2, n2), u2 = e3.slice(t2, r2), c2 = 0; c2 < a2; ++c2)
            if (l2[c2] !== u2[c2]) {
              s3 = l2[c2], i3 = u2[c2];
              break;
            }
          return s3 < i3 ? -1 : i3 < s3 ? 1 : 0;
        }, d.prototype.includes = function(e3, t2, r2) {
          return -1 !== this.indexOf(e3, t2, r2);
        }, d.prototype.indexOf = function(e3, t2, r2) {
          return h(this, e3, t2, r2, true);
        }, d.prototype.lastIndexOf = function(e3, t2, r2) {
          return h(this, e3, t2, r2, false);
        }, d.prototype.write = function(e3, t2, r2, o2) {
          if (void 0 === t2)
            o2 = "utf8", r2 = this.length, t2 = 0;
          else if (void 0 === r2 && "string" == typeof t2)
            o2 = t2, r2 = this.length, t2 = 0;
          else {
            if (!isFinite(t2))
              throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            t2 >>>= 0, isFinite(r2) ? (r2 >>>= 0, void 0 === o2 && (o2 = "utf8")) : (o2 = r2, r2 = void 0);
          }
          var n2 = this.length - t2;
          if ((void 0 === r2 || n2 < r2) && (r2 = n2), 0 < e3.length && (r2 < 0 || t2 < 0) || t2 > this.length)
            throw new RangeError("Attempt to write outside buffer bounds");
          o2 = o2 || "utf8";
          for (var s3, i3, a2, l2 = false; ; )
            switch (o2) {
              case "hex":
                var u2 = this, c2 = e3, d2 = t2, f2 = r2, h2 = (d2 = Number(d2) || 0, u2.length - d2);
                (!f2 || h2 < (f2 = Number(f2))) && (f2 = h2), (h2 = c2.length) / 2 < f2 && (f2 = h2 / 2);
                for (var p2 = 0; p2 < f2; ++p2) {
                  var m2 = parseInt(c2.substr(2 * p2, 2), 16);
                  if (L(m2))
                    return p2;
                  u2[d2 + p2] = m2;
                }
                return p2;
              case "utf8":
              case "utf-8":
                return h2 = t2, a2 = r2, C(E(e3, (i3 = this).length - h2), i3, h2, a2);
              case "ascii":
                return y(this, e3, t2, r2);
              case "latin1":
              case "binary":
                return y(this, e3, t2, r2);
              case "base64":
                return i3 = this, a2 = t2, s3 = r2, C(T(e3), i3, a2, s3);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return g(this, e3, t2, r2);
              default:
                if (l2)
                  throw new TypeError("Unknown encoding: " + o2);
                o2 = ("" + o2).toLowerCase(), l2 = true;
            }
        }, d.prototype.toJSON = function() {
          return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
        };
        var v = 4096;
        function m(e3, t2, r2) {
          if (e3 % 1 != 0 || e3 < 0)
            throw new RangeError("offset is not uint");
          if (r2 < e3 + t2)
            throw new RangeError("Trying to access beyond buffer length");
        }
        function b(e3, t2, r2, o2, n2, s3) {
          if (!d.isBuffer(e3))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (n2 < t2 || t2 < s3)
            throw new RangeError('"value" argument is out of bounds');
          if (r2 + o2 > e3.length)
            throw new RangeError("Index out of range");
        }
        function j(e3, t2, r2, o2) {
          if (r2 + o2 > e3.length)
            throw new RangeError("Index out of range");
          if (r2 < 0)
            throw new RangeError("Index out of range");
        }
        function _(e3, t2, r2, o2, n2) {
          return t2 = +t2, r2 >>>= 0, n2 || j(e3, 0, r2, 4), s2.write(e3, t2, r2, o2, 23, 4), r2 + 4;
        }
        function x(e3, t2, r2, o2, n2) {
          return t2 = +t2, r2 >>>= 0, n2 || j(e3, 0, r2, 8), s2.write(e3, t2, r2, o2, 52, 8), r2 + 8;
        }
        d.prototype.slice = function(e3, t2) {
          var r2 = this.length, r2 = ((e3 = ~~e3) < 0 ? (e3 += r2) < 0 && (e3 = 0) : r2 < e3 && (e3 = r2), (t2 = void 0 === t2 ? r2 : ~~t2) < 0 ? (t2 += r2) < 0 && (t2 = 0) : r2 < t2 && (t2 = r2), t2 < e3 && (t2 = e3), this.subarray(e3, t2));
          return Object.setPrototypeOf(r2, d.prototype), r2;
        }, d.prototype.readUIntLE = function(e3, t2, r2) {
          e3 >>>= 0, t2 >>>= 0, r2 || m(e3, t2, this.length);
          for (var o2 = this[e3], n2 = 1, s3 = 0; ++s3 < t2 && (n2 *= 256); )
            o2 += this[e3 + s3] * n2;
          return o2;
        }, d.prototype.readUIntBE = function(e3, t2, r2) {
          e3 >>>= 0, t2 >>>= 0, r2 || m(e3, t2, this.length);
          for (var o2 = this[e3 + --t2], n2 = 1; 0 < t2 && (n2 *= 256); )
            o2 += this[e3 + --t2] * n2;
          return o2;
        }, d.prototype.readUInt8 = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 1, this.length), this[e3];
        }, d.prototype.readUInt16LE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
        }, d.prototype.readUInt16BE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
        }, d.prototype.readUInt32LE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
        }, d.prototype.readUInt32BE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
        }, d.prototype.readIntLE = function(e3, t2, r2) {
          e3 >>>= 0, t2 >>>= 0, r2 || m(e3, t2, this.length);
          for (var o2 = this[e3], n2 = 1, s3 = 0; ++s3 < t2 && (n2 *= 256); )
            o2 += this[e3 + s3] * n2;
          return (n2 *= 128) <= o2 && (o2 -= Math.pow(2, 8 * t2)), o2;
        }, d.prototype.readIntBE = function(e3, t2, r2) {
          e3 >>>= 0, t2 >>>= 0, r2 || m(e3, t2, this.length);
          for (var o2 = t2, n2 = 1, s3 = this[e3 + --o2]; 0 < o2 && (n2 *= 256); )
            s3 += this[e3 + --o2] * n2;
          return (n2 *= 128) <= s3 && (s3 -= Math.pow(2, 8 * t2)), s3;
        }, d.prototype.readInt8 = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
        }, d.prototype.readInt16LE = function(e3, t2) {
          e3 >>>= 0, t2 || m(e3, 2, this.length);
          t2 = this[e3] | this[e3 + 1] << 8;
          return 32768 & t2 ? 4294901760 | t2 : t2;
        }, d.prototype.readInt16BE = function(e3, t2) {
          e3 >>>= 0, t2 || m(e3, 2, this.length);
          t2 = this[e3 + 1] | this[e3] << 8;
          return 32768 & t2 ? 4294901760 | t2 : t2;
        }, d.prototype.readInt32LE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
        }, d.prototype.readInt32BE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
        }, d.prototype.readFloatLE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), s2.read(this, e3, true, 23, 4);
        }, d.prototype.readFloatBE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 4, this.length), s2.read(this, e3, false, 23, 4);
        }, d.prototype.readDoubleLE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 8, this.length), s2.read(this, e3, true, 52, 8);
        }, d.prototype.readDoubleBE = function(e3, t2) {
          return e3 >>>= 0, t2 || m(e3, 8, this.length), s2.read(this, e3, false, 52, 8);
        }, d.prototype.writeUIntLE = function(e3, t2, r2, o2) {
          e3 = +e3, t2 >>>= 0, r2 >>>= 0, o2 || b(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
          var n2 = 1, s3 = 0;
          for (this[t2] = 255 & e3; ++s3 < r2 && (n2 *= 256); )
            this[t2 + s3] = e3 / n2 & 255;
          return t2 + r2;
        }, d.prototype.writeUIntBE = function(e3, t2, r2, o2) {
          e3 = +e3, t2 >>>= 0, r2 >>>= 0, o2 || b(this, e3, t2, r2, Math.pow(2, 8 * r2) - 1, 0);
          var n2 = r2 - 1, s3 = 1;
          for (this[t2 + n2] = 255 & e3; 0 <= --n2 && (s3 *= 256); )
            this[t2 + n2] = e3 / s3 & 255;
          return t2 + r2;
        }, d.prototype.writeUInt8 = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 1, 255, 0), this[t2] = 255 & e3, t2 + 1;
        }, d.prototype.writeUInt16LE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 2, 65535, 0), this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, t2 + 2;
        }, d.prototype.writeUInt16BE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 2, 65535, 0), this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3, t2 + 2;
        }, d.prototype.writeUInt32LE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 4, 4294967295, 0), this[t2 + 3] = e3 >>> 24, this[t2 + 2] = e3 >>> 16, this[t2 + 1] = e3 >>> 8, this[t2] = 255 & e3, t2 + 4;
        }, d.prototype.writeUInt32BE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 4, 4294967295, 0), this[t2] = e3 >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3, t2 + 4;
        }, d.prototype.writeIntLE = function(e3, t2, r2, o2) {
          e3 = +e3, t2 >>>= 0, o2 || b(this, e3, t2, r2, (o2 = Math.pow(2, 8 * r2 - 1)) - 1, -o2);
          var n2 = 0, s3 = 1, i3 = 0;
          for (this[t2] = 255 & e3; ++n2 < r2 && (s3 *= 256); )
            e3 < 0 && 0 === i3 && 0 !== this[t2 + n2 - 1] && (i3 = 1), this[t2 + n2] = (e3 / s3 >> 0) - i3 & 255;
          return t2 + r2;
        }, d.prototype.writeIntBE = function(e3, t2, r2, o2) {
          e3 = +e3, t2 >>>= 0, o2 || b(this, e3, t2, r2, (o2 = Math.pow(2, 8 * r2 - 1)) - 1, -o2);
          var n2 = r2 - 1, s3 = 1, i3 = 0;
          for (this[t2 + n2] = 255 & e3; 0 <= --n2 && (s3 *= 256); )
            e3 < 0 && 0 === i3 && 0 !== this[t2 + n2 + 1] && (i3 = 1), this[t2 + n2] = (e3 / s3 >> 0) - i3 & 255;
          return t2 + r2;
        }, d.prototype.writeInt8 = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 1, 127, -128), this[t2] = 255 & (e3 = e3 < 0 ? 255 + e3 + 1 : e3), t2 + 1;
        }, d.prototype.writeInt16LE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 2, 32767, -32768), this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, t2 + 2;
        }, d.prototype.writeInt16BE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 2, 32767, -32768), this[t2] = e3 >>> 8, this[t2 + 1] = 255 & e3, t2 + 2;
        }, d.prototype.writeInt32LE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 4, 2147483647, -2147483648), this[t2] = 255 & e3, this[t2 + 1] = e3 >>> 8, this[t2 + 2] = e3 >>> 16, this[t2 + 3] = e3 >>> 24, t2 + 4;
        }, d.prototype.writeInt32BE = function(e3, t2, r2) {
          return e3 = +e3, t2 >>>= 0, r2 || b(this, e3, t2, 4, 2147483647, -2147483648), this[t2] = (e3 = e3 < 0 ? 4294967295 + e3 + 1 : e3) >>> 24, this[t2 + 1] = e3 >>> 16, this[t2 + 2] = e3 >>> 8, this[t2 + 3] = 255 & e3, t2 + 4;
        }, d.prototype.writeFloatLE = function(e3, t2, r2) {
          return _(this, e3, t2, true, r2);
        }, d.prototype.writeFloatBE = function(e3, t2, r2) {
          return _(this, e3, t2, false, r2);
        }, d.prototype.writeDoubleLE = function(e3, t2, r2) {
          return x(this, e3, t2, true, r2);
        }, d.prototype.writeDoubleBE = function(e3, t2, r2) {
          return x(this, e3, t2, false, r2);
        }, d.prototype.copy = function(e3, t2, r2, o2) {
          if (!d.isBuffer(e3))
            throw new TypeError("argument should be a Buffer");
          if (r2 = r2 || 0, o2 || 0 === o2 || (o2 = this.length), t2 >= e3.length && (t2 = e3.length), (o2 = 0 < o2 && o2 < r2 ? r2 : o2) === r2)
            return 0;
          if (0 === e3.length || 0 === this.length)
            return 0;
          if ((t2 = t2 || 0) < 0)
            throw new RangeError("targetStart out of bounds");
          if (r2 < 0 || r2 >= this.length)
            throw new RangeError("Index out of range");
          if (o2 < 0)
            throw new RangeError("sourceEnd out of bounds");
          o2 > this.length && (o2 = this.length);
          var n2 = (o2 = e3.length - t2 < o2 - r2 ? e3.length - t2 + r2 : o2) - r2;
          if (this === e3 && "function" == typeof Uint8Array.prototype.copyWithin)
            this.copyWithin(t2, r2, o2);
          else if (this === e3 && r2 < t2 && t2 < o2)
            for (var s3 = n2 - 1; 0 <= s3; --s3)
              e3[s3 + t2] = this[s3 + r2];
          else
            Uint8Array.prototype.set.call(e3, this.subarray(r2, o2), t2);
          return n2;
        }, d.prototype.fill = function(e3, t2, r2, o2) {
          if ("string" == typeof e3) {
            if ("string" == typeof t2 ? (o2 = t2, t2 = 0, r2 = this.length) : "string" == typeof r2 && (o2 = r2, r2 = this.length), void 0 !== o2 && "string" != typeof o2)
              throw new TypeError("encoding must be a string");
            if ("string" == typeof o2 && !d.isEncoding(o2))
              throw new TypeError("Unknown encoding: " + o2);
            var n2;
            1 === e3.length && (n2 = e3.charCodeAt(0), ("utf8" === o2 && n2 < 128 || "latin1" === o2) && (e3 = n2));
          } else
            "number" == typeof e3 ? e3 &= 255 : "boolean" == typeof e3 && (e3 = Number(e3));
          if (t2 < 0 || this.length < t2 || this.length < r2)
            throw new RangeError("Out of range index");
          var s3;
          if (!(r2 <= t2))
            if (t2 >>>= 0, r2 = void 0 === r2 ? this.length : r2 >>> 0, "number" == typeof (e3 = e3 || 0))
              for (s3 = t2; s3 < r2; ++s3)
                this[s3] = e3;
            else {
              var i3 = d.isBuffer(e3) ? e3 : d.from(e3, o2), a2 = i3.length;
              if (0 === a2)
                throw new TypeError('The value "' + e3 + '" is invalid for argument "value"');
              for (s3 = 0; s3 < r2 - t2; ++s3)
                this[s3 + t2] = i3[s3 % a2];
            }
          return this;
        };
        var w = /[^+/0-9A-Za-z-_]/g;
        function E(e3, t2) {
          t2 = t2 || 1 / 0;
          for (var r2, o2 = e3.length, n2 = null, s3 = [], i3 = 0; i3 < o2; ++i3) {
            if (55295 < (r2 = e3.charCodeAt(i3)) && r2 < 57344) {
              if (!n2) {
                if (56319 < r2) {
                  -1 < (t2 -= 3) && s3.push(239, 191, 189);
                  continue;
                }
                if (i3 + 1 === o2) {
                  -1 < (t2 -= 3) && s3.push(239, 191, 189);
                  continue;
                }
                n2 = r2;
                continue;
              }
              if (r2 < 56320) {
                -1 < (t2 -= 3) && s3.push(239, 191, 189), n2 = r2;
                continue;
              }
              r2 = 65536 + (n2 - 55296 << 10 | r2 - 56320);
            } else
              n2 && -1 < (t2 -= 3) && s3.push(239, 191, 189);
            if (n2 = null, r2 < 128) {
              if (--t2 < 0)
                break;
              s3.push(r2);
            } else if (r2 < 2048) {
              if ((t2 -= 2) < 0)
                break;
              s3.push(r2 >> 6 | 192, 63 & r2 | 128);
            } else if (r2 < 65536) {
              if ((t2 -= 3) < 0)
                break;
              s3.push(r2 >> 12 | 224, r2 >> 6 & 63 | 128, 63 & r2 | 128);
            } else {
              if (!(r2 < 1114112))
                throw new Error("Invalid code point");
              if ((t2 -= 4) < 0)
                break;
              s3.push(r2 >> 18 | 240, r2 >> 12 & 63 | 128, r2 >> 6 & 63 | 128, 63 & r2 | 128);
            }
          }
          return s3;
        }
        function T(e3) {
          return S.toByteArray(function(e4) {
            if ((e4 = (e4 = e4.split("=")[0]).trim().replace(w, "")).length < 2)
              return "";
            for (; e4.length % 4 != 0; )
              e4 += "=";
            return e4;
          }(e3));
        }
        function C(e3, t2, r2, o2) {
          for (var n2 = 0; n2 < o2 && !(n2 + r2 >= t2.length || n2 >= e3.length); ++n2)
            t2[n2 + r2] = e3[n2];
          return n2;
        }
        function O(e3, t2) {
          return e3 instanceof t2 || null != e3 && null != e3.constructor && null != e3.constructor.name && e3.constructor.name === t2.name;
        }
        function L(e3) {
          return e3 != e3;
        }
        var k = function() {
          for (var e3 = "0123456789abcdef", t2 = new Array(256), r2 = 0; r2 < 16; ++r2)
            for (var o2 = 16 * r2, n2 = 0; n2 < 16; ++n2)
              t2[o2 + n2] = e3[r2] + e3[n2];
          return t2;
        }();
      }.call(this, A("buffer").Buffer);
    }, { "base64-js": 1, buffer: 4, ieee754: 238 }], 5: [function(e, t, r) {
      t.exports = function(e2) {
        if ("function" != typeof e2)
          throw TypeError(String(e2) + " is not a function");
        return e2;
      };
    }, {}], 6: [function(e, t, r) {
      var o = e("../internals/is-object");
      t.exports = function(e2) {
        if (o(e2) || null === e2)
          return e2;
        throw TypeError("Can't set " + String(e2) + " as a prototype");
      };
    }, { "../internals/is-object": 74 }], 7: [function(e, t, r) {
      var o = e("../internals/well-known-symbol"), n = e("../internals/object-create"), e = e("../internals/object-define-property"), s2 = o("unscopables"), i2 = Array.prototype;
      null == i2[s2] && e.f(i2, s2, { configurable: true, value: n(null) }), t.exports = function(e2) {
        i2[s2][e2] = true;
      };
    }, { "../internals/object-create": 90, "../internals/object-define-property": 92, "../internals/well-known-symbol": 146 }], 8: [function(e, t, r) {
      var o = e("../internals/string-multibyte").charAt;
      t.exports = function(e2, t2, r2) {
        return t2 + (r2 ? o(e2, t2).length : 1);
      };
    }, { "../internals/string-multibyte": 123 }], 9: [function(e, t, r) {
      t.exports = function(e2, t2, r2) {
        if (e2 instanceof t2)
          return e2;
        throw TypeError("Incorrect " + (r2 ? r2 + " " : "") + "invocation");
      };
    }, {}], 10: [function(e, t, r) {
      var o = e("../internals/is-object");
      t.exports = function(e2) {
        if (o(e2))
          return e2;
        throw TypeError(String(e2) + " is not an object");
      };
    }, { "../internals/is-object": 74 }], 11: [function(e, t, r) {
      t.exports = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView;
    }, {}], 12: [function(e, t, r) {
      function o(e2) {
        return l(e2) && u(E, c(e2));
      }
      var n, s2 = e("../internals/array-buffer-native"), i2 = e("../internals/descriptors"), a = e("../internals/global"), l = e("../internals/is-object"), u = e("../internals/has"), c = e("../internals/classof"), d = e("../internals/create-non-enumerable-property"), f = e("../internals/redefine"), h = e("../internals/object-define-property").f, p = e("../internals/object-get-prototype-of"), m = e("../internals/object-set-prototype-of"), y = e("../internals/well-known-symbol"), e = e("../internals/uid"), g = a.Int8Array, v = g && g.prototype, b = a.Uint8ClampedArray, b = b && b.prototype, j = g && p(g), _ = v && p(v), x = Object.prototype, w = x.isPrototypeOf, y = y("toStringTag"), S = e("TYPED_ARRAY_TAG"), M = s2 && !!m && "Opera" !== c(a.opera), e = false, E = { Int8Array: 1, Uint8Array: 1, Uint8ClampedArray: 1, Int16Array: 2, Uint16Array: 2, Int32Array: 4, Uint32Array: 4, Float32Array: 4, Float64Array: 8 };
      for (n in E)
        a[n] || (M = false);
      if ((!M || "function" != typeof j || j === Function.prototype) && (j = function() {
        throw TypeError("Incorrect invocation");
      }, M))
        for (n in E)
          a[n] && m(a[n], j);
      if ((!M || !_ || _ === x) && (_ = j.prototype, M))
        for (n in E)
          a[n] && m(a[n].prototype, _);
      if (M && p(b) !== _ && m(b, _), i2 && !u(_, y))
        for (n in e = true, h(_, y, { get: function() {
          return l(this) ? this[S] : void 0;
        } }), E)
          a[n] && d(a[n], S, n);
      t.exports = { NATIVE_ARRAY_BUFFER_VIEWS: M, TYPED_ARRAY_TAG: e && S, aTypedArray: function(e2) {
        if (o(e2))
          return e2;
        throw TypeError("Target is not a typed array");
      }, aTypedArrayConstructor: function(e2) {
        if (m) {
          if (w.call(j, e2))
            return e2;
        } else
          for (var t2 in E)
            if (u(E, n)) {
              t2 = a[t2];
              if (t2 && (e2 === t2 || w.call(t2, e2)))
                return e2;
            }
        throw TypeError("Target is not a typed array constructor");
      }, exportTypedArrayMethod: function(e2, t2, r2) {
        if (i2) {
          if (r2)
            for (var o2 in E) {
              o2 = a[o2];
              o2 && u(o2.prototype, e2) && delete o2.prototype[e2];
            }
          _[e2] && !r2 || f(_, e2, !r2 && M && v[e2] || t2);
        }
      }, exportTypedArrayStaticMethod: function(e2, t2, r2) {
        var o2, n2;
        if (i2) {
          if (m) {
            if (r2)
              for (o2 in E)
                (n2 = a[o2]) && u(n2, e2) && delete n2[e2];
            if (j[e2] && !r2)
              return;
            try {
              return f(j, e2, !r2 && M && g[e2] || t2);
            } catch (e3) {
            }
          }
          for (o2 in E)
            !(n2 = a[o2]) || n2[e2] && !r2 || f(n2, e2, t2);
        }
      }, isView: function(e2) {
        e2 = c(e2);
        return "DataView" === e2 || u(E, e2);
      }, isTypedArray: o, TypedArray: j, TypedArrayPrototype: _ };
    }, { "../internals/array-buffer-native": 11, "../internals/classof": 29, "../internals/create-non-enumerable-property": 38, "../internals/descriptors": 43, "../internals/global": 59, "../internals/has": 60, "../internals/is-object": 74, "../internals/object-define-property": 92, "../internals/object-get-prototype-of": 97, "../internals/object-set-prototype-of": 101, "../internals/redefine": 108, "../internals/uid": 143, "../internals/well-known-symbol": 146 }], 13: [function(e, t, I) {
      function r(e2) {
        return [255 & e2];
      }
      function o(e2) {
        return [255 & e2, e2 >> 8 & 255];
      }
      function n(e2) {
        return [255 & e2, e2 >> 8 & 255, e2 >> 16 & 255, e2 >> 24 & 255];
      }
      function s2(e2) {
        return e2[3] << 24 | e2[2] << 16 | e2[1] << 8 | e2[0];
      }
      function i2(e2) {
        return L(e2, 23, 4);
      }
      function U(e2) {
        return L(e2, 52, 8);
      }
      function a(e2, t2) {
        H(e2[w], t2, { get: function() {
          return b(this)[t2];
        } });
      }
      function l(e2, t2, r2, o2) {
        if (r2 = m(r2), e2 = b(e2), r2 + t2 > e2.byteLength)
          throw O(S);
        var n2 = b(e2.buffer).bytes, r2 = r2 + e2.byteOffset, e2 = n2.slice(r2, r2 + t2);
        return o2 ? e2 : e2.reverse();
      }
      function u(e2, t2, r2, o2, n2, s3) {
        if (r2 = m(r2), e2 = b(e2), r2 + t2 > e2.byteLength)
          throw O(S);
        for (var i3 = b(e2.buffer).bytes, a2 = r2 + e2.byteOffset, l2 = o2(+n2), u2 = 0; u2 < t2; u2++)
          i3[a2 + u2] = l2[s3 ? u2 : t2 - u2 - 1];
      }
      var c = e("../internals/global"), d = e("../internals/descriptors"), N = e("../internals/array-buffer-native"), F = e("../internals/create-non-enumerable-property"), f = e("../internals/redefine-all"), h = e("../internals/fails"), p = e("../internals/an-instance"), B = e("../internals/to-integer"), G = e("../internals/to-length"), m = e("../internals/to-index"), y = e("../internals/ieee754"), V = e("../internals/object-get-prototype-of"), g = e("../internals/object-set-prototype-of"), z = e("../internals/object-get-own-property-names").f, H = e("../internals/object-define-property").f, W = e("../internals/array-fill"), v = e("../internals/set-to-string-tag"), e = e("../internals/internal-state"), b = e.get, j = e.set, _ = "ArrayBuffer", x = "DataView", w = "prototype", S = "Wrong index", M = c[_], E = M, T = c[x], e = T && T[w], C = Object.prototype, O = c.RangeError, L = y.pack, k = y.unpack;
      if (N) {
        if (!h(function() {
          M(1);
        }) || !h(function() {
          new M(-1);
        }) || h(function() {
          return new M(), new M(1.5), new M(NaN), M.name != _;
        })) {
          for (var A, c = (E = function(e2) {
            return p(this, E), new M(m(e2));
          })[w] = M[w], P = z(M), R = 0; P.length > R; )
            (A = P[R++]) in E || F(E, A, M[A]);
          c.constructor = E;
        }
        g && V(e) !== C && g(e, C);
        var y = new T(new E(2)), D = e.setInt8;
        y.setInt8(0, 2147483648), y.setInt8(1, 2147483649), !y.getInt8(0) && y.getInt8(1) || f(e, { setInt8: function(e2, t2) {
          D.call(this, e2, t2 << 24 >> 24);
        }, setUint8: function(e2, t2) {
          D.call(this, e2, t2 << 24 >> 24);
        } }, { unsafe: true });
      } else
        E = function(e2) {
          p(this, E, _);
          e2 = m(e2);
          j(this, { bytes: W.call(new Array(e2), 0), byteLength: e2 }), d || (this.byteLength = e2);
        }, T = function(e2, t2, r2) {
          p(this, T, x), p(e2, E, x);
          var o2 = b(e2).byteLength, t2 = B(t2);
          if (t2 < 0 || o2 < t2)
            throw O("Wrong offset");
          if (o2 < t2 + (r2 = void 0 === r2 ? o2 - t2 : G(r2)))
            throw O("Wrong length");
          j(this, { buffer: e2, byteLength: r2, byteOffset: t2 }), d || (this.buffer = e2, this.byteLength = r2, this.byteOffset = t2);
        }, d && (a(E, "byteLength"), a(T, "buffer"), a(T, "byteLength"), a(T, "byteOffset")), f(T[w], { getInt8: function(e2) {
          return l(this, 1, e2)[0] << 24 >> 24;
        }, getUint8: function(e2) {
          return l(this, 1, e2)[0];
        }, getInt16: function(e2) {
          e2 = l(this, 2, e2, 1 < arguments.length ? arguments[1] : void 0);
          return (e2[1] << 8 | e2[0]) << 16 >> 16;
        }, getUint16: function(e2) {
          e2 = l(this, 2, e2, 1 < arguments.length ? arguments[1] : void 0);
          return e2[1] << 8 | e2[0];
        }, getInt32: function(e2) {
          return s2(l(this, 4, e2, 1 < arguments.length ? arguments[1] : void 0));
        }, getUint32: function(e2) {
          return s2(l(this, 4, e2, 1 < arguments.length ? arguments[1] : void 0)) >>> 0;
        }, getFloat32: function(e2) {
          return k(l(this, 4, e2, 1 < arguments.length ? arguments[1] : void 0), 23);
        }, getFloat64: function(e2) {
          return k(l(this, 8, e2, 1 < arguments.length ? arguments[1] : void 0), 52);
        }, setInt8: function(e2, t2) {
          u(this, 1, e2, r, t2);
        }, setUint8: function(e2, t2) {
          u(this, 1, e2, r, t2);
        }, setInt16: function(e2, t2) {
          u(this, 2, e2, o, t2, 2 < arguments.length ? arguments[2] : void 0);
        }, setUint16: function(e2, t2) {
          u(this, 2, e2, o, t2, 2 < arguments.length ? arguments[2] : void 0);
        }, setInt32: function(e2, t2) {
          u(this, 4, e2, n, t2, 2 < arguments.length ? arguments[2] : void 0);
        }, setUint32: function(e2, t2) {
          u(this, 4, e2, n, t2, 2 < arguments.length ? arguments[2] : void 0);
        }, setFloat32: function(e2, t2) {
          u(this, 4, e2, i2, t2, 2 < arguments.length ? arguments[2] : void 0);
        }, setFloat64: function(e2, t2) {
          u(this, 8, e2, U, t2, 2 < arguments.length ? arguments[2] : void 0);
        } });
      v(E, _), v(T, x), t.exports = { ArrayBuffer: E, DataView: T };
    }, { "../internals/an-instance": 9, "../internals/array-buffer-native": 11, "../internals/array-fill": 15, "../internals/create-non-enumerable-property": 38, "../internals/descriptors": 43, "../internals/fails": 51, "../internals/global": 59, "../internals/ieee754": 65, "../internals/internal-state": 70, "../internals/object-define-property": 92, "../internals/object-get-own-property-names": 95, "../internals/object-get-prototype-of": 97, "../internals/object-set-prototype-of": 101, "../internals/redefine-all": 107, "../internals/set-to-string-tag": 117, "../internals/to-index": 131, "../internals/to-integer": 133, "../internals/to-length": 134 }], 14: [function(e, t, r) {
      var l = e("../internals/to-object"), u = e("../internals/to-absolute-index"), c = e("../internals/to-length"), d = Math.min;
      t.exports = [].copyWithin || function(e2, t2) {
        var r2 = l(this), o = c(r2.length), n = u(e2, o), s2 = u(t2, o), e2 = 2 < arguments.length ? arguments[2] : void 0, i2 = d((void 0 === e2 ? o : u(e2, o)) - s2, o - n), a = 1;
        for (s2 < n && n < s2 + i2 && (a = -1, s2 += i2 - 1, n += i2 - 1); 0 < i2--; )
          s2 in r2 ? r2[n] = r2[s2] : delete r2[n], n += a, s2 += a;
        return r2;
      };
    }, { "../internals/to-absolute-index": 130, "../internals/to-length": 134, "../internals/to-object": 135 }], 15: [function(e, t, r) {
      var i2 = e("../internals/to-object"), a = e("../internals/to-absolute-index"), l = e("../internals/to-length");
      t.exports = function(e2) {
        for (var t2 = i2(this), r2 = l(t2.length), o = arguments.length, n = a(1 < o ? arguments[1] : void 0, r2), o = 2 < o ? arguments[2] : void 0, s2 = void 0 === o ? r2 : a(o, r2); n < s2; )
          t2[n++] = e2;
        return t2;
      };
    }, { "../internals/to-absolute-index": 130, "../internals/to-length": 134, "../internals/to-object": 135 }], 16: [function(e, t, r) {
      var o = e("../internals/array-iteration").forEach, n = e("../internals/array-method-is-strict"), e = e("../internals/array-method-uses-to-length"), n = n("forEach"), e = e("forEach");
      t.exports = n && e ? [].forEach : function(e2) {
        return o(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      };
    }, { "../internals/array-iteration": 19, "../internals/array-method-is-strict": 22, "../internals/array-method-uses-to-length": 23 }], 17: [function(e, t, r) {
      var h = e("../internals/function-bind-context"), p = e("../internals/to-object"), m = e("../internals/call-with-safe-iteration-closing"), y = e("../internals/is-array-iterator-method"), g = e("../internals/to-length"), v = e("../internals/create-property"), b = e("../internals/get-iterator-method");
      t.exports = function(e2) {
        var t2, r2, o, n, s2, i2, a = p(e2), e2 = "function" == typeof this ? this : Array, l = arguments.length, u = 1 < l ? arguments[1] : void 0, c = void 0 !== u, d = b(a), f = 0;
        if (c && (u = h(u, 2 < l ? arguments[2] : void 0, 2)), null == d || e2 == Array && y(d))
          for (r2 = new e2(t2 = g(a.length)); f < t2; f++)
            i2 = c ? u(a[f], f) : a[f], v(r2, f, i2);
        else
          for (s2 = (n = d.call(a)).next, r2 = new e2(); !(o = s2.call(n)).done; f++)
            i2 = c ? m(n, u, [o.value, f], true) : o.value, v(r2, f, i2);
        return r2.length = f, r2;
      };
    }, { "../internals/call-with-safe-iteration-closing": 26, "../internals/create-property": 40, "../internals/function-bind-context": 54, "../internals/get-iterator-method": 57, "../internals/is-array-iterator-method": 71, "../internals/to-length": 134, "../internals/to-object": 135 }], 18: [function(e, t, r) {
      function o(a) {
        return function(e2, t2, r2) {
          var o2, n = l(e2), s2 = u(n.length), i2 = c(r2, s2);
          if (a && t2 != t2) {
            for (; i2 < s2; )
              if ((o2 = n[i2++]) != o2)
                return true;
          } else
            for (; i2 < s2; i2++)
              if ((a || i2 in n) && n[i2] === t2)
                return a || i2 || 0;
          return !a && -1;
        };
      }
      var l = e("../internals/to-indexed-object"), u = e("../internals/to-length"), c = e("../internals/to-absolute-index");
      t.exports = { includes: o(true), indexOf: o(false) };
    }, { "../internals/to-absolute-index": 130, "../internals/to-indexed-object": 132, "../internals/to-length": 134 }], 19: [function(e, t, r) {
      function o(f) {
        var h = 1 == f, p = 2 == f, m = 3 == f, y = 4 == f, g = 6 == f, v = 5 == f || g;
        return function(e2, t2, r2, o2) {
          for (var n, s2, i2 = _(e2), a = j(i2), l = b(t2, r2, 3), u = x(a.length), c = 0, t2 = o2 || w, d = h ? t2(e2, u) : p ? t2(e2, 0) : void 0; c < u; c++)
            if ((v || c in a) && (s2 = l(n = a[c], c, i2), f)) {
              if (h)
                d[c] = s2;
              else if (s2)
                switch (f) {
                  case 3:
                    return true;
                  case 5:
                    return n;
                  case 6:
                    return c;
                  case 2:
                    S.call(d, n);
                }
              else if (y)
                return false;
            }
          return g ? -1 : m || y ? y : d;
        };
      }
      var b = e("../internals/function-bind-context"), j = e("../internals/indexed-object"), _ = e("../internals/to-object"), x = e("../internals/to-length"), w = e("../internals/array-species-create"), S = [].push;
      t.exports = { forEach: o(0), map: o(1), filter: o(2), some: o(3), every: o(4), find: o(5), findIndex: o(6) };
    }, { "../internals/array-species-create": 25, "../internals/function-bind-context": 54, "../internals/indexed-object": 66, "../internals/to-length": 134, "../internals/to-object": 135 }], 20: [function(e, t, r) {
      var n = e("../internals/to-indexed-object"), s2 = e("../internals/to-integer"), i2 = e("../internals/to-length"), o = e("../internals/array-method-is-strict"), e = e("../internals/array-method-uses-to-length"), a = Math.min, l = [].lastIndexOf, u = !!l && 1 / [1].lastIndexOf(1, -0) < 0, o = o("lastIndexOf"), e = e("indexOf", { ACCESSORS: true, 1: 0 });
      t.exports = u || !o || !e ? function(e2) {
        if (u)
          return l.apply(this, arguments) || 0;
        var t2 = n(this), r2 = i2(t2.length), o2 = r2 - 1;
        for ((o2 = 1 < arguments.length ? a(o2, s2(arguments[1])) : o2) < 0 && (o2 = r2 + o2); 0 <= o2; o2--)
          if (o2 in t2 && t2[o2] === e2)
            return o2 || 0;
        return -1;
      } : l;
    }, { "../internals/array-method-is-strict": 22, "../internals/array-method-uses-to-length": 23, "../internals/to-indexed-object": 132, "../internals/to-integer": 133, "../internals/to-length": 134 }], 21: [function(e, t, r) {
      var o = e("../internals/fails"), n = e("../internals/well-known-symbol"), s2 = e("../internals/engine-v8-version"), i2 = n("species");
      t.exports = function(t2) {
        return 51 <= s2 || !o(function() {
          var e2 = [];
          return (e2.constructor = {})[i2] = function() {
            return { foo: 1 };
          }, 1 !== e2[t2](Boolean).foo;
        });
      };
    }, { "../internals/engine-v8-version": 48, "../internals/fails": 51, "../internals/well-known-symbol": 146 }], 22: [function(e, t, r) {
      var o = e("../internals/fails");
      t.exports = function(e2, t2) {
        var r2 = [][e2];
        return !!r2 && o(function() {
          r2.call(null, t2 || function() {
            throw 1;
          }, 1);
        });
      };
    }, { "../internals/fails": 51 }], 23: [function(e, t, r) {
      function i2(e2) {
        throw e2;
      }
      var a = e("../internals/descriptors"), l = e("../internals/fails"), u = e("../internals/has"), c = Object.defineProperty, d = {};
      t.exports = function(e2, t2) {
        var r2, o, n, s2;
        return u(d, e2) ? d[e2] : (r2 = [][e2], o = !!u(t2 = t2 || {}, "ACCESSORS") && t2.ACCESSORS, n = u(t2, 0) ? t2[0] : i2, s2 = u(t2, 1) ? t2[1] : void 0, d[e2] = !!r2 && !l(function() {
          if (o && !a)
            return true;
          var e3 = { length: -1 };
          o ? c(e3, 1, { enumerable: true, get: i2 }) : e3[1] = 1, r2.call(e3, n, s2);
        }));
      };
    }, { "../internals/descriptors": 43, "../internals/fails": 51, "../internals/has": 60 }], 24: [function(e, t, r) {
      function o(u) {
        return function(e2, t2, r2, o2) {
          c(t2);
          var n = d(e2), s2 = f(n), i2 = h(n.length), a = u ? i2 - 1 : 0, l = u ? -1 : 1;
          if (r2 < 2)
            for (; ; ) {
              if (a in s2) {
                o2 = s2[a], a += l;
                break;
              }
              if (a += l, u ? a < 0 : i2 <= a)
                throw TypeError("Reduce of empty array with no initial value");
            }
          for (; u ? 0 <= a : a < i2; a += l)
            a in s2 && (o2 = t2(o2, s2[a], a, n));
          return o2;
        };
      }
      var c = e("../internals/a-function"), d = e("../internals/to-object"), f = e("../internals/indexed-object"), h = e("../internals/to-length");
      t.exports = { left: o(false), right: o(true) };
    }, { "../internals/a-function": 5, "../internals/indexed-object": 66, "../internals/to-length": 134, "../internals/to-object": 135 }], 25: [function(e, t, r) {
      var o = e("../internals/is-object"), n = e("../internals/is-array"), s2 = e("../internals/well-known-symbol")("species");
      t.exports = function(e2, t2) {
        var r2;
        return new (void 0 === (r2 = n(e2) && ("function" == typeof (r2 = e2.constructor) && (r2 === Array || n(r2.prototype)) || o(r2) && null === (r2 = r2[s2])) ? void 0 : r2) ? Array : r2)(0 === t2 ? 0 : t2);
      };
    }, { "../internals/is-array": 72, "../internals/is-object": 74, "../internals/well-known-symbol": 146 }], 26: [function(e, t, r) {
      var n = e("../internals/an-object");
      t.exports = function(t2, e2, r2, o) {
        try {
          return o ? e2(n(r2)[0], r2[1]) : e2(r2);
        } catch (e3) {
          o = t2.return;
          throw void 0 !== o && n(o.call(t2)), e3;
        }
      };
    }, { "../internals/an-object": 10 }], 27: [function(e, t, r) {
      var n = e("../internals/well-known-symbol")("iterator"), s2 = false;
      try {
        var o = 0, i2 = { next: function() {
          return { done: !!o++ };
        }, return: function() {
          s2 = true;
        } };
        i2[n] = function() {
          return this;
        }, Array.from(i2, function() {
          throw 2;
        });
      } catch (e2) {
      }
      t.exports = function(e2, t2) {
        if (!t2 && !s2)
          return false;
        var r2 = false;
        try {
          var o2 = {};
          o2[n] = function() {
            return { next: function() {
              return { done: r2 = true };
            } };
          }, e2(o2);
        } catch (e3) {
        }
        return r2;
      };
    }, { "../internals/well-known-symbol": 146 }], 28: [function(e, t, r) {
      var o = {}.toString;
      t.exports = function(e2) {
        return o.call(e2).slice(8, -1);
      };
    }, {}], 29: [function(e, t, r) {
      var o = e("../internals/to-string-tag-support"), n = e("../internals/classof-raw"), s2 = e("../internals/well-known-symbol")("toStringTag"), i2 = "Arguments" == n(function() {
        return arguments;
      }());
      t.exports = o ? n : function(e2) {
        var t2;
        return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (t2 = function(e3, t3) {
          try {
            return e3[t3];
          } catch (e4) {
          }
        }(e2 = Object(e2), s2)) ? t2 : i2 ? n(e2) : "Object" == (t2 = n(e2)) && "function" == typeof e2.callee ? "Arguments" : t2;
      };
    }, { "../internals/classof-raw": 28, "../internals/to-string-tag-support": 139, "../internals/well-known-symbol": 146 }], 30: [function(e, t, r) {
      var u = e("../internals/object-define-property").f, c = e("../internals/object-create"), d = e("../internals/redefine-all"), f = e("../internals/function-bind-context"), h = e("../internals/an-instance"), p = e("../internals/iterate"), i2 = e("../internals/define-iterator"), a = e("../internals/set-species"), m = e("../internals/descriptors"), y = e("../internals/internal-metadata").fastKey, e = e("../internals/internal-state"), g = e.set, v = e.getterFor;
      t.exports = { getConstructor: function(e2, r2, o, n) {
        function s2(e3, t2, r3) {
          var o2, n2 = l(e3), s3 = i3(e3, t2);
          return s3 ? s3.value = r3 : (n2.last = s3 = { index: o2 = y(t2, true), key: t2, value: r3, previous: t2 = n2.last, next: void 0, removed: false }, n2.first || (n2.first = s3), t2 && (t2.next = s3), m ? n2.size++ : e3.size++, "F" !== o2 && (n2.index[o2] = s3)), e3;
        }
        function i3(e3, t2) {
          var r3, e3 = l(e3), o2 = y(t2);
          if ("F" !== o2)
            return e3.index[o2];
          for (r3 = e3.first; r3; r3 = r3.next)
            if (r3.key == t2)
              return r3;
        }
        var a2 = e2(function(e3, t2) {
          h(e3, a2, r2), g(e3, { type: r2, index: c(null), first: void 0, last: void 0, size: 0 }), m || (e3.size = 0), null != t2 && p(t2, e3[n], e3, o);
        }), l = v(r2);
        return d(a2.prototype, { clear: function() {
          for (var e3 = l(this), t2 = e3.index, r3 = e3.first; r3; )
            r3.removed = true, r3.previous && (r3.previous = r3.previous.next = void 0), delete t2[r3.index], r3 = r3.next;
          e3.first = e3.last = void 0, m ? e3.size = 0 : this.size = 0;
        }, delete: function(e3) {
          var t2, r3, o2 = l(this), e3 = i3(this, e3);
          return e3 && (t2 = e3.next, r3 = e3.previous, delete o2.index[e3.index], e3.removed = true, r3 && (r3.next = t2), t2 && (t2.previous = r3), o2.first == e3 && (o2.first = t2), o2.last == e3 && (o2.last = r3), m ? o2.size-- : this.size--), !!e3;
        }, forEach: function(e3) {
          for (var t2, r3 = l(this), o2 = f(e3, 1 < arguments.length ? arguments[1] : void 0, 3); t2 = t2 ? t2.next : r3.first; )
            for (o2(t2.value, t2.key, this); t2 && t2.removed; )
              t2 = t2.previous;
        }, has: function(e3) {
          return !!i3(this, e3);
        } }), d(a2.prototype, o ? { get: function(e3) {
          e3 = i3(this, e3);
          return e3 && e3.value;
        }, set: function(e3, t2) {
          return s2(this, 0 === e3 ? 0 : e3, t2);
        } } : { add: function(e3) {
          return s2(this, e3 = 0 === e3 ? 0 : e3, e3);
        } }), m && u(a2.prototype, "size", { get: function() {
          return l(this).size;
        } }), a2;
      }, setStrong: function(e2, t2, r2) {
        var o = t2 + " Iterator", n = v(t2), s2 = v(o);
        i2(e2, t2, function(e3, t3) {
          g(this, { type: o, target: e3, state: n(e3), kind: t3, last: void 0 });
        }, function() {
          for (var e3 = s2(this), t3 = e3.kind, r3 = e3.last; r3 && r3.removed; )
            r3 = r3.previous;
          return e3.target && (e3.last = r3 = r3 ? r3.next : e3.state.first) ? "keys" == t3 ? { value: r3.key, done: false } : "values" == t3 ? { value: r3.value, done: false } : { value: [r3.key, r3.value], done: false } : { value: e3.target = void 0, done: true };
        }, r2 ? "entries" : "values", !r2, true), a(t2);
      } };
    }, { "../internals/an-instance": 9, "../internals/define-iterator": 41, "../internals/descriptors": 43, "../internals/function-bind-context": 54, "../internals/internal-metadata": 69, "../internals/internal-state": 70, "../internals/iterate": 77, "../internals/object-create": 90, "../internals/object-define-property": 92, "../internals/redefine-all": 107, "../internals/set-species": 116 }], 31: [function(e, t, r) {
      function l(e2) {
        return e2.frozen || (e2.frozen = new o());
      }
      function o() {
        this.entries = [];
      }
      function n(e2, t2) {
        return i2(e2.entries, function(e3) {
          return e3[0] === t2;
        });
      }
      var u = e("../internals/redefine-all"), c = e("../internals/internal-metadata").getWeakData, d = e("../internals/an-object"), f = e("../internals/is-object"), h = e("../internals/an-instance"), p = e("../internals/iterate"), s2 = e("../internals/array-iteration"), m = e("../internals/has"), e = e("../internals/internal-state"), y = e.set, g = e.getterFor, i2 = s2.find, a = s2.findIndex, v = 0;
      o.prototype = { get: function(e2) {
        e2 = n(this, e2);
        if (e2)
          return e2[1];
      }, has: function(e2) {
        return !!n(this, e2);
      }, set: function(e2, t2) {
        var r2 = n(this, e2);
        r2 ? r2[1] = t2 : this.entries.push([e2, t2]);
      }, delete: function(t2) {
        var e2 = a(this.entries, function(e3) {
          return e3[0] === t2;
        });
        return ~e2 && this.entries.splice(e2, 1), !!~e2;
      } }, t.exports = { getConstructor: function(e2, r2, o2, n2) {
        function s3(e3, t2, r3) {
          var o3 = a2(e3), n3 = c(d(t2), true);
          return true === n3 ? l(o3).set(t2, r3) : n3[o3.id] = r3, e3;
        }
        var i3 = e2(function(e3, t2) {
          h(e3, i3, r2), y(e3, { type: r2, id: v++, frozen: void 0 }), null != t2 && p(t2, e3[n2], e3, o2);
        }), a2 = g(r2);
        return u(i3.prototype, { delete: function(e3) {
          var t2, r3 = a2(this);
          return !!f(e3) && (true === (t2 = c(e3)) ? l(r3).delete(e3) : t2 && m(t2, r3.id) && delete t2[r3.id]);
        }, has: function(e3) {
          var t2, r3 = a2(this);
          return !!f(e3) && (true === (t2 = c(e3)) ? l(r3).has(e3) : t2 && m(t2, r3.id));
        } }), u(i3.prototype, o2 ? { get: function(e3) {
          var t2, r3 = a2(this);
          if (f(e3))
            return true === (t2 = c(e3)) ? l(r3).get(e3) : t2 ? t2[r3.id] : void 0;
        }, set: function(e3, t2) {
          return s3(this, e3, t2);
        } } : { add: function(e3) {
          return s3(this, e3, true);
        } }), i3;
      } };
    }, { "../internals/an-instance": 9, "../internals/an-object": 10, "../internals/array-iteration": 19, "../internals/has": 60, "../internals/internal-metadata": 69, "../internals/internal-state": 70, "../internals/is-object": 74, "../internals/iterate": 77, "../internals/redefine-all": 107 }], 32: [function(e, t, r) {
      var y = e("../internals/export"), g = e("../internals/global"), v = e("../internals/is-forced"), b = e("../internals/redefine"), j = e("../internals/internal-metadata"), _ = e("../internals/iterate"), x = e("../internals/an-instance"), w = e("../internals/is-object"), S = e("../internals/fails"), M = e("../internals/check-correctness-of-iteration"), E = e("../internals/set-to-string-tag"), T = e("../internals/inherit-if-required");
      t.exports = function(r2, e2, t2) {
        function o(e3) {
          var r3 = h[e3];
          b(h, e3, "add" == e3 ? function(e4) {
            return r3.call(this, 0 === e4 ? 0 : e4), this;
          } : "delete" == e3 ? function(e4) {
            return !(c && !w(e4)) && r3.call(this, 0 === e4 ? 0 : e4);
          } : "get" == e3 ? function(e4) {
            return c && !w(e4) ? void 0 : r3.call(this, 0 === e4 ? 0 : e4);
          } : "has" == e3 ? function(e4) {
            return !(c && !w(e4)) && r3.call(this, 0 === e4 ? 0 : e4);
          } : function(e4, t3) {
            return r3.call(this, 0 === e4 ? 0 : e4, t3), this;
          });
        }
        var n, s2, i2, a, l, u = -1 !== r2.indexOf("Map"), c = -1 !== r2.indexOf("Weak"), d = u ? "set" : "add", f = g[r2], h = f && f.prototype, p = f, m = {};
        return v(r2, "function" != typeof f || !(c || h.forEach && !S(function() {
          new f().entries().next();
        }))) ? (p = t2.getConstructor(e2, r2, u, d), j.REQUIRED = true) : v(r2, true) && (s2 = (n = new p())[d](c ? {} : -0, 1) != n, i2 = S(function() {
          n.has(1);
        }), a = M(function(e3) {
          new f(e3);
        }), l = !c && S(function() {
          for (var e3 = new f(), t3 = 5; t3--; )
            e3[d](t3, t3);
          return !e3.has(-0);
        }), a || (((p = e2(function(e3, t3) {
          x(e3, p, r2);
          e3 = T(new f(), e3, p);
          return null != t3 && _(t3, e3[d], e3, u), e3;
        })).prototype = h).constructor = p), (i2 || l) && (o("delete"), o("has"), u && o("get")), (l || s2) && o(d), c && h.clear && delete h.clear), m[r2] = p, y({ global: true, forced: p != f }, m), E(p, r2), c || t2.setStrong(p, r2, u), p;
      };
    }, { "../internals/an-instance": 9, "../internals/check-correctness-of-iteration": 27, "../internals/export": 50, "../internals/fails": 51, "../internals/global": 59, "../internals/inherit-if-required": 67, "../internals/internal-metadata": 69, "../internals/is-forced": 73, "../internals/is-object": 74, "../internals/iterate": 77, "../internals/redefine": 108, "../internals/set-to-string-tag": 117 }], 33: [function(e, t, r) {
      var a = e("../internals/has"), l = e("../internals/own-keys"), u = e("../internals/object-get-own-property-descriptor"), c = e("../internals/object-define-property");
      t.exports = function(e2, t2) {
        for (var r2 = l(t2), o = c.f, n = u.f, s2 = 0; s2 < r2.length; s2++) {
          var i2 = r2[s2];
          a(e2, i2) || o(e2, i2, n(t2, i2));
        }
      };
    }, { "../internals/has": 60, "../internals/object-define-property": 92, "../internals/object-get-own-property-descriptor": 93, "../internals/own-keys": 103 }], 34: [function(e, t, r) {
      var o = e("../internals/well-known-symbol")("match");
      t.exports = function(t2) {
        var r2 = /./;
        try {
          "/./"[t2](r2);
        } catch (e2) {
          try {
            return r2[o] = false, "/./"[t2](r2);
          } catch (e3) {
          }
        }
        return false;
      };
    }, { "../internals/well-known-symbol": 146 }], 35: [function(e, t, r) {
      e = e("../internals/fails");
      t.exports = !e(function() {
        function e2() {
        }
        return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
      });
    }, { "../internals/fails": 51 }], 36: [function(e, t, r) {
      var s2 = e("../internals/require-object-coercible"), i2 = /"/g;
      t.exports = function(e2, t2, r2, o) {
        var e2 = String(s2(e2)), n = "<" + t2;
        return "" !== r2 && (n += " " + r2 + '="' + String(o).replace(i2, "&quot;") + '"'), n + ">" + e2 + "</" + t2 + ">";
      };
    }, { "../internals/require-object-coercible": 113 }], 37: [function(e, t, r) {
      function o() {
        return this;
      }
      var n = e("../internals/iterators-core").IteratorPrototype, s2 = e("../internals/object-create"), i2 = e("../internals/create-property-descriptor"), a = e("../internals/set-to-string-tag"), l = e("../internals/iterators");
      t.exports = function(e2, t2, r2) {
        t2 += " Iterator";
        return e2.prototype = s2(n, { next: i2(1, r2) }), a(e2, t2, false, true), l[t2] = o, e2;
      };
    }, { "../internals/create-property-descriptor": 39, "../internals/iterators": 79, "../internals/iterators-core": 78, "../internals/object-create": 90, "../internals/set-to-string-tag": 117 }], 38: [function(e, t, r) {
      var o = e("../internals/descriptors"), n = e("../internals/object-define-property"), s2 = e("../internals/create-property-descriptor");
      t.exports = o ? function(e2, t2, r2) {
        return n.f(e2, t2, s2(1, r2));
      } : function(e2, t2, r2) {
        return e2[t2] = r2, e2;
      };
    }, { "../internals/create-property-descriptor": 39, "../internals/descriptors": 43, "../internals/object-define-property": 92 }], 39: [function(e, t, r) {
      t.exports = function(e2, t2) {
        return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
      };
    }, {}], 40: [function(e, t, r) {
      var o = e("../internals/to-primitive"), n = e("../internals/object-define-property"), s2 = e("../internals/create-property-descriptor");
      t.exports = function(e2, t2, r2) {
        t2 = o(t2);
        t2 in e2 ? n.f(e2, t2, s2(0, r2)) : e2[t2] = r2;
      };
    }, { "../internals/create-property-descriptor": 39, "../internals/object-define-property": 92, "../internals/to-primitive": 138 }], 41: [function(e, t, r) {
      function m() {
        return this;
      }
      var y = e("../internals/export"), g = e("../internals/create-iterator-constructor"), v = e("../internals/object-get-prototype-of"), b = e("../internals/object-set-prototype-of"), j = e("../internals/set-to-string-tag"), _ = e("../internals/create-non-enumerable-property"), x = e("../internals/redefine"), o = e("../internals/well-known-symbol"), w = e("../internals/is-pure"), S = e("../internals/iterators"), e = e("../internals/iterators-core"), M = e.IteratorPrototype, E = e.BUGGY_SAFARI_ITERATORS, T = o("iterator"), C = "values", O = "entries";
      t.exports = function(e2, t2, r2, o2, n, s2, i2) {
        g(r2, t2, o2);
        function a(e3) {
          if (e3 === n && h)
            return h;
          if (!E && e3 in d)
            return d[e3];
          switch (e3) {
            case "keys":
            case C:
            case O:
              return function() {
                return new r2(this, e3);
              };
          }
          return function() {
            return new r2(this);
          };
        }
        var l, u, o2 = t2 + " Iterator", c = false, d = e2.prototype, f = d[T] || d["@@iterator"] || n && d[n], h = !E && f || a(n), p = "Array" == t2 && d.entries || f;
        if (p && (p = v(p.call(new e2())), M !== Object.prototype && p.next && (w || v(p) === M || (b ? b(p, M) : "function" != typeof p[T] && _(p, T, m)), j(p, o2, true, true), w && (S[o2] = m))), n == C && f && f.name !== C && (c = true, h = function() {
          return f.call(this);
        }), w && !i2 || d[T] === h || _(d, T, h), S[t2] = h, n)
          if (l = { values: a(C), keys: s2 ? h : a("keys"), entries: a(O) }, i2)
            for (u in l)
              !E && !c && u in d || x(d, u, l[u]);
          else
            y({ target: t2, proto: true, forced: E || c }, l);
        return l;
      };
    }, { "../internals/create-iterator-constructor": 37, "../internals/create-non-enumerable-property": 38, "../internals/export": 50, "../internals/is-pure": 75, "../internals/iterators": 79, "../internals/iterators-core": 78, "../internals/object-get-prototype-of": 97, "../internals/object-set-prototype-of": 101, "../internals/redefine": 108, "../internals/set-to-string-tag": 117, "../internals/well-known-symbol": 146 }], 42: [function(e, t, r) {
      var o = e("../internals/path"), n = e("../internals/has"), s2 = e("../internals/well-known-symbol-wrapped"), i2 = e("../internals/object-define-property").f;
      t.exports = function(e2) {
        var t2 = o.Symbol || (o.Symbol = {});
        n(t2, e2) || i2(t2, e2, { value: s2.f(e2) });
      };
    }, { "../internals/has": 60, "../internals/object-define-property": 92, "../internals/path": 104, "../internals/well-known-symbol-wrapped": 145 }], 43: [function(e, t, r) {
      e = e("../internals/fails");
      t.exports = !e(function() {
        return 7 != Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1];
      });
    }, { "../internals/fails": 51 }], 44: [function(e, t, r) {
      var o = e("../internals/global"), e = e("../internals/is-object"), n = o.document, s2 = e(n) && e(n.createElement);
      t.exports = function(e2) {
        return s2 ? n.createElement(e2) : {};
      };
    }, { "../internals/global": 59, "../internals/is-object": 74 }], 45: [function(e, t, r) {
      t.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };
    }, {}], 46: [function(e, t, r) {
      e = e("../internals/engine-user-agent");
      t.exports = /(iphone|ipod|ipad).*applewebkit/i.test(e);
    }, { "../internals/engine-user-agent": 47 }], 47: [function(e, t, r) {
      e = e("../internals/get-built-in");
      t.exports = e("navigator", "userAgent") || "";
    }, { "../internals/get-built-in": 56 }], 48: [function(e, t, r) {
      var o, n, s2 = e("../internals/global"), e = e("../internals/engine-user-agent"), s2 = s2.process, s2 = s2 && s2.versions, s2 = s2 && s2.v8;
      s2 ? n = (o = s2.split("."))[0] + o[1] : e && (!(o = e.match(/Edge\/(\d+)/)) || 74 <= o[1]) && (o = e.match(/Chrome\/(\d+)/)) && (n = o[1]), t.exports = n && +n;
    }, { "../internals/engine-user-agent": 47, "../internals/global": 59 }], 49: [function(e, t, r) {
      t.exports = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
    }, {}], 50: [function(e, t, r) {
      var u = e("../internals/global"), c = e("../internals/object-get-own-property-descriptor").f, d = e("../internals/create-non-enumerable-property"), f = e("../internals/redefine"), h = e("../internals/set-global"), p = e("../internals/copy-constructor-properties"), m = e("../internals/is-forced");
      t.exports = function(e2, t2) {
        var r2, o, n, s2 = e2.target, i2 = e2.global, a = e2.stat, l = i2 ? u : a ? u[s2] || h(s2, {}) : (u[s2] || {}).prototype;
        if (l)
          for (r2 in t2) {
            if (o = t2[r2], n = e2.noTargetGet ? (n = c(l, r2)) && n.value : l[r2], !m(i2 ? r2 : s2 + (a ? "." : "#") + r2, e2.forced) && void 0 !== n) {
              if (typeof o == typeof n)
                continue;
              p(o, n);
            }
            (e2.sham || n && n.sham) && d(o, "sham", true), f(l, r2, o, e2);
          }
      };
    }, { "../internals/copy-constructor-properties": 33, "../internals/create-non-enumerable-property": 38, "../internals/global": 59, "../internals/is-forced": 73, "../internals/object-get-own-property-descriptor": 93, "../internals/redefine": 108, "../internals/set-global": 115 }], 51: [function(e, t, r) {
      t.exports = function(e2) {
        try {
          return !!e2();
        } catch (e3) {
          return true;
        }
      };
    }, {}], 52: [function(e, t, r) {
      e("../modules/es.regexp.exec");
      var u = e("../internals/redefine"), c = e("../internals/fails"), d = e("../internals/well-known-symbol"), f = e("../internals/regexp-exec"), h = e("../internals/create-non-enumerable-property"), p = d("species"), m = !c(function() {
        var e2 = /./;
        return e2.exec = function() {
          var e3 = [];
          return e3.groups = { a: "7" }, e3;
        }, "7" !== "".replace(e2, "$<a>");
      }), y = "$0" === "a".replace(/./, "$0"), e = d("replace"), g = !!/./[e] && "" === /./[e]("a", "$0"), v = !c(function() {
        var e2 = /(?:)/, t2 = e2.exec, e2 = (e2.exec = function() {
          return t2.apply(this, arguments);
        }, "ab".split(e2));
        return 2 !== e2.length || "a" !== e2[0] || "b" !== e2[1];
      });
      t.exports = function(r2, e2, t2, o) {
        var s2, n, i2 = d(r2), a = !c(function() {
          var e3 = {};
          return e3[i2] = function() {
            return 7;
          }, 7 != ""[r2](e3);
        }), l = a && !c(function() {
          var e3 = false, t3 = /a/;
          return "split" === r2 && ((t3 = { constructor: {} }).constructor[p] = function() {
            return t3;
          }, t3.flags = "", t3[i2] = /./[i2]), t3.exec = function() {
            return e3 = true, null;
          }, t3[i2](""), !e3;
        });
        a && l && ("replace" !== r2 || m && y && !g) && ("split" !== r2 || v) || (s2 = /./[i2], t2 = (l = t2(i2, ""[r2], function(e3, t3, r3, o2, n2) {
          return t3.exec === f ? a && !n2 ? { done: true, value: s2.call(t3, r3, o2) } : { done: true, value: e3.call(r3, t3, o2) } : { done: false };
        }, { REPLACE_KEEPS_$0: y, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: g }))[0], n = l[1], u(String.prototype, r2, t2), u(RegExp.prototype, i2, 2 == e2 ? function(e3, t3) {
          return n.call(e3, this, t3);
        } : function(e3) {
          return n.call(e3, this);
        })), o && h(RegExp.prototype[i2], "sham", true);
      };
    }, { "../internals/create-non-enumerable-property": 38, "../internals/fails": 51, "../internals/redefine": 108, "../internals/regexp-exec": 110, "../internals/well-known-symbol": 146, "../modules/es.regexp.exec": 181 }], 53: [function(e, t, r) {
      e = e("../internals/fails");
      t.exports = !e(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      });
    }, { "../internals/fails": 51 }], 54: [function(e, t, r) {
      var s2 = e("../internals/a-function");
      t.exports = function(o, n, e2) {
        if (s2(o), void 0 === n)
          return o;
        switch (e2) {
          case 0:
            return function() {
              return o.call(n);
            };
          case 1:
            return function(e3) {
              return o.call(n, e3);
            };
          case 2:
            return function(e3, t2) {
              return o.call(n, e3, t2);
            };
          case 3:
            return function(e3, t2, r2) {
              return o.call(n, e3, t2, r2);
            };
        }
        return function() {
          return o.apply(n, arguments);
        };
      };
    }, { "../internals/a-function": 5 }], 55: [function(e, t, r) {
      var o = e("../internals/a-function"), n = e("../internals/is-object"), c = [].slice, d = {};
      t.exports = Function.bind || function(i2) {
        var a = o(this), l = c.call(arguments, 1), u = function() {
          var e2 = l.concat(c.call(arguments));
          if (this instanceof u) {
            var t2 = a, r2 = e2.length, o2 = e2;
            if (!(r2 in d)) {
              for (var n2 = [], s2 = 0; s2 < r2; s2++)
                n2[s2] = "a[" + s2 + "]";
              d[r2] = Function("C,a", "return new C(" + n2.join(",") + ")");
            }
            return d[r2](t2, o2);
          }
          return a.apply(i2, e2);
        };
        return n(a.prototype) && (u.prototype = a.prototype), u;
      };
    }, { "../internals/a-function": 5, "../internals/is-object": 74 }], 56: [function(e, t, r) {
      function o(e2) {
        return "function" == typeof e2 ? e2 : void 0;
      }
      var n = e("../internals/path"), s2 = e("../internals/global");
      t.exports = function(e2, t2) {
        return arguments.length < 2 ? o(n[e2]) || o(s2[e2]) : n[e2] && n[e2][t2] || s2[e2] && s2[e2][t2];
      };
    }, { "../internals/global": 59, "../internals/path": 104 }], 57: [function(e, t, r) {
      var o = e("../internals/classof"), n = e("../internals/iterators"), s2 = e("../internals/well-known-symbol")("iterator");
      t.exports = function(e2) {
        if (null != e2)
          return e2[s2] || e2["@@iterator"] || n[o(e2)];
      };
    }, { "../internals/classof": 29, "../internals/iterators": 79, "../internals/well-known-symbol": 146 }], 58: [function(e, t, r) {
      var o = e("../internals/an-object"), n = e("../internals/get-iterator-method");
      t.exports = function(e2) {
        var t2 = n(e2);
        if ("function" != typeof t2)
          throw TypeError(String(e2) + " is not iterable");
        return o(t2.call(e2));
      };
    }, { "../internals/an-object": 10, "../internals/get-iterator-method": 57 }], 59: [function(e, r, t) {
      !function(e2) {
        function t2(e3) {
          return e3 && e3.Math == Math && e3;
        }
        r.exports = t2("object" == typeof globalThis && globalThis) || t2("object" == typeof window && window) || t2("object" == typeof self && self) || t2("object" == typeof e2 && e2) || Function("return this")();
      }.call(this, "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {}], 60: [function(e, t, r) {
      var o = {}.hasOwnProperty;
      t.exports = function(e2, t2) {
        return o.call(e2, t2);
      };
    }, {}], 61: [function(e, t, r) {
      t.exports = {};
    }, {}], 62: [function(e, t, r) {
      var o = e("../internals/global");
      t.exports = function(e2, t2) {
        var r2 = o.console;
        r2 && r2.error && (1 === arguments.length ? r2.error(e2) : r2.error(e2, t2));
      };
    }, { "../internals/global": 59 }], 63: [function(e, t, r) {
      e = e("../internals/get-built-in");
      t.exports = e("document", "documentElement");
    }, { "../internals/get-built-in": 56 }], 64: [function(e, t, r) {
      var o = e("../internals/descriptors"), n = e("../internals/fails"), s2 = e("../internals/document-create-element");
      t.exports = !o && !n(function() {
        return 7 != Object.defineProperty(s2("div"), "a", { get: function() {
          return 7;
        } }).a;
      });
    }, { "../internals/descriptors": 43, "../internals/document-create-element": 44, "../internals/fails": 51 }], 65: [function(e, t, r) {
      var f = Math.abs, h = Math.pow, p = Math.floor, m = Math.log, y = Math.LN2;
      t.exports = { pack: function(e2, t2, r2) {
        var o, n, s2, i2 = new Array(r2), a = 8 * r2 - t2 - 1, r2 = (1 << a) - 1, l = r2 >> 1, u = 23 === t2 ? h(2, -24) - h(2, -77) : 0, c = e2 < 0 || 0 === e2 && 1 / e2 < 0 ? 1 : 0, d = 0;
        for ((e2 = f(e2)) != e2 || e2 === 1 / 0 ? (n = e2 != e2 ? 1 : 0, o = r2) : (o = p(m(e2) / y), e2 * (s2 = h(2, -o)) < 1 && (o--, s2 *= 2), 2 <= (e2 += 1 <= o + l ? u / s2 : u * h(2, 1 - l)) * s2 && (o++, s2 /= 2), r2 <= o + l ? (n = 0, o = r2) : 1 <= o + l ? (n = (e2 * s2 - 1) * h(2, t2), o += l) : (n = e2 * h(2, l - 1) * h(2, t2), o = 0)); 8 <= t2; i2[d++] = 255 & n, n /= 256, t2 -= 8)
          ;
        for (o = o << t2 | n, a += t2; 0 < a; i2[d++] = 255 & o, o /= 256, a -= 8)
          ;
        return i2[--d] |= 128 * c, i2;
      }, unpack: function(e2, t2) {
        var r2, o = e2.length, n = 8 * o - t2 - 1, s2 = (1 << n) - 1, i2 = s2 >> 1, a = n - 7, l = o - 1, n = e2[l--], u = 127 & n;
        for (n >>= 7; 0 < a; u = 256 * u + e2[l], l--, a -= 8)
          ;
        for (r2 = u & (1 << -a) - 1, u >>= -a, a += t2; 0 < a; r2 = 256 * r2 + e2[l], l--, a -= 8)
          ;
        if (0 === u)
          u = 1 - i2;
        else {
          if (u === s2)
            return r2 ? NaN : n ? -1 / 0 : 1 / 0;
          r2 += h(2, t2), u -= i2;
        }
        return (n ? -1 : 1) * r2 * h(2, u - t2);
      } };
    }, {}], 66: [function(e, t, r) {
      var o = e("../internals/fails"), n = e("../internals/classof-raw"), s2 = "".split;
      t.exports = o(function() {
        return !Object("z").propertyIsEnumerable(0);
      }) ? function(e2) {
        return "String" == n(e2) ? s2.call(e2, "") : Object(e2);
      } : Object;
    }, { "../internals/classof-raw": 28, "../internals/fails": 51 }], 67: [function(e, t, r) {
      var o = e("../internals/is-object"), n = e("../internals/object-set-prototype-of");
      t.exports = function(e2, t2, r2) {
        return n && "function" == typeof (t2 = t2.constructor) && t2 !== r2 && o(t2 = t2.prototype) && t2 !== r2.prototype && n(e2, t2), e2;
      };
    }, { "../internals/is-object": 74, "../internals/object-set-prototype-of": 101 }], 68: [function(e, t, r) {
      var e = e("../internals/shared-store"), o = Function.toString;
      "function" != typeof e.inspectSource && (e.inspectSource = function(e2) {
        return o.call(e2);
      }), t.exports = e.inspectSource;
    }, { "../internals/shared-store": 119 }], 69: [function(e, t, r) {
      function o(e2) {
        a(e2, c, { value: { objectID: "O" + ++d, weakData: {} } });
      }
      var n = e("../internals/hidden-keys"), s2 = e("../internals/is-object"), i2 = e("../internals/has"), a = e("../internals/object-define-property").f, l = e("../internals/uid"), u = e("../internals/freezing"), c = l("meta"), d = 0, f = Object.isExtensible || function() {
        return true;
      }, h = t.exports = { REQUIRED: false, fastKey: function(e2, t2) {
        if (!s2(e2))
          return "symbol" == typeof e2 ? e2 : ("string" == typeof e2 ? "S" : "P") + e2;
        if (!i2(e2, c)) {
          if (!f(e2))
            return "F";
          if (!t2)
            return "E";
          o(e2);
        }
        return e2[c].objectID;
      }, getWeakData: function(e2, t2) {
        if (!i2(e2, c)) {
          if (!f(e2))
            return true;
          if (!t2)
            return false;
          o(e2);
        }
        return e2[c].weakData;
      }, onFreeze: function(e2) {
        return u && h.REQUIRED && f(e2) && !i2(e2, c) && o(e2), e2;
      } };
      n[c] = true;
    }, { "../internals/freezing": 53, "../internals/has": 60, "../internals/hidden-keys": 61, "../internals/is-object": 74, "../internals/object-define-property": 92, "../internals/uid": 143 }], 70: [function(e, t, r) {
      var o, n, s2, i2, a, l, u, c, d = e("../internals/native-weak-map"), f = e("../internals/global"), h = e("../internals/is-object"), p = e("../internals/create-non-enumerable-property"), m = e("../internals/has"), y = e("../internals/shared-key"), e = e("../internals/hidden-keys"), f = f.WeakMap;
      u = d ? (o = new f(), n = o.get, s2 = o.has, i2 = o.set, a = function(e2, t2) {
        return i2.call(o, e2, t2), t2;
      }, l = function(e2) {
        return n.call(o, e2) || {};
      }, function(e2) {
        return s2.call(o, e2);
      }) : (e[c = y("state")] = true, a = function(e2, t2) {
        return p(e2, c, t2), t2;
      }, l = function(e2) {
        return m(e2, c) ? e2[c] : {};
      }, function(e2) {
        return m(e2, c);
      }), t.exports = { set: a, get: l, has: u, enforce: function(e2) {
        return u(e2) ? l(e2) : a(e2, {});
      }, getterFor: function(t2) {
        return function(e2) {
          if (h(e2) && (e2 = l(e2)).type === t2)
            return e2;
          throw TypeError("Incompatible receiver, " + t2 + " required");
        };
      } };
    }, { "../internals/create-non-enumerable-property": 38, "../internals/global": 59, "../internals/has": 60, "../internals/hidden-keys": 61, "../internals/is-object": 74, "../internals/native-weak-map": 85, "../internals/shared-key": 118 }], 71: [function(e, t, r) {
      var o = e("../internals/well-known-symbol"), n = e("../internals/iterators"), s2 = o("iterator"), i2 = Array.prototype;
      t.exports = function(e2) {
        return void 0 !== e2 && (n.Array === e2 || i2[s2] === e2);
      };
    }, { "../internals/iterators": 79, "../internals/well-known-symbol": 146 }], 72: [function(e, t, r) {
      var o = e("../internals/classof-raw");
      t.exports = Array.isArray || function(e2) {
        return "Array" == o(e2);
      };
    }, { "../internals/classof-raw": 28 }], 73: [function(e, t, r) {
      function o(e2, t2) {
        return (e2 = a[i2(e2)]) == u || e2 != l && ("function" == typeof t2 ? n(t2) : !!t2);
      }
      var n = e("../internals/fails"), s2 = /#|\.prototype\./, i2 = o.normalize = function(e2) {
        return String(e2).replace(s2, ".").toLowerCase();
      }, a = o.data = {}, l = o.NATIVE = "N", u = o.POLYFILL = "P";
      t.exports = o;
    }, { "../internals/fails": 51 }], 74: [function(e, t, r) {
      t.exports = function(e2) {
        return "object" == typeof e2 ? null !== e2 : "function" == typeof e2;
      };
    }, {}], 75: [function(e, t, r) {
      t.exports = false;
    }, {}], 76: [function(e, t, r) {
      var o = e("../internals/is-object"), n = e("../internals/classof-raw"), s2 = e("../internals/well-known-symbol")("match");
      t.exports = function(e2) {
        var t2;
        return o(e2) && (void 0 !== (t2 = e2[s2]) ? !!t2 : "RegExp" == n(e2));
      };
    }, { "../internals/classof-raw": 28, "../internals/is-object": 74, "../internals/well-known-symbol": 146 }], 77: [function(e, t, r) {
      function f(e2, t2) {
        this.stopped = e2, this.result = t2;
      }
      var h = e("../internals/an-object"), p = e("../internals/is-array-iterator-method"), m = e("../internals/to-length"), y = e("../internals/function-bind-context"), g = e("../internals/get-iterator-method"), v = e("../internals/call-with-safe-iteration-closing");
      (t.exports = function(e2, t2, r2, o, n) {
        var s2, i2, a, l, u, c, d = y(t2, r2, o ? 2 : 1);
        if (n)
          s2 = e2;
        else {
          if ("function" != typeof (t2 = g(e2)))
            throw TypeError("Target is not iterable");
          if (p(t2)) {
            for (i2 = 0, a = m(e2.length); i2 < a; i2++)
              if ((l = o ? d(h(c = e2[i2])[0], c[1]) : d(e2[i2])) && l instanceof f)
                return l;
            return new f(false);
          }
          s2 = t2.call(e2);
        }
        for (u = s2.next; !(c = u.call(s2)).done; )
          if ("object" == typeof (l = v(s2, d, c.value, o)) && l && l instanceof f)
            return l;
        return new f(false);
      }).stop = function(e2) {
        return new f(true, e2);
      };
    }, { "../internals/an-object": 10, "../internals/call-with-safe-iteration-closing": 26, "../internals/function-bind-context": 54, "../internals/get-iterator-method": 57, "../internals/is-array-iterator-method": 71, "../internals/to-length": 134 }], 78: [function(e, t, r) {
      var o, n, s2 = e("../internals/object-get-prototype-of"), i2 = e("../internals/create-non-enumerable-property"), a = e("../internals/has"), l = e("../internals/well-known-symbol"), e = e("../internals/is-pure"), l = l("iterator"), u = false;
      [].keys && ("next" in (n = [].keys()) ? (s2 = s2(s2(n))) !== Object.prototype && (o = s2) : u = true), null == o && (o = {}), e || a(o, l) || i2(o, l, function() {
        return this;
      }), t.exports = { IteratorPrototype: o, BUGGY_SAFARI_ITERATORS: u };
    }, { "../internals/create-non-enumerable-property": 38, "../internals/has": 60, "../internals/is-pure": 75, "../internals/object-get-prototype-of": 97, "../internals/well-known-symbol": 146 }], 79: [function(e, t, r) {
      t.exports = {};
    }, {}], 80: [function(e, t, r) {
      t.exports = Math.sign || function(e2) {
        return 0 == (e2 = +e2) || e2 != e2 ? e2 : e2 < 0 ? -1 : 1;
      };
    }, {}], 81: [function(e, t, r) {
      var o, n, s2, i2, a, l, u, c, d = e("../internals/global"), f = e("../internals/object-get-own-property-descriptor").f, h = e("../internals/classof-raw"), p = e("../internals/task").set, e = e("../internals/engine-is-ios"), m = d.MutationObserver || d.WebKitMutationObserver, y = d.process, g = d.Promise, v = "process" == h(y), h = f(d, "queueMicrotask"), f = h && h.value;
      f || (o = function() {
        var e2, t2;
        for (v && (e2 = y.domain) && e2.exit(); n; ) {
          t2 = n.fn, n = n.next;
          try {
            t2();
          } catch (e3) {
            throw n ? i2() : s2 = void 0, e3;
          }
        }
        s2 = void 0, e2 && e2.enter();
      }, i2 = v ? function() {
        y.nextTick(o);
      } : m && !e ? (a = true, l = document.createTextNode(""), new m(o).observe(l, { characterData: true }), function() {
        l.data = a = !a;
      }) : g && g.resolve ? (u = g.resolve(void 0), c = u.then, function() {
        c.call(u, o);
      }) : function() {
        p.call(d, o);
      }), t.exports = f || function(e2) {
        e2 = { fn: e2, next: void 0 };
        s2 && (s2.next = e2), n || (n = e2, i2()), s2 = e2;
      };
    }, { "../internals/classof-raw": 28, "../internals/engine-is-ios": 46, "../internals/global": 59, "../internals/object-get-own-property-descriptor": 93, "../internals/task": 128 }], 82: [function(e, t, r) {
      e = e("../internals/global");
      t.exports = e.Promise;
    }, { "../internals/global": 59 }], 83: [function(e, t, r) {
      e = e("../internals/fails");
      t.exports = !!Object.getOwnPropertySymbols && !e(function() {
        return !String(Symbol());
      });
    }, { "../internals/fails": 51 }], 84: [function(e, t, r) {
      var o = e("../internals/fails"), n = e("../internals/well-known-symbol"), s2 = e("../internals/is-pure"), i2 = n("iterator");
      t.exports = !o(function() {
        var e2 = new URL("b?a=1&b=2&c=3", "http://a"), r2 = e2.searchParams, o2 = "";
        return e2.pathname = "c%20d", r2.forEach(function(e3, t2) {
          r2.delete("b"), o2 += t2 + e3;
        }), s2 && !e2.toJSON || !r2.sort || "http://a/c%20d?a=1&c=3" !== e2.href || "3" !== r2.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !r2[i2] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://тест").host || "#%D0%B1" !== new URL("http://a#б").hash || "a1c3" !== o2 || "x" !== new URL("http://x", void 0).host;
      });
    }, { "../internals/fails": 51, "../internals/is-pure": 75, "../internals/well-known-symbol": 146 }], 85: [function(e, t, r) {
      var o = e("../internals/global"), e = e("../internals/inspect-source"), o = o.WeakMap;
      t.exports = "function" == typeof o && /native code/.test(e(o));
    }, { "../internals/global": 59, "../internals/inspect-source": 68 }], 86: [function(e, t, r) {
      function o(e2) {
        var r2, o2;
        this.promise = new e2(function(e3, t2) {
          if (void 0 !== r2 || void 0 !== o2)
            throw TypeError("Bad Promise constructor");
          r2 = e3, o2 = t2;
        }), this.resolve = n(r2), this.reject = n(o2);
      }
      var n = e("../internals/a-function");
      t.exports.f = function(e2) {
        return new o(e2);
      };
    }, { "../internals/a-function": 5 }], 87: [function(e, t, r) {
      var o = e("../internals/is-regexp");
      t.exports = function(e2) {
        if (o(e2))
          throw TypeError("The method doesn't accept regular expressions");
        return e2;
      };
    }, { "../internals/is-regexp": 76 }], 88: [function(e, t, r) {
      var o = e("../internals/global").isFinite;
      t.exports = Number.isFinite || function(e2) {
        return "number" == typeof e2 && o(e2);
      };
    }, { "../internals/global": 59 }], 89: [function(e, t, r) {
      var f = e("../internals/descriptors"), o = e("../internals/fails"), h = e("../internals/object-keys"), p = e("../internals/object-get-own-property-symbols"), m = e("../internals/object-property-is-enumerable"), y = e("../internals/to-object"), g = e("../internals/indexed-object"), n = Object.assign, s2 = Object.defineProperty;
      t.exports = !n || o(function() {
        var e2, t2, r2, o2;
        return !(!f || 1 === n({ b: 1 }, n(s2({}, "a", { enumerable: true, get: function() {
          s2(this, "b", { value: 3, enumerable: false });
        } }), { b: 2 })).b) || (t2 = {}, o2 = "abcdefghijklmnopqrst", (e2 = {})[r2 = Symbol()] = 7, o2.split("").forEach(function(e3) {
          t2[e3] = e3;
        }), 7 != n({}, e2)[r2] || h(n({}, t2)).join("") != o2);
      }) ? function(e2, t2) {
        for (var r2 = y(e2), o2 = arguments.length, n2 = 1, s3 = p.f, i2 = m.f; n2 < o2; )
          for (var a, l = g(arguments[n2++]), u = s3 ? h(l).concat(s3(l)) : h(l), c = u.length, d = 0; d < c; )
            a = u[d++], f && !i2.call(l, a) || (r2[a] = l[a]);
        return r2;
      } : n;
    }, { "../internals/descriptors": 43, "../internals/fails": 51, "../internals/indexed-object": 66, "../internals/object-get-own-property-symbols": 96, "../internals/object-keys": 99, "../internals/object-property-is-enumerable": 100, "../internals/to-object": 135 }], 90: [function(e, t, r) {
      function o() {
      }
      var n, s2 = e("../internals/an-object"), i2 = e("../internals/object-define-properties"), a = e("../internals/enum-bug-keys"), l = e("../internals/hidden-keys"), u = e("../internals/html"), c = e("../internals/document-create-element"), e = e("../internals/shared-key"), d = "prototype", f = "script", h = e("IE_PROTO"), p = function(e2) {
        return "<" + f + ">" + e2 + "</" + f + ">";
      }, m = function() {
        try {
          n = document.domain && new ActiveXObject("htmlfile");
        } catch (e3) {
        }
        m = n ? ((e2 = n).write(p("")), e2.close(), t2 = e2.parentWindow.Object, e2 = null, t2) : (e2 = c("iframe"), t2 = "java" + f + ":", e2.style.display = "none", u.appendChild(e2), e2.src = String(t2), (t2 = e2.contentWindow.document).open(), t2.write(p("document.F=Object")), t2.close(), t2.F);
        for (var e2, t2, r2 = a.length; r2--; )
          delete m[d][a[r2]];
        return m();
      };
      l[h] = true, t.exports = Object.create || function(e2, t2) {
        var r2;
        return null !== e2 ? (o[d] = s2(e2), r2 = new o(), o[d] = null, r2[h] = e2) : r2 = m(), void 0 === t2 ? r2 : i2(r2, t2);
      };
    }, { "../internals/an-object": 10, "../internals/document-create-element": 44, "../internals/enum-bug-keys": 49, "../internals/hidden-keys": 61, "../internals/html": 63, "../internals/object-define-properties": 91, "../internals/shared-key": 118 }], 91: [function(e, t, r) {
      var o = e("../internals/descriptors"), i2 = e("../internals/object-define-property"), a = e("../internals/an-object"), l = e("../internals/object-keys");
      t.exports = o ? Object.defineProperties : function(e2, t2) {
        a(e2);
        for (var r2, o2 = l(t2), n = o2.length, s2 = 0; s2 < n; )
          i2.f(e2, r2 = o2[s2++], t2[r2]);
        return e2;
      };
    }, { "../internals/an-object": 10, "../internals/descriptors": 43, "../internals/object-define-property": 92, "../internals/object-keys": 99 }], 92: [function(e, t, r) {
      var o = e("../internals/descriptors"), n = e("../internals/ie8-dom-define"), s2 = e("../internals/an-object"), i2 = e("../internals/to-primitive"), a = Object.defineProperty;
      r.f = o ? a : function(e2, t2, r2) {
        if (s2(e2), t2 = i2(t2, true), s2(r2), n)
          try {
            return a(e2, t2, r2);
          } catch (e3) {
          }
        if ("get" in r2 || "set" in r2)
          throw TypeError("Accessors not supported");
        return "value" in r2 && (e2[t2] = r2.value), e2;
      };
    }, { "../internals/an-object": 10, "../internals/descriptors": 43, "../internals/ie8-dom-define": 64, "../internals/to-primitive": 138 }], 93: [function(e, t, r) {
      var o = e("../internals/descriptors"), n = e("../internals/object-property-is-enumerable"), s2 = e("../internals/create-property-descriptor"), i2 = e("../internals/to-indexed-object"), a = e("../internals/to-primitive"), l = e("../internals/has"), u = e("../internals/ie8-dom-define"), c = Object.getOwnPropertyDescriptor;
      r.f = o ? c : function(e2, t2) {
        if (e2 = i2(e2), t2 = a(t2, true), u)
          try {
            return c(e2, t2);
          } catch (e3) {
          }
        if (l(e2, t2))
          return s2(!n.f.call(e2, t2), e2[t2]);
      };
    }, { "../internals/create-property-descriptor": 39, "../internals/descriptors": 43, "../internals/has": 60, "../internals/ie8-dom-define": 64, "../internals/object-property-is-enumerable": 100, "../internals/to-indexed-object": 132, "../internals/to-primitive": 138 }], 94: [function(e, t, r) {
      var o = e("../internals/to-indexed-object"), n = e("../internals/object-get-own-property-names").f, s2 = {}.toString, i2 = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      t.exports.f = function(e2) {
        if (!i2 || "[object Window]" != s2.call(e2))
          return n(o(e2));
        try {
          return n(e2);
        } catch (e3) {
          return i2.slice();
        }
      };
    }, { "../internals/object-get-own-property-names": 95, "../internals/to-indexed-object": 132 }], 95: [function(e, t, r) {
      var o = e("../internals/object-keys-internal"), n = e("../internals/enum-bug-keys").concat("length", "prototype");
      r.f = Object.getOwnPropertyNames || function(e2) {
        return o(e2, n);
      };
    }, { "../internals/enum-bug-keys": 49, "../internals/object-keys-internal": 98 }], 96: [function(e, t, r) {
      r.f = Object.getOwnPropertySymbols;
    }, {}], 97: [function(e, t, r) {
      var o = e("../internals/has"), n = e("../internals/to-object"), s2 = e("../internals/shared-key"), e = e("../internals/correct-prototype-getter"), i2 = s2("IE_PROTO"), a = Object.prototype;
      t.exports = e ? Object.getPrototypeOf : function(e2) {
        return e2 = n(e2), o(e2, i2) ? e2[i2] : "function" == typeof e2.constructor && e2 instanceof e2.constructor ? e2.constructor.prototype : e2 instanceof Object ? a : null;
      };
    }, { "../internals/correct-prototype-getter": 35, "../internals/has": 60, "../internals/shared-key": 118, "../internals/to-object": 135 }], 98: [function(e, t, r) {
      var i2 = e("../internals/has"), a = e("../internals/to-indexed-object"), l = e("../internals/array-includes").indexOf, u = e("../internals/hidden-keys");
      t.exports = function(e2, t2) {
        var r2, o = a(e2), n = 0, s2 = [];
        for (r2 in o)
          !i2(u, r2) && i2(o, r2) && s2.push(r2);
        for (; t2.length > n; )
          !i2(o, r2 = t2[n++]) || ~l(s2, r2) || s2.push(r2);
        return s2;
      };
    }, { "../internals/array-includes": 18, "../internals/has": 60, "../internals/hidden-keys": 61, "../internals/to-indexed-object": 132 }], 99: [function(e, t, r) {
      var o = e("../internals/object-keys-internal"), n = e("../internals/enum-bug-keys");
      t.exports = Object.keys || function(e2) {
        return o(e2, n);
      };
    }, { "../internals/enum-bug-keys": 49, "../internals/object-keys-internal": 98 }], 100: [function(e, t, r) {
      var o = {}.propertyIsEnumerable, n = Object.getOwnPropertyDescriptor, s2 = n && !o.call({ 1: 2 }, 1);
      r.f = s2 ? function(e2) {
        e2 = n(this, e2);
        return !!e2 && e2.enumerable;
      } : o;
    }, {}], 101: [function(e, t, r) {
      var n = e("../internals/an-object"), s2 = e("../internals/a-possible-prototype");
      t.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var r2, o = false, e2 = {};
        try {
          (r2 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(e2, []), o = e2 instanceof Array;
        } catch (e3) {
        }
        return function(e3, t2) {
          return n(e3), s2(t2), o ? r2.call(e3, t2) : e3.__proto__ = t2, e3;
        };
      }() : void 0);
    }, { "../internals/a-possible-prototype": 6, "../internals/an-object": 10 }], 102: [function(e, t, r) {
      var o = e("../internals/to-string-tag-support"), n = e("../internals/classof");
      t.exports = o ? {}.toString : function() {
        return "[object " + n(this) + "]";
      };
    }, { "../internals/classof": 29, "../internals/to-string-tag-support": 139 }], 103: [function(e, t, r) {
      var o = e("../internals/get-built-in"), n = e("../internals/object-get-own-property-names"), s2 = e("../internals/object-get-own-property-symbols"), i2 = e("../internals/an-object");
      t.exports = o("Reflect", "ownKeys") || function(e2) {
        var t2 = n.f(i2(e2)), r2 = s2.f;
        return r2 ? t2.concat(r2(e2)) : t2;
      };
    }, { "../internals/an-object": 10, "../internals/get-built-in": 56, "../internals/object-get-own-property-names": 95, "../internals/object-get-own-property-symbols": 96 }], 104: [function(e, t, r) {
      e = e("../internals/global");
      t.exports = e;
    }, { "../internals/global": 59 }], 105: [function(e, t, r) {
      t.exports = function(e2) {
        try {
          return { error: false, value: e2() };
        } catch (e3) {
          return { error: true, value: e3 };
        }
      };
    }, {}], 106: [function(e, t, r) {
      var o = e("../internals/an-object"), n = e("../internals/is-object"), s2 = e("../internals/new-promise-capability");
      t.exports = function(e2, t2) {
        return o(e2), n(t2) && t2.constructor === e2 ? t2 : ((0, (e2 = s2.f(e2)).resolve)(t2), e2.promise);
      };
    }, { "../internals/an-object": 10, "../internals/is-object": 74, "../internals/new-promise-capability": 86 }], 107: [function(e, t, r) {
      var n = e("../internals/redefine");
      t.exports = function(e2, t2, r2) {
        for (var o in t2)
          n(e2, o, t2[o], r2);
        return e2;
      };
    }, { "../internals/redefine": 108 }], 108: [function(e, t, r) {
      var i2 = e("../internals/global"), a = e("../internals/create-non-enumerable-property"), l = e("../internals/has"), u = e("../internals/set-global"), o = e("../internals/inspect-source"), e = e("../internals/internal-state"), n = e.get, c = e.enforce, d = String(String).split("String");
      (t.exports = function(e2, t2, r2, o2) {
        var n2 = !!o2 && !!o2.unsafe, s2 = !!o2 && !!o2.enumerable, o2 = !!o2 && !!o2.noTargetGet;
        "function" == typeof r2 && ("string" != typeof t2 || l(r2, "name") || a(r2, "name", t2), c(r2).source = d.join("string" == typeof t2 ? t2 : "")), e2 === i2 ? s2 ? e2[t2] = r2 : u(t2, r2) : (n2 ? !o2 && e2[t2] && (s2 = true) : delete e2[t2], s2 ? e2[t2] = r2 : a(e2, t2, r2));
      })(Function.prototype, "toString", function() {
        return "function" == typeof this && n(this).source || o(this);
      });
    }, { "../internals/create-non-enumerable-property": 38, "../internals/global": 59, "../internals/has": 60, "../internals/inspect-source": 68, "../internals/internal-state": 70, "../internals/set-global": 115 }], 109: [function(e, t, r) {
      var o = e("./classof-raw"), n = e("./regexp-exec");
      t.exports = function(e2, t2) {
        var r2 = e2.exec;
        if ("function" == typeof r2) {
          r2 = r2.call(e2, t2);
          if ("object" != typeof r2)
            throw TypeError("RegExp exec method returned something other than an Object or null");
          return r2;
        }
        if ("RegExp" !== o(e2))
          throw TypeError("RegExp#exec called on incompatible receiver");
        return n.call(e2, t2);
      };
    }, { "./classof-raw": 28, "./regexp-exec": 110 }], 110: [function(e, t, r) {
      var o, n, d = e("./regexp-flags"), e = e("./regexp-sticky-helpers"), f = RegExp.prototype.exec, h = String.prototype.replace, s2 = f, p = (o = /a/, n = /b*/g, f.call(o, "a"), f.call(n, "a"), 0 !== o.lastIndex || 0 !== n.lastIndex), m = e.UNSUPPORTED_Y || e.BROKEN_CARET, y = void 0 !== /()??/.exec("")[1];
      t.exports = s2 = p || y || m ? function(e2) {
        var t2, r2, o2, n2, s3 = this, i2 = m && s3.sticky, a = d.call(s3), l = s3.source, u = 0, c = e2;
        return i2 && (-1 === (a = a.replace("y", "")).indexOf("g") && (a += "g"), c = String(e2).slice(s3.lastIndex), 0 < s3.lastIndex && (!s3.multiline || s3.multiline && "\n" !== e2[s3.lastIndex - 1]) && (l = "(?: " + l + ")", c = " " + c, u++), r2 = new RegExp("^(?:" + l + ")", a)), y && (r2 = new RegExp("^" + l + "$(?!\\s)", a)), p && (t2 = s3.lastIndex), o2 = f.call(i2 ? r2 : s3, c), i2 ? o2 ? (o2.input = o2.input.slice(u), o2[0] = o2[0].slice(u), o2.index = s3.lastIndex, s3.lastIndex += o2[0].length) : s3.lastIndex = 0 : p && o2 && (s3.lastIndex = s3.global ? o2.index + o2[0].length : t2), y && o2 && 1 < o2.length && h.call(o2[0], r2, function() {
          for (n2 = 1; n2 < arguments.length - 2; n2++)
            void 0 === arguments[n2] && (o2[n2] = void 0);
        }), o2;
      } : s2;
    }, { "./regexp-flags": 111, "./regexp-sticky-helpers": 112 }], 111: [function(e, t, r) {
      var o = e("../internals/an-object");
      t.exports = function() {
        var e2 = o(this), t2 = "";
        return e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.sticky && (t2 += "y"), t2;
      };
    }, { "../internals/an-object": 10 }], 112: [function(e, t, r) {
      e = e("./fails");
      function o(e2, t2) {
        return RegExp(e2, t2);
      }
      r.UNSUPPORTED_Y = e(function() {
        var e2 = o("a", "y");
        return e2.lastIndex = 2, null != e2.exec("abcd");
      }), r.BROKEN_CARET = e(function() {
        var e2 = o("^r", "gy");
        return e2.lastIndex = 2, null != e2.exec("str");
      });
    }, { "./fails": 51 }], 113: [function(e, t, r) {
      t.exports = function(e2) {
        if (null == e2)
          throw TypeError("Can't call method on " + e2);
        return e2;
      };
    }, {}], 114: [function(e, t, r) {
      t.exports = Object.is || function(e2, t2) {
        return e2 === t2 ? 0 !== e2 || 1 / e2 == 1 / t2 : e2 != e2 && t2 != t2;
      };
    }, {}], 115: [function(e, t, r) {
      var o = e("../internals/global"), n = e("../internals/create-non-enumerable-property");
      t.exports = function(t2, r2) {
        try {
          n(o, t2, r2);
        } catch (e2) {
          o[t2] = r2;
        }
        return r2;
      };
    }, { "../internals/create-non-enumerable-property": 38, "../internals/global": 59 }], 116: [function(e, t, r) {
      var o = e("../internals/get-built-in"), n = e("../internals/object-define-property"), s2 = e("../internals/well-known-symbol"), i2 = e("../internals/descriptors"), a = s2("species");
      t.exports = function(e2) {
        var e2 = o(e2), t2 = n.f;
        i2 && e2 && !e2[a] && t2(e2, a, { configurable: true, get: function() {
          return this;
        } });
      };
    }, { "../internals/descriptors": 43, "../internals/get-built-in": 56, "../internals/object-define-property": 92, "../internals/well-known-symbol": 146 }], 117: [function(e, t, r) {
      var o = e("../internals/object-define-property").f, n = e("../internals/has"), s2 = e("../internals/well-known-symbol")("toStringTag");
      t.exports = function(e2, t2, r2) {
        e2 && !n(e2 = r2 ? e2 : e2.prototype, s2) && o(e2, s2, { configurable: true, value: t2 });
      };
    }, { "../internals/has": 60, "../internals/object-define-property": 92, "../internals/well-known-symbol": 146 }], 118: [function(e, t, r) {
      var o = e("../internals/shared"), n = e("../internals/uid"), s2 = o("keys");
      t.exports = function(e2) {
        return s2[e2] || (s2[e2] = n(e2));
      };
    }, { "../internals/shared": 120, "../internals/uid": 143 }], 119: [function(e, t, r) {
      var o = e("../internals/global"), e = e("../internals/set-global"), n = "__core-js_shared__", o = o[n] || e(n, {});
      t.exports = o;
    }, { "../internals/global": 59, "../internals/set-global": 115 }], 120: [function(e, t, r) {
      var o = e("../internals/is-pure"), n = e("../internals/shared-store");
      (t.exports = function(e2, t2) {
        return n[e2] || (n[e2] = void 0 !== t2 ? t2 : {});
      })("versions", []).push({ version: "3.6.5", mode: o ? "pure" : "global", copyright: "© 2020 Denis Pushkarev (zloirock.ru)" });
    }, { "../internals/is-pure": 75, "../internals/shared-store": 119 }], 121: [function(e, t, r) {
      var o = e("../internals/an-object"), n = e("../internals/a-function"), s2 = e("../internals/well-known-symbol")("species");
      t.exports = function(e2, t2) {
        var e2 = o(e2).constructor;
        return void 0 === e2 || null == (e2 = o(e2)[s2]) ? t2 : n(e2);
      };
    }, { "../internals/a-function": 5, "../internals/an-object": 10, "../internals/well-known-symbol": 146 }], 122: [function(e, t, r) {
      var o = e("../internals/fails");
      t.exports = function(t2) {
        return o(function() {
          var e2 = ""[t2]('"');
          return e2 !== e2.toLowerCase() || 3 < e2.split('"').length;
        });
      };
    }, { "../internals/fails": 51 }], 123: [function(e, t, r) {
      function o(n) {
        return function(e2, t2) {
          var r2, e2 = String(i2(e2)), t2 = s2(t2), o2 = e2.length;
          return t2 < 0 || o2 <= t2 ? n ? "" : void 0 : (r2 = e2.charCodeAt(t2)) < 55296 || 56319 < r2 || t2 + 1 === o2 || (o2 = e2.charCodeAt(t2 + 1)) < 56320 || 57343 < o2 ? n ? e2.charAt(t2) : r2 : n ? e2.slice(t2, t2 + 2) : o2 - 56320 + (r2 - 55296 << 10) + 65536;
        };
      }
      var s2 = e("../internals/to-integer"), i2 = e("../internals/require-object-coercible");
      t.exports = { codeAt: o(false), charAt: o(true) };
    }, { "../internals/require-object-coercible": 113, "../internals/to-integer": 133 }], 124: [function(e, t, r) {
      function g(e2) {
        return e2 + 22 + 75 * (e2 < 26);
      }
      function s2(e2) {
        var t2, r2 = [], o = (e2 = function(e3) {
          for (var t3 = [], r3 = 0, o2 = e3.length; r3 < o2; ) {
            var n2, s4 = e3.charCodeAt(r3++);
            55296 <= s4 && s4 <= 56319 && r3 < o2 ? 56320 == (64512 & (n2 = e3.charCodeAt(r3++))) ? t3.push(((1023 & s4) << 10) + (1023 & n2) + 65536) : (t3.push(s4), r3--) : t3.push(s4);
          }
          return t3;
        }(e2)).length, n = 128, s3 = 0, i3 = 72;
        for (c = 0; c < e2.length; c++)
          (t2 = e2[c]) < 128 && r2.push(E(t2));
        var a2 = r2.length, l = a2;
        for (a2 && r2.push("-"); l < o; ) {
          for (var u = v, c = 0; c < e2.length; c++)
            n <= (t2 = e2[c]) && t2 < u && (u = t2);
          var d = l + 1;
          if (u - n > M((v - s3) / d))
            throw RangeError(w);
          for (s3 += (u - n) * d, n = u, c = 0; c < e2.length; c++) {
            if ((t2 = e2[c]) < n && ++s3 > v)
              throw RangeError(w);
            if (t2 == n) {
              for (var f = s3, h = b; ; h += b) {
                var p = h <= i3 ? 1 : i3 + j <= h ? j : h - i3;
                if (f < p)
                  break;
                var m = f - p, y = b - p;
                r2.push(E(g(p + m % y))), f = M(m / y);
              }
              r2.push(E(g(f))), i3 = function(e3, t3, r3) {
                var o2 = 0;
                for (e3 = r3 ? M(e3 / x) : e3 >> 1, e3 += M(e3 / t3); S * j >> 1 < e3; o2 += b)
                  e3 = M(e3 / S);
                return M(o2 + (S + 1) * e3 / (e3 + _));
              }(s3, d, l == a2), s3 = 0, ++l;
            }
          }
          ++s3, ++n;
        }
        return r2.join("");
      }
      var v = 2147483647, b = 36, j = 26, _ = 38, x = 700, i2 = /[^\0-\u007E]/, a = /[.\u3002\uFF0E\uFF61]/g, w = "Overflow: input needs wider integers to process", S = b - 1, M = Math.floor, E = String.fromCharCode;
      t.exports = function(e2) {
        for (var t2, r2 = [], o = e2.toLowerCase().replace(a, ".").split("."), n = 0; n < o.length; n++)
          t2 = o[n], r2.push(i2.test(t2) ? "xn--" + s2(t2) : t2);
        return r2.join(".");
      };
    }, {}], 125: [function(e, t, r) {
      var n = e("../internals/to-integer"), s2 = e("../internals/require-object-coercible");
      t.exports = "".repeat || function(e2) {
        var t2 = String(s2(this)), r2 = "", o = n(e2);
        if (o < 0 || o == 1 / 0)
          throw RangeError("Wrong number of repetitions");
        for (; 0 < o; (o >>>= 1) && (t2 += t2))
          1 & o && (r2 += t2);
        return r2;
      };
    }, { "../internals/require-object-coercible": 113, "../internals/to-integer": 133 }], 126: [function(e, t, r) {
      var o = e("../internals/fails"), n = e("../internals/whitespaces");
      t.exports = function(e2) {
        return o(function() {
          return !!n[e2]() || "​᠎" != "​᠎"[e2]() || n[e2].name !== e2;
        });
      };
    }, { "../internals/fails": 51, "../internals/whitespaces": 147 }], 127: [function(e, t, r) {
      function o(t2) {
        return function(e2) {
          e2 = String(n(e2));
          return 1 & t2 && (e2 = e2.replace(s2, "")), e2 = 2 & t2 ? e2.replace(i2, "") : e2;
        };
      }
      var n = e("../internals/require-object-coercible"), e = "[" + e("../internals/whitespaces") + "]", s2 = RegExp("^" + e + e + "*"), i2 = RegExp(e + e + "*$");
      t.exports = { start: o(1), end: o(2), trim: o(3) };
    }, { "../internals/require-object-coercible": 113, "../internals/whitespaces": 147 }], 128: [function(e, t, r) {
      function o(e2) {
        return function() {
          x(e2);
        };
      }
      function n(e2) {
        x(e2.data);
      }
      function s2(e2) {
        a.postMessage(e2 + "", h.protocol + "//" + h.host);
      }
      var i2, a = e("../internals/global"), l = e("../internals/fails"), u = e("../internals/classof-raw"), c = e("../internals/function-bind-context"), d = e("../internals/html"), f = e("../internals/document-create-element"), e = e("../internals/engine-is-ios"), h = a.location, p = a.setImmediate, m = a.clearImmediate, y = a.process, g = a.MessageChannel, v = a.Dispatch, b = 0, j = {}, _ = "onreadystatechange", x = function(e2) {
        var t2;
        j.hasOwnProperty(e2) && (t2 = j[e2], delete j[e2], t2());
      };
      p && m || (p = function(e2) {
        for (var t2 = [], r2 = 1; r2 < arguments.length; )
          t2.push(arguments[r2++]);
        return j[++b] = function() {
          ("function" == typeof e2 ? e2 : Function(e2)).apply(void 0, t2);
        }, i2(b), b;
      }, m = function(e2) {
        delete j[e2];
      }, "process" == u(y) ? i2 = function(e2) {
        y.nextTick(o(e2));
      } : v && v.now ? i2 = function(e2) {
        v.now(o(e2));
      } : g && !e ? (e = (u = new g()).port2, u.port1.onmessage = n, i2 = c(e.postMessage, e, 1)) : !a.addEventListener || "function" != typeof postMessage || a.importScripts || l(s2) || "file:" === h.protocol ? i2 = _ in f("script") ? function(e2) {
        d.appendChild(f("script"))[_] = function() {
          d.removeChild(this), x(e2);
        };
      } : function(e2) {
        setTimeout(o(e2), 0);
      } : (i2 = s2, a.addEventListener("message", n, false))), t.exports = { set: p, clear: m };
    }, { "../internals/classof-raw": 28, "../internals/document-create-element": 44, "../internals/engine-is-ios": 46, "../internals/fails": 51, "../internals/function-bind-context": 54, "../internals/global": 59, "../internals/html": 63 }], 129: [function(e, t, r) {
      var o = e("../internals/classof-raw");
      t.exports = function(e2) {
        if ("number" != typeof e2 && "Number" != o(e2))
          throw TypeError("Incorrect invocation");
        return +e2;
      };
    }, { "../internals/classof-raw": 28 }], 130: [function(e, t, r) {
      var o = e("../internals/to-integer"), n = Math.max, s2 = Math.min;
      t.exports = function(e2, t2) {
        e2 = o(e2);
        return e2 < 0 ? n(e2 + t2, 0) : s2(e2, t2);
      };
    }, { "../internals/to-integer": 133 }], 131: [function(e, t, r) {
      var o = e("../internals/to-integer"), n = e("../internals/to-length");
      t.exports = function(e2) {
        if (void 0 === e2)
          return 0;
        var e2 = o(e2), t2 = n(e2);
        if (e2 !== t2)
          throw RangeError("Wrong length or index");
        return t2;
      };
    }, { "../internals/to-integer": 133, "../internals/to-length": 134 }], 132: [function(e, t, r) {
      var o = e("../internals/indexed-object"), n = e("../internals/require-object-coercible");
      t.exports = function(e2) {
        return o(n(e2));
      };
    }, { "../internals/indexed-object": 66, "../internals/require-object-coercible": 113 }], 133: [function(e, t, r) {
      var o = Math.ceil, n = Math.floor;
      t.exports = function(e2) {
        return isNaN(e2 = +e2) ? 0 : (0 < e2 ? n : o)(e2);
      };
    }, {}], 134: [function(e, t, r) {
      var o = e("../internals/to-integer"), n = Math.min;
      t.exports = function(e2) {
        return 0 < e2 ? n(o(e2), 9007199254740991) : 0;
      };
    }, { "../internals/to-integer": 133 }], 135: [function(e, t, r) {
      var o = e("../internals/require-object-coercible");
      t.exports = function(e2) {
        return Object(o(e2));
      };
    }, { "../internals/require-object-coercible": 113 }], 136: [function(e, t, r) {
      var o = e("../internals/to-positive-integer");
      t.exports = function(e2, t2) {
        e2 = o(e2);
        if (e2 % t2)
          throw RangeError("Wrong offset");
        return e2;
      };
    }, { "../internals/to-positive-integer": 137 }], 137: [function(e, t, r) {
      var o = e("../internals/to-integer");
      t.exports = function(e2) {
        e2 = o(e2);
        if (e2 < 0)
          throw RangeError("The argument can't be less than 0");
        return e2;
      };
    }, { "../internals/to-integer": 133 }], 138: [function(e, t, r) {
      var n = e("../internals/is-object");
      t.exports = function(e2, t2) {
        if (!n(e2))
          return e2;
        var r2, o;
        if (t2 && "function" == typeof (r2 = e2.toString) && !n(o = r2.call(e2)) || "function" == typeof (r2 = e2.valueOf) && !n(o = r2.call(e2)) || !t2 && "function" == typeof (r2 = e2.toString) && !n(o = r2.call(e2)))
          return o;
        throw TypeError("Can't convert object to primitive value");
      };
    }, { "../internals/is-object": 74 }], 139: [function(e, t, r) {
      var o = {};
      o[e("../internals/well-known-symbol")("toStringTag")] = "z", t.exports = "[object z]" === String(o);
    }, { "../internals/well-known-symbol": 146 }], 140: [function(e, t, I) {
      function h(e2, t2) {
        for (var r2 = 0, o2 = t2.length, n2 = new (Q(e2))(o2); r2 < o2; )
          n2[r2] = t2[r2++];
        return n2;
      }
      function r(e2, t2) {
        E(e2, t2, { get: function() {
          return M(this)[t2];
        } });
      }
      function p(e2) {
        return e2 instanceof C || "ArrayBuffer" == (e2 = B(e2)) || "SharedArrayBuffer" == e2;
      }
      function o(e2, t2) {
        return P(e2) && "symbol" != typeof t2 && t2 in e2 && String(+t2) == String(t2);
      }
      function n(e2, t2) {
        return o(e2, t2 = d(t2, true)) ? N(2, e2[t2]) : X(e2, t2);
      }
      function s2(e2, t2, r2) {
        return !(o(e2, t2 = d(t2, true)) && b(r2) && f(r2, "value")) || f(r2, "get") || f(r2, "set") || r2.configurable || f(r2, "writable") && !r2.writable || f(r2, "enumerable") && !r2.enumerable ? E(e2, t2, r2) : (e2[t2] = r2.value, e2);
      }
      var a = e("../internals/export"), l = e("../internals/global"), i2 = e("../internals/descriptors"), U = e("../internals/typed-array-constructors-require-wrappers"), u = e("../internals/array-buffer-view-core"), c = e("../internals/array-buffer"), m = e("../internals/an-instance"), N = e("../internals/create-property-descriptor"), y = e("../internals/create-non-enumerable-property"), F = e("../internals/to-length"), g = e("../internals/to-index"), v = e("../internals/to-offset"), d = e("../internals/to-primitive"), f = e("../internals/has"), B = e("../internals/classof"), b = e("../internals/is-object"), G = e("../internals/object-create"), j = e("../internals/object-set-prototype-of"), V = e("../internals/object-get-own-property-names").f, _ = e("../internals/typed-array-from"), z = e("../internals/array-iteration").forEach, H = e("../internals/set-species"), x = e("../internals/object-define-property"), w = e("../internals/object-get-own-property-descriptor"), S = e("../internals/internal-state"), W = e("../internals/inherit-if-required"), M = S.get, q = S.set, E = x.f, X = w.f, Y = Math.round, T = l.RangeError, C = c.ArrayBuffer, Z = c.DataView, O = u.NATIVE_ARRAY_BUFFER_VIEWS, L = u.TYPED_ARRAY_TAG, k = u.TypedArray, A = u.TypedArrayPrototype, Q = u.aTypedArrayConstructor, P = u.isTypedArray, R = "BYTES_PER_ELEMENT", D = "Wrong length";
      i2 ? (O || (w.f = n, x.f = s2, r(A, "buffer"), r(A, "byteOffset"), r(A, "byteLength"), r(A, "length")), a({ target: "Object", stat: true, forced: !O }, { getOwnPropertyDescriptor: n, defineProperty: s2 }), t.exports = function(e2, t2, n2) {
        function u2(e3, o3) {
          E(e3, o3, { get: function() {
            var e4 = this, t3 = o3;
            return (e4 = M(e4)).view[r2](t3 * c2 + e4.byteOffset, true);
          }, set: function(e4) {
            var t3 = this, r3 = o3;
            t3 = M(t3), n2 && (e4 = (e4 = Y(e4)) < 0 ? 0 : 255 < e4 ? 255 : 255 & e4), t3.view[s3](r3 * c2 + t3.byteOffset, e4, true);
          }, enumerable: true });
        }
        var c2 = e2.match(/\d+$/)[0] / 8, d2 = e2 + (n2 ? "Clamped" : "") + "Array", r2 = "get" + e2, s3 = "set" + e2, i3 = l[d2], f2 = i3, e2 = f2 && f2.prototype, o2 = {};
        O ? U && (f2 = t2(function(e3, t3, r3, o3) {
          return m(e3, f2, d2), W(b(t3) ? p(t3) ? void 0 !== o3 ? new i3(t3, v(r3, c2), o3) : void 0 !== r3 ? new i3(t3, v(r3, c2)) : new i3(t3) : P(t3) ? h(f2, t3) : _.call(f2, t3) : new i3(g(t3)), e3, f2);
        }), j && j(f2, k), z(V(i3), function(e3) {
          e3 in f2 || y(f2, e3, i3[e3]);
        }), f2.prototype = e2) : (f2 = t2(function(e3, t3, r3, o3) {
          m(e3, f2, d2);
          var n3, s4, i4 = 0, a2 = 0;
          if (b(t3)) {
            if (!p(t3))
              return P(t3) ? h(f2, t3) : _.call(f2, t3);
            var l2 = t3, a2 = v(r3, c2), r3 = t3.byteLength;
            if (void 0 === o3) {
              if (r3 % c2)
                throw T(D);
              if ((n3 = r3 - a2) < 0)
                throw T(D);
            } else if (r3 < (n3 = F(o3) * c2) + a2)
              throw T(D);
            s4 = n3 / c2;
          } else
            s4 = g(t3), l2 = new C(n3 = s4 * c2);
          for (q(e3, { buffer: l2, byteOffset: a2, byteLength: n3, length: s4, view: new Z(l2) }); i4 < s4; )
            u2(e3, i4++);
        }), j && j(f2, k), e2 = f2.prototype = G(A)), e2.constructor !== f2 && y(e2, "constructor", f2), L && y(e2, L, d2), o2[d2] = f2, a({ global: true, forced: f2 != i3, sham: !O }, o2), R in f2 || y(f2, R, c2), R in e2 || y(e2, R, c2), H(d2);
      }) : t.exports = function() {
      };
    }, { "../internals/an-instance": 9, "../internals/array-buffer": 13, "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19, "../internals/classof": 29, "../internals/create-non-enumerable-property": 38, "../internals/create-property-descriptor": 39, "../internals/descriptors": 43, "../internals/export": 50, "../internals/global": 59, "../internals/has": 60, "../internals/inherit-if-required": 67, "../internals/internal-state": 70, "../internals/is-object": 74, "../internals/object-create": 90, "../internals/object-define-property": 92, "../internals/object-get-own-property-descriptor": 93, "../internals/object-get-own-property-names": 95, "../internals/object-set-prototype-of": 101, "../internals/set-species": 116, "../internals/to-index": 131, "../internals/to-length": 134, "../internals/to-offset": 136, "../internals/to-primitive": 138, "../internals/typed-array-constructors-require-wrappers": 141, "../internals/typed-array-from": 142 }], 141: [function(e, t, r) {
      var o = e("../internals/global"), n = e("../internals/fails"), s2 = e("../internals/check-correctness-of-iteration"), e = e("../internals/array-buffer-view-core").NATIVE_ARRAY_BUFFER_VIEWS, i2 = o.ArrayBuffer, a = o.Int8Array;
      t.exports = !e || !n(function() {
        a(1);
      }) || !n(function() {
        new a(-1);
      }) || !s2(function(e2) {
        new a(), new a(null), new a(1.5), new a(e2);
      }, true) || n(function() {
        return 1 !== new a(new i2(2), 1, void 0).length;
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/check-correctness-of-iteration": 27, "../internals/fails": 51, "../internals/global": 59 }], 142: [function(e, t, r) {
      var f = e("../internals/to-object"), h = e("../internals/to-length"), p = e("../internals/get-iterator-method"), m = e("../internals/is-array-iterator-method"), y = e("../internals/function-bind-context"), g = e("../internals/array-buffer-view-core").aTypedArrayConstructor;
      t.exports = function(e2) {
        var t2, r2, o, n, s2, i2, a = f(e2), l = arguments.length, u = 1 < l ? arguments[1] : void 0, c = void 0 !== u, d = p(a);
        if (null != d && !m(d))
          for (i2 = (s2 = d.call(a)).next, a = []; !(n = i2.call(s2)).done; )
            a.push(n.value);
        for (c && 2 < l && (u = y(u, arguments[2], 2)), r2 = h(a.length), o = new (g(this))(r2), t2 = 0; t2 < r2; t2++)
          o[t2] = c ? u(a[t2], t2) : a[t2];
        return o;
      };
    }, { "../internals/array-buffer-view-core": 12, "../internals/function-bind-context": 54, "../internals/get-iterator-method": 57, "../internals/is-array-iterator-method": 71, "../internals/to-length": 134, "../internals/to-object": 135 }], 143: [function(e, t, r) {
      var o = 0, n = Math.random();
      t.exports = function(e2) {
        return "Symbol(" + String(void 0 === e2 ? "" : e2) + ")_" + (++o + n).toString(36);
      };
    }, {}], 144: [function(e, t, r) {
      e = e("../internals/native-symbol");
      t.exports = e && !Symbol.sham && "symbol" == typeof Symbol.iterator;
    }, { "../internals/native-symbol": 83 }], 145: [function(e, t, r) {
      e = e("../internals/well-known-symbol");
      r.f = e;
    }, { "../internals/well-known-symbol": 146 }], 146: [function(e, t, r) {
      var o = e("../internals/global"), n = e("../internals/shared"), s2 = e("../internals/has"), i2 = e("../internals/uid"), a = e("../internals/native-symbol"), e = e("../internals/use-symbol-as-uid"), l = n("wks"), u = o.Symbol, c = e ? u : u && u.withoutSetter || i2;
      t.exports = function(e2) {
        return s2(l, e2) || (a && s2(u, e2) ? l[e2] = u[e2] : l[e2] = c("Symbol." + e2)), l[e2];
      };
    }, { "../internals/global": 59, "../internals/has": 60, "../internals/native-symbol": 83, "../internals/shared": 120, "../internals/uid": 143, "../internals/use-symbol-as-uid": 144 }], 147: [function(e, t, r) {
      t.exports = "	\n\v\f\r                　\u2028\u2029\uFEFF";
    }, {}], 148: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/global"), s2 = e("../internals/array-buffer"), e = e("../internals/set-species"), i2 = "ArrayBuffer", s2 = s2[i2];
      o({ global: true, forced: n[i2] !== s2 }, { ArrayBuffer: s2 }), e(i2);
    }, { "../internals/array-buffer": 13, "../internals/export": 50, "../internals/global": 59, "../internals/set-species": 116 }], 149: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/fails"), d = e("../internals/is-array"), f = e("../internals/is-object"), h = e("../internals/to-object"), p = e("../internals/to-length"), m = e("../internals/create-property"), y = e("../internals/array-species-create"), s2 = e("../internals/array-method-has-species-support"), i2 = e("../internals/well-known-symbol"), e = e("../internals/engine-v8-version"), g = i2("isConcatSpreadable"), v = 9007199254740991, b = "Maximum allowed index exceeded", i2 = 51 <= e || !n(function() {
        var e2 = [];
        return e2[g] = false, e2.concat()[0] !== e2;
      }), e = s2("concat");
      o({ target: "Array", proto: true, forced: !i2 || !e }, { concat: function(e2) {
        for (var t2, r2, o2, n2, s3, i3 = h(this), a = y(i3, 0), l = 0, u = -1, c = arguments.length; u < c; u++)
          if (s3 = void 0, !f(n2 = o2 = -1 === u ? i3 : arguments[u]) || (void 0 !== (s3 = n2[g]) ? !s3 : !d(n2))) {
            if (v <= l)
              throw TypeError(b);
            m(a, l++, o2);
          } else {
            if (r2 = p(o2.length), v < l + r2)
              throw TypeError(b);
            for (t2 = 0; t2 < r2; t2++, l++)
              t2 in o2 && m(a, l, o2[t2]);
          }
        return a.length = l, a;
      } });
    }, { "../internals/array-method-has-species-support": 21, "../internals/array-species-create": 25, "../internals/create-property": 40, "../internals/engine-v8-version": 48, "../internals/export": 50, "../internals/fails": 51, "../internals/is-array": 72, "../internals/is-object": 74, "../internals/to-length": 134, "../internals/to-object": 135, "../internals/well-known-symbol": 146 }], 150: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-copy-within"), e = e("../internals/add-to-unscopables");
      o({ target: "Array", proto: true }, { copyWithin: n }), e("copyWithin");
    }, { "../internals/add-to-unscopables": 7, "../internals/array-copy-within": 14, "../internals/export": 50 }], 151: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-iteration").every, s2 = e("../internals/array-method-is-strict"), e = e("../internals/array-method-uses-to-length"), s2 = s2("every"), e = e("every");
      o({ target: "Array", proto: true, forced: !s2 || !e }, { every: function(e2) {
        return n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/array-iteration": 19, "../internals/array-method-is-strict": 22, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 152: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-fill"), e = e("../internals/add-to-unscopables");
      o({ target: "Array", proto: true }, { fill: n }), e("fill");
    }, { "../internals/add-to-unscopables": 7, "../internals/array-fill": 15, "../internals/export": 50 }], 153: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-iteration").filter, s2 = e("../internals/array-method-has-species-support"), e = e("../internals/array-method-uses-to-length"), s2 = s2("filter"), e = e("filter");
      o({ target: "Array", proto: true, forced: !s2 || !e }, { filter: function(e2) {
        return n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/array-iteration": 19, "../internals/array-method-has-species-support": 21, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 154: [function(e, t, r) {
      var o = e("../internals/export"), e = e("../internals/array-for-each");
      o({ target: "Array", proto: true, forced: [].forEach != e }, { forEach: e });
    }, { "../internals/array-for-each": 16, "../internals/export": 50 }], 155: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-from");
      o({ target: "Array", stat: true, forced: !e("../internals/check-correctness-of-iteration")(function(e2) {
        Array.from(e2);
      }) }, { from: n });
    }, { "../internals/array-from": 17, "../internals/check-correctness-of-iteration": 27, "../internals/export": 50 }], 156: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-includes").includes, s2 = e("../internals/add-to-unscopables");
      o({ target: "Array", proto: true, forced: !e("../internals/array-method-uses-to-length")("indexOf", { ACCESSORS: true, 1: 0 }) }, { includes: function(e2) {
        return n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } }), s2("includes");
    }, { "../internals/add-to-unscopables": 7, "../internals/array-includes": 18, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 157: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-includes").indexOf, s2 = e("../internals/array-method-is-strict"), e = e("../internals/array-method-uses-to-length"), i2 = [].indexOf, a = !!i2 && 1 / [1].indexOf(1, -0) < 0, s2 = s2("indexOf"), e = e("indexOf", { ACCESSORS: true, 1: 0 });
      o({ target: "Array", proto: true, forced: a || !s2 || !e }, { indexOf: function(e2) {
        return a ? i2.apply(this, arguments) || 0 : n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/array-includes": 18, "../internals/array-method-is-strict": 22, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 158: [function(e, t, r) {
      var o = e("../internals/to-indexed-object"), n = e("../internals/add-to-unscopables"), s2 = e("../internals/iterators"), i2 = e("../internals/internal-state"), e = e("../internals/define-iterator"), a = "Array Iterator", l = i2.set, u = i2.getterFor(a);
      t.exports = e(Array, "Array", function(e2, t2) {
        l(this, { type: a, target: o(e2), index: 0, kind: t2 });
      }, function() {
        var e2 = u(this), t2 = e2.target, r2 = e2.kind, o2 = e2.index++;
        return !t2 || o2 >= t2.length ? { value: e2.target = void 0, done: true } : "keys" == r2 ? { value: o2, done: false } : "values" == r2 ? { value: t2[o2], done: false } : { value: [o2, t2[o2]], done: false };
      }, "values"), s2.Arguments = s2.Array, n("keys"), n("values"), n("entries");
    }, { "../internals/add-to-unscopables": 7, "../internals/define-iterator": 41, "../internals/internal-state": 70, "../internals/iterators": 79, "../internals/to-indexed-object": 132 }], 159: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/indexed-object"), s2 = e("../internals/to-indexed-object"), e = e("../internals/array-method-is-strict"), i2 = [].join, n = n != Object, e = e("join", ",");
      o({ target: "Array", proto: true, forced: n || !e }, { join: function(e2) {
        return i2.call(s2(this), void 0 === e2 ? "," : e2);
      } });
    }, { "../internals/array-method-is-strict": 22, "../internals/export": 50, "../internals/indexed-object": 66, "../internals/to-indexed-object": 132 }], 160: [function(e, t, r) {
      var o = e("../internals/export"), e = e("../internals/array-last-index-of");
      o({ target: "Array", proto: true, forced: e !== [].lastIndexOf }, { lastIndexOf: e });
    }, { "../internals/array-last-index-of": 20, "../internals/export": 50 }], 161: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-iteration").map, s2 = e("../internals/array-method-has-species-support"), e = e("../internals/array-method-uses-to-length"), s2 = s2("map"), e = e("map");
      o({ target: "Array", proto: true, forced: !s2 || !e }, { map: function(e2) {
        return n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/array-iteration": 19, "../internals/array-method-has-species-support": 21, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 162: [function(e, t, r) {
      var o = e("../internals/export"), u = e("../internals/is-object"), c = e("../internals/is-array"), d = e("../internals/to-absolute-index"), f = e("../internals/to-length"), h = e("../internals/to-indexed-object"), p = e("../internals/create-property"), n = e("../internals/well-known-symbol"), s2 = e("../internals/array-method-has-species-support"), e = e("../internals/array-method-uses-to-length"), s2 = s2("slice"), e = e("slice", { ACCESSORS: true, 0: 0, 1: 2 }), m = n("species"), y = [].slice, g = Math.max;
      o({ target: "Array", proto: true, forced: !s2 || !e }, { slice: function(e2, t2) {
        var r2, o2, n2, s3 = h(this), i2 = f(s3.length), a = d(e2, i2), l = d(void 0 === t2 ? i2 : t2, i2);
        if (c(s3) && ((r2 = "function" == typeof (r2 = s3.constructor) && (r2 === Array || c(r2.prototype)) || u(r2) && null === (r2 = r2[m]) ? void 0 : r2) === Array || void 0 === r2))
          return y.call(s3, a, l);
        for (o2 = new (void 0 === r2 ? Array : r2)(g(l - a, 0)), n2 = 0; a < l; a++, n2++)
          a in s3 && p(o2, n2, s3[a]);
        return o2.length = n2, o2;
      } });
    }, { "../internals/array-method-has-species-support": 21, "../internals/array-method-uses-to-length": 23, "../internals/create-property": 40, "../internals/export": 50, "../internals/is-array": 72, "../internals/is-object": 74, "../internals/to-absolute-index": 130, "../internals/to-indexed-object": 132, "../internals/to-length": 134, "../internals/well-known-symbol": 146 }], 163: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/array-iteration").some, s2 = e("../internals/array-method-is-strict"), e = e("../internals/array-method-uses-to-length"), s2 = s2("some"), e = e("some");
      o({ target: "Array", proto: true, forced: !s2 || !e }, { some: function(e2) {
        return n(this, e2, 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/array-iteration": 19, "../internals/array-method-is-strict": 22, "../internals/array-method-uses-to-length": 23, "../internals/export": 50 }], 164: [function(e, t, r) {
      var o = e("../internals/export"), d = e("../internals/to-absolute-index"), f = e("../internals/to-integer"), h = e("../internals/to-length"), p = e("../internals/to-object"), m = e("../internals/array-species-create"), y = e("../internals/create-property"), n = e("../internals/array-method-has-species-support"), e = e("../internals/array-method-uses-to-length"), n = n("splice"), e = e("splice", { ACCESSORS: true, 0: 0, 1: 2 }), g = Math.max, v = Math.min;
      o({ target: "Array", proto: true, forced: !n || !e }, { splice: function(e2, t2) {
        var r2, o2, n2, s2, i2, a, l = p(this), u = h(l.length), c = d(e2, u), e2 = arguments.length;
        if (0 === e2 ? r2 = o2 = 0 : o2 = 1 === e2 ? (r2 = 0, u - c) : (r2 = e2 - 2, v(g(f(t2), 0), u - c)), 9007199254740991 < u + r2 - o2)
          throw TypeError("Maximum allowed length exceeded");
        for (n2 = m(l, o2), s2 = 0; s2 < o2; s2++)
          (i2 = c + s2) in l && y(n2, s2, l[i2]);
        if (r2 < (n2.length = o2)) {
          for (s2 = c; s2 < u - o2; s2++)
            a = s2 + r2, (i2 = s2 + o2) in l ? l[a] = l[i2] : delete l[a];
          for (s2 = u; u - o2 + r2 < s2; s2--)
            delete l[s2 - 1];
        } else if (o2 < r2)
          for (s2 = u - o2; c < s2; s2--)
            a = s2 + r2 - 1, (i2 = s2 + o2 - 1) in l ? l[a] = l[i2] : delete l[a];
        for (s2 = 0; s2 < r2; s2++)
          l[s2 + c] = arguments[s2 + 2];
        return l.length = u - o2 + r2, n2;
      } });
    }, { "../internals/array-method-has-species-support": 21, "../internals/array-method-uses-to-length": 23, "../internals/array-species-create": 25, "../internals/create-property": 40, "../internals/export": 50, "../internals/to-absolute-index": 130, "../internals/to-integer": 133, "../internals/to-length": 134, "../internals/to-object": 135 }], 165: [function(e, t, r) {
      var o = e("../internals/descriptors"), e = e("../internals/object-define-property").f, n = Function.prototype, s2 = n.toString, i2 = /^\s*function ([^ (]*)/;
      !o || "name" in n || e(n, "name", { configurable: true, get: function() {
        try {
          return s2.call(this).match(i2)[1];
        } catch (e2) {
          return "";
        }
      } });
    }, { "../internals/descriptors": 43, "../internals/object-define-property": 92 }], 166: [function(e, t, r) {
      var o = e("../internals/collection"), e = e("../internals/collection-strong");
      t.exports = o("Map", function(e2) {
        return function() {
          return e2(this, arguments.length ? arguments[0] : void 0);
        };
      }, e);
    }, { "../internals/collection": 32, "../internals/collection-strong": 30 }], 167: [function(e, t, r) {
      var e = e("../internals/export"), o = Math.hypot, l = Math.abs, u = Math.sqrt;
      e({ target: "Math", stat: true, forced: !!o && o(1 / 0, NaN) !== 1 / 0 }, { hypot: function(e2, t2) {
        for (var r2, o2, n = 0, s2 = 0, i2 = arguments.length, a = 0; s2 < i2; )
          a < (r2 = l(arguments[s2++])) ? (n = n * (o2 = a / r2) * o2 + 1, a = r2) : n += 0 < r2 ? (o2 = r2 / a) * o2 : r2;
        return a === 1 / 0 ? 1 / 0 : a * u(n);
      } });
    }, { "../internals/export": 50 }], 168: [function(e, t, r) {
      e("../internals/export")({ target: "Math", stat: true }, { sign: e("../internals/math-sign") });
    }, { "../internals/export": 50, "../internals/math-sign": 80 }], 169: [function(e, t, r) {
      function o(e2) {
        var t2, r2, o2, n2, s3, i3, a2, l2 = d(e2, false);
        if ("string" == typeof l2 && 2 < l2.length) {
          if (43 === (e2 = (l2 = g(l2)).charCodeAt(0)) || 45 === e2) {
            if (88 === (t2 = l2.charCodeAt(2)) || 120 === t2)
              return NaN;
          } else if (48 === e2) {
            switch (l2.charCodeAt(1)) {
              case 66:
              case 98:
                r2 = 2, o2 = 49;
                break;
              case 79:
              case 111:
                r2 = 8, o2 = 55;
                break;
              default:
                return +l2;
            }
            for (s3 = (n2 = l2.slice(2)).length, i3 = 0; i3 < s3; i3++)
              if ((a2 = n2.charCodeAt(i3)) < 48 || o2 < a2)
                return NaN;
            return parseInt(n2, r2);
          }
        }
        return +l2;
      }
      var n = e("../internals/descriptors"), s2 = e("../internals/global"), i2 = e("../internals/is-forced"), a = e("../internals/redefine"), l = e("../internals/has"), u = e("../internals/classof-raw"), c = e("../internals/inherit-if-required"), d = e("../internals/to-primitive"), f = e("../internals/fails"), h = e("../internals/object-create"), p = e("../internals/object-get-own-property-names").f, m = e("../internals/object-get-own-property-descriptor").f, y = e("../internals/object-define-property").f, g = e("../internals/string-trim").trim, v = "Number", b = s2[v], j = b.prototype, _ = u(h(j)) == v;
      if (i2(v, !b(" 0o1") || !b("0b1") || b("+0x1"))) {
        for (var x, w = function(e2) {
          var e2 = arguments.length < 1 ? 0 : e2, t2 = this;
          return t2 instanceof w && (_ ? f(function() {
            j.valueOf.call(t2);
          }) : u(t2) != v) ? c(new b(o(e2)), t2, w) : o(e2);
        }, S = n ? p(b) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","), M = 0; S.length > M; M++)
          l(b, x = S[M]) && !l(w, x) && y(w, x, m(b, x));
        (w.prototype = j).constructor = w, a(s2, v, w);
      }
    }, { "../internals/classof-raw": 28, "../internals/descriptors": 43, "../internals/fails": 51, "../internals/global": 59, "../internals/has": 60, "../internals/inherit-if-required": 67, "../internals/is-forced": 73, "../internals/object-create": 90, "../internals/object-define-property": 92, "../internals/object-get-own-property-descriptor": 93, "../internals/object-get-own-property-names": 95, "../internals/redefine": 108, "../internals/string-trim": 127, "../internals/to-primitive": 138 }], 170: [function(e, t, r) {
      e("../internals/export")({ target: "Number", stat: true }, { isFinite: e("../internals/number-is-finite") });
    }, { "../internals/export": 50, "../internals/number-is-finite": 88 }], 171: [function(e, t, r) {
      function c(e2, t2, r2) {
        return 0 === t2 ? r2 : t2 % 2 == 1 ? c(e2, t2 - 1, r2 * e2) : c(e2 * e2, t2 / 2, r2);
      }
      var o = e("../internals/export"), d = e("../internals/to-integer"), f = e("../internals/this-number-value"), h = e("../internals/string-repeat"), e = e("../internals/fails"), n = 1 .toFixed, p = Math.floor;
      o({ target: "Number", proto: true, forced: n && ("0.000" !== 8e-5 .toFixed(3) || "1" !== 0.9 .toFixed(0) || "1.25" !== 1.255 .toFixed(2) || "1000000000000000128" !== 1000000000000000100 .toFixed(0)) || !e(function() {
        n.call({});
      }) }, { toFixed: function(e2) {
        function t2(e3, t3) {
          for (var r3 = -1, o3 = t3; ++r3 < 6; )
            o3 += e3 * a[r3], a[r3] = o3 % 1e7, o3 = p(o3 / 1e7);
        }
        function r2(e3) {
          for (var t3 = 6, r3 = 0; 0 <= --t3; )
            r3 += a[t3], a[t3] = p(r3 / e3), r3 = r3 % e3 * 1e7;
        }
        function o2() {
          for (var e3, t3 = 6, r3 = ""; 0 <= --t3; )
            "" === r3 && 0 !== t3 && 0 === a[t3] || (e3 = String(a[t3]), r3 = "" === r3 ? e3 : r3 + h.call("0", 7 - e3.length) + e3);
          return r3;
        }
        var n2, s2, i2 = f(this), e2 = d(e2), a = [0, 0, 0, 0, 0, 0], l = "", u = "0";
        if (e2 < 0 || 20 < e2)
          throw RangeError("Incorrect fraction digits");
        if (i2 != i2)
          return "NaN";
        if (i2 <= -1e21 || 1e21 <= i2)
          return String(i2);
        if (i2 < 0 && (l = "-", i2 = -i2), 1e-21 < i2)
          if (i2 = (n2 = function(e3) {
            for (var t3 = 0, r3 = e3; 4096 <= r3; )
              t3 += 12, r3 /= 4096;
            for (; 2 <= r3; )
              t3 += 1, r3 /= 2;
            return t3;
          }(i2 * c(2, 69, 1)) - 69) < 0 ? i2 * c(2, -n2, 1) : i2 / c(2, n2, 1), i2 *= 4503599627370496, 0 < (n2 = 52 - n2)) {
            for (t2(0, i2), s2 = e2; 7 <= s2; )
              t2(1e7, 0), s2 -= 7;
            for (t2(c(10, s2, 1), 0), s2 = n2 - 1; 23 <= s2; )
              r2(1 << 23), s2 -= 23;
            r2(1 << s2), t2(1, 1), r2(2), u = o2();
          } else
            t2(0, i2), t2(1 << -n2, 0), u = o2() + h.call("0", e2);
        return u = 0 < e2 ? l + ((i2 = u.length) <= e2 ? "0." + h.call("0", e2 - i2) + u : u.slice(0, i2 - e2) + "." + u.slice(i2 - e2)) : l + u;
      } });
    }, { "../internals/export": 50, "../internals/fails": 51, "../internals/string-repeat": 125, "../internals/this-number-value": 129, "../internals/to-integer": 133 }], 172: [function(e, t, r) {
      var o = e("../internals/export"), e = e("../internals/object-assign");
      o({ target: "Object", stat: true, forced: Object.assign !== e }, { assign: e });
    }, { "../internals/export": 50, "../internals/object-assign": 89 }], 173: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/fails"), s2 = e("../internals/to-indexed-object"), i2 = e("../internals/object-get-own-property-descriptor").f, e = e("../internals/descriptors"), n = n(function() {
        i2(1);
      });
      o({ target: "Object", stat: true, forced: !e || n, sham: !e }, { getOwnPropertyDescriptor: function(e2, t2) {
        return i2(s2(e2), t2);
      } });
    }, { "../internals/descriptors": 43, "../internals/export": 50, "../internals/fails": 51, "../internals/object-get-own-property-descriptor": 93, "../internals/to-indexed-object": 132 }], 174: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/fails"), e = e("../internals/object-get-own-property-names-external").f;
      o({ target: "Object", stat: true, forced: n(function() {
        return !Object.getOwnPropertyNames(1);
      }) }, { getOwnPropertyNames: e });
    }, { "../internals/export": 50, "../internals/fails": 51, "../internals/object-get-own-property-names-external": 94 }], 175: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/fails"), s2 = e("../internals/to-object"), i2 = e("../internals/object-get-prototype-of"), e = e("../internals/correct-prototype-getter");
      o({ target: "Object", stat: true, forced: n(function() {
        i2(1);
      }), sham: !e }, { getPrototypeOf: function(e2) {
        return i2(s2(e2));
      } });
    }, { "../internals/correct-prototype-getter": 35, "../internals/export": 50, "../internals/fails": 51, "../internals/object-get-prototype-of": 97, "../internals/to-object": 135 }], 176: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/to-object"), s2 = e("../internals/object-keys");
      o({ target: "Object", stat: true, forced: e("../internals/fails")(function() {
        s2(1);
      }) }, { keys: function(e2) {
        return s2(n(e2));
      } });
    }, { "../internals/export": 50, "../internals/fails": 51, "../internals/object-keys": 99, "../internals/to-object": 135 }], 177: [function(e, t, r) {
      var o = e("../internals/to-string-tag-support"), n = e("../internals/redefine"), e = e("../internals/object-to-string");
      o || n(Object.prototype, "toString", e, { unsafe: true });
    }, { "../internals/object-to-string": 102, "../internals/redefine": 108, "../internals/to-string-tag-support": 139 }], 178: [function(e, I, U) {
      var r, t, o, n, s2 = e("../internals/export"), i2 = e("../internals/is-pure"), g = e("../internals/global"), a = e("../internals/get-built-in"), l = e("../internals/native-promise-constructor"), N = e("../internals/redefine"), F = e("../internals/redefine-all"), B = e("../internals/set-to-string-tag"), G = e("../internals/set-species"), V = e("../internals/is-object"), c = e("../internals/a-function"), z = e("../internals/an-instance"), H = e("../internals/classof-raw"), W = e("../internals/inspect-source"), d = e("../internals/iterate"), q = e("../internals/check-correctness-of-iteration"), X = e("../internals/species-constructor"), v = e("../internals/task").set, u = e("../internals/microtask"), f = e("../internals/promise-resolve"), Y = e("../internals/host-report-errors"), h = e("../internals/new-promise-capability"), b = e("../internals/perform"), p = e("../internals/internal-state"), Z = e("../internals/is-forced"), m = e("../internals/well-known-symbol"), y = e("../internals/engine-v8-version"), Q = m("species"), j = "Promise", _ = p.get, K = p.set, J = p.getterFor(j), x = l, w = g.TypeError, S = g.document, M = g.process, E = a("fetch"), T = h.f, $ = T, C = "process" == H(M), ee = !!(S && S.createEvent && g.dispatchEvent), O = "unhandledrejection", te = "rejectionhandled", L = 1, re2 = 2, k = 1, oe = 2, e = Z(j, function() {
        var e2, t2;
        if (!(W(x) !== String(x))) {
          if (66 === y)
            return true;
          if (!C && "function" != typeof PromiseRejectionEvent)
            return true;
        }
        return !(!i2 || x.prototype.finally) || !(51 <= y && /native code/.test(x)) && (t2 = function(e3) {
          e3(function() {
          }, function() {
          });
        }, ((e2 = x.resolve(1)).constructor = {})[Q] = t2, !(e2.then(function() {
        }) instanceof t2));
      }), m = e || !q(function(e2) {
        x.all(e2).catch(function() {
        });
      }), ne = function(e2) {
        var t2;
        return !(!V(e2) || "function" != typeof (t2 = e2.then)) && t2;
      }, A = function(h2, p2, m2) {
        var y2;
        p2.notified || (p2.notified = true, y2 = p2.reactions, u(function() {
          for (var r2, o2, e2 = p2.value, t2 = p2.state == L, n2 = 0; y2.length > n2; ) {
            var s3, i3, a2, l2 = y2[n2++], u2 = t2 ? l2.ok : l2.fail, c2 = l2.resolve, d2 = l2.reject, f2 = l2.domain;
            try {
              u2 ? (t2 || (p2.rejection === oe && function(e3, t3) {
                v.call(g, function() {
                  if (C)
                    M.emit("rejectionHandled", e3);
                  else
                    se(te, e3, t3.value);
                });
              }(h2, p2), p2.rejection = k), true === u2 ? s3 = e2 : (f2 && f2.enter(), s3 = u2(e2), f2 && (f2.exit(), a2 = true)), s3 === l2.promise ? d2(w("Promise-chain cycle")) : (i3 = ne(s3)) ? i3.call(s3, c2, d2) : c2(s3)) : d2(e2);
            } catch (e3) {
              f2 && !a2 && f2.exit(), d2(e3);
            }
          }
          p2.reactions = [], p2.notified = false, m2 && !p2.rejection && (r2 = h2, o2 = p2, v.call(g, function() {
            var e3 = o2.value, t3 = ie(o2);
            if (t3 && (t3 = b(function() {
              C ? M.emit("unhandledRejection", e3, r2) : se(O, r2, e3);
            }), o2.rejection = C || ie(o2) ? oe : k, t3.error))
              throw t3.value;
          }));
        }));
      }, se = function(e2, t2, r2) {
        var o2;
        ee ? ((o2 = S.createEvent("Event")).promise = t2, o2.reason = r2, o2.initEvent(e2, false, true), g.dispatchEvent(o2)) : o2 = { promise: t2, reason: r2 }, (t2 = g["on" + e2]) ? t2(o2) : e2 === O && Y("Unhandled promise rejection", r2);
      }, ie = function(e2) {
        return e2.rejection !== k && !e2.parent;
      }, P = function(t2, r2, o2, n2) {
        return function(e2) {
          t2(r2, o2, e2, n2);
        };
      }, R = function(e2, t2, r2, o2) {
        t2.done || (t2.done = true, (t2 = o2 ? o2 : t2).value = r2, t2.state = re2, A(e2, t2, true));
      }, D = function(r2, o2, e2, t2) {
        if (!o2.done) {
          o2.done = true, t2 && (o2 = t2);
          try {
            if (r2 === e2)
              throw w("Promise can't be resolved itself");
            var n2 = ne(e2);
            n2 ? u(function() {
              var t3 = { done: false };
              try {
                n2.call(e2, P(D, r2, t3, o2), P(R, r2, t3, o2));
              } catch (e3) {
                R(r2, t3, e3, o2);
              }
            }) : (o2.value = e2, o2.state = L, A(r2, o2, false));
          } catch (e3) {
            R(r2, { done: false }, e3, o2);
          }
        }
      };
      e && (x = function(e2) {
        z(this, x, j), c(e2), r.call(this);
        var t2 = _(this);
        try {
          e2(P(D, this, t2), P(R, this, t2));
        } catch (e3) {
          R(this, t2, e3);
        }
      }, (r = function(e2) {
        K(this, { type: j, done: false, notified: false, parent: false, reactions: [], rejection: false, state: 0, value: void 0 });
      }).prototype = F(x.prototype, { then: function(e2, t2) {
        var r2 = J(this), o2 = T(X(this, x));
        return o2.ok = "function" != typeof e2 || e2, o2.fail = "function" == typeof t2 && t2, o2.domain = C ? M.domain : void 0, r2.parent = true, r2.reactions.push(o2), 0 != r2.state && A(this, r2, false), o2.promise;
      }, catch: function(e2) {
        return this.then(void 0, e2);
      } }), t = function() {
        var e2 = new r(), t2 = _(e2);
        this.promise = e2, this.resolve = P(D, e2, t2), this.reject = P(R, e2, t2);
      }, h.f = T = function(e2) {
        return e2 === x || e2 === o ? new t() : $(e2);
      }, i2 || "function" != typeof l || (n = l.prototype.then, N(l.prototype, "then", function(e2, t2) {
        var r2 = this;
        return new x(function(e3, t3) {
          n.call(r2, e3, t3);
        }).then(e2, t2);
      }, { unsafe: true }), "function" == typeof E && s2({ global: true, enumerable: true, forced: true }, { fetch: function(e2) {
        return f(x, E.apply(g, arguments));
      } }))), s2({ global: true, wrap: true, forced: e }, { Promise: x }), B(x, j, false, true), G(j), o = a(j), s2({ target: j, stat: true, forced: e }, { reject: function(e2) {
        var t2 = T(this);
        return t2.reject.call(void 0, e2), t2.promise;
      } }), s2({ target: j, stat: true, forced: i2 || e }, { resolve: function(e2) {
        return f(i2 && this === o ? x : this, e2);
      } }), s2({ target: j, stat: true, forced: m }, { all: function(e2) {
        var a2 = this, t2 = T(a2), l2 = t2.resolve, u2 = t2.reject, r2 = b(function() {
          var o2 = c(a2.resolve), n2 = [], s3 = 0, i3 = 1;
          d(e2, function(e3) {
            var t3 = s3++, r3 = false;
            n2.push(void 0), i3++, o2.call(a2, e3).then(function(e4) {
              r3 || (r3 = true, n2[t3] = e4, --i3 || l2(n2));
            }, u2);
          }), --i3 || l2(n2);
        });
        return r2.error && u2(r2.value), t2.promise;
      }, race: function(e2) {
        var r2 = this, o2 = T(r2), n2 = o2.reject, t2 = b(function() {
          var t3 = c(r2.resolve);
          d(e2, function(e3) {
            t3.call(r2, e3).then(o2.resolve, n2);
          });
        });
        return t2.error && n2(t2.value), o2.promise;
      } });
    }, { "../internals/a-function": 5, "../internals/an-instance": 9, "../internals/check-correctness-of-iteration": 27, "../internals/classof-raw": 28, "../internals/engine-v8-version": 48, "../internals/export": 50, "../internals/get-built-in": 56, "../internals/global": 59, "../internals/host-report-errors": 62, "../internals/inspect-source": 68, "../internals/internal-state": 70, "../internals/is-forced": 73, "../internals/is-object": 74, "../internals/is-pure": 75, "../internals/iterate": 77, "../internals/microtask": 81, "../internals/native-promise-constructor": 82, "../internals/new-promise-capability": 86, "../internals/perform": 105, "../internals/promise-resolve": 106, "../internals/redefine": 108, "../internals/redefine-all": 107, "../internals/set-species": 116, "../internals/set-to-string-tag": 117, "../internals/species-constructor": 121, "../internals/task": 128, "../internals/well-known-symbol": 146 }], 179: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/get-built-in"), s2 = e("../internals/a-function"), i2 = e("../internals/an-object"), a = e("../internals/is-object"), l = e("../internals/object-create"), u = e("../internals/function-bind"), e = e("../internals/fails"), c = n("Reflect", "construct"), d = e(function() {
        function e2() {
        }
        return !(c(function() {
        }, [], e2) instanceof e2);
      }), f = !e(function() {
        c(function() {
        });
      }), n = d || f;
      o({ target: "Reflect", stat: true, forced: n, sham: n }, { construct: function(e2, t2) {
        s2(e2), i2(t2);
        var r2 = arguments.length < 3 ? e2 : s2(arguments[2]);
        if (f && !d)
          return c(e2, t2, r2);
        if (e2 == r2) {
          switch (t2.length) {
            case 0:
              return new e2();
            case 1:
              return new e2(t2[0]);
            case 2:
              return new e2(t2[0], t2[1]);
            case 3:
              return new e2(t2[0], t2[1], t2[2]);
            case 4:
              return new e2(t2[0], t2[1], t2[2], t2[3]);
          }
          var o2 = [null];
          return o2.push.apply(o2, t2), new (u.apply(e2, o2))();
        }
        o2 = r2.prototype, r2 = l(a(o2) ? o2 : Object.prototype), o2 = Function.apply.call(e2, r2, t2);
        return a(o2) ? o2 : r2;
      } });
    }, { "../internals/a-function": 5, "../internals/an-object": 10, "../internals/export": 50, "../internals/fails": 51, "../internals/function-bind": 55, "../internals/get-built-in": 56, "../internals/is-object": 74, "../internals/object-create": 90 }], 180: [function(e, t, r) {
      var o = e("../internals/descriptors"), n = e("../internals/global"), s2 = e("../internals/is-forced"), i2 = e("../internals/inherit-if-required"), a = e("../internals/object-define-property").f, l = e("../internals/object-get-own-property-names").f, u = e("../internals/is-regexp"), c = e("../internals/regexp-flags"), d = e("../internals/regexp-sticky-helpers"), f = e("../internals/redefine"), h = e("../internals/fails"), p = e("../internals/internal-state").set, m = e("../internals/set-species"), y = e("../internals/well-known-symbol")("match"), g = n.RegExp, v = g.prototype, b = /a/g, j = /a/g, _ = new g(b) !== b, x = d.UNSUPPORTED_Y;
      if (o && s2("RegExp", !_ || x || h(function() {
        return j[y] = false, g(b) != b || g(j) == j || "/a/i" != g(b, "i");
      }))) {
        for (var w = function(e2, t2) {
          var r2, o2 = this instanceof w, n2 = u(e2), s3 = void 0 === t2;
          if (!o2 && n2 && e2.constructor === w && s3)
            return e2;
          _ ? n2 && !s3 && (e2 = e2.source) : e2 instanceof w && (s3 && (t2 = c.call(e2)), e2 = e2.source), x && (r2 = !!t2 && -1 < t2.indexOf("y")) && (t2 = t2.replace(/y/g, ""));
          n2 = i2(_ ? new g(e2, t2) : g(e2, t2), o2 ? this : v, w);
          return x && r2 && p(n2, { sticky: r2 }), n2;
        }, S = l(g), M = 0; S.length > M; )
          !function(t2) {
            t2 in w || a(w, t2, { configurable: true, get: function() {
              return g[t2];
            }, set: function(e2) {
              g[t2] = e2;
            } });
          }(S[M++]);
        (v.constructor = w).prototype = v, f(n, "RegExp", w);
      }
      m("RegExp");
    }, { "../internals/descriptors": 43, "../internals/fails": 51, "../internals/global": 59, "../internals/inherit-if-required": 67, "../internals/internal-state": 70, "../internals/is-forced": 73, "../internals/is-regexp": 76, "../internals/object-define-property": 92, "../internals/object-get-own-property-names": 95, "../internals/redefine": 108, "../internals/regexp-flags": 111, "../internals/regexp-sticky-helpers": 112, "../internals/set-species": 116, "../internals/well-known-symbol": 146 }], 181: [function(e, t, r) {
      var o = e("../internals/export"), e = e("../internals/regexp-exec");
      o({ target: "RegExp", proto: true, forced: /./.exec !== e }, { exec: e });
    }, { "../internals/export": 50, "../internals/regexp-exec": 110 }], 182: [function(e, t, r) {
      var o = e("../internals/redefine"), n = e("../internals/an-object"), s2 = e("../internals/fails"), i2 = e("../internals/regexp-flags"), e = "toString", a = RegExp.prototype, l = a[e], s2 = s2(function() {
        return "/a/b" != l.call({ source: "a", flags: "b" });
      }), u = l.name != e;
      (s2 || u) && o(RegExp.prototype, e, function() {
        var e2 = n(this), t2 = String(e2.source), r2 = e2.flags;
        return "/" + t2 + "/" + String(void 0 === r2 && e2 instanceof RegExp && !("flags" in a) ? i2.call(e2) : r2);
      }, { unsafe: true });
    }, { "../internals/an-object": 10, "../internals/fails": 51, "../internals/redefine": 108, "../internals/regexp-flags": 111 }], 183: [function(e, t, r) {
      var o = e("../internals/collection"), e = e("../internals/collection-strong");
      t.exports = o("Set", function(e2) {
        return function() {
          return e2(this, arguments.length ? arguments[0] : void 0);
        };
      }, e);
    }, { "../internals/collection": 32, "../internals/collection-strong": 30 }], 184: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/object-get-own-property-descriptor").f, s2 = e("../internals/to-length"), i2 = e("../internals/not-a-regexp"), a = e("../internals/require-object-coercible"), l = e("../internals/correct-is-regexp-logic"), e = e("../internals/is-pure"), u = "".endsWith, c = Math.min, l = l("endsWith");
      o({ target: "String", proto: true, forced: !!(e || l || (!(o = n(String.prototype, "endsWith")) || o.writable)) && !l }, { endsWith: function(e2) {
        var t2 = String(a(this)), r2 = (i2(e2), 1 < arguments.length ? arguments[1] : void 0), o2 = s2(t2.length), r2 = void 0 === r2 ? o2 : c(s2(r2), o2), o2 = String(e2);
        return u ? u.call(t2, o2, r2) : t2.slice(r2 - o2.length, r2) === o2;
      } });
    }, { "../internals/correct-is-regexp-logic": 34, "../internals/export": 50, "../internals/is-pure": 75, "../internals/not-a-regexp": 87, "../internals/object-get-own-property-descriptor": 93, "../internals/require-object-coercible": 113, "../internals/to-length": 134 }], 185: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/not-a-regexp"), s2 = e("../internals/require-object-coercible");
      o({ target: "String", proto: true, forced: !e("../internals/correct-is-regexp-logic")("includes") }, { includes: function(e2) {
        return !!~String(s2(this)).indexOf(n(e2), 1 < arguments.length ? arguments[1] : void 0);
      } });
    }, { "../internals/correct-is-regexp-logic": 34, "../internals/export": 50, "../internals/not-a-regexp": 87, "../internals/require-object-coercible": 113 }], 186: [function(e, t, r) {
      var o = e("../internals/string-multibyte").charAt, n = e("../internals/internal-state"), e = e("../internals/define-iterator"), s2 = "String Iterator", i2 = n.set, a = n.getterFor(s2);
      e(String, "String", function(e2) {
        i2(this, { type: s2, string: String(e2), index: 0 });
      }, function() {
        var e2 = a(this), t2 = e2.string, r2 = e2.index;
        return r2 >= t2.length ? { value: void 0, done: true } : (t2 = o(t2, r2), e2.index += t2.length, { value: t2, done: false });
      });
    }, { "../internals/define-iterator": 41, "../internals/internal-state": 70, "../internals/string-multibyte": 123 }], 187: [function(e, t, r) {
      var o = e("../internals/fix-regexp-well-known-symbol-logic"), c = e("../internals/an-object"), d = e("../internals/to-length"), n = e("../internals/require-object-coercible"), f = e("../internals/advance-string-index"), h = e("../internals/regexp-exec-abstract");
      o("match", 1, function(o2, l, u) {
        return [function(e2) {
          var t2 = n(this), r2 = null == e2 ? void 0 : e2[o2];
          return void 0 !== r2 ? r2.call(e2, t2) : new RegExp(e2)[o2](String(t2));
        }, function(e2) {
          var t2 = u(l, e2, this);
          if (t2.done)
            return t2.value;
          var r2 = c(e2), o3 = String(this);
          if (!r2.global)
            return h(r2, o3);
          for (var n2 = r2.unicode, s2 = [], i2 = r2.lastIndex = 0; null !== (a = h(r2, o3)); ) {
            var a = String(a[0]);
            "" === (s2[i2] = a) && (r2.lastIndex = f(o3, d(r2.lastIndex), n2)), i2++;
          }
          return 0 === i2 ? null : s2;
        }];
      });
    }, { "../internals/advance-string-index": 8, "../internals/an-object": 10, "../internals/fix-regexp-well-known-symbol-logic": 52, "../internals/regexp-exec-abstract": 109, "../internals/require-object-coercible": 113, "../internals/to-length": 134 }], 188: [function(e, t, r) {
      e("../internals/export")({ target: "String", proto: true }, { repeat: e("../internals/string-repeat") });
    }, { "../internals/export": 50, "../internals/string-repeat": 125 }], 189: [function(e, t, r) {
      var o = e("../internals/fix-regexp-well-known-symbol-logic"), M = e("../internals/an-object"), E = e("../internals/to-object"), T = e("../internals/to-length"), C = e("../internals/to-integer"), s2 = e("../internals/require-object-coercible"), O = e("../internals/advance-string-index"), L = e("../internals/regexp-exec-abstract"), k = Math.max, A = Math.min, P = Math.floor, R = /\$([$&'`]|\d\d?|<[^>]*>)/g, D = /\$([$&'`]|\d\d?)/g;
      o("replace", 2, function(n, j, _, e2) {
        var x = e2.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, w = e2.REPLACE_KEEPS_$0, S = x ? "$" : "$0";
        return [function(e3, t2) {
          var r2 = s2(this), o2 = null == e3 ? void 0 : e3[n];
          return void 0 !== o2 ? o2.call(e3, r2, t2) : j.call(String(r2), e3, t2);
        }, function(e3, t2) {
          if (!x && w || "string" == typeof t2 && -1 === t2.indexOf(S)) {
            var r2 = _(j, e3, this, t2);
            if (r2.done)
              return r2.value;
          }
          for (var o2, n2 = M(e3), s3 = String(this), i2 = "function" == typeof t2, a = (i2 || (t2 = String(t2)), n2.global), l = (a && (o2 = n2.unicode, n2.lastIndex = 0), []); null !== (h = L(n2, s3)) && (l.push(h), a); )
            "" === String(h[0]) && (n2.lastIndex = O(s3, T(n2.lastIndex), o2));
          for (var u, c = "", d = 0, f = 0; f < l.length; f++) {
            for (var h = l[f], p = String(h[0]), m = k(A(C(h.index), s3.length), 0), y = [], g = 1; g < h.length; g++)
              y.push(void 0 === (u = h[g]) ? u : String(u));
            var v = h.groups, b = i2 ? (b = [p].concat(y, m, s3), void 0 !== v && b.push(v), String(t2.apply(void 0, b))) : function(s4, i3, a2, l2, u2, e4) {
              var c2 = a2 + s4.length, d2 = l2.length, t3 = D;
              void 0 !== u2 && (u2 = E(u2), t3 = R);
              return j.call(e4, t3, function(e5, t4) {
                var r3;
                switch (t4.charAt(0)) {
                  case "$":
                    return "$";
                  case "&":
                    return s4;
                  case "`":
                    return i3.slice(0, a2);
                  case "'":
                    return i3.slice(c2);
                  case "<":
                    r3 = u2[t4.slice(1, -1)];
                    break;
                  default:
                    var o3, n3 = +t4;
                    if (0 == n3)
                      return e5;
                    if (d2 < n3)
                      return 0 !== (o3 = P(n3 / 10)) && o3 <= d2 ? void 0 === l2[o3 - 1] ? t4.charAt(1) : l2[o3 - 1] + t4.charAt(1) : e5;
                    r3 = l2[n3 - 1];
                }
                return void 0 === r3 ? "" : r3;
              });
            }(p, s3, m, y, v, t2);
            d <= m && (c += s3.slice(d, m) + b, d = m + p.length);
          }
          return c + s3.slice(d);
        }];
      });
    }, { "../internals/advance-string-index": 8, "../internals/an-object": 10, "../internals/fix-regexp-well-known-symbol-logic": 52, "../internals/regexp-exec-abstract": 109, "../internals/require-object-coercible": 113, "../internals/to-integer": 133, "../internals/to-length": 134, "../internals/to-object": 135 }], 190: [function(e, t, r) {
      var o = e("../internals/fix-regexp-well-known-symbol-logic"), i2 = e("../internals/an-object"), a = e("../internals/require-object-coercible"), l = e("../internals/same-value"), u = e("../internals/regexp-exec-abstract");
      o("search", 1, function(o2, n, s2) {
        return [function(e2) {
          var t2 = a(this), r2 = null == e2 ? void 0 : e2[o2];
          return void 0 !== r2 ? r2.call(e2, t2) : new RegExp(e2)[o2](String(t2));
        }, function(e2) {
          var t2, r2 = s2(n, e2, this);
          return r2.done ? r2.value : (r2 = i2(e2), e2 = String(this), t2 = r2.lastIndex, l(t2, 0) || (r2.lastIndex = 0), e2 = u(r2, e2), l(r2.lastIndex, t2) || (r2.lastIndex = t2), null === e2 ? -1 : e2.index);
        }];
      });
    }, { "../internals/an-object": 10, "../internals/fix-regexp-well-known-symbol-logic": 52, "../internals/regexp-exec-abstract": 109, "../internals/require-object-coercible": 113, "../internals/same-value": 114 }], 191: [function(e, t, r) {
      var o = e("../internals/fix-regexp-well-known-symbol-logic"), c = e("../internals/is-regexp"), g = e("../internals/an-object"), d = e("../internals/require-object-coercible"), v = e("../internals/species-constructor"), b = e("../internals/advance-string-index"), j = e("../internals/to-length"), _ = e("../internals/regexp-exec-abstract"), f = e("../internals/regexp-exec"), e = e("../internals/fails"), h = [].push, x = Math.min, w = 4294967295, S = !e(function() {
        return !RegExp(w, "y");
      });
      o("split", 2, function(n, p, m) {
        var y = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || 1 < ".".split(/()()/).length || "".split(/.?/).length ? function(e2, t2) {
          var r2 = String(d(this)), o2 = void 0 === t2 ? w : t2 >>> 0;
          if (0 == o2)
            return [];
          if (void 0 === e2)
            return [r2];
          if (!c(e2))
            return p.call(r2, e2, o2);
          for (var n2, s2, i2, a = [], t2 = (e2.ignoreCase ? "i" : "") + (e2.multiline ? "m" : "") + (e2.unicode ? "u" : "") + (e2.sticky ? "y" : ""), l = 0, u = new RegExp(e2.source, t2 + "g"); (n2 = f.call(u, r2)) && !(l < (s2 = u.lastIndex) && (a.push(r2.slice(l, n2.index)), 1 < n2.length && n2.index < r2.length && h.apply(a, n2.slice(1)), i2 = n2[0].length, l = s2, a.length >= o2)); )
            u.lastIndex === n2.index && u.lastIndex++;
          return l === r2.length ? !i2 && u.test("") || a.push("") : a.push(r2.slice(l)), a.length > o2 ? a.slice(0, o2) : a;
        } : "0".split(void 0, 0).length ? function(e2, t2) {
          return void 0 === e2 && 0 === t2 ? [] : p.call(this, e2, t2);
        } : p;
        return [function(e2, t2) {
          var r2 = d(this), o2 = null == e2 ? void 0 : e2[n];
          return void 0 !== o2 ? o2.call(e2, r2, t2) : y.call(String(r2), e2, t2);
        }, function(e2, t2) {
          var r2 = m(y, e2, this, t2, y !== p);
          if (r2.done)
            return r2.value;
          var r2 = g(e2), o2 = String(this), e2 = v(r2, RegExp), n2 = r2.unicode, s2 = (r2.ignoreCase ? "i" : "") + (r2.multiline ? "m" : "") + (r2.unicode ? "u" : "") + (S ? "y" : "g"), i2 = new e2(S ? r2 : "^(?:" + r2.source + ")", s2), a = void 0 === t2 ? w : t2 >>> 0;
          if (0 == a)
            return [];
          if (0 === o2.length)
            return null === _(i2, o2) ? [o2] : [];
          for (var l = 0, u = 0, c2 = []; u < o2.length; ) {
            i2.lastIndex = S ? u : 0;
            var d2, f2 = _(i2, S ? o2 : o2.slice(u));
            if (null === f2 || (d2 = x(j(i2.lastIndex + (S ? 0 : u)), o2.length)) === l)
              u = b(o2, u, n2);
            else {
              if (c2.push(o2.slice(l, u)), c2.length === a)
                return c2;
              for (var h2 = 1; h2 <= f2.length - 1; h2++)
                if (c2.push(f2[h2]), c2.length === a)
                  return c2;
              u = l = d2;
            }
          }
          return c2.push(o2.slice(l)), c2;
        }];
      }, !S);
    }, { "../internals/advance-string-index": 8, "../internals/an-object": 10, "../internals/fails": 51, "../internals/fix-regexp-well-known-symbol-logic": 52, "../internals/is-regexp": 76, "../internals/regexp-exec": 110, "../internals/regexp-exec-abstract": 109, "../internals/require-object-coercible": 113, "../internals/species-constructor": 121, "../internals/to-length": 134 }], 192: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/create-html");
      o({ target: "String", proto: true, forced: e("../internals/string-html-forced")("sub") }, { sub: function() {
        return n(this, "sub", "", "");
      } });
    }, { "../internals/create-html": 36, "../internals/export": 50, "../internals/string-html-forced": 122 }], 193: [function(e, t, r) {
      var o = e("../internals/export"), n = e("../internals/string-trim").trim;
      o({ target: "String", proto: true, forced: e("../internals/string-trim-forced")("trim") }, { trim: function() {
        return n(this);
      } });
    }, { "../internals/export": 50, "../internals/string-trim": 127, "../internals/string-trim-forced": 126 }], 194: [function(e, t, r) {
      var o, n, s2, i2, a, l = e("../internals/export"), u = e("../internals/descriptors"), c = e("../internals/global"), d = e("../internals/has"), f = e("../internals/is-object"), h = e("../internals/object-define-property").f, e = e("../internals/copy-constructor-properties"), p = c.Symbol;
      !u || "function" != typeof p || "description" in p.prototype && void 0 === p().description || (o = {}, e(n = function() {
        var e2 = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]), t2 = this instanceof n ? new p(e2) : void 0 === e2 ? p() : p(e2);
        return "" === e2 && (o[t2] = true), t2;
      }, p), (c = n.prototype = p.prototype).constructor = n, s2 = c.toString, i2 = "Symbol(test)" == String(p("test")), a = /^Symbol\((.*)\)[^)]+$/, h(c, "description", { configurable: true, get: function() {
        var e2 = f(this) ? this.valueOf() : this, t2 = s2.call(e2);
        return d(o, e2) ? "" : "" === (e2 = i2 ? t2.slice(7, -1) : t2.replace(a, "$1")) ? void 0 : e2;
      } }), l({ global: true, forced: true }, { Symbol: n }));
    }, { "../internals/copy-constructor-properties": 33, "../internals/descriptors": 43, "../internals/export": 50, "../internals/global": 59, "../internals/has": 60, "../internals/is-object": 74, "../internals/object-define-property": 92 }], 195: [function(e, t, r) {
      e("../internals/define-well-known-symbol")("iterator");
    }, { "../internals/define-well-known-symbol": 42 }], 196: [function(e, I, U) {
      function o(e2, t2) {
        var r2 = E[e2] = h(w[_]);
        return ie(r2, { type: j, tag: e2, description: t2 }), s2 || (r2.description = t2), r2;
      }
      function r(t2, e2) {
        u(t2);
        var r2 = c(e2), e2 = q(r2).concat(D(r2));
        return v(e2, function(e3) {
          s2 && !R.call(r2, e3) || P(t2, e3, r2[e3]);
        }), t2;
      }
      function t(e2, t2) {
        var r2, e2 = c(e2), t2 = d(t2, true);
        if (e2 !== x || !l(E, t2) || l(T, t2))
          return !(r2 = le(e2, t2)) || !l(E, t2) || l(e2, b) && e2[b][t2] || (r2.enumerable = true), r2;
      }
      function N(e2) {
        var e2 = ue(c(e2)), t2 = [];
        return v(e2, function(e3) {
          l(E, e3) || l(ee, e3) || t2.push(e3);
        }), t2;
      }
      var n = e("../internals/export"), F = e("../internals/global"), B = e("../internals/get-built-in"), G = e("../internals/is-pure"), s2 = e("../internals/descriptors"), i2 = e("../internals/native-symbol"), V = e("../internals/use-symbol-as-uid"), a = e("../internals/fails"), l = e("../internals/has"), z = e("../internals/is-array"), H = e("../internals/is-object"), u = e("../internals/an-object"), W = e("../internals/to-object"), c = e("../internals/to-indexed-object"), d = e("../internals/to-primitive"), f = e("../internals/create-property-descriptor"), h = e("../internals/object-create"), q = e("../internals/object-keys"), X = e("../internals/object-get-own-property-names"), Y = e("../internals/object-get-own-property-names-external"), p = e("../internals/object-get-own-property-symbols"), Z = e("../internals/object-get-own-property-descriptor"), Q = e("../internals/object-define-property"), K = e("../internals/object-property-is-enumerable"), J = e("../internals/create-non-enumerable-property"), m = e("../internals/redefine"), y = e("../internals/shared"), $ = e("../internals/shared-key"), ee = e("../internals/hidden-keys"), te = e("../internals/uid"), re2 = e("../internals/well-known-symbol"), oe = e("../internals/well-known-symbol-wrapped"), ne = e("../internals/define-well-known-symbol"), se = e("../internals/set-to-string-tag"), g = e("../internals/internal-state"), v = e("../internals/array-iteration").forEach, b = $("hidden"), j = "Symbol", _ = "prototype", e = re2("toPrimitive"), ie = g.set, ae = g.getterFor(j), x = Object[_], w = F.Symbol, S = B("JSON", "stringify"), le = Z.f, M = Q.f, ue = Y.f, ce = K.f, E = y("symbols"), T = y("op-symbols"), C = y("string-to-symbol-registry"), O = y("symbol-to-string-registry"), $ = y("wks"), g = F.QObject, L = !g || !g[_] || !g[_].findChild, k = s2 && a(function() {
        return 7 != h(M({}, "a", { get: function() {
          return M(this, "a", { value: 7 }).a;
        } })).a;
      }) ? function(e2, t2, r2) {
        var o2 = le(x, t2);
        o2 && delete x[t2], M(e2, t2, r2), o2 && e2 !== x && M(x, t2, o2);
      } : M, A = V ? function(e2) {
        return "symbol" == typeof e2;
      } : function(e2) {
        return Object(e2) instanceof w;
      }, P = function(e2, t2, r2) {
        e2 === x && P(T, t2, r2), u(e2);
        t2 = d(t2, true);
        return u(r2), (l(E, t2) ? (r2.enumerable ? (l(e2, b) && e2[b][t2] && (e2[b][t2] = false), r2 = h(r2, { enumerable: f(0, false) })) : (l(e2, b) || M(e2, b, f(1, {})), e2[b][t2] = true), k) : M)(e2, t2, r2);
      }, R = function(e2) {
        var e2 = d(e2, true), t2 = ce.call(this, e2);
        return !(this === x && l(E, e2) && !l(T, e2)) && (!(t2 || !l(this, e2) || !l(E, e2) || l(this, b) && this[b][e2]) || t2);
      }, D = function(e2) {
        var t2 = e2 === x, e2 = ue(t2 ? T : c(e2)), r2 = [];
        return v(e2, function(e3) {
          !l(E, e3) || t2 && !l(x, e3) || r2.push(E[e3]);
        }), r2;
      };
      i2 || (m((w = function() {
        if (this instanceof w)
          throw TypeError("Symbol is not a constructor");
        var e2 = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0, t2 = te(e2), r2 = function(e3) {
          this === x && r2.call(T, e3), l(this, b) && l(this[b], t2) && (this[b][t2] = false), k(this, t2, f(1, e3));
        };
        return s2 && L && k(x, t2, { configurable: true, set: r2 }), o(t2, e2);
      })[_], "toString", function() {
        return ae(this).tag;
      }), m(w, "withoutSetter", function(e2) {
        return o(te(e2), e2);
      }), K.f = R, Q.f = P, Z.f = t, X.f = Y.f = N, p.f = D, oe.f = function(e2) {
        return o(re2(e2), e2);
      }, s2 && (M(w[_], "description", { configurable: true, get: function() {
        return ae(this).description;
      } }), G || m(x, "propertyIsEnumerable", R, { unsafe: true }))), n({ global: true, wrap: true, forced: !i2, sham: !i2 }, { Symbol: w }), v(q($), function(e2) {
        ne(e2);
      }), n({ target: j, stat: true, forced: !i2 }, { for: function(e2) {
        var t2, e2 = String(e2);
        return l(C, e2) ? C[e2] : (t2 = w(e2), C[e2] = t2, O[t2] = e2, t2);
      }, keyFor: function(e2) {
        if (!A(e2))
          throw TypeError(e2 + " is not a symbol");
        if (l(O, e2))
          return O[e2];
      }, useSetter: function() {
        L = true;
      }, useSimple: function() {
        L = false;
      } }), n({ target: "Object", stat: true, forced: !i2, sham: !s2 }, { create: function(e2, t2) {
        return void 0 === t2 ? h(e2) : r(h(e2), t2);
      }, defineProperty: P, defineProperties: r, getOwnPropertyDescriptor: t }), n({ target: "Object", stat: true, forced: !i2 }, { getOwnPropertyNames: N, getOwnPropertySymbols: D }), n({ target: "Object", stat: true, forced: a(function() {
        p.f(1);
      }) }, { getOwnPropertySymbols: function(e2) {
        return p.f(W(e2));
      } }), S && n({ target: "JSON", stat: true, forced: !i2 || a(function() {
        var e2 = w();
        return "[null]" != S([e2]) || "{}" != S({ a: e2 }) || "{}" != S(Object(e2));
      }) }, { stringify: function(e2, t2, r2) {
        for (var o2, n2 = [e2], s3 = 1; s3 < arguments.length; )
          n2.push(arguments[s3++]);
        if ((H(o2 = t2) || void 0 !== e2) && !A(e2))
          return z(t2) || (t2 = function(e3, t3) {
            if ("function" == typeof o2 && (t3 = o2.call(this, e3, t3)), !A(t3))
              return t3;
          }), n2[1] = t2, S.apply(null, n2);
      } }), w[_][e] || J(w[_], e, w[_].valueOf), se(w, j), ee[b] = true;
    }, { "../internals/an-object": 10, "../internals/array-iteration": 19, "../internals/create-non-enumerable-property": 38, "../internals/create-property-descriptor": 39, "../internals/define-well-known-symbol": 42, "../internals/descriptors": 43, "../internals/export": 50, "../internals/fails": 51, "../internals/get-built-in": 56, "../internals/global": 59, "../internals/has": 60, "../internals/hidden-keys": 61, "../internals/internal-state": 70, "../internals/is-array": 72, "../internals/is-object": 74, "../internals/is-pure": 75, "../internals/native-symbol": 83, "../internals/object-create": 90, "../internals/object-define-property": 92, "../internals/object-get-own-property-descriptor": 93, "../internals/object-get-own-property-names": 95, "../internals/object-get-own-property-names-external": 94, "../internals/object-get-own-property-symbols": 96, "../internals/object-keys": 99, "../internals/object-property-is-enumerable": 100, "../internals/redefine": 108, "../internals/set-to-string-tag": 117, "../internals/shared": 120, "../internals/shared-key": 118, "../internals/to-indexed-object": 132, "../internals/to-object": 135, "../internals/to-primitive": 138, "../internals/uid": 143, "../internals/use-symbol-as-uid": 144, "../internals/well-known-symbol": 146, "../internals/well-known-symbol-wrapped": 145 }], 197: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-copy-within"), s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("copyWithin", function(e2, t2) {
        return n.call(s2(this), e2, t2, 2 < arguments.length ? arguments[2] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-copy-within": 14 }], 198: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").every, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("every", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19 }], 199: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-fill"), s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("fill", function(e2) {
        return n.apply(s2(this), arguments);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-fill": 15 }], 200: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), s2 = e("../internals/array-iteration").filter, i2 = e("../internals/species-constructor"), a = o.aTypedArray, l = o.aTypedArrayConstructor;
      (0, o.exportTypedArrayMethod)("filter", function(e2) {
        for (var t2 = s2(a(this), e2, 1 < arguments.length ? arguments[1] : void 0), e2 = i2(this, this.constructor), r2 = 0, o2 = t2.length, n = new (l(e2))(o2); r2 < o2; )
          n[r2] = t2[r2++];
        return n;
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19, "../internals/species-constructor": 121 }], 201: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").findIndex, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("findIndex", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19 }], 202: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").find, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("find", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19 }], 203: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Float32", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 204: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Float64", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 205: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").forEach, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("forEach", function(e2) {
        n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19 }], 206: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-includes").includes, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("includes", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-includes": 18 }], 207: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-includes").indexOf, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("indexOf", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-includes": 18 }], 208: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Int16", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 209: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Int32", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 210: [function(e, t, r) {
      function o() {
        return a.call(c(this));
      }
      var n = e("../internals/global"), s2 = e("../internals/array-buffer-view-core"), i2 = e("../modules/es.array.iterator"), e = e("../internals/well-known-symbol")("iterator"), n = n.Uint8Array, a = i2.values, l = i2.keys, u = i2.entries, c = s2.aTypedArray, i2 = s2.exportTypedArrayMethod, s2 = n && n.prototype[e], n = !!s2 && ("values" == s2.name || null == s2.name);
      i2("entries", function() {
        return u.call(c(this));
      }), i2("keys", function() {
        return l.call(c(this));
      }), i2("values", o, !n), i2(e, o, !n);
    }, { "../internals/array-buffer-view-core": 12, "../internals/global": 59, "../internals/well-known-symbol": 146, "../modules/es.array.iterator": 158 }], 211: [function(e, t, r) {
      var e = e("../internals/array-buffer-view-core"), o = e.aTypedArray, e = e.exportTypedArrayMethod, n = [].join;
      e("join", function(e2) {
        return n.apply(o(this), arguments);
      });
    }, { "../internals/array-buffer-view-core": 12 }], 212: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-last-index-of"), s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("lastIndexOf", function(e2) {
        return n.apply(s2(this), arguments);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-last-index-of": 20 }], 213: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").map, s2 = e("../internals/species-constructor"), i2 = o.aTypedArray, a = o.aTypedArrayConstructor;
      (0, o.exportTypedArrayMethod)("map", function(e2) {
        return n(i2(this), e2, 1 < arguments.length ? arguments[1] : void 0, function(e3, t2) {
          return new (a(s2(e3, e3.constructor)))(t2);
        });
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19, "../internals/species-constructor": 121 }], 214: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-reduce").right, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("reduceRight", function(e2) {
        return n(s2(this), e2, arguments.length, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-reduce": 24 }], 215: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-reduce").left, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("reduce", function(e2) {
        return n(s2(this), e2, arguments.length, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-reduce": 24 }], 216: [function(e, t, r) {
      var e = e("../internals/array-buffer-view-core"), n = e.aTypedArray, e = e.exportTypedArrayMethod, s2 = Math.floor;
      e("reverse", function() {
        for (var e2, t2 = n(this).length, r2 = s2(t2 / 2), o = 0; o < r2; )
          e2 = this[o], this[o++] = this[--t2], this[t2] = e2;
        return this;
      });
    }, { "../internals/array-buffer-view-core": 12 }], 217: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), i2 = e("../internals/to-length"), a = e("../internals/to-offset"), l = e("../internals/to-object"), e = e("../internals/fails"), u = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("set", function(e2) {
        u(this);
        var t2 = a(1 < arguments.length ? arguments[1] : void 0, 1), r2 = this.length, o2 = l(e2), n = i2(o2.length), s2 = 0;
        if (r2 < n + t2)
          throw RangeError("Wrong length");
        for (; s2 < n; )
          this[t2 + s2] = o2[s2++];
      }, e(function() {
        new Int8Array(1).set({});
      }));
    }, { "../internals/array-buffer-view-core": 12, "../internals/fails": 51, "../internals/to-length": 134, "../internals/to-object": 135, "../internals/to-offset": 136 }], 218: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), i2 = e("../internals/species-constructor"), e = e("../internals/fails"), a = o.aTypedArray, l = o.aTypedArrayConstructor, o = o.exportTypedArrayMethod, u = [].slice;
      o("slice", function(e2, t2) {
        for (var r2 = u.call(a(this), e2, t2), e2 = i2(this, this.constructor), o2 = 0, n = r2.length, s2 = new (l(e2))(n); o2 < n; )
          s2[o2] = r2[o2++];
        return s2;
      }, e(function() {
        new Int8Array(1).slice();
      }));
    }, { "../internals/array-buffer-view-core": 12, "../internals/fails": 51, "../internals/species-constructor": 121 }], 219: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/array-iteration").some, s2 = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("some", function(e2) {
        return n(s2(this), e2, 1 < arguments.length ? arguments[1] : void 0);
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/array-iteration": 19 }], 220: [function(e, t, r) {
      var e = e("../internals/array-buffer-view-core"), o = e.aTypedArray, e = e.exportTypedArrayMethod, n = [].sort;
      e("sort", function(e2) {
        return n.call(o(this), e2);
      });
    }, { "../internals/array-buffer-view-core": 12 }], 221: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core"), n = e("../internals/to-length"), s2 = e("../internals/to-absolute-index"), i2 = e("../internals/species-constructor"), a = o.aTypedArray;
      (0, o.exportTypedArrayMethod)("subarray", function(e2, t2) {
        var r2 = a(this), o2 = r2.length, e2 = s2(e2, o2);
        return new (i2(r2, r2.constructor))(r2.buffer, r2.byteOffset + e2 * r2.BYTES_PER_ELEMENT, n((void 0 === t2 ? o2 : s2(t2, o2)) - e2));
      });
    }, { "../internals/array-buffer-view-core": 12, "../internals/species-constructor": 121, "../internals/to-absolute-index": 130, "../internals/to-length": 134 }], 222: [function(e, t, r) {
      var o = e("../internals/global"), n = e("../internals/array-buffer-view-core"), e = e("../internals/fails"), s2 = o.Int8Array, i2 = n.aTypedArray, o = n.exportTypedArrayMethod, a = [].toLocaleString, l = [].slice, u = !!s2 && e(function() {
        a.call(new s2(1));
      });
      o("toLocaleString", function() {
        return a.apply(u ? l.call(i2(this)) : i2(this), arguments);
      }, e(function() {
        return [1, 2].toLocaleString() != new s2([1, 2]).toLocaleString();
      }) || !e(function() {
        s2.prototype.toLocaleString.call([1, 2]);
      }));
    }, { "../internals/array-buffer-view-core": 12, "../internals/fails": 51, "../internals/global": 59 }], 223: [function(e, t, r) {
      var o = e("../internals/array-buffer-view-core").exportTypedArrayMethod, n = e("../internals/fails"), e = e("../internals/global").Uint8Array, e = e && e.prototype || {}, s2 = [].toString, i2 = [].join, n = (n(function() {
        s2.call({});
      }) && (s2 = function() {
        return i2.call(this);
      }), e.toString != s2);
      o("toString", s2, n);
    }, { "../internals/array-buffer-view-core": 12, "../internals/fails": 51, "../internals/global": 59 }], 224: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Uint16", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 225: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Uint32", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 226: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Uint8", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      });
    }, { "../internals/typed-array-constructor": 140 }], 227: [function(e, t, r) {
      e("../internals/typed-array-constructor")("Uint8", function(o) {
        return function(e2, t2, r2) {
          return o(this, e2, t2, r2);
        };
      }, true);
    }, { "../internals/typed-array-constructor": 140 }], 228: [function(e, t, r) {
      function o(e2) {
        return function() {
          return e2(this, arguments.length ? arguments[0] : void 0);
        };
      }
      var n, s2, i2, a, l, u = e("../internals/global"), c = e("../internals/redefine-all"), d = e("../internals/internal-metadata"), f = e("../internals/collection"), h = e("../internals/collection-weak"), p = e("../internals/is-object"), m = e("../internals/internal-state").enforce, e = e("../internals/native-weak-map"), u = !u.ActiveXObject && "ActiveXObject" in u, y = Object.isExtensible, t = t.exports = f("WeakMap", o, h);
      e && u && (n = h.getConstructor(o, "WeakMap", true), d.REQUIRED = true, f = t.prototype, s2 = f.delete, i2 = f.has, a = f.get, l = f.set, c(f, { delete: function(e2) {
        var t2;
        return p(e2) && !y(e2) ? ((t2 = m(this)).frozen || (t2.frozen = new n()), s2.call(this, e2) || t2.frozen.delete(e2)) : s2.call(this, e2);
      }, has: function(e2) {
        var t2;
        return p(e2) && !y(e2) ? ((t2 = m(this)).frozen || (t2.frozen = new n()), i2.call(this, e2) || t2.frozen.has(e2)) : i2.call(this, e2);
      }, get: function(e2) {
        var t2;
        return !p(e2) || y(e2) || ((t2 = m(this)).frozen || (t2.frozen = new n()), i2.call(this, e2)) ? a.call(this, e2) : t2.frozen.get(e2);
      }, set: function(e2, t2) {
        var r2;
        return !p(e2) || y(e2) || ((r2 = m(this)).frozen || (r2.frozen = new n()), i2.call(this, e2)) ? l.call(this, e2, t2) : r2.frozen.set(e2, t2), this;
      } }));
    }, { "../internals/collection": 32, "../internals/collection-weak": 31, "../internals/global": 59, "../internals/internal-metadata": 69, "../internals/internal-state": 70, "../internals/is-object": 74, "../internals/native-weak-map": 85, "../internals/redefine-all": 107 }], 229: [function(e, t, r) {
      var o, n = e("../internals/global"), s2 = e("../internals/dom-iterables"), i2 = e("../internals/array-for-each"), a = e("../internals/create-non-enumerable-property");
      for (o in s2) {
        var l = n[o], l = l && l.prototype;
        if (l && l.forEach !== i2)
          try {
            a(l, "forEach", i2);
          } catch (e2) {
            l.forEach = i2;
          }
      }
    }, { "../internals/array-for-each": 16, "../internals/create-non-enumerable-property": 38, "../internals/dom-iterables": 45, "../internals/global": 59 }], 230: [function(e, t, r) {
      var o, n = e("../internals/global"), s2 = e("../internals/dom-iterables"), i2 = e("../modules/es.array.iterator"), a = e("../internals/create-non-enumerable-property"), e = e("../internals/well-known-symbol"), l = e("iterator"), u = e("toStringTag"), c = i2.values;
      for (o in s2) {
        var d = n[o], f = d && d.prototype;
        if (f) {
          if (f[l] !== c)
            try {
              a(f, l, c);
            } catch (e2) {
              f[l] = c;
            }
          if (f[u] || a(f, u, o), s2[o]) {
            for (var h in i2)
              if (f[h] !== i2[h])
                try {
                  a(f, h, i2[h]);
                } catch (e2) {
                  f[h] = i2[h];
                }
          }
        }
      }
    }, { "../internals/create-non-enumerable-property": 38, "../internals/dom-iterables": 45, "../internals/global": 59, "../internals/well-known-symbol": 146, "../modules/es.array.iterator": 158 }], 231: [function(e, t, I) {
      e("../modules/es.array.iterator");
      function n(t2) {
        try {
          return decodeURIComponent(t2);
        } catch (e2) {
          return t2;
        }
      }
      function r(e2) {
        return B[e2];
      }
      function s2(e2) {
        return encodeURIComponent(e2).replace(F, r);
      }
      function c(e2) {
        this.entries.length = 0, R(this.entries, e2);
      }
      function u(e2, t2) {
        if (e2 < t2)
          throw TypeError("Not enough arguments");
      }
      function d() {
        y(this, d, C);
        var e2, t2, r2, o2, n2, s3, i3, a2, l2 = 0 < arguments.length ? arguments[0] : void 0, u2 = [];
        if (L(this, { type: C, entries: u2, updateURL: function() {
        }, updateSearchParams: c }), void 0 !== l2)
          if (_(l2))
            if ("function" == typeof (e2 = M(l2)))
              for (r2 = (t2 = e2.call(l2)).next; !(o2 = r2.call(t2)).done; ) {
                if ((s3 = (n2 = (o2 = S(j(o2.value))).next).call(o2)).done || (i3 = n2.call(o2)).done || !n2.call(o2).done)
                  throw TypeError("Expected sequence with length 2");
                u2.push({ key: s3.value + "", value: i3.value + "" });
              }
            else
              for (a2 in l2)
                g(l2, a2) && u2.push({ key: a2, value: l2[a2] + "" });
          else
            R(u2, "string" == typeof l2 ? "?" === l2.charAt(0) ? l2.slice(1) : l2 : l2 + "");
      }
      var o = e("../internals/export"), i2 = e("../internals/get-built-in"), a = e("../internals/native-url"), l = e("../internals/redefine"), f = e("../internals/redefine-all"), h = e("../internals/set-to-string-tag"), p = e("../internals/create-iterator-constructor"), m = e("../internals/internal-state"), y = e("../internals/an-instance"), g = e("../internals/has"), v = e("../internals/function-bind-context"), b = e("../internals/classof"), j = e("../internals/an-object"), _ = e("../internals/is-object"), x = e("../internals/object-create"), w = e("../internals/create-property-descriptor"), S = e("../internals/get-iterator"), M = e("../internals/get-iterator-method"), e = e("../internals/well-known-symbol"), E = i2("fetch"), T = i2("Headers"), i2 = e("iterator"), C = "URLSearchParams", O = C + "Iterator", L = m.set, k = m.getterFor(C), U = m.getterFor(O), N = /\+/g, A = Array(4), P = function(e2) {
        var t2, r2 = e2.replace(N, " "), o2 = 4;
        try {
          return decodeURIComponent(r2);
        } catch (e3) {
          for (; o2; )
            r2 = r2.replace((t2 = o2--, A[t2 - 1] || (A[t2 - 1] = RegExp("((?:%[\\da-f]{2}){" + t2 + "})", "gi"))), n);
          return r2;
        }
      }, F = /[!'()~]|%20/g, B = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" }, R = function(e2, t2) {
        if (t2)
          for (var r2, o2 = t2.split("&"), n2 = 0; n2 < o2.length; )
            (r2 = o2[n2++]).length && (r2 = r2.split("="), e2.push({ key: P(r2.shift()), value: P(r2.join("=")) }));
      }, D = p(function(e2, t2) {
        L(this, { type: O, iterator: S(k(e2).entries), kind: t2 });
      }, "Iterator", function() {
        var e2 = U(this), t2 = e2.kind, e2 = e2.iterator.next(), r2 = e2.value;
        return e2.done || (e2.value = "keys" === t2 ? r2.key : "values" === t2 ? r2.value : [r2.key, r2.value]), e2;
      }), e = d.prototype;
      f(e, { append: function(e2, t2) {
        u(arguments.length, 2);
        var r2 = k(this);
        r2.entries.push({ key: e2 + "", value: t2 + "" }), r2.updateURL();
      }, delete: function(e2) {
        u(arguments.length, 1);
        for (var t2 = k(this), r2 = t2.entries, o2 = e2 + "", n2 = 0; n2 < r2.length; )
          r2[n2].key === o2 ? r2.splice(n2, 1) : n2++;
        t2.updateURL();
      }, get: function(e2) {
        u(arguments.length, 1);
        for (var t2 = k(this).entries, r2 = e2 + "", o2 = 0; o2 < t2.length; o2++)
          if (t2[o2].key === r2)
            return t2[o2].value;
        return null;
      }, getAll: function(e2) {
        u(arguments.length, 1);
        for (var t2 = k(this).entries, r2 = e2 + "", o2 = [], n2 = 0; n2 < t2.length; n2++)
          t2[n2].key === r2 && o2.push(t2[n2].value);
        return o2;
      }, has: function(e2) {
        u(arguments.length, 1);
        for (var t2 = k(this).entries, r2 = e2 + "", o2 = 0; o2 < t2.length; )
          if (t2[o2++].key === r2)
            return true;
        return false;
      }, set: function(e2, t2) {
        u(arguments.length, 1);
        for (var r2, o2 = k(this), n2 = o2.entries, s3 = false, i3 = e2 + "", a2 = t2 + "", l2 = 0; l2 < n2.length; l2++)
          (r2 = n2[l2]).key === i3 && (s3 ? n2.splice(l2--, 1) : (s3 = true, r2.value = a2));
        s3 || n2.push({ key: i3, value: a2 }), o2.updateURL();
      }, sort: function() {
        for (var e2, t2, r2 = k(this), o2 = r2.entries, n2 = o2.slice(), s3 = o2.length = 0; s3 < n2.length; s3++) {
          for (e2 = n2[s3], t2 = 0; t2 < s3; t2++)
            if (o2[t2].key > e2.key) {
              o2.splice(t2, 0, e2);
              break;
            }
          t2 === s3 && o2.push(e2);
        }
        r2.updateURL();
      }, forEach: function(e2) {
        for (var t2, r2 = k(this).entries, o2 = v(e2, 1 < arguments.length ? arguments[1] : void 0, 3), n2 = 0; n2 < r2.length; )
          o2((t2 = r2[n2++]).value, t2.key, this);
      }, keys: function() {
        return new D(this, "keys");
      }, values: function() {
        return new D(this, "values");
      }, entries: function() {
        return new D(this, "entries");
      } }, { enumerable: true }), l(e, i2, e.entries), l(e, "toString", function() {
        for (var e2, t2 = k(this).entries, r2 = [], o2 = 0; o2 < t2.length; )
          e2 = t2[o2++], r2.push(s2(e2.key) + "=" + s2(e2.value));
        return r2.join("&");
      }, { enumerable: true }), h(d, C), o({ global: true, forced: !a }, { URLSearchParams: d }), a || "function" != typeof E || "function" != typeof T || o({ global: true, enumerable: true, forced: true }, { fetch: function(e2) {
        var t2, r2, o2, e2 = [e2];
        return 1 < arguments.length && (_(t2 = arguments[1]) && (r2 = t2.body, b(r2) === C && ((o2 = t2.headers ? new T(t2.headers) : new T()).has("content-type") || o2.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"), t2 = x(t2, { body: w(0, String(r2)), headers: w(0, o2) }))), e2.push(t2)), E.apply(this, e2);
      } }), t.exports = { URLSearchParams: d, getState: k };
    }, { "../internals/an-instance": 9, "../internals/an-object": 10, "../internals/classof": 29, "../internals/create-iterator-constructor": 37, "../internals/create-property-descriptor": 39, "../internals/export": 50, "../internals/function-bind-context": 54, "../internals/get-built-in": 56, "../internals/get-iterator": 58, "../internals/get-iterator-method": 57, "../internals/has": 60, "../internals/internal-state": 70, "../internals/is-object": 74, "../internals/native-url": 84, "../internals/object-create": 90, "../internals/redefine": 108, "../internals/redefine-all": 107, "../internals/set-to-string-tag": 117, "../internals/well-known-symbol": 146, "../modules/es.array.iterator": 158 }], 232: [function(e, y, U) {
      e("../modules/es.string.iterator");
      function c(e2) {
        var t2, r2, o2, n2;
        if ("number" == typeof e2) {
          for (t2 = [], r2 = 0; r2 < 4; r2++)
            t2.unshift(e2 % 256), e2 = Y(e2 / 256);
          return t2.join(".");
        }
        if ("object" != typeof e2)
          return e2;
        for (t2 = "", o2 = le(e2), r2 = 0; r2 < 8; r2++)
          n2 && 0 === e2[r2] || (n2 = n2 && false, o2 === r2 ? (t2 += r2 ? ":" : "::", n2 = true) : (t2 += e2[r2].toString(16), r2 < 7 && (t2 += ":")));
        return "[" + t2 + "]";
      }
      function n(e2) {
        return !e2.host || e2.cannotBeABaseURL || "file" == e2.scheme;
      }
      function a(e2, t2, r2, o2) {
        var n2, s3, i3, a2 = r2 || me, l2 = 0, u2 = "", c2 = false, d2 = false, f2 = false;
        for (r2 || (e2.scheme = "", e2.username = "", e2.password = "", e2.host = null, e2.port = null, e2.path = [], e2.query = null, e2.fragment = null, e2.cannotBeABaseURL = false, t2 = t2.replace(ie, "")), t2 = t2.replace(ae, ""), n2 = b(t2); l2 <= n2.length; ) {
          switch (s3 = n2[l2], a2) {
            case me:
              if (!s3 || !J.test(s3)) {
                if (r2)
                  return j;
                a2 = ge;
                continue;
              }
              u2 += s3.toLowerCase(), a2 = ye;
              break;
            case ye:
              if (s3 && ($.test(s3) || "+" == s3 || "-" == s3 || "." == s3))
                u2 += s3.toLowerCase();
              else {
                if (":" != s3) {
                  if (r2)
                    return j;
                  u2 = "", a2 = ge, l2 = 0;
                  continue;
                }
                if (r2 && (C(e2) != v(T, u2) || "file" == u2 && (O(e2) || null !== e2.port) || "file" == e2.scheme && !e2.host))
                  return;
                if (e2.scheme = u2, r2)
                  return void (C(e2) && T[e2.scheme] == e2.port && (e2.port = null));
                u2 = "", "file" == e2.scheme ? a2 = Ee : C(e2) && o2 && o2.scheme == e2.scheme ? a2 = ve : C(e2) ? a2 = xe : "/" == n2[l2 + 1] ? (a2 = be, l2++) : (e2.cannotBeABaseURL = true, e2.path.push(""), a2 = Oe);
              }
              break;
            case ge:
              if (!o2 || o2.cannotBeABaseURL && "#" != s3)
                return j;
              if (o2.cannotBeABaseURL && "#" == s3) {
                e2.scheme = o2.scheme, e2.path = o2.path.slice(), e2.query = o2.query, e2.fragment = "", e2.cannotBeABaseURL = true, a2 = I;
                break;
              }
              a2 = "file" == o2.scheme ? Ee : je;
              continue;
            case ve:
              if ("/" != s3 || "/" != n2[l2 + 1]) {
                a2 = je;
                continue;
              }
              a2 = k, l2++;
              break;
            case be:
              if ("/" == s3) {
                a2 = A;
                break;
              }
              a2 = R;
              continue;
            case je:
              if (e2.scheme = o2.scheme, s3 == g)
                e2.username = o2.username, e2.password = o2.password, e2.host = o2.host, e2.port = o2.port, e2.path = o2.path.slice(), e2.query = o2.query;
              else if ("/" == s3 || "\\" == s3 && C(e2))
                a2 = _e;
              else if ("?" == s3)
                e2.username = o2.username, e2.password = o2.password, e2.host = o2.host, e2.port = o2.port, e2.path = o2.path.slice(), e2.query = "", a2 = D;
              else {
                if ("#" != s3) {
                  e2.username = o2.username, e2.password = o2.password, e2.host = o2.host, e2.port = o2.port, e2.path = o2.path.slice(), e2.path.pop(), a2 = R;
                  continue;
                }
                e2.username = o2.username, e2.password = o2.password, e2.host = o2.host, e2.port = o2.port, e2.path = o2.path.slice(), e2.query = o2.query, e2.fragment = "", a2 = I;
              }
              break;
            case _e:
              if (!C(e2) || "/" != s3 && "\\" != s3) {
                if ("/" != s3) {
                  e2.username = o2.username, e2.password = o2.password, e2.host = o2.host, e2.port = o2.port, a2 = R;
                  continue;
                }
                a2 = A;
              } else
                a2 = k;
              break;
            case xe:
              if (a2 = k, "/" != s3 || "/" != u2.charAt(l2 + 1))
                continue;
              l2++;
              break;
            case k:
              if ("/" == s3 || "\\" == s3)
                break;
              a2 = A;
              continue;
            case A:
              if ("@" == s3) {
                c2 && (u2 = "%40" + u2);
                for (var c2 = true, h2 = b(u2), p2 = 0; p2 < h2.length; p2++) {
                  var m2 = h2[p2];
                  ":" != m2 || f2 ? (m2 = E(m2, M), f2 ? e2.password += m2 : e2.username += m2) : f2 = true;
                }
                u2 = "";
              } else if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && C(e2)) {
                if (c2 && "" == u2)
                  return Q;
                l2 -= b(u2).length + 1, u2 = "", a2 = we;
              } else
                u2 += s3;
              break;
            case we:
            case Se:
              if (r2 && "file" == e2.scheme) {
                a2 = Ce;
                continue;
              }
              if (":" != s3 || d2) {
                if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && C(e2)) {
                  if (C(e2) && "" == u2)
                    return _;
                  if (r2 && "" == u2 && (O(e2) || null !== e2.port))
                    return;
                  if (i3 = w(e2, u2))
                    return i3;
                  if (u2 = "", a2 = P, r2)
                    return;
                  continue;
                }
                "[" == s3 ? d2 = true : "]" == s3 && (d2 = false), u2 += s3;
              } else {
                if ("" == u2)
                  return _;
                if (i3 = w(e2, u2))
                  return i3;
                if (u2 = "", a2 = Me, r2 == Se)
                  return;
              }
              break;
            case Me:
              if (!x.test(s3)) {
                if (s3 == g || "/" == s3 || "?" == s3 || "#" == s3 || "\\" == s3 && C(e2) || r2) {
                  if ("" != u2) {
                    var y2 = parseInt(u2, 10);
                    if (65535 < y2)
                      return K;
                    e2.port = C(e2) && y2 === T[e2.scheme] ? null : y2, u2 = "";
                  }
                  if (r2)
                    return;
                  a2 = P;
                  continue;
                }
                return K;
              }
              u2 += s3;
              break;
            case Ee:
              if (e2.scheme = "file", "/" == s3 || "\\" == s3)
                a2 = Te;
              else {
                if (!o2 || "file" != o2.scheme) {
                  a2 = R;
                  continue;
                }
                if (s3 == g)
                  e2.host = o2.host, e2.path = o2.path.slice(), e2.query = o2.query;
                else if ("?" == s3)
                  e2.host = o2.host, e2.path = o2.path.slice(), e2.query = "", a2 = D;
                else {
                  if ("#" != s3) {
                    de(n2.slice(l2).join("")) || (e2.host = o2.host, e2.path = o2.path.slice(), fe(e2)), a2 = R;
                    continue;
                  }
                  e2.host = o2.host, e2.path = o2.path.slice(), e2.query = o2.query, e2.fragment = "", a2 = I;
                }
              }
              break;
            case Te:
              if ("/" == s3 || "\\" == s3) {
                a2 = Ce;
                break;
              }
              o2 && "file" == o2.scheme && !de(n2.slice(l2).join("")) && (L(o2.path[0], true) ? e2.path.push(o2.path[0]) : e2.host = o2.host), a2 = R;
              continue;
            case Ce:
              if (s3 == g || "/" == s3 || "\\" == s3 || "?" == s3 || "#" == s3) {
                if (!r2 && L(u2))
                  a2 = R;
                else {
                  if ("" == u2) {
                    if (e2.host = "", r2)
                      return;
                  } else {
                    if (i3 = w(e2, u2))
                      return i3;
                    if ("localhost" == e2.host && (e2.host = ""), r2)
                      return;
                    u2 = "";
                  }
                  a2 = P;
                }
                continue;
              }
              u2 += s3;
              break;
            case P:
              if (C(e2)) {
                if (a2 = R, "/" != s3 && "\\" != s3)
                  continue;
              } else if (r2 || "?" != s3)
                if (r2 || "#" != s3) {
                  if (s3 != g && (a2 = R, "/" != s3))
                    continue;
                } else
                  e2.fragment = "", a2 = I;
              else
                e2.query = "", a2 = D;
              break;
            case R:
              if (s3 == g || "/" == s3 || "\\" == s3 && C(e2) || !r2 && ("?" == s3 || "#" == s3)) {
                if (pe(u2) ? (fe(e2), "/" == s3 || "\\" == s3 && C(e2) || e2.path.push("")) : he(u2) ? "/" == s3 || "\\" == s3 && C(e2) || e2.path.push("") : ("file" == e2.scheme && !e2.path.length && L(u2) && (e2.host && (e2.host = ""), u2 = u2.charAt(0) + ":"), e2.path.push(u2)), u2 = "", "file" == e2.scheme && (s3 == g || "?" == s3 || "#" == s3))
                  for (; 1 < e2.path.length && "" === e2.path[0]; )
                    e2.path.shift();
                "?" == s3 ? (e2.query = "", a2 = D) : "#" == s3 && (e2.fragment = "", a2 = I);
              } else
                u2 += E(s3, ce);
              break;
            case Oe:
              "?" == s3 ? (e2.query = "", a2 = D) : "#" == s3 ? (e2.fragment = "", a2 = I) : s3 != g && (e2.path[0] += E(s3, S));
              break;
            case D:
              r2 || "#" != s3 ? s3 != g && ("'" == s3 && C(e2) ? e2.query += "%27" : e2.query += "#" == s3 ? "%23" : E(s3, S)) : (e2.fragment = "", a2 = I);
              break;
            case I:
              s3 != g && (e2.fragment += E(s3, ue));
          }
          l2++;
        }
      }
      function l(e2) {
        var t2, r2, o2 = G(this, l, "URL"), n2 = 1 < arguments.length ? arguments[1] : void 0, e2 = String(e2), s3 = X(o2, { type: "URL" });
        if (void 0 !== n2) {
          if (n2 instanceof l)
            t2 = p(n2);
          else if (r2 = a(t2 = {}, String(n2)))
            throw TypeError(r2);
        }
        if (r2 = a(s3, e2, null, t2))
          throw TypeError(r2);
        var i3 = s3.searchParams = new q();
        (n2 = h(i3)).updateSearchParams(s3.query), n2.updateURL = function() {
          s3.query = String(i3) || null;
        }, u || (o2.href = m.call(o2), o2.origin = Le.call(o2), o2.protocol = ke.call(o2), o2.username = Ae.call(o2), o2.password = Pe.call(o2), o2.host = Re.call(o2), o2.hostname = De.call(o2), o2.port = Ie.call(o2), o2.pathname = Ue.call(o2), o2.search = Ne.call(o2), o2.searchParams = Fe.call(o2), o2.hash = Be.call(o2));
      }
      function t(e2, t2) {
        return { get: e2, set: t2, configurable: true, enumerable: true };
      }
      var g, r, o, N = e("../internals/export"), u = e("../internals/descriptors"), F = e("../internals/native-url"), s2 = e("../internals/global"), B = e("../internals/object-define-properties"), i2 = e("../internals/redefine"), G = e("../internals/an-instance"), v = e("../internals/has"), d = e("../internals/object-assign"), b = e("../internals/array-from"), V = e("../internals/string-multibyte").codeAt, z = e("../internals/string-punycode-to-ascii"), H = e("../internals/set-to-string-tag"), W = e("../modules/web.url-search-params"), e = e("../internals/internal-state"), f = s2.URL, q = W.URLSearchParams, h = W.getState, X = e.set, p = e.getterFor("URL"), Y = Math.floor, Z = Math.pow, Q = "Invalid authority", j = "Invalid scheme", _ = "Invalid host", K = "Invalid port", J = /[A-Za-z]/, $ = /[\d+-.A-Za-z]/, x = /\d/, ee = /^(0x|0X)/, te = /^[0-7]+$/, re2 = /^\d+$/, oe = /^[\dA-Fa-f]+$/, ne = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/, se = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/, ie = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g, ae = /[\u0009\u000A\u000D]/g, w = function(e2, t2) {
        var r2, o2, n2;
        if ("[" == t2.charAt(0))
          return "]" == t2.charAt(t2.length - 1) && (r2 = function(e3) {
            var t3 = [0, 0, 0, 0, 0, 0, 0, 0], r3 = 0, o3 = null, n3 = 0, s3, i3, a2, l2, u2, c2, d2, f2 = function() {
              return e3.charAt(n3);
            };
            if (f2() == ":") {
              if (e3.charAt(1) != ":")
                return;
              n3 += 2;
              r3++;
              o3 = r3;
            }
            while (f2()) {
              if (r3 == 8)
                return;
              if (f2() == ":") {
                if (o3 !== null)
                  return;
                n3++;
                r3++;
                o3 = r3;
                continue;
              }
              s3 = i3 = 0;
              while (i3 < 4 && oe.test(f2())) {
                s3 = s3 * 16 + parseInt(f2(), 16);
                n3++;
                i3++;
              }
              if (f2() == ".") {
                if (i3 == 0)
                  return;
                n3 -= i3;
                if (r3 > 6)
                  return;
                a2 = 0;
                while (f2()) {
                  l2 = null;
                  if (a2 > 0)
                    if (f2() == "." && a2 < 4)
                      n3++;
                    else
                      return;
                  if (!x.test(f2()))
                    return;
                  while (x.test(f2())) {
                    u2 = parseInt(f2(), 10);
                    if (l2 === null)
                      l2 = u2;
                    else if (l2 == 0)
                      return;
                    else
                      l2 = l2 * 10 + u2;
                    if (l2 > 255)
                      return;
                    n3++;
                  }
                  t3[r3] = t3[r3] * 256 + l2;
                  a2++;
                  if (a2 == 2 || a2 == 4)
                    r3++;
                }
                if (a2 != 4)
                  return;
                break;
              } else if (f2() == ":") {
                n3++;
                if (!f2())
                  return;
              } else if (f2())
                return;
              t3[r3++] = s3;
            }
            if (o3 !== null) {
              c2 = r3 - o3;
              r3 = 7;
              while (r3 != 0 && c2 > 0) {
                d2 = t3[r3];
                t3[r3--] = t3[o3 + c2 - 1];
                t3[o3 + --c2] = d2;
              }
            } else if (r3 != 8)
              return;
            return t3;
          }(t2.slice(1, -1))) ? void (e2.host = r2) : _;
        if (C(e2))
          return t2 = z(t2), ne.test(t2) || null === (r2 = function(e3) {
            var t3 = e3.split("."), r3, o3, n3, s3, i3, a2, l2;
            if (t3.length && t3[t3.length - 1] == "")
              t3.pop();
            if ((r3 = t3.length) > 4)
              return e3;
            for (o3 = [], n3 = 0; n3 < r3; n3++) {
              s3 = t3[n3];
              if (s3 == "")
                return e3;
              i3 = 10;
              if (s3.length > 1 && s3.charAt(0) == "0") {
                i3 = ee.test(s3) ? 16 : 8;
                s3 = s3.slice(i3 == 8 ? 1 : 2);
              }
              if (s3 === "")
                a2 = 0;
              else {
                if (!(i3 == 10 ? re2 : i3 == 8 ? te : oe).test(s3))
                  return e3;
                a2 = parseInt(s3, i3);
              }
              o3.push(a2);
            }
            for (n3 = 0; n3 < r3; n3++) {
              a2 = o3[n3];
              if (n3 == r3 - 1) {
                if (a2 >= Z(256, 5 - r3))
                  return null;
              } else if (a2 > 255)
                return null;
            }
            for (l2 = o3.pop(), n3 = 0; n3 < o3.length; n3++)
              l2 += o3[n3] * Z(256, 3 - n3);
            return l2;
          }(t2)) ? _ : void (e2.host = r2);
        if (se.test(t2))
          return _;
        for (r2 = "", o2 = b(t2), n2 = 0; n2 < o2.length; n2++)
          r2 += E(o2[n2], S);
        e2.host = r2;
      }, le = function(e2) {
        for (var t2 = null, r2 = 1, o2 = null, n2 = 0, s3 = 0; s3 < 8; s3++)
          0 !== e2[s3] ? (r2 < n2 && (t2 = o2, r2 = n2), o2 = null, n2 = 0) : (null === o2 && (o2 = s3), ++n2);
        return r2 < n2 && (t2 = o2, r2 = n2), t2;
      }, S = {}, ue = d({}, S, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }), ce = d({}, ue, { "#": 1, "?": 1, "{": 1, "}": 1 }), M = d({}, ce, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }), E = function(e2, t2) {
        var r2 = V(e2, 0);
        return 32 < r2 && r2 < 127 && !v(t2, e2) ? e2 : encodeURIComponent(e2);
      }, T = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, C = function(e2) {
        return v(T, e2.scheme);
      }, O = function(e2) {
        return "" != e2.username || "" != e2.password;
      }, L = function(e2, t2) {
        return 2 == e2.length && J.test(e2.charAt(0)) && (":" == (e2 = e2.charAt(1)) || !t2 && "|" == e2);
      }, de = function(e2) {
        return 1 < e2.length && L(e2.slice(0, 2)) && (2 == e2.length || "/" === (e2 = e2.charAt(2)) || "\\" === e2 || "?" === e2 || "#" === e2);
      }, fe = function(e2) {
        var t2 = e2.path, r2 = t2.length;
        !r2 || "file" == e2.scheme && 1 == r2 && L(t2[0], true) || t2.pop();
      }, he = function(e2) {
        return "." === e2 || "%2e" === e2.toLowerCase();
      }, pe = function(e2) {
        return ".." === (e2 = e2.toLowerCase()) || "%2e." === e2 || ".%2e" === e2 || "%2e%2e" === e2;
      }, me = {}, ye = {}, ge = {}, ve = {}, be = {}, je = {}, _e = {}, xe = {}, k = {}, A = {}, we = {}, Se = {}, Me = {}, Ee = {}, Te = {}, Ce = {}, P = {}, R = {}, Oe = {}, D = {}, I = {}, s2 = l.prototype, m = function() {
        var e2 = p(this), t2 = e2.scheme, r2 = e2.username, o2 = e2.password, n2 = e2.host, s3 = e2.port, i3 = e2.path, a2 = e2.query, l2 = e2.fragment, u2 = t2 + ":";
        return null !== n2 ? (u2 += "//", O(e2) && (u2 += r2 + (o2 ? ":" + o2 : "") + "@"), u2 += c(n2), null !== s3 && (u2 += ":" + s3)) : "file" == t2 && (u2 += "//"), u2 += e2.cannotBeABaseURL ? i3[0] : i3.length ? "/" + i3.join("/") : "", null !== a2 && (u2 += "?" + a2), null !== l2 && (u2 += "#" + l2), u2;
      }, Le = function() {
        var e2 = p(this), t2 = e2.scheme, r2 = e2.port;
        if ("blob" == t2)
          try {
            return new URL(t2.path[0]).origin;
          } catch (e3) {
            return "null";
          }
        return "file" != t2 && C(e2) ? t2 + "://" + c(e2.host) + (null !== r2 ? ":" + r2 : "") : "null";
      }, ke = function() {
        return p(this).scheme + ":";
      }, Ae = function() {
        return p(this).username;
      }, Pe = function() {
        return p(this).password;
      }, Re = function() {
        var e2 = p(this), t2 = e2.host, e2 = e2.port;
        return null === t2 ? "" : null === e2 ? c(t2) : c(t2) + ":" + e2;
      }, De = function() {
        var e2 = p(this).host;
        return null === e2 ? "" : c(e2);
      }, Ie = function() {
        var e2 = p(this).port;
        return null === e2 ? "" : String(e2);
      }, Ue = function() {
        var e2 = p(this), t2 = e2.path;
        return e2.cannotBeABaseURL ? t2[0] : t2.length ? "/" + t2.join("/") : "";
      }, Ne = function() {
        var e2 = p(this).query;
        return e2 ? "?" + e2 : "";
      }, Fe = function() {
        return p(this).searchParams;
      }, Be = function() {
        var e2 = p(this).fragment;
        return e2 ? "#" + e2 : "";
      };
      u && B(s2, { href: t(m, function(e2) {
        var t2 = p(this), e2 = String(e2), e2 = a(t2, e2);
        if (e2)
          throw TypeError(e2);
        h(t2.searchParams).updateSearchParams(t2.query);
      }), origin: t(Le), protocol: t(ke, function(e2) {
        var t2 = p(this);
        a(t2, String(e2) + ":", me);
      }), username: t(Ae, function(e2) {
        var t2 = p(this), r2 = b(String(e2));
        if (!n(t2)) {
          t2.username = "";
          for (var o2 = 0; o2 < r2.length; o2++)
            t2.username += E(r2[o2], M);
        }
      }), password: t(Pe, function(e2) {
        var t2 = p(this), r2 = b(String(e2));
        if (!n(t2)) {
          t2.password = "";
          for (var o2 = 0; o2 < r2.length; o2++)
            t2.password += E(r2[o2], M);
        }
      }), host: t(Re, function(e2) {
        var t2 = p(this);
        t2.cannotBeABaseURL || a(t2, String(e2), we);
      }), hostname: t(De, function(e2) {
        var t2 = p(this);
        t2.cannotBeABaseURL || a(t2, String(e2), Se);
      }), port: t(Ie, function(e2) {
        var t2 = p(this);
        n(t2) || ("" == (e2 = String(e2)) ? t2.port = null : a(t2, e2, Me));
      }), pathname: t(Ue, function(e2) {
        var t2 = p(this);
        t2.cannotBeABaseURL || (t2.path = [], a(t2, e2 + "", P));
      }), search: t(Ne, function(e2) {
        var t2 = p(this);
        "" == (e2 = String(e2)) ? t2.query = null : ("?" == e2.charAt(0) && (e2 = e2.slice(1)), t2.query = "", a(t2, e2, D)), h(t2.searchParams).updateSearchParams(t2.query);
      }), searchParams: t(Fe), hash: t(Be, function(e2) {
        var t2 = p(this);
        "" == (e2 = String(e2)) ? t2.fragment = null : ("#" == e2.charAt(0) && (e2 = e2.slice(1)), t2.fragment = "", a(t2, e2, I));
      }) }), i2(s2, "toJSON", function() {
        return m.call(this);
      }, { enumerable: true }), i2(s2, "toString", function() {
        return m.call(this);
      }, { enumerable: true }), f && (r = f.createObjectURL, o = f.revokeObjectURL, r && i2(l, "createObjectURL", function(e2) {
        return r.apply(f, arguments);
      }), o && i2(l, "revokeObjectURL", function(e2) {
        return o.apply(f, arguments);
      })), H(l, "URL"), N({ global: true, forced: !F, sham: !u }, { URL: l });
    }, { "../internals/an-instance": 9, "../internals/array-from": 17, "../internals/descriptors": 43, "../internals/export": 50, "../internals/global": 59, "../internals/has": 60, "../internals/internal-state": 70, "../internals/native-url": 84, "../internals/object-assign": 89, "../internals/object-define-properties": 91, "../internals/redefine": 108, "../internals/set-to-string-tag": 117, "../internals/string-multibyte": 123, "../internals/string-punycode-to-ascii": 124, "../modules/es.string.iterator": 186, "../modules/web.url-search-params": 231 }], 233: [function(e, t, r) {
      t.exports = e("./").polyfill();
    }, { "./": 234 }], 234: [function(V, r, o) {
      !function(B, G) {
        var e, t;
        e = this, t = function() {
          function l(e3) {
            return "function" == typeof e3;
          }
          var r2 = Array.isArray || function(e3) {
            return "[object Array]" === Object.prototype.toString.call(e3);
          }, o2 = 0, t2 = void 0, n = void 0, i2 = function(e3, t3) {
            d[o2] = e3, d[o2 + 1] = t3, 2 === (o2 += 2) && (n ? n(f) : I());
          };
          var e2 = "undefined" != typeof window ? window : void 0, s2 = e2 || {}, s2 = s2.MutationObserver || s2.WebKitMutationObserver, a = "undefined" == typeof self && void 0 !== B && "[object process]" === {}.toString.call(B), u = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
          function c() {
            var e3 = setTimeout;
            return function() {
              return e3(f, 1);
            };
          }
          var d = new Array(1e3);
          function f() {
            for (var e3 = 0; e3 < o2; e3 += 2)
              (0, d[e3])(d[e3 + 1]), d[e3] = void 0, d[e3 + 1] = void 0;
            o2 = 0;
          }
          function h() {
            try {
              var e3 = Function("return this")().require("vertx");
              return void 0 !== (t2 = e3.runOnLoop || e3.runOnContext) ? function() {
                t2(f);
              } : c();
            } catch (e4) {
              return c();
            }
          }
          var p, m, y, I = void 0;
          function g(e3, t3) {
            var r3, o3 = this, n2 = new this.constructor(j), s3 = (void 0 === n2[b] && A(n2), o3._state);
            return s3 ? (r3 = arguments[s3 - 1], i2(function() {
              return L(s3, n2, r3, o3._result);
            })) : C(o3, n2, e3, t3), n2;
          }
          function v(e3) {
            var t3;
            return e3 && "object" == typeof e3 && e3.constructor === this ? e3 : (M(t3 = new this(j), e3), t3);
          }
          var I = a ? function() {
            return B.nextTick(f);
          } : s2 ? (m = 0, a = new s2(f), y = document.createTextNode(""), a.observe(y, { characterData: true }), function() {
            y.data = m = ++m % 2;
          }) : u ? ((p = new MessageChannel()).port1.onmessage = f, function() {
            return p.port2.postMessage(0);
          }) : (void 0 === e2 && "function" == typeof V ? h : c)(), b = Math.random().toString(36).substring(2);
          function j() {
          }
          var _ = void 0, x = 1, w = 2;
          function U(e3, o3, n2) {
            i2(function(t3) {
              var r3 = false, e4 = function(e5, t4, r4, o4) {
                try {
                  e5.call(t4, r4, o4);
                } catch (e6) {
                  return e6;
                }
              }(n2, o3, function(e5) {
                r3 || (r3 = true, (o3 !== e5 ? M : E)(t3, e5));
              }, function(e5) {
                r3 || (r3 = true, T(t3, e5));
              }, t3._label);
              !r3 && e4 && (r3 = true, T(t3, e4));
            }, e3);
          }
          function S(e3, t3, r3) {
            var o3, n2;
            t3.constructor === e3.constructor && r3 === g && t3.constructor.resolve === v ? (o3 = e3, (n2 = t3)._state === x ? E(o3, n2._result) : n2._state === w ? T(o3, n2._result) : C(n2, void 0, function(e4) {
              return M(o3, e4);
            }, function(e4) {
              return T(o3, e4);
            })) : void 0 !== r3 && l(r3) ? U(e3, t3, r3) : E(e3, t3);
          }
          function M(t3, e3) {
            if (t3 === e3)
              T(t3, new TypeError("You cannot resolve a promise with itself"));
            else if (r3 = typeof e3, null === e3 || "object" != r3 && "function" != r3)
              E(t3, e3);
            else {
              r3 = void 0;
              try {
                r3 = e3.then;
              } catch (e4) {
                return void T(t3, e4);
              }
              S(t3, e3, r3);
            }
            var r3;
          }
          function N(e3) {
            e3._onerror && e3._onerror(e3._result), O(e3);
          }
          function E(e3, t3) {
            e3._state === _ && (e3._result = t3, e3._state = x, 0 !== e3._subscribers.length && i2(O, e3));
          }
          function T(e3, t3) {
            e3._state === _ && (e3._state = w, e3._result = t3, i2(N, e3));
          }
          function C(e3, t3, r3, o3) {
            var n2 = e3._subscribers, s3 = n2.length;
            e3._onerror = null, n2[s3] = t3, n2[s3 + x] = r3, n2[s3 + w] = o3, 0 === s3 && e3._state && i2(O, e3);
          }
          function O(e3) {
            var t3 = e3._subscribers, r3 = e3._state;
            if (0 !== t3.length) {
              for (var o3, n2 = void 0, s3 = e3._result, i3 = 0; i3 < t3.length; i3 += 3)
                o3 = t3[i3], n2 = t3[i3 + r3], o3 ? L(r3, o3, n2, s3) : n2(s3);
              e3._subscribers.length = 0;
            }
          }
          function L(e3, t3, r3, o3) {
            var n2 = l(r3), s3 = void 0, i3 = void 0, a2 = true;
            if (n2) {
              try {
                s3 = r3(o3);
              } catch (e4) {
                a2 = false, i3 = e4;
              }
              if (t3 === s3)
                return void T(t3, new TypeError("A promises callback cannot return that same promise."));
            } else
              s3 = o3;
            t3._state === _ && (n2 && a2 ? M(t3, s3) : false === a2 ? T(t3, i3) : e3 === x ? E(t3, s3) : e3 === w && T(t3, s3));
          }
          var k = 0;
          function A(e3) {
            e3[b] = k++, e3._state = void 0, e3._result = void 0, e3._subscribers = [];
          }
          P.prototype._enumerate = function(e3) {
            for (var t3 = 0; this._state === _ && t3 < e3.length; t3++)
              this._eachEntry(e3[t3], t3);
          }, P.prototype._eachEntry = function(t3, e3) {
            var r3 = this._instanceConstructor, o3 = r3.resolve;
            if (o3 === v) {
              var n2, s3 = void 0, i3 = void 0, a2 = false;
              try {
                s3 = t3.then;
              } catch (e4) {
                a2 = true, i3 = e4;
              }
              s3 === g && t3._state !== _ ? this._settledAt(t3._state, e3, t3._result) : "function" != typeof s3 ? (this._remaining--, this._result[e3] = t3) : r3 === R ? (n2 = new r3(j), a2 ? T(n2, i3) : S(n2, t3, s3), this._willSettleAt(n2, e3)) : this._willSettleAt(new r3(function(e4) {
                return e4(t3);
              }), e3);
            } else
              this._willSettleAt(o3(t3), e3);
          }, P.prototype._settledAt = function(e3, t3, r3) {
            var o3 = this.promise;
            o3._state === _ && (this._remaining--, e3 === w ? T(o3, r3) : this._result[t3] = r3), 0 === this._remaining && E(o3, this._result);
          }, P.prototype._willSettleAt = function(e3, t3) {
            var r3 = this;
            C(e3, void 0, function(e4) {
              return r3._settledAt(x, t3, e4);
            }, function(e4) {
              return r3._settledAt(w, t3, e4);
            });
          };
          var F = P;
          function P(e3, t3) {
            this._instanceConstructor = e3, this.promise = new e3(j), this.promise[b] || A(this.promise), r2(t3) ? (this.length = t3.length, this._remaining = t3.length, this._result = new Array(this.length), 0 !== this.length && (this.length = this.length || 0, this._enumerate(t3), 0 !== this._remaining) || E(this.promise, this._result)) : T(this.promise, new Error("Array Methods must be provided an Array"));
          }
          D.prototype.catch = function(e3) {
            return this.then(null, e3);
          }, D.prototype.finally = function(t3) {
            var r3 = this.constructor;
            return l(t3) ? this.then(function(e3) {
              return r3.resolve(t3()).then(function() {
                return e3;
              });
            }, function(e3) {
              return r3.resolve(t3()).then(function() {
                throw e3;
              });
            }) : this.then(t3, t3);
          };
          var R = D;
          function D(e3) {
            if (this[b] = k++, this._result = this._state = void 0, this._subscribers = [], j !== e3) {
              if ("function" != typeof e3)
                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
              if (!(this instanceof D))
                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
              var t3 = this;
              try {
                e3(function(e4) {
                  M(t3, e4);
                }, function(e4) {
                  T(t3, e4);
                });
              } catch (e4) {
                T(t3, e4);
              }
            }
          }
          return R.prototype.then = g, R.all = function(e3) {
            return new F(this, e3).promise;
          }, R.race = function(n2) {
            var s3 = this;
            return r2(n2) ? new s3(function(e3, t3) {
              for (var r3 = n2.length, o3 = 0; o3 < r3; o3++)
                s3.resolve(n2[o3]).then(e3, t3);
            }) : new s3(function(e3, t3) {
              return t3(new TypeError("You must pass an array to race."));
            });
          }, R.resolve = v, R.reject = function(e3) {
            var t3 = new this(j);
            return T(t3, e3), t3;
          }, R._setScheduler = function(e3) {
            n = e3;
          }, R._setAsap = function(e3) {
            i2 = e3;
          }, R._asap = i2, R.polyfill = function() {
            var e3 = void 0;
            if (void 0 !== G)
              e3 = G;
            else if ("undefined" != typeof self)
              e3 = self;
            else
              try {
                e3 = Function("return this")();
              } catch (e4) {
                throw new Error("polyfill failed because global object is unavailable in this environment");
              }
            var t3 = e3.Promise;
            if (t3) {
              var r3 = null;
              try {
                r3 = Object.prototype.toString.call(t3.resolve());
              } catch (e4) {
              }
              if ("[object Promise]" === r3 && !t3.cast)
                return;
            }
            e3.Promise = R;
          }, R.Promise = R;
        }, "object" == typeof o && void 0 !== r ? r.exports = t() : e.ES6Promise = t();
      }.call(this, V("_process"), "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, { _process: 243 }], 235: [function(e, t, r) {
      var o, n;
      o = this, n = function(e2, t2) {
        var r2 = 5e3, o2 = "callback";
        function d(t3) {
          try {
            delete window[t3];
          } catch (e3) {
            window[t3] = void 0;
          }
        }
        function f(e3) {
          e3 = document.getElementById(e3);
          e3 && document.getElementsByTagName("head")[0].removeChild(e3);
        }
        t2.exports = function(s2) {
          var i2 = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], a = s2, l = i2.timeout || r2, u = i2.jsonpCallback || o2, c = void 0;
          return new Promise(function(t3, e3) {
            var r3 = i2.jsonpCallbackFunction || "jsonp_" + Date.now() + "_" + Math.ceil(1e5 * Math.random()), o3 = u + "_" + r3, n2 = (window[r3] = function(e4) {
              t3({ ok: true, json: function() {
                return Promise.resolve(e4);
              } }), c && clearTimeout(c), f(o3), d(r3);
            }, a += -1 === a.indexOf("?") ? "?" : "&", document.createElement("script"));
            n2.setAttribute("src", "" + a + u + "=" + r3), i2.charset && n2.setAttribute("charset", i2.charset), n2.id = o3, document.getElementsByTagName("head")[0].appendChild(n2), c = setTimeout(function() {
              e3(new Error("JSONP request to " + s2 + " timed out")), d(r3), f(o3), window[r3] = function() {
                d(r3);
              };
            }, l), n2.onerror = function() {
              e3(new Error("JSONP request to " + s2 + " failed")), d(r3), f(o3), c && clearTimeout(c);
            };
          });
        };
      }, void 0 !== r && void 0 !== t ? n(0, t) : (n(n = { exports: {} }, n), o.fetchJsonp = n.exports);
    }, {}], 236: [function(e, t, r) {
      var o = function(a) {
        var l, u, c, d, f, h, t2, p, m, o2, e2;
        if (!(void 0 === a || "undefined" != typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent)))
          return e2 = a.document, l = function() {
            return a.URL || a.webkitURL || a;
          }, u = e2.createElementNS("http://www.w3.org/1999/xhtml", "a"), c = "download" in u, d = /constructor/i.test(a.HTMLElement) || a.safari, f = /CriOS\/[\d]+/.test(navigator.userAgent), h = function(e3) {
            (a.setImmediate || a.setTimeout)(function() {
              throw e3;
            }, 0);
          }, t2 = 4e4, p = function(e3) {
            setTimeout(function() {
              "string" == typeof e3 ? l().revokeObjectURL(e3) : e3.remove();
            }, t2);
          }, m = function(e3) {
            return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e3.type) ? new Blob([String.fromCharCode(65279), e3], { type: e3.type }) : e3;
          }, e2 = (o2 = function(e3, r2, t3) {
            t3 || (e3 = m(e3));
            var o3, n, s2 = this, t3 = "application/octet-stream" === e3.type, i2 = function() {
              for (var e4 = s2, t4 = "writestart progress write writeend".split(" "), r3 = void 0, o4 = (t4 = [].concat(t4)).length; o4--; ) {
                var n2 = e4["on" + t4[o4]];
                if ("function" == typeof n2)
                  try {
                    n2.call(e4, r3 || e4);
                  } catch (e5) {
                    h(e5);
                  }
              }
            };
            s2.readyState = s2.INIT, c ? (o3 = l().createObjectURL(e3), setTimeout(function() {
              var e4, t4;
              u.href = o3, u.download = r2, e4 = u, t4 = new MouseEvent("click"), e4.dispatchEvent(t4), i2(), p(o3), s2.readyState = s2.DONE;
            })) : (f || t3 && d) && a.FileReader ? ((n = new FileReader()).onloadend = function() {
              var e4 = f ? n.result : n.result.replace(/^data:[^;]*;/, "data:attachment/file;");
              a.open(e4, "_blank") || (a.location.href = e4), e4 = void 0, s2.readyState = s2.DONE, i2();
            }, n.readAsDataURL(e3), s2.readyState = s2.INIT) : (o3 = o3 || l().createObjectURL(e3), !t3 && a.open(o3, "_blank") || (a.location.href = o3), s2.readyState = s2.DONE, i2(), p(o3));
          }).prototype, "undefined" != typeof navigator && navigator.msSaveOrOpenBlob ? function(e3, t3, r2) {
            return t3 = t3 || e3.name || "download", r2 || (e3 = m(e3)), navigator.msSaveOrOpenBlob(e3, t3);
          } : (e2.abort = function() {
          }, e2.readyState = e2.INIT = 0, e2.WRITING = 1, e2.DONE = 2, e2.error = e2.onwritestart = e2.onprogress = e2.onwrite = e2.onabort = e2.onerror = e2.onwriteend = null, function(e3, t3, r2) {
            return new o2(e3, t3 || e3.name || "download", r2);
          });
      }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content);
      void 0 !== t && t.exports ? t.exports.saveAs = o : null != s;
    }, {}], 237: [function(e, t, r) {
      var o, n = Object.defineProperty, s2 = (n(r, "__esModule", { value: true }), r), i2 = { GIFEncoder: () => f, applyPalette: () => function(e2, t2, r2 = "rgb565") {
        if (!e2 || !e2.buffer)
          throw new Error("quantize() expected RGBA Uint8Array data");
        if (!(e2 instanceof Uint8Array || e2 instanceof Uint8ClampedArray))
          throw new Error("quantize() expected RGBA Uint8Array data");
        if (256 < t2.length)
          throw new Error("applyPalette() only works with 256 colors or less");
        const o2 = new Uint32Array(e2.buffer), n2 = o2.length, s3 = "rgb444" === r2 ? 4096 : 65536, i3 = new Uint8Array(n2), a2 = new Array(s3);
        if ("rgba4444" === r2)
          for (let e3 = 0; e3 < n2; e3++) {
            var l2 = o2[e3], u2 = l2 >> 24 & 255, c2 = l2 >> 16 & 255, d2 = l2 >> 8 & 255, l2 = 255 & l2, f2 = k(l2, d2, c2, u2), f2 = f2 in a2 ? a2[f2] : a2[f2] = function(t3, r3, o3, n3, s4) {
              let i4 = 0, a3 = 1e100;
              for (let e4 = 0; e4 < s4.length; e4++) {
                var l3, u3 = s4[e4], c3 = v(u3[3] - n3);
                c3 > a3 || (l3 = u3[0], (c3 += v(l3 - t3)) > a3 || (l3 = u3[1], (c3 += v(l3 - r3)) > a3 || (l3 = u3[2], (c3 += v(l3 - o3)) > a3 || (a3 = c3, i4 = e4))));
              }
              return i4;
            }(l2, d2, c2, u2, t2);
            i3[e3] = f2;
          }
        else {
          const g = "rgb444" === r2 ? A : L;
          for (let e3 = 0; e3 < n2; e3++) {
            var h2 = o2[e3], p = h2 >> 16 & 255, m = h2 >> 8 & 255, h2 = 255 & h2, y = g(h2, m, p), y = y in a2 ? a2[y] : a2[y] = function(t3, r3, o3, n3) {
              let s4 = 0, i4 = 1e100;
              for (let e4 = 0; e4 < n3.length; e4++) {
                var a3, l3 = n3[e4], u3 = v(l3[0] - t3);
                u3 > i4 || (a3 = l3[1], (u3 += v(a3 - r3)) > i4 || (a3 = l3[2], (u3 += v(a3 - o3)) > i4 || (i4 = u3, s4 = e4)));
              }
              return s4;
            }(h2, m, p, t2);
            i3[e3] = y;
          }
        }
        return i3;
      }, default: () => h, nearestColor: () => function(e2, t2, r2 = u) {
        return e2[l(e2, t2, r2)];
      }, nearestColorIndex: () => l, nearestColorIndexWithDistance: () => d, prequantize: () => function(e2, { roundRGB: r2 = 5, roundAlpha: o2 = 10, oneBitAlpha: n2 = null } = {}) {
        const s3 = new Uint32Array(e2.buffer);
        for (let t2 = 0; t2 < s3.length; t2++) {
          var i3 = s3[t2];
          let e3 = i3 >> 24 & 255;
          var a2, l2 = i3 >> 16 & 255, u2 = i3 >> 8 & 255, i3 = 255 & i3;
          e3 = c(e3, o2), n2 && (a2 = "number" == typeof n2 ? n2 : 127, e3 = e3 <= a2 ? 0 : 255), i3 = c(i3, r2), u2 = c(u2, r2), l2 = c(l2, r2), s3[t2] = e3 << 24 | l2 << 16 | u2 << 8 | i3 << 0;
        }
      }, quantize: () => function(e2, t2, r2 = {}) {
        var { format: o2 = "rgb565", clearAlpha: n2 = true, clearAlphaColor: s3 = 0, clearAlphaThreshold: i3 = 0, oneBitAlpha: a2 = false } = r2;
        if (!e2 || !e2.buffer)
          throw new Error("quantize() expected RGBA Uint8Array data");
        if (!(e2 instanceof Uint8Array || e2 instanceof Uint8ClampedArray))
          throw new Error("quantize() expected RGBA Uint8Array data");
        e2 = new Uint32Array(e2.buffer);
        let l2 = false !== r2.useSqrt;
        const u2 = "rgba4444" === o2, c2 = function(r3, e3) {
          const t3 = "rgb444" === e3 ? 4096 : 65536, o3 = new Array(t3), n3 = r3.length;
          if ("rgba4444" === e3)
            for (let t4 = 0; t4 < n3; ++t4) {
              var s4 = r3[t4], i4 = s4 >> 24 & 255, a3 = s4 >> 16 & 255, l3 = s4 >> 8 & 255, s4 = 255 & s4, u3 = k(s4, l3, a3, i4);
              let e4 = u3 in o3 ? o3[u3] : o3[u3] = I();
              e4.rc += s4, e4.gc += l3, e4.bc += a3, e4.ac += i4, e4.cnt++;
            }
          else if ("rgb444" === e3)
            for (let t4 = 0; t4 < n3; ++t4) {
              var c3 = r3[t4], d3 = c3 >> 16 & 255, f3 = c3 >> 8 & 255, c3 = 255 & c3, h3 = A(c3, f3, d3);
              let e4 = h3 in o3 ? o3[h3] : o3[h3] = I();
              e4.rc += c3, e4.gc += f3, e4.bc += d3, e4.cnt++;
            }
          else
            for (let t4 = 0; t4 < n3; ++t4) {
              var p2 = r3[t4], m2 = p2 >> 16 & 255, y2 = p2 >> 8 & 255, p2 = 255 & p2, g2 = L(p2, y2, m2);
              let e4 = g2 in o3 ? o3[g2] : o3[g2] = I();
              e4.rc += p2, e4.gc += y2, e4.bc += m2, e4.cnt++;
            }
          return o3;
        }(e2, o2), d2 = c2.length, f2 = d2 - 1, h2 = new Uint32Array(d2 + 1);
        for (var p = 0, m = 0; m < d2; ++m) {
          const O2 = c2[m];
          null != O2 && (E2 = 1 / O2.cnt, u2 && (O2.ac *= E2), O2.rc *= E2, O2.gc *= E2, O2.bc *= E2, c2[p++] = O2);
        }
        R(t2) / p < 0.022 && (l2 = false);
        for (var y, g, v2, m = 0; m < p - 1; ++m)
          c2[m].fw = m + 1, c2[m + 1].bk = m, l2 && (c2[m].cnt = Math.sqrt(c2[m].cnt));
        l2 && (c2[m].cnt = Math.sqrt(c2[m].cnt));
        for (m = 0; m < p; ++m) {
          D(c2, m, false);
          var b = c2[m].err;
          for (g = ++h2[0]; 1 < g && (v2 = g >> 1, !(c2[y = h2[v2]].err <= b)); g = v2)
            h2[g] = y;
          h2[g] = m;
        }
        var j, _ = p - t2;
        for (m = 0; m < _; ) {
          for (; ; ) {
            var x = h2[1];
            if ((j = c2[x]).tm >= j.mtm && c2[j.nn].mtm <= j.tm)
              break;
            j.mtm == f2 ? x = h2[1] = h2[h2[0]--] : (D(c2, x, false), j.tm = m);
            b = c2[x].err;
            for (g = 1; (v2 = g + g) <= h2[0] && (v2 < h2[0] && c2[h2[v2]].err > c2[h2[v2 + 1]].err && v2++, !(b <= c2[y = h2[v2]].err)); g = v2)
              h2[g] = y;
            h2[g] = x;
          }
          var w = c2[j.nn], S2 = j.cnt, M2 = w.cnt, E2 = 1 / (S2 + M2);
          u2 && (j.ac = E2 * (S2 * j.ac + M2 * w.ac)), j.rc = E2 * (S2 * j.rc + M2 * w.rc), j.gc = E2 * (S2 * j.gc + M2 * w.gc), j.bc = E2 * (S2 * j.bc + M2 * w.bc), j.cnt += w.cnt, j.mtm = ++m, c2[w.bk].fw = w.fw, c2[w.fw].bk = w.bk, w.mtm = f2;
        }
        let T2 = [];
        for (m = 0; ; 0) {
          let e3 = P(Math.round(c2[m].rc), 0, 255), t3 = P(Math.round(c2[m].gc), 0, 255), r3 = P(Math.round(c2[m].bc), 0, 255), o3 = 255;
          u2 && (o3 = P(Math.round(c2[m].ac), 0, 255), a2 && (C2 = "number" == typeof a2 ? a2 : 127, o3 = o3 <= C2 ? 0 : 255), n2 && o3 <= i3 && (e3 = t3 = r3 = s3, o3 = 0));
          var C2 = u2 ? [e3, t3, r3, o3] : [e3, t3, r3];
          if (function(t4, r4) {
            for (let e4 = 0; e4 < t4.length; e4++) {
              var o4 = t4[e4], n3 = o4[0] === r4[0] && o4[1] === r4[1] && o4[2] === r4[2], o4 = !(4 <= o4.length && 4 <= r4.length) || o4[3] === r4[3];
              if (n3 && o4)
                return true;
            }
            return false;
          }(T2, C2) || T2.push(C2), 0 == (m = c2[m].fw))
            break;
        }
        return T2;
      }, snapColorsToPalette: () => function(r2, o2, e2 = 5) {
        if (r2.length && o2.length) {
          var n2 = r2.map((e3) => e3.slice(0, 3)), s3 = e2 * e2, i3 = r2[0].length;
          for (let t2 = 0; t2 < o2.length; t2++) {
            let e3 = o2[t2];
            e3 = e3.length < i3 ? [e3[0], e3[1], e3[2], 255] : e3.length > i3 ? e3.slice(0, 3) : e3.slice();
            var a2 = d(n2, e3.slice(0, 3), u), l2 = a2[0], a2 = a2[1];
            0 < a2 && a2 <= s3 && (r2[l2] = e3);
          }
        }
      } };
      for (o in i2)
        n(s2, o, { get: i2[o], enumerable: true });
      var a = { signature: "GIF", version: "89a", trailer: 59, extensionIntroducer: 33, applicationExtensionLabel: 255, graphicControlExtensionLabel: 249, imageSeparator: 44, signatureSize: 3, versionSize: 3, globalColorTableFlagMask: 128, colorResolutionMask: 112, sortFlagMask: 8, globalColorTableSizeMask: 7, applicationIdentifierSize: 8, applicationAuthCodeSize: 3, disposalMethodMask: 28, userInputFlagMask: 2, transparentColorFlagMask: 1, localColorTableFlagMask: 128, interlaceFlagMask: 64, idSortFlagMask: 32, localColorTableSizeMask: 7 };
      function T(e2 = 256) {
        let n2 = 0, s3 = new Uint8Array(e2);
        return { get buffer() {
          return s3.buffer;
        }, reset() {
          n2 = 0;
        }, bytesView() {
          return s3.subarray(0, n2);
        }, bytes() {
          return s3.slice(0, n2);
        }, writeByte(e3) {
          i3(n2 + 1), s3[n2] = e3, n2++;
        }, writeBytes(t2, r2 = 0, o2 = t2.length) {
          i3(n2 + o2);
          for (let e3 = 0; e3 < o2; e3++)
            s3[n2++] = t2[e3 + r2];
        }, writeBytesView(e3, t2 = 0, r2 = e3.byteLength) {
          i3(n2 + r2), s3.set(e3.subarray(t2, t2 + r2), n2), n2 += r2;
        } };
        function i3(e3) {
          var t2 = s3.length;
          if (!(e3 <= t2)) {
            e3 = Math.max(e3, t2 * (t2 < 1048576 ? 2 : 1.125) >>> 0), 0 != t2 && (e3 = Math.max(e3, 256));
            const r2 = s3;
            s3 = new Uint8Array(e3), 0 < n2 && s3.set(r2.subarray(0, n2), 0);
          }
        }
      }
      var C = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535];
      var S = function(e2, t2, r2, o2, n2 = T(512), s3 = new Uint8Array(256), i3 = new Int32Array(5003), a2 = new Int32Array(5003)) {
        var l2 = i3.length, o2 = Math.max(2, o2);
        s3.fill(0), a2.fill(0), i3.fill(-1);
        let u2 = 0, c2 = 0;
        var d2 = o2 + 1;
        const f2 = d2;
        let h2 = false, p = f2, m = (1 << p) - 1;
        var y = 1 << d2 - 1;
        const g = 1 + y;
        let v2 = 2 + y, b = 0, j = r2[0], _ = 0;
        for (let e3 = l2; e3 < 65536; e3 *= 2)
          ++_;
        _ = 8 - _, n2.writeByte(o2), E2(y);
        var x = r2.length;
        for (let t3 = 1; t3 < x; t3++)
          e: {
            var w = r2[t3], S2 = (w << 12) + j;
            let e3 = w << _ ^ j;
            if (i3[e3] === S2)
              j = a2[e3];
            else {
              for (var M2 = 0 === e3 ? 1 : l2 - e3; 0 <= i3[e3]; )
                if ((e3 -= M2) < 0 && (e3 += l2), i3[e3] === S2) {
                  j = a2[e3];
                  break e;
                }
              E2(j), j = w, v2 < 4096 ? (a2[e3] = v2++, i3[e3] = S2) : (i3.fill(-1), v2 = 2 + y, h2 = true, E2(y));
            }
          }
        return E2(j), E2(g), n2.writeByte(0), n2.bytesView();
        function E2(e3) {
          for (u2 &= C[c2], 0 < c2 ? u2 |= e3 << c2 : u2 = e3, c2 += p; 8 <= c2; )
            s3[b++] = 255 & u2, 254 <= b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0), u2 >>= 8, c2 -= 8;
          if ((v2 > m || h2) && (h2 ? (p = f2, m = (1 << p) - 1, h2 = false) : (++p, m = 12 === p ? 1 << p : (1 << p) - 1)), e3 == g) {
            for (; 0 < c2; )
              s3[b++] = 255 & u2, 254 <= b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0), u2 >>= 8, c2 -= 8;
            0 < b && (n2.writeByte(b), n2.writeBytesView(s3, 0, b), b = 0);
          }
        }
      };
      function L(e2, t2, r2) {
        return e2 << 8 & 63488 | t2 << 2 & 992 | r2 >> 3;
      }
      function k(e2, t2, r2, o2) {
        return e2 >> 4 | 240 & t2 | (240 & r2) << 4 | (240 & o2) << 8;
      }
      function A(e2, t2, r2) {
        return e2 >> 4 << 8 | 240 & t2 | r2 >> 4;
      }
      function P(e2, t2, r2) {
        return e2 < t2 ? t2 : r2 < e2 ? r2 : e2;
      }
      function R(e2) {
        return e2 * e2;
      }
      function D(e2, t2, r2) {
        var o2 = 0, n2 = 1e100;
        const s3 = e2[t2];
        for (var i3 = s3.cnt, a2 = s3.ac, l2 = s3.rc, u2 = s3.gc, c2 = s3.bc, d2 = s3.fw; 0 != d2; d2 = e2[d2].fw) {
          var f2, h2 = e2[d2], p = h2.cnt, p = i3 * p / (i3 + p);
          n2 <= p || (f2 = 0, r2 && n2 <= (f2 += p * R(h2.ac - a2)) || n2 <= (f2 += p * R(h2.rc - l2)) || n2 <= (f2 += p * R(h2.gc - u2)) || n2 <= (f2 += p * R(h2.bc - c2)) || (n2 = f2, o2 = d2));
        }
        s3.err = n2, s3.nn = o2;
      }
      function I() {
        return { ac: 0, rc: 0, gc: 0, bc: 0, cnt: 0, nn: 0, fw: 0, bk: 0, tm: 0, mtm: 0, err: 0 };
      }
      function u(e2, t2) {
        for (var r2 = 0, o2 = 0; o2 < e2.length; o2++) {
          var n2 = e2[o2] - t2[o2];
          r2 += n2 * n2;
        }
        return r2;
      }
      function c(e2, t2) {
        return 1 < t2 ? Math.round(e2 / t2) * t2 : e2;
      }
      function v(e2) {
        return e2 * e2;
      }
      function l(t2, r2, o2 = u) {
        let n2 = 1 / 0, s3 = -1;
        for (let e2 = 0; e2 < t2.length; e2++) {
          var i3 = o2(r2, t2[e2]);
          i3 < n2 && (n2 = i3, s3 = e2);
        }
        return s3;
      }
      function d(t2, r2, o2 = u) {
        let n2 = 1 / 0, s3 = -1;
        for (let e2 = 0; e2 < t2.length; e2++) {
          var i3 = o2(r2, t2[e2]);
          i3 < n2 && (n2 = i3, s3 = e2);
        }
        return [s3, n2];
      }
      function f(e2 = {}) {
        const { initialCapacity: t2 = 4096, auto: g = true } = e2, v2 = T(t2);
        const b = new Uint8Array(256), j = new Int32Array(5003), _ = new Int32Array(5003);
        let x = false;
        return { reset() {
          v2.reset(), x = false;
        }, finish() {
          v2.writeByte(a.trailer);
        }, bytes() {
          return v2.bytes();
        }, bytesView() {
          return v2.bytesView();
        }, get buffer() {
          return v2.buffer;
        }, get stream() {
          return v2;
        }, writeHeader: w, writeFrame(e3, t3, r2, o2 = {}) {
          var { transparent: n2 = false, transparentIndex: s3 = 0, delay: i3 = 0, palette: a2 = null, repeat: l2 = 0, colorDepth: u2 = 8, dispose: c2 = -1 } = o2;
          let d2 = false;
          if (g ? x || (d2 = true, w(), x = true) : d2 = Boolean(o2.first), t3 = Math.max(0, Math.floor(t3)), r2 = Math.max(0, Math.floor(r2)), d2) {
            if (!a2)
              throw new Error("First frame must include a { palette } option");
            var [o2, f2, h2, p, m = 8] = [v2, t3, r2, a2, u2];
            p = U(p.length) - 1, m = 128 | m - 1 << 4 | p, E(o2, f2), E(o2, h2), o2.writeBytes([m, 0, 0]), M(v2, a2), 0 <= l2 && (p = v2, f2 = l2, p.writeByte(33), p.writeByte(255), p.writeByte(11), O(p, "NETSCAPE2.0"), p.writeByte(3), p.writeByte(1), E(p, f2), p.writeByte(0));
          }
          var y, h2 = Math.round(i3 / 10), o2 = v2, m = c2, l2 = h2, f2 = n2, p = s3, i3 = (o2.writeByte(33), o2.writeByte(249), o2.writeByte(4), p < 0 && (p = 0, f2 = false), f2 = f2 ? (y = 1, 2) : y = 0, 0 <= m && (f2 = 7 & m), f2 <<= 2, o2.writeByte(0 | f2 | y), E(o2, l2), o2.writeByte(p || 0), o2.writeByte(0), Boolean(a2) && !d2);
          c2 = v2, n2 = t3, s3 = r2, y = i3 ? a2 : null, c2.writeByte(44), E(c2, 0), E(c2, 0), E(c2, n2), E(c2, s3), y ? (n2 = U(y.length) - 1, c2.writeByte(128 | n2)) : c2.writeByte(0), i3 && M(v2, a2), [l2, o2, s3, n2, c2 = 8, i3, a2, e3] = [v2, e3, t3, r2, u2, b, j, _], S(s3, n2, o2, c2, l2, i3, a2, e3);
        } };
        function w() {
          O(v2, "GIF89a");
        }
      }
      function M(r2, o2) {
        var e2 = 1 << U(o2.length);
        for (let t2 = 0; t2 < e2; t2++) {
          let e3 = [0, 0, 0];
          t2 < o2.length && (e3 = o2[t2]), r2.writeByte(e3[0]), r2.writeByte(e3[1]), r2.writeByte(e3[2]);
        }
      }
      function E(e2, t2) {
        e2.writeByte(255 & t2), e2.writeByte(t2 >> 8 & 255);
      }
      function O(e2, t2) {
        for (var r2 = 0; r2 < t2.length; r2++)
          e2.writeByte(t2.charCodeAt(r2));
      }
      function U(e2) {
        return Math.max(Math.ceil(Math.log2(e2)), 1);
      }
      var h = f;
    }, {}], 238: [function(e, t, r) {
      r.read = function(e2, t2, r2, o, n) {
        var s2, i2, a = 8 * n - o - 1, l = (1 << a) - 1, u = l >> 1, c = -7, d = r2 ? n - 1 : 0, f = r2 ? -1 : 1, n = e2[t2 + d];
        for (d += f, s2 = n & (1 << -c) - 1, n >>= -c, c += a; 0 < c; s2 = 256 * s2 + e2[t2 + d], d += f, c -= 8)
          ;
        for (i2 = s2 & (1 << -c) - 1, s2 >>= -c, c += o; 0 < c; i2 = 256 * i2 + e2[t2 + d], d += f, c -= 8)
          ;
        if (0 === s2)
          s2 = 1 - u;
        else {
          if (s2 === l)
            return i2 ? NaN : 1 / 0 * (n ? -1 : 1);
          i2 += Math.pow(2, o), s2 -= u;
        }
        return (n ? -1 : 1) * i2 * Math.pow(2, s2 - o);
      }, r.write = function(e2, t2, r2, o, n, s2) {
        var i2, a, l = 8 * s2 - n - 1, u = (1 << l) - 1, c = u >> 1, d = 23 === n ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = o ? 0 : s2 - 1, h = o ? 1 : -1, s2 = t2 < 0 || 0 === t2 && 1 / t2 < 0 ? 1 : 0;
        for (t2 = Math.abs(t2), isNaN(t2) || t2 === 1 / 0 ? (a = isNaN(t2) ? 1 : 0, i2 = u) : (i2 = Math.floor(Math.log(t2) / Math.LN2), t2 * (o = Math.pow(2, -i2)) < 1 && (i2--, o *= 2), 2 <= (t2 += 1 <= i2 + c ? d / o : d * Math.pow(2, 1 - c)) * o && (i2++, o /= 2), u <= i2 + c ? (a = 0, i2 = u) : 1 <= i2 + c ? (a = (t2 * o - 1) * Math.pow(2, n), i2 += c) : (a = t2 * Math.pow(2, c - 1) * Math.pow(2, n), i2 = 0)); 8 <= n; e2[r2 + f] = 255 & a, f += h, a /= 256, n -= 8)
          ;
        for (i2 = i2 << n | a, l += n; 0 < l; e2[r2 + f] = 255 & i2, f += h, i2 /= 256, l -= 8)
          ;
        e2[r2 + f - h] |= 128 * s2;
      };
    }, {}], 239: [function(o, e, c) {
      var t;
      function y(e2, t2) {
        return e2.b === t2.b && e2.a === t2.a;
      }
      function g(e2, t2) {
        return e2.b < t2.b || e2.b === t2.b && e2.a <= t2.a;
      }
      function v(e2, t2, r2) {
        var o2 = t2.b - e2.b, n2 = r2.b - t2.b;
        return 0 < o2 + n2 ? o2 < n2 ? t2.a - e2.a + o2 / (o2 + n2) * (e2.a - r2.a) : t2.a - r2.a + n2 / (o2 + n2) * (r2.a - e2.a) : 0;
      }
      function b(e2, t2, r2) {
        var o2 = t2.b - e2.b, n2 = r2.b - t2.b;
        return 0 < o2 + n2 ? (t2.a - r2.a) * o2 + (t2.a - e2.a) * n2 : 0;
      }
      function j(e2, t2) {
        return e2.a < t2.a || e2.a === t2.a && e2.b <= t2.b;
      }
      function V(e2, t2, r2) {
        var o2 = t2.a - e2.a, n2 = r2.a - t2.a;
        return 0 < o2 + n2 ? o2 < n2 ? t2.b - e2.b + o2 / (o2 + n2) * (e2.b - r2.b) : t2.b - r2.b + n2 / (o2 + n2) * (r2.b - e2.b) : 0;
      }
      function z(e2, t2, r2) {
        var o2 = t2.a - e2.a, n2 = r2.a - t2.a;
        return 0 < o2 + n2 ? (t2.b - r2.b) * o2 + (t2.b - e2.b) * n2 : 0;
      }
      function _(e2, t2, r2, o2) {
        return (e2 = e2 < 0 ? 0 : e2) <= (r2 = r2 < 0 ? 0 : r2) ? 0 === r2 ? (t2 + o2) / 2 : t2 + e2 / (e2 + r2) * (o2 - t2) : o2 + r2 / (e2 + r2) * (t2 - o2);
      }
      function d(e2) {
        var t2 = s2(e2.b);
        return n(t2, e2.c), n(t2.b, e2.c), i2(t2, e2.a), t2;
      }
      function x(e2, t2) {
        var r2 = false, o2 = false;
        e2 !== t2 && (t2.a !== e2.a && (o2 = true, E(t2.a, e2.a)), t2.d !== e2.d && (r2 = true, a(t2.d, e2.d)), M(t2, e2), o2 || (n(t2, e2.a), e2.a.c = e2), r2 || (i2(t2, e2.d), e2.d.a = e2));
      }
      function m(e2) {
        var t2 = e2.b, r2 = false;
        e2.d !== e2.b.d && (r2 = true, a(e2.d, e2.b.d)), e2.c === e2 ? E(e2.a, null) : (e2.b.d.a = e2.b.e, e2.a.c = e2.c, M(e2, e2.b.e), r2 || i2(e2, e2.d)), t2.c === t2 ? (E(t2.a, null), a(t2.d, null)) : (e2.d.a = t2.b.e, t2.a.c = t2.c, M(t2, t2.b.e)), H(e2);
      }
      function w(e2) {
        var t2 = s2(e2), r2 = t2.b;
        return M(t2, e2.e), t2.a = e2.b.a, n(r2, t2.a), t2.d = r2.d = e2.d, t2 = t2.b, M(e2.b, e2.b.b.e), M(e2.b, t2), e2.b.a = t2.a, t2.b.a.c = t2.b, t2.b.d = e2.b.d, t2.f = e2.f, t2.b.f = e2.b.f, t2;
      }
      function S(e2, t2) {
        var r2 = false, o2 = s2(e2), n2 = o2.b;
        return t2.d !== e2.d && (r2 = true, a(t2.d, e2.d)), M(o2, e2.e), M(n2, t2), o2.a = e2.b.a, n2.a = t2.a, o2.d = n2.d = e2.d, e2.d.a = n2, r2 || i2(o2, e2.d), o2;
      }
      function s2(e2) {
        var t2 = new u(), r2 = new u(), o2 = e2.b.h;
        return (((r2.h = o2).b.h = t2).h = e2).b.h = r2, t2.b = r2, ((t2.c = t2).e = r2).b = t2, (r2.c = r2).e = t2;
      }
      function M(e2, t2) {
        var r2 = e2.c, o2 = t2.c;
        r2.b.e = t2, (o2.b.e = e2).c = o2, t2.c = r2;
      }
      function n(e2, t2) {
        var r2 = t2.f, o2 = new I(t2, r2);
        for (r2.e = o2, r2 = (t2.f = o2).c = e2; r2.a = o2, (r2 = r2.c) !== e2; )
          ;
      }
      function i2(e2, t2) {
        var r2 = t2.d, o2 = new te(t2, r2);
        for (r2.b = o2, (t2.d = o2).a = e2, o2.c = t2.c, r2 = e2; r2.d = o2, (r2 = r2.e) !== e2; )
          ;
      }
      function H(e2) {
        var t2 = e2.h;
        e2 = e2.b.h, (t2.b.h = e2).b.h = t2;
      }
      function E(e2, t2) {
        for (var r2 = e2.c, o2 = r2; o2.a = t2, (o2 = o2.c) !== r2; )
          ;
        r2 = e2.f, ((o2 = e2.e).f = r2).e = o2;
      }
      function a(e2, t2) {
        for (var r2 = e2.a, o2 = r2; o2.d = t2, (o2 = o2.e) !== r2; )
          ;
        r2 = e2.d, ((o2 = e2.b).d = r2).b = o2;
      }
      function W(e2) {
        var t2 = 0;
        return Math.abs(e2[1]) > Math.abs(e2[0]) && (t2 = 1), t2 = Math.abs(e2[2]) > Math.abs(e2[t2]) ? 2 : t2;
      }
      function T(e2, t2) {
        e2.f += t2.f, e2.b.f += t2.b.f;
      }
      function f(e2, t2, r2) {
        return e2 = e2.a, t2 = t2.a, r2 = r2.a, t2.b.a === e2 ? r2.b.a === e2 ? g(t2.a, r2.a) ? b(r2.b.a, t2.a, r2.a) <= 0 : 0 <= b(t2.b.a, r2.a, t2.a) : b(r2.b.a, e2, r2.a) <= 0 : r2.b.a === e2 ? 0 <= b(t2.b.a, e2, t2.a) : (t2 = v(t2.b.a, e2, t2.a), (e2 = v(r2.b.a, e2, r2.a)) <= t2);
      }
      function C(e2) {
        e2.a.i = null;
        var t2 = e2.e;
        t2.a.c = t2.c, t2.c.a = t2.a, e2.e = null;
      }
      function O(e2, t2) {
        m(e2.a), e2.c = false, (e2.a = t2).i = e2;
      }
      function L(e2) {
        for (var t2 = e2.a.a; (e2 = G(e2)).a.a === t2; )
          ;
        return e2.c && (O(e2, t2 = S(B(e2).a.b, e2.a.e)), e2 = G(e2)), e2;
      }
      function q(e2, t2, r2) {
        var o2 = new F();
        return o2.a = r2, o2.e = p(e2.f, t2.e, o2), r2.i = o2;
      }
      function X(e2, t2) {
        switch (e2.s) {
          case 100130:
            return 0 != (1 & t2);
          case 100131:
            return 0 !== t2;
          case 100132:
            return 0 < t2;
          case 100133:
            return t2 < 0;
          case 100134:
            return 2 <= t2 || t2 <= -2;
        }
        return false;
      }
      function h(e2) {
        var t2 = e2.a, r2 = t2.d;
        r2.c = e2.d, r2.a = t2, C(e2);
      }
      function k(e2, t2, r2) {
        for (t2 = (e2 = t2).a; e2 !== r2; ) {
          e2.c = false;
          var o2 = B(e2), n2 = o2.a;
          if (n2.a !== t2.a) {
            if (!o2.c) {
              h(e2);
              break;
            }
            O(o2, n2 = S(t2.c.b, n2.b));
          }
          t2.c !== n2 && (x(n2.b.e, n2), x(t2, n2)), h(e2), t2 = o2.a, e2 = o2;
        }
        return t2;
      }
      function A(e2, t2, r2, o2, n2, s3) {
        for (var i3 = true; q(e2, t2, r2.b), (r2 = r2.c) !== o2; )
          ;
        for (null === n2 && (n2 = B(t2).a.b.c); (r2 = (o2 = B(t2)).a.b).a === n2.a; )
          r2.c !== n2 && (x(r2.b.e, r2), x(n2.b.e, r2)), o2.f = t2.f - r2.f, o2.d = X(e2, o2.f), t2.b = true, !i3 && R(e2, t2) && (T(r2, n2), C(t2), m(n2)), i3 = false, t2 = o2, n2 = r2;
        t2.b = true, s3 && K(e2, t2);
      }
      function Y(e2, t2, r2, o2, n2) {
        var s3 = [t2.g[0], t2.g[1], t2.g[2]];
        t2.d = null, t2.d = e2.o && e2.o(s3, r2, o2, e2.c) || null, null === t2.d && (n2 ? e2.n || (l(e2, 100156), e2.n = true) : t2.d = r2[0]);
      }
      function P(e2, t2, r2) {
        var o2 = [null, null, null, null];
        o2[0] = t2.a.d, o2[1] = r2.a.d, Y(e2, t2.a, o2, [0.5, 0.5, 0, 0], false), x(t2, r2);
      }
      function Z(e2, t2, r2, o2, n2) {
        var s3 = Math.abs(t2.b - e2.b) + Math.abs(t2.a - e2.a), i3 = Math.abs(r2.b - e2.b) + Math.abs(r2.a - e2.a), a2 = n2 + 1;
        o2[n2] = 0.5 * i3 / (s3 + i3), o2[a2] = 0.5 * s3 / (s3 + i3), e2.g[0] += o2[n2] * t2.g[0] + o2[a2] * r2.g[0], e2.g[1] += o2[n2] * t2.g[1] + o2[a2] * r2.g[1], e2.g[2] += o2[n2] * t2.g[2] + o2[a2] * r2.g[2];
      }
      function R(e2, t2) {
        var r2 = B(t2), o2 = t2.a, n2 = r2.a;
        if (g(o2.a, n2.a)) {
          if (0 < b(n2.b.a, o2.a, n2.a))
            return;
          if (y(o2.a, n2.a)) {
            if (o2.a !== n2.a) {
              var r2 = e2.e, s3 = o2.a.h;
              if (0 <= s3) {
                var i3 = (r2 = r2.b).d, a2 = r2.e, l2 = r2.c, u2 = l2[s3];
                i3[u2] = i3[r2.a], (l2[i3[u2]] = u2) <= --r2.a && (u2 <= 1 || g(a2[i3[u2 >> 1]], a2[i3[u2]]) ? N : ue)(r2, u2), a2[s3] = null, l2[s3] = r2.b, r2.b = s3;
              } else
                for (r2.c[-(s3 + 1)] = null; 0 < r2.a && null === r2.c[r2.d[r2.a - 1]]; )
                  --r2.a;
              P(e2, n2.b.e, o2);
            }
          } else
            w(n2.b), x(o2, n2.b.e), t2.b = r2.b = true;
        } else {
          if (b(o2.b.a, n2.a, o2.a) < 0)
            return;
          G(t2).b = t2.b = true, w(o2.b), x(n2.b.e, o2);
        }
        return 1;
      }
      function Q(e2, t2) {
        var r2 = B(t2), o2 = t2.a, n2 = r2.a, s3 = o2.a, i3 = n2.a, a2 = o2.b.a, l2 = n2.b.a, u2 = new I();
        if (b(a2, e2.a, s3), b(l2, e2.a, i3), !(s3 === i3 || Math.min(s3.a, a2.a) > Math.max(i3.a, l2.a))) {
          if (g(s3, i3)) {
            if (0 < b(l2, s3, i3))
              return;
          } else if (b(a2, i3, s3) < 0)
            return;
          var c2, d2, f2 = a2, h2 = s3, p2 = l2, m2 = i3;
          if (g(f2, h2) || (c2 = f2, f2 = h2, h2 = c2), g(p2, m2) || (c2 = p2, p2 = m2, m2 = c2), g(f2, p2) || (c2 = f2, f2 = p2, p2 = c2, c2 = h2, h2 = m2, m2 = c2), g(p2, h2) ? g(h2, m2) ? ((c2 = v(f2, p2, h2)) + (d2 = v(p2, h2, m2)) < 0 && (c2 = -c2, d2 = -d2), u2.b = _(c2, p2.b, d2, h2.b)) : ((c2 = b(f2, p2, h2)) + (d2 = -b(f2, m2, h2)) < 0 && (c2 = -c2, d2 = -d2), u2.b = _(c2, p2.b, d2, m2.b)) : u2.b = (p2.b + h2.b) / 2, j(f2, h2) || (c2 = f2, f2 = h2, h2 = c2), j(p2, m2) || (c2 = p2, p2 = m2, m2 = c2), j(f2, p2) || (c2 = f2, f2 = p2, p2 = c2, c2 = h2, h2 = m2, m2 = c2), j(p2, h2) ? j(h2, m2) ? ((c2 = V(f2, p2, h2)) + (d2 = V(p2, h2, m2)) < 0 && (c2 = -c2, d2 = -d2), u2.a = _(c2, p2.a, d2, h2.a)) : ((c2 = z(f2, p2, h2)) + (d2 = -z(f2, m2, h2)) < 0 && (c2 = -c2, d2 = -d2), u2.a = _(c2, p2.a, d2, m2.a)) : u2.a = (p2.a + h2.a) / 2, g(u2, e2.a) && (u2.b = e2.a.b, u2.a = e2.a.a), f2 = g(s3, i3) ? s3 : i3, g(f2, u2) && (u2.b = f2.b, u2.a = f2.a), y(u2, s3) || y(u2, i3))
            return R(e2, t2), 0;
          if (!y(a2, e2.a) && 0 <= b(a2, e2.a, u2) || !y(l2, e2.a) && b(l2, e2.a, u2) <= 0) {
            if (l2 === e2.a)
              w(o2.b), x(n2.b, o2), o2 = B(t2 = L(t2)).a, k(e2, B(t2), r2), A(e2, t2, o2.b.e, o2, o2, true);
            else {
              if (a2 !== e2.a)
                return 0 <= b(a2, e2.a, u2) && (G(t2).b = t2.b = true, w(o2.b), o2.a.b = e2.a.b, o2.a.a = e2.a.a), void (b(l2, e2.a, u2) <= 0 && (t2.b = r2.b = true, w(n2.b), n2.a.b = e2.a.b, n2.a.a = e2.a.a));
              for (w(n2.b), x(o2.e, n2.b.e), i3 = (s3 = r2 = t2).a.b.a; (s3 = G(s3)).a.b.a === i3; )
                ;
              s3 = B(t2 = s3).a.b.c, r2.a = n2.b.e, A(e2, t2, (n2 = k(e2, r2, null)).c, o2.b.c, s3, true);
            }
            return 1;
          }
          w(o2.b), w(n2.b), x(n2.b.e, o2), o2.a.b = u2.b, o2.a.a = u2.a, o2.a.h = ne(e2.e, o2.a), o2 = o2.a, n2 = [0, 0, 0, 0], u2 = [s3.d, a2.d, i3.d, l2.d], o2.g[0] = o2.g[1] = o2.g[2] = 0, Z(o2, s3, a2, n2, 0), Z(o2, i3, l2, n2, 2), Y(e2, o2, u2, n2, true), G(t2).b = t2.b = r2.b = true;
        }
      }
      function K(e2, t2) {
        for (var r2 = B(t2); ; ) {
          for (; r2.b; )
            r2 = B(t2 = r2);
          if (!t2.b && (null === (t2 = G(r2 = t2)) || !t2.b))
            break;
          t2.b = false;
          var o2 = t2.a, n2 = r2.a;
          if (s3 = o2.b.a !== n2.b.a)
            e: {
              var s3, i3 = B(s3 = t2), a2 = s3.a, l2 = i3.a, u2 = void 0;
              if (g(a2.b.a, l2.b.a)) {
                if (b(a2.b.a, l2.b.a, a2.a) < 0) {
                  s3 = false;
                  break e;
                }
                G(s3).b = s3.b = true, u2 = w(a2), x(l2.b, u2), u2.d.c = s3.d;
              } else {
                if (0 < b(l2.b.a, a2.b.a, l2.a)) {
                  s3 = false;
                  break e;
                }
                s3.b = i3.b = true, u2 = w(l2), x(a2.e, l2.b), u2.b.d.c = s3.d;
              }
              s3 = true;
            }
          if (s3 && (r2.c ? (C(r2), m(n2), n2 = (r2 = B(t2)).a) : t2.c && (C(t2), m(o2), o2 = (t2 = G(r2)).a)), o2.a !== n2.a) {
            if (o2.b.a === n2.b.a || t2.c || r2.c || o2.b.a !== e2.a && n2.b.a !== e2.a)
              R(e2, t2);
            else if (Q(e2, t2))
              break;
          }
          o2.a === n2.a && o2.b.a === n2.b.a && (T(n2, o2), C(t2), m(o2), t2 = G(r2));
        }
      }
      function J(e2, t2) {
        var r2 = new F(), o2 = d(e2.b);
        o2.a.b = 4e150, o2.a.a = t2, o2.b.a.b = -4e150, o2.b.a.a = t2, e2.a = o2.b.a, r2.a = o2, r2.f = 0, r2.d = false, r2.c = false, r2.h = true, r2.b = false, o2 = p(o2 = e2.f, o2.a, r2), r2.e = o2;
      }
      function $(e2) {
        this.a = new ee(), this.b = e2, this.c = f;
      }
      function p(e2, t2, r2) {
        for (; null !== (t2 = t2.c).b && !e2.c(e2.b, t2.b, r2); )
          ;
        return e2 = new ee(r2, t2.a, t2), t2.a.c = e2, t2.a = e2;
      }
      function ee(e2, t2, r2) {
        this.b = e2 || null, this.a = t2 || this, this.c = r2 || this;
      }
      function r() {
        this.d = 0, this.p = this.b = this.q = null, this.j = [0, 0, 0], this.s = 100130, this.n = false, this.o = this.a = this.e = this.f = null, this.m = false, this.c = this.r = this.i = this.k = this.l = this.h = null;
      }
      function D(e2, t2) {
        if (e2.d !== t2)
          for (; e2.d !== t2; )
            if (e2.d < t2)
              switch (e2.d) {
                case 0:
                  l(e2, 100151), e2.u(null);
                  break;
                case 1:
                  l(e2, 100152), e2.t();
              }
            else
              switch (e2.d) {
                case 2:
                  l(e2, 100154), e2.v();
                  break;
                case 1:
                  l(e2, 100153), e2.w();
              }
      }
      function l(e2, t2) {
        e2.p && e2.p(t2, e2.c);
      }
      function te(e2, t2) {
        this.b = e2 || this, this.d = t2 || this, this.a = null, this.c = false;
      }
      function u() {
        (this.h = this).i = this.d = this.a = this.e = this.c = this.b = null, this.f = 0;
      }
      function re2() {
        this.c = new I(), this.a = new te(), this.b = new u(), this.d = new u(), this.b.b = this.d, this.d.b = this.b;
      }
      function I(e2, t2) {
        this.e = e2 || this, this.f = t2 || this, this.d = this.c = null, this.g = [0, 0, 0], this.h = this.a = this.b = 0;
      }
      function oe() {
        this.c = [], this.d = null, this.a = 0, this.e = false, this.b = new ie();
      }
      function ne(e2, t2) {
        var r2, o2, n2;
        return e2.e ? (2 * (o2 = ++(r2 = e2.b).a) > r2.f && (r2.f *= 2, r2.c = ae(r2.c, r2.f + 1)), 0 === r2.b ? n2 = o2 : (n2 = r2.b, r2.b = r2.c[r2.b]), r2.e[n2] = t2, r2.c[n2] = o2, r2.d[o2] = n2, r2.h && ue(r2, o2), n2) : (r2 = e2.a++, e2.c[r2] = t2, -(r2 + 1));
      }
      function se(e2) {
        if (0 === e2.a)
          return le(e2.b);
        var t2 = e2.c[e2.d[e2.a - 1]];
        if (0 !== e2.b.a && g(U(e2.b), t2))
          return le(e2.b);
        for (; --e2.a, 0 < e2.a && null === e2.c[e2.d[e2.a - 1]]; )
          ;
        return t2;
      }
      function ie() {
        this.d = ae([0], 33), this.e = [null, null], this.c = [0, 0], this.a = 0, this.f = 32, this.b = 0, this.h = false, this.d[1] = 1;
      }
      function ae(e2, t2) {
        for (var r2 = Array(t2), o2 = 0; o2 < e2.length; o2++)
          r2[o2] = e2[o2];
        for (; o2 < t2; o2++)
          r2[o2] = 0;
        return r2;
      }
      function U(e2) {
        return e2.e[e2.d[1]];
      }
      function le(e2) {
        var t2 = e2.d, r2 = e2.e, o2 = e2.c, n2 = t2[1], s3 = r2[n2];
        return 0 < e2.a && (t2[1] = t2[e2.a], o2[t2[1]] = 1, r2[n2] = null, o2[n2] = e2.b, e2.b = n2, 0 < --e2.a && N(e2, 1)), s3;
      }
      function N(e2, t2) {
        for (var r2 = e2.d, o2 = e2.e, n2 = e2.c, s3 = t2, i3 = r2[s3]; ; ) {
          var a2 = s3 << 1, l2 = (a2 < e2.a && g(o2[r2[a2 + 1]], o2[r2[a2]]) && (a2 += 1), r2[a2]);
          if (a2 > e2.a || g(o2[i3], o2[l2])) {
            n2[r2[s3] = i3] = s3;
            break;
          }
          n2[r2[s3] = l2] = s3, s3 = a2;
        }
      }
      function ue(e2, t2) {
        for (var r2 = e2.d, o2 = e2.e, n2 = e2.c, s3 = t2, i3 = r2[s3]; ; ) {
          var a2 = s3 >> 1, l2 = r2[a2];
          if (0 == a2 || g(o2[l2], o2[i3])) {
            n2[r2[s3] = i3] = s3;
            break;
          }
          n2[r2[s3] = l2] = s3, s3 = a2;
        }
      }
      function F() {
        this.e = this.a = null, this.f = 0, this.c = this.b = this.h = this.d = false;
      }
      function B(e2) {
        return e2.e.c.b;
      }
      function G(e2) {
        return e2.e.a.b;
      }
      (t = r.prototype).x = function() {
        D(this, 0);
      }, t.B = function(e2, t2) {
        switch (e2) {
          case 100142:
            return;
          case 100140:
            switch (t2) {
              case 100130:
              case 100131:
              case 100132:
              case 100133:
              case 100134:
                return void (this.s = t2);
            }
            break;
          case 100141:
            return void (this.m = !!t2);
          default:
            return void l(this, 100900);
        }
        l(this, 100901);
      }, t.y = function(e2) {
        switch (e2) {
          case 100142:
            return 0;
          case 100140:
            return this.s;
          case 100141:
            return this.m;
          default:
            l(this, 100900);
        }
        return false;
      }, t.A = function(e2, t2, r2) {
        this.j[0] = e2, this.j[1] = t2, this.j[2] = r2;
      }, t.z = function(e2, t2) {
        var r2 = t2 || null;
        switch (e2) {
          case 100100:
          case 100106:
            this.h = r2;
            break;
          case 100104:
          case 100110:
            this.l = r2;
            break;
          case 100101:
          case 100107:
            this.k = r2;
            break;
          case 100102:
          case 100108:
            this.i = r2;
            break;
          case 100103:
          case 100109:
            this.p = r2;
            break;
          case 100105:
          case 100111:
            this.o = r2;
            break;
          case 100112:
            this.r = r2;
            break;
          default:
            l(this, 100900);
        }
      }, t.C = function(e2, t2) {
        var r2 = false, o2 = [0, 0, 0];
        D(this, 2);
        for (var n2 = 0; n2 < 3; ++n2) {
          var s3 = e2[n2];
          s3 < -1e150 && (s3 = -1e150, r2 = true), 1e150 < s3 && (s3 = 1e150, r2 = true), o2[n2] = s3;
        }
        r2 && l(this, 100155), null === (r2 = this.q) ? x(r2 = d(this.b), r2.b) : (w(r2), r2 = r2.e), r2.a.d = t2, r2.a.g[0] = o2[0], r2.a.g[1] = o2[1], r2.a.g[2] = o2[2], r2.f = 1, r2.b.f = -1, this.q = r2;
      }, t.u = function(e2) {
        D(this, 0), this.d = 1, this.b = new re2(), this.c = e2;
      }, t.t = function() {
        D(this, 1), this.d = 2, this.q = null;
      }, t.v = function() {
        D(this, 2), this.d = 1;
      }, t.w = function() {
        D(this, 1), this.d = 0;
        var e2, t2, r2 = this.j[0], o2 = this.j[1], n2 = this.j[2], s3 = false, i3 = [r2, o2, n2];
        if (0 === r2 && 0 === o2 && 0 === n2) {
          for (var o2 = [-2e150, -2e150, -2e150], a2 = [2e150, 2e150, 2e150], n2 = [], l2 = [], r2 = (s3 = this.b.c).e; r2 !== s3; r2 = r2.e)
            for (var u2 = 0; u2 < 3; ++u2) {
              var c2 = r2.g[u2];
              c2 < a2[u2] && (a2[u2] = c2, l2[u2] = r2), c2 > o2[u2] && (o2[u2] = c2, n2[u2] = r2);
            }
          if (o2[1] - a2[1] > o2[r2 = 0] - a2[0] && (r2 = 1), a2[r2 = o2[2] - a2[2] > o2[r2] - a2[r2] ? 2 : r2] >= o2[r2])
            i3[0] = 0, i3[1] = 0, i3[2] = 1;
          else {
            for (a2 = l2[r2], n2 = n2[r2], l2 = [o2 = 0, 0, 0], a2 = [a2.g[0] - n2.g[0], a2.g[1] - n2.g[1], a2.g[2] - n2.g[2]], u2 = [0, 0, 0], r2 = s3.e; r2 !== s3; r2 = r2.e)
              u2[0] = r2.g[0] - n2.g[0], u2[1] = r2.g[1] - n2.g[1], u2[2] = r2.g[2] - n2.g[2], l2[0] = a2[1] * u2[2] - a2[2] * u2[1], l2[1] = a2[2] * u2[0] - a2[0] * u2[2], l2[2] = a2[0] * u2[1] - a2[1] * u2[0], o2 < (c2 = l2[0] * l2[0] + l2[1] * l2[1] + l2[2] * l2[2]) && (o2 = c2, i3[0] = l2[0], i3[1] = l2[1], i3[2] = l2[2]);
            o2 <= 0 && (i3[0] = i3[1] = i3[2] = 0, i3[W(a2)] = 1);
          }
          s3 = true;
        }
        for (l2 = W(i3), r2 = this.b.c, o2 = (l2 + 1) % 3, n2 = (l2 + 2) % 3, l2 = 0 < i3[l2] ? 1 : -1, i3 = r2.e; i3 !== r2; i3 = i3.e)
          i3.b = i3.g[o2], i3.a = l2 * i3.g[n2];
        if (s3) {
          for (i3 = 0, r2 = (s3 = this.b.a).b; r2 !== s3; r2 = r2.b)
            if (!((o2 = r2.a).f <= 0))
              for (; i3 += (o2.a.b - o2.b.a.b) * (o2.a.a + o2.b.a.a), (o2 = o2.e) !== r2.a; )
                ;
          if (i3 < 0)
            for (s3 = (i3 = this.b.c).e; s3 !== i3; s3 = s3.e)
              s3.a = -s3.a;
        }
        for (this.n = false, i3 = this.b.b, r2 = i3.h; r2 !== i3; r2 = s3)
          s3 = r2.h, o2 = r2.e, y(r2.a, r2.b.a) && r2.e.e !== r2 && (P(this, o2, r2), m(r2), o2 = (r2 = o2).e), o2.e === r2 && (o2 !== r2 && (o2 !== s3 && o2 !== s3.b || (s3 = s3.h), m(o2)), r2 !== s3 && r2 !== s3.b || (s3 = s3.h), m(r2));
        for (this.e = i3 = new oe(), s3 = this.b.c, r2 = s3.e; r2 !== s3; r2 = r2.e)
          r2.h = ne(i3, r2);
        var d2 = i3;
        d2.d = [];
        for (var f2 = 0; f2 < d2.a; f2++)
          d2.d[f2] = f2;
        d2.d.sort(function(r3) {
          return function(e3, t3) {
            return g(r3[e3], r3[t3]) ? 1 : -1;
          };
        }(d2.c)), d2.e = true;
        for (var h2 = d2.b, p2 = h2.a; 1 <= p2; --p2)
          N(h2, p2);
        for (h2.h = true, this.f = new $(this), J(this, -4e150), J(this, 4e150); null !== (i3 = se(this.e)); ) {
          for (; ; ) {
            e:
              if (0 === (r2 = this.e).a)
                s3 = U(r2.b);
              else if (s3 = r2.c[r2.d[r2.a - 1]], 0 !== r2.b.a && g(r2 = U(r2.b), s3)) {
                s3 = r2;
                break e;
              }
            if (null === s3 || !y(s3, i3))
              break;
            s3 = se(this.e), P(this, i3.c, s3.c);
          }
          !function e3(t3, r3) {
            for (var o3, n3 = (t3.a = r3).c; null === n3.i; )
              if ((n3 = n3.c) === r3.c) {
                var n3 = t3, s4 = r3;
                (c3 = new F()).a = s4.c.b;
                for (var i4 = (a3 = n3.f).a; null !== (i4 = i4.a).b && !a3.c(a3.b, c3, i4.b); )
                  ;
                var a3, l3, u3 = B(a3 = i4.b), c3 = a3.a, i4 = u3.a;
                return void (0 === b(c3.b.a, s4, c3.a) ? y((c3 = a3.a).a, s4) || y(c3.b.a, s4) || (w(c3.b), a3.c && (m(c3.c), a3.c = false), x(s4.c, c3), e3(n3, s4)) : (l3 = g(i4.b.a, c3.b.a) ? a3 : u3, u3 = void 0, a3.d || l3.c ? (u3 = l3 === a3 ? S(s4.c.b, c3.e) : S(i4.b.c.b, s4.c).b, l3.c ? O(l3, u3) : ((a3 = q(c3 = n3, a3, u3)).f = G(a3).f + a3.a.f, a3.d = X(c3, a3.f)), e3(n3, s4)) : A(n3, a3, s4.c, s4.c, null, true)));
              }
            a3 = (c3 = B(n3 = L(n3.i))).a, (c3 = k(t3, c3, null)).c === a3 ? (c3 = (a3 = c3).c, i4 = B(n3), u3 = n3.a, l3 = i4.a, o3 = false, u3.b.a !== l3.b.a && Q(t3, n3), y(u3.a, t3.a) && (x(c3.b.e, u3), c3 = B(n3 = L(n3)).a, k(t3, B(n3), i4), o3 = true), y(l3.a, t3.a) && (x(a3, l3.b.e), a3 = k(t3, i4, null), o3 = true), o3 ? A(t3, n3, a3.c, c3, c3, true) : (s4 = g(l3.a, u3.a) ? l3.b.e : u3, A(t3, n3, s4 = S(a3.c.b, s4), s4.c, s4.c, false), s4.b.i.c = true, K(t3, n3))) : A(t3, n3, c3.c, a3, a3, true);
          }(this, i3);
        }
        for (this.a = this.f.a.a.b.a.a, i3 = 0; null !== (s3 = this.f.a.a.b); )
          s3.h || ++i3, C(s3);
        for (this.f = null, (i3 = this.e).b = null, i3.d = null, this.e = i3.c = null, i3 = this.b, r2 = i3.a.b; r2 !== i3.a; r2 = s3)
          s3 = r2.b, (r2 = r2.a).e.e === r2 && (T(r2.c, r2), m(r2));
        if (!this.n) {
          if (i3 = this.b, this.m)
            for (r2 = i3.b.h; r2 !== i3.b; r2 = s3)
              s3 = r2.h, r2.b.d.c !== r2.d.c ? r2.f = r2.d.c ? 1 : -1 : m(r2);
          else
            for (r2 = i3.a.b; r2 !== i3.a; r2 = s3)
              if (s3 = r2.b, r2.c) {
                for (r2 = r2.a; g(r2.b.a, r2.a); r2 = r2.c.b)
                  ;
                for (; g(r2.a, r2.b.a); r2 = r2.e)
                  ;
                for (o2 = r2.c.b, n2 = void 0; r2.e !== o2; )
                  if (g(r2.b.a, o2.a)) {
                    for (; o2.e !== r2 && (g((t2 = o2.e).b.a, t2.a) || b(o2.a, o2.b.a, o2.e.b.a) <= 0); )
                      o2 = (n2 = S(o2.e, o2)).b;
                    o2 = o2.c.b;
                  } else {
                    for (; o2.e !== r2 && (g((e2 = r2.c.b).a, e2.b.a) || 0 <= b(r2.b.a, r2.a, r2.c.b.a)); )
                      r2 = (n2 = S(r2, r2.c.b)).b;
                    r2 = r2.e;
                  }
                for (; o2.e.e !== r2; )
                  n2 = S(o2.e, o2), o2 = n2.b;
              }
          if (this.h || this.i || this.k || this.l)
            if (this.m) {
              for (s3 = (i3 = this.b).a.b; s3 !== i3.a; s3 = s3.b)
                if (s3.c) {
                  for (this.h && this.h(2, this.c), r2 = s3.a; this.k && this.k(r2.a.d, this.c), (r2 = r2.e) !== s3.a; )
                    ;
                  this.i && this.i(this.c);
                }
            } else {
              for (i3 = this.b, s3 = !!this.l, r2 = false, o2 = -1, n2 = i3.a.d; n2 !== i3.a; n2 = n2.d)
                if (n2.c)
                  for (r2 || (this.h && this.h(4, this.c), r2 = true), l2 = n2.a; s3 && (a2 = l2.b.d.c ? 0 : 1, o2 !== a2 && (o2 = a2, this.l && this.l(!!o2, this.c))), this.k && this.k(l2.a.d, this.c), (l2 = l2.e) !== n2.a; )
                    ;
              r2 && this.i && this.i(this.c);
            }
          if (this.r) {
            for (i3 = this.b, r2 = i3.a.b; r2 !== i3.a; r2 = s3)
              if (s3 = r2.b, !r2.c) {
                for (n2 = (o2 = r2.a).e, l2 = void 0; n2 = (l2 = n2).e, (l2.d = null) === l2.b.d && (l2.c === l2 ? E(l2.a, null) : (l2.a.c = l2.c, M(l2, l2.b.e)), (a2 = l2.b).c === a2 ? E(a2.a, null) : (a2.a.c = a2.c, M(a2, a2.b.e)), H(l2)), l2 !== o2; )
                  ;
                o2 = r2.d, ((r2 = r2.b).d = o2).b = r2;
              }
            return this.r(this.b), void (this.c = this.b = null);
          }
        }
        this.b = this.c = null;
      }, this.libtess = { GluTesselator: r, windingRule: { GLU_TESS_WINDING_ODD: 100130, GLU_TESS_WINDING_NONZERO: 100131, GLU_TESS_WINDING_POSITIVE: 100132, GLU_TESS_WINDING_NEGATIVE: 100133, GLU_TESS_WINDING_ABS_GEQ_TWO: 100134 }, primitiveType: { GL_LINE_LOOP: 2, GL_TRIANGLES: 4, GL_TRIANGLE_STRIP: 5, GL_TRIANGLE_FAN: 6 }, errorType: { GLU_TESS_MISSING_BEGIN_POLYGON: 100151, GLU_TESS_MISSING_END_POLYGON: 100153, GLU_TESS_MISSING_BEGIN_CONTOUR: 100152, GLU_TESS_MISSING_END_CONTOUR: 100154, GLU_TESS_COORD_TOO_LARGE: 100155, GLU_TESS_NEED_COMBINE_CALLBACK: 100156 }, gluEnum: { GLU_TESS_MESH: 100112, GLU_TESS_TOLERANCE: 100142, GLU_TESS_WINDING_RULE: 100140, GLU_TESS_BOUNDARY_ONLY: 100141, GLU_INVALID_ENUM: 100900, GLU_INVALID_VALUE: 100901, GLU_TESS_BEGIN: 100100, GLU_TESS_VERTEX: 100101, GLU_TESS_END: 100102, GLU_TESS_ERROR: 100103, GLU_TESS_EDGE_FLAG: 100104, GLU_TESS_COMBINE: 100105, GLU_TESS_BEGIN_DATA: 100106, GLU_TESS_VERTEX_DATA: 100107, GLU_TESS_END_DATA: 100108, GLU_TESS_ERROR_DATA: 100109, GLU_TESS_EDGE_FLAG_DATA: 100110, GLU_TESS_COMBINE_DATA: 100111 } }, r.prototype.gluDeleteTess = r.prototype.x, r.prototype.gluTessProperty = r.prototype.B, r.prototype.gluGetTessProperty = r.prototype.y, r.prototype.gluTessNormal = r.prototype.A, r.prototype.gluTessCallback = r.prototype.z, r.prototype.gluTessVertex = r.prototype.C, r.prototype.gluTessBeginPolygon = r.prototype.u, r.prototype.gluTessBeginContour = r.prototype.t, r.prototype.gluTessEndContour = r.prototype.v, r.prototype.gluTessEndPolygon = r.prototype.w, void 0 !== e && (e.exports = this.libtess);
    }, {}], 240: [function(e, t, r) {
      function o(g, e2, t2, r2) {
        var v = 0, o2 = void 0 === (r2 = void 0 === r2 ? {} : r2).loop ? null : r2.loop, b = void 0 === r2.palette ? null : r2.palette;
        if (e2 <= 0 || t2 <= 0 || 65535 < e2 || 65535 < t2)
          throw new Error("Width/Height invalid.");
        function j(e3) {
          e3 = e3.length;
          if (e3 < 2 || 256 < e3 || e3 & e3 - 1)
            throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
          return e3;
        }
        g[v++] = 71, g[v++] = 73, g[v++] = 70, g[v++] = 56, g[v++] = 57, g[v++] = 97;
        var n = 0, s2 = 0;
        if (null !== b) {
          for (var i2 = j(b); i2 >>= 1; )
            ++n;
          if (i2 = 1 << n, --n, void 0 !== r2.background) {
            if (i2 <= (s2 = r2.background))
              throw new Error("Background index out of range.");
            if (0 === s2)
              throw new Error("Background index explicitly passed as 0.");
          }
        }
        if (g[v++] = 255 & e2, g[v++] = e2 >> 8 & 255, g[v++] = 255 & t2, g[v++] = t2 >> 8 & 255, g[v++] = (null !== b ? 128 : 0) | n, g[v++] = s2, g[v++] = 0, null !== b)
          for (var a = 0, l = b.length; a < l; ++a) {
            var u = b[a];
            g[v++] = u >> 16 & 255, g[v++] = u >> 8 & 255, g[v++] = 255 & u;
          }
        if (null !== o2) {
          if (o2 < 0 || 65535 < o2)
            throw new Error("Loop count invalid.");
          g[v++] = 33, g[v++] = 255, g[v++] = 11, g[v++] = 78, g[v++] = 69, g[v++] = 84, g[v++] = 83, g[v++] = 67, g[v++] = 65, g[v++] = 80, g[v++] = 69, g[v++] = 50, g[v++] = 46, g[v++] = 48, g[v++] = 3, g[v++] = 1, g[v++] = 255 & o2, g[v++] = o2 >> 8 & 255, g[v++] = 0;
        }
        var _ = false;
        this.addFrame = function(e3, t3, r3, o3, n2, s3) {
          if (true === _ && (--v, _ = false), s3 = void 0 === s3 ? {} : s3, e3 < 0 || t3 < 0 || 65535 < e3 || 65535 < t3)
            throw new Error("x/y invalid.");
          if (r3 <= 0 || o3 <= 0 || 65535 < r3 || 65535 < o3)
            throw new Error("Width/Height invalid.");
          if (n2.length < r3 * o3)
            throw new Error("Not enough pixels for the frame size.");
          var i3 = true, a2 = s3.palette;
          if (null == a2 && (i3 = false, a2 = b), null == a2)
            throw new Error("Must supply either a local or global palette.");
          for (var l2 = j(a2), u2 = 0; l2 >>= 1; )
            ++u2;
          var l2 = 1 << u2, c = void 0 === s3.delay ? 0 : s3.delay, d = void 0 === s3.disposal ? 0 : s3.disposal;
          if (d < 0 || 3 < d)
            throw new Error("Disposal out of range.");
          var f = false, h = 0;
          if (void 0 !== s3.transparent && null !== s3.transparent && (f = true, (h = s3.transparent) < 0 || l2 <= h))
            throw new Error("Transparent color index.");
          if (0 === d && !f && 0 === c || (g[v++] = 33, g[v++] = 249, g[v++] = 4, g[v++] = d << 2 | (true === f ? 1 : 0), g[v++] = 255 & c, g[v++] = c >> 8 & 255, g[v++] = h, g[v++] = 0), g[v++] = 44, g[v++] = 255 & e3, g[v++] = e3 >> 8 & 255, g[v++] = 255 & t3, g[v++] = t3 >> 8 & 255, g[v++] = 255 & r3, g[v++] = r3 >> 8 & 255, g[v++] = 255 & o3, g[v++] = o3 >> 8 & 255, g[v++] = true === i3 ? 128 | u2 - 1 : 0, true === i3)
            for (var p = 0, m = a2.length; p < m; ++p) {
              var y = a2[p];
              g[v++] = y >> 16 & 255, g[v++] = y >> 8 & 255, g[v++] = 255 & y;
            }
          return v = function(t4, r4, e4, o4) {
            t4[r4++] = e4;
            var n3 = r4++, s4 = 1 << e4, i4 = s4 - 1, a3 = 1 + s4, l3 = 1 + a3, u3 = e4 + 1, c2 = 0, d2 = 0;
            function f2(e5) {
              for (; e5 <= c2; )
                t4[r4++] = 255 & d2, d2 >>= 8, c2 -= 8, r4 === n3 + 256 && (t4[n3] = 255, n3 = r4++);
            }
            function h2(e5) {
              d2 |= e5 << c2, c2 += u3, f2(8);
            }
            var p2 = o4[0] & i4, m2 = {};
            h2(s4);
            for (var y2 = 1, g2 = o4.length; y2 < g2; ++y2) {
              var v2 = o4[y2] & i4, b2 = p2 << 8 | v2, j2 = m2[b2];
              if (void 0 === j2) {
                for (d2 |= p2 << c2, c2 += u3; 8 <= c2; )
                  t4[r4++] = 255 & d2, d2 >>= 8, c2 -= 8, r4 === n3 + 256 && (t4[n3] = 255, n3 = r4++);
                4096 === l3 ? (h2(s4), l3 = 1 + a3, u3 = e4 + 1, m2 = {}) : (1 << u3 <= l3 && ++u3, m2[b2] = l3++), p2 = v2;
              } else
                p2 = j2;
            }
            h2(p2), h2(a3), f2(1), n3 + 1 === r4 ? t4[n3] = 0 : (t4[n3] = r4 - n3 - 1, t4[r4++] = 0);
            return r4;
          }(g, v, u2 < 2 ? 2 : u2, n2);
        }, this.end = function() {
          return false === _ && (g[v++] = 59, _ = true), v;
        }, this.getOutputBuffer = function() {
          return g;
        }, this.setOutputBuffer = function(e3) {
          g = e3;
        }, this.getOutputBufferPosition = function() {
          return v;
        }, this.setOutputBufferPosition = function(e3) {
          v = e3;
        };
      }
      function E(e2, t2, r2, o2) {
        for (var n = e2[t2++], s2 = 1 << n, i2 = 1 + s2, a = 1 + i2, l = n + 1, u = (1 << l) - 1, c = 0, d = 0, f = 0, h = e2[t2++], p = new Int32Array(4096), m = null; ; ) {
          for (; c < 16 && 0 !== h; )
            d |= e2[t2++] << c, c += 8, 1 === h ? h = e2[t2++] : --h;
          if (c < l)
            break;
          var y = d & u;
          if (d >>= l, c -= l, y == s2)
            a = 1 + i2, u = (1 << (l = n + 1)) - 1, m = null;
          else {
            if (y == i2)
              break;
            for (var g = y < a ? y : m, v = 0, b = g; s2 < b; )
              b = p[b] >> 8, ++v;
            var j = b;
            if (o2 < f + v + (g !== y ? 1 : 0))
              return void console.log("Warning, gif stream longer than expected.");
            r2[f++] = j;
            var _ = f += v;
            for (g !== y && (r2[f++] = j), b = g; v--; )
              b = p[b], r2[--_] = 255 & b, b >>= 8;
            null !== m && a < 4096 && (p[a++] = m << 8 | j, u + 1 <= a && l < 12 && (++l, u = u << 1 | 1)), m = y;
          }
        }
        f !== o2 && console.log("Warning, gif stream shorter than expected.");
      }
      try {
        r.GifWriter = o, r.GifReader = function(b) {
          var e2 = 0;
          if (71 !== b[e2++] || 73 !== b[e2++] || 70 !== b[e2++] || 56 !== b[e2++] || 56 != (b[e2++] + 1 & 253) || 97 !== b[e2++])
            throw new Error("Invalid GIF 87a/89a header.");
          var j = b[e2++] | b[e2++] << 8, t2 = b[e2++] | b[e2++] << 8, r2 = b[e2++], o2 = 1 << 1 + (7 & r2), n = (b[e2++], b[e2++], null), s2 = null, i2 = (r2 >> 7 && (n = e2, e2 += 3 * (s2 = o2)), true), a = [], l = 0, u = null, c = 0, d = null;
          for (this.width = j, this.height = t2; i2 && e2 < b.length; )
            switch (b[e2++]) {
              case 33:
                switch (b[e2++]) {
                  case 255:
                    if (11 !== b[e2] || 78 == b[e2 + 1] && 69 == b[e2 + 2] && 84 == b[e2 + 3] && 83 == b[e2 + 4] && 67 == b[e2 + 5] && 65 == b[e2 + 6] && 80 == b[e2 + 7] && 69 == b[e2 + 8] && 50 == b[e2 + 9] && 46 == b[e2 + 10] && 48 == b[e2 + 11] && 3 == b[e2 + 12] && 1 == b[e2 + 13] && 0 == b[e2 + 16])
                      e2 += 14, d = b[e2++] | b[e2++] << 8, e2++;
                    else
                      for (e2 += 12; ; ) {
                        if (!(0 <= (h = b[e2++])))
                          throw Error("Invalid block size");
                        if (0 === h)
                          break;
                        e2 += h;
                      }
                    break;
                  case 249:
                    if (4 !== b[e2++] || 0 !== b[e2 + 4])
                      throw new Error("Invalid graphics extension block.");
                    var f = b[e2++], l = b[e2++] | b[e2++] << 8, u = b[e2++];
                    0 == (1 & f) && (u = null), c = f >> 2 & 7, e2++;
                    break;
                  case 254:
                    for (; ; ) {
                      if (!(0 <= (h = b[e2++])))
                        throw Error("Invalid block size");
                      if (0 === h)
                        break;
                      e2 += h;
                    }
                    break;
                  default:
                    throw new Error("Unknown graphic control label: 0x" + b[e2 - 1].toString(16));
                }
                break;
              case 44:
                var h, p = b[e2++] | b[e2++] << 8, m = b[e2++] | b[e2++] << 8, y = b[e2++] | b[e2++] << 8, g = b[e2++] | b[e2++] << 8, v = b[e2++], _ = v >> 6 & 1, x = 1 << 1 + (7 & v), w = n, S = s2, M = false, v = (v >> 7 && (M = true, w = e2, e2 += 3 * (S = x)), e2);
                for (e2++; ; ) {
                  if (!(0 <= (h = b[e2++])))
                    throw Error("Invalid block size");
                  if (0 === h)
                    break;
                  e2 += h;
                }
                a.push({ x: p, y: m, width: y, height: g, has_local_palette: M, palette_offset: w, palette_size: S, data_offset: v, data_length: e2 - v, transparent_index: u, interlaced: !!_, delay: l, disposal: c });
                break;
              case 59:
                i2 = false;
                break;
              default:
                throw new Error("Unknown gif block: 0x" + b[e2 - 1].toString(16));
            }
          this.numFrames = function() {
            return a.length;
          }, this.loopCount = function() {
            return d;
          }, this.frameInfo = function(e3) {
            if (e3 < 0 || e3 >= a.length)
              throw new Error("Frame index out of range.");
            return a[e3];
          }, this.decodeAndBlitFrameBGRA = function(e3, t3) {
            for (var e3 = this.frameInfo(e3), r3 = e3.width * e3.height, o3 = new Uint8Array(r3), n2 = (E(b, e3.data_offset, o3, r3), e3.palette_offset), s3 = e3.transparent_index, i3 = (null === s3 && (s3 = 256), e3.width), a2 = j - i3, l2 = i3, u2 = 4 * (e3.y * j + e3.x), c2 = 4 * ((e3.y + e3.height) * j + e3.x), d2 = u2, f2 = 4 * a2, h2 = (true === e3.interlaced && (f2 += 4 * j * 7), 8), p2 = 0, m2 = o3.length; p2 < m2; ++p2) {
              var y2, g2, v2 = o3[p2];
              0 === l2 && (l2 = i3, c2 <= (d2 += f2) && (f2 = 4 * a2 + 4 * j * (h2 - 1), d2 = u2 + (i3 + a2) * (h2 << 1), h2 >>= 1)), v2 === s3 ? d2 += 4 : (y2 = b[n2 + 3 * v2], g2 = b[n2 + 3 * v2 + 1], v2 = b[n2 + 3 * v2 + 2], t3[d2++] = v2, t3[d2++] = g2, t3[d2++] = y2, t3[d2++] = 255), --l2;
            }
          }, this.decodeAndBlitFrameRGBA = function(e3, t3) {
            for (var e3 = this.frameInfo(e3), r3 = e3.width * e3.height, o3 = new Uint8Array(r3), n2 = (E(b, e3.data_offset, o3, r3), e3.palette_offset), s3 = e3.transparent_index, i3 = (null === s3 && (s3 = 256), e3.width), a2 = j - i3, l2 = i3, u2 = 4 * (e3.y * j + e3.x), c2 = 4 * ((e3.y + e3.height) * j + e3.x), d2 = u2, f2 = 4 * a2, h2 = (true === e3.interlaced && (f2 += 4 * j * 7), 8), p2 = 0, m2 = o3.length; p2 < m2; ++p2) {
              var y2, g2, v2 = o3[p2];
              0 === l2 && (l2 = i3, c2 <= (d2 += f2) && (f2 = 4 * a2 + 4 * j * (h2 - 1), d2 = u2 + (i3 + a2) * (h2 << 1), h2 >>= 1)), v2 === s3 ? d2 += 4 : (y2 = b[n2 + 3 * v2], g2 = b[n2 + 3 * v2 + 1], v2 = b[n2 + 3 * v2 + 2], t3[d2++] = y2, t3[d2++] = g2, t3[d2++] = v2, t3[d2++] = 255), --l2;
            }
          };
        };
      } catch (e2) {
      }
    }, {}], 241: [function(Ar, r, o) {
      !function(kr) {
        var e, t;
        e = this, t = function(j) {
          function I(e3) {
            if (null == this)
              throw TypeError();
            var t3, r3 = String(this), o3 = r3.length, e3 = e3 ? Number(e3) : 0;
            if (!((e3 = e3 != e3 ? 0 : e3) < 0 || o3 <= e3))
              return 55296 <= (t3 = r3.charCodeAt(e3)) && t3 <= 56319 && e3 + 1 < o3 && 56320 <= (o3 = r3.charCodeAt(e3 + 1)) && o3 <= 57343 ? 1024 * (t3 - 55296) + o3 - 56320 + 65536 : t3;
          }
          String.prototype.codePointAt || ((U = function() {
            try {
              var e3 = {}, t3 = Object.defineProperty, r3 = t3(e3, e3, e3) && t3;
            } catch (e4) {
            }
            return r3;
          }()) ? U(String.prototype, "codePointAt", { value: I, configurable: true, writable: true }) : String.prototype.codePointAt = I);
          var U, N = 0, F = -3;
          function B() {
            this.table = new Uint16Array(16), this.trans = new Uint16Array(288);
          }
          function G(e3, t3) {
            this.source = e3, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = t3, this.destLen = 0, this.ltree = new B(), this.dtree = new B();
          }
          var V = new B(), z = new B(), H = new Uint8Array(30), W = new Uint16Array(30), q = new Uint8Array(30), X = new Uint16Array(30), Y = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), Z = new B(), v = new Uint8Array(320);
          function Q(e3, t3, r3, o3) {
            for (var n2, s3 = 0; s3 < r3; ++s3)
              e3[s3] = 0;
            for (s3 = 0; s3 < 30 - r3; ++s3)
              e3[s3 + r3] = s3 / r3 | 0;
            for (n2 = o3, s3 = 0; s3 < 30; ++s3)
              t3[s3] = n2, n2 += 1 << e3[s3];
          }
          var K = new Uint16Array(16);
          function J(e3, t3, r3, o3) {
            for (var n2, s3 = 0; s3 < 16; ++s3)
              e3.table[s3] = 0;
            for (s3 = 0; s3 < o3; ++s3)
              e3.table[t3[r3 + s3]]++;
            for (s3 = n2 = e3.table[0] = 0; s3 < 16; ++s3)
              K[s3] = n2, n2 += e3.table[s3];
            for (s3 = 0; s3 < o3; ++s3)
              t3[r3 + s3] && (e3.trans[K[t3[r3 + s3]]++] = s3);
          }
          function b(e3, t3, r3) {
            if (!t3)
              return r3;
            for (; e3.bitcount < 24; )
              e3.tag |= e3.source[e3.sourceIndex++] << e3.bitcount, e3.bitcount += 8;
            var o3 = e3.tag & 65535 >>> 16 - t3;
            return e3.tag >>>= t3, e3.bitcount -= t3, o3 + r3;
          }
          function $(e3, t3) {
            for (; e3.bitcount < 24; )
              e3.tag |= e3.source[e3.sourceIndex++] << e3.bitcount, e3.bitcount += 8;
            for (var r3 = 0, o3 = 0, n2 = 0, s3 = e3.tag; o3 = 2 * o3 + (1 & s3), s3 >>>= 1, r3 += t3.table[++n2], 0 <= (o3 -= t3.table[n2]); )
              ;
            return e3.tag = s3, e3.bitcount -= n2, t3.trans[r3 + o3];
          }
          function ee(e3, t3, r3) {
            for (; ; ) {
              var o3 = $(e3, t3);
              if (256 === o3)
                return N;
              if (o3 < 256)
                e3.dest[e3.destLen++] = o3;
              else
                for (var n2, s3 = b(e3, H[o3 -= 257], W[o3]), o3 = $(e3, r3), i3 = n2 = e3.destLen - b(e3, q[o3], X[o3]); i3 < n2 + s3; ++i3)
                  e3.dest[e3.destLen++] = e3.dest[i3];
            }
          }
          for (var e2 = V, te = z, t2 = 0; t2 < 7; ++t2)
            e2.table[t2] = 0;
          for (e2.table[7] = 24, e2.table[8] = 152, e2.table[9] = 112, t2 = 0; t2 < 24; ++t2)
            e2.trans[t2] = 256 + t2;
          for (t2 = 0; t2 < 144; ++t2)
            e2.trans[24 + t2] = t2;
          for (t2 = 0; t2 < 8; ++t2)
            e2.trans[168 + t2] = 280 + t2;
          for (t2 = 0; t2 < 112; ++t2)
            e2.trans[176 + t2] = 144 + t2;
          for (t2 = 0; t2 < 5; ++t2)
            te.table[t2] = 0;
          for (te.table[5] = 32, t2 = 0; t2 < 32; ++t2)
            te.trans[t2] = t2;
          Q(H, W, 4, 3), Q(q, X, 2, 1), H[28] = 0, W[28] = 258;
          var re2 = function(e3, t3) {
            var r3, o3, n2, s3 = new G(e3, t3);
            do {
              switch (n2 = void 0, (o3 = s3).bitcount-- || (o3.tag = o3.source[o3.sourceIndex++], o3.bitcount = 7), n2 = 1 & o3.tag, o3.tag >>>= 1, o3 = n2, b(s3, 2, 0)) {
                case 0:
                  r3 = function(e4) {
                    for (var t4, r4; 8 < e4.bitcount; )
                      e4.sourceIndex--, e4.bitcount -= 8;
                    if ((t4 = 256 * e4.source[e4.sourceIndex + 1] + e4.source[e4.sourceIndex]) !== (65535 & ~(256 * e4.source[e4.sourceIndex + 3] + e4.source[e4.sourceIndex + 2])))
                      return F;
                    for (e4.sourceIndex += 4, r4 = t4; r4; --r4)
                      e4.dest[e4.destLen++] = e4.source[e4.sourceIndex++];
                    return e4.bitcount = 0, N;
                  }(s3);
                  break;
                case 1:
                  r3 = ee(s3, V, z);
                  break;
                case 2:
                  y2 = m2 = p2 = g2 = i3 = h2 = f2 = d2 = c2 = u2 = l2 = a2 = void 0;
                  for (var i3, a2 = s3, l2 = s3.ltree, u2 = s3.dtree, c2 = b(a2, 5, 257), d2 = b(a2, 5, 1), f2 = b(a2, 4, 4), h2 = 0; h2 < 19; ++h2)
                    v[h2] = 0;
                  for (h2 = 0; h2 < f2; ++h2) {
                    var p2 = b(a2, 3, 0);
                    v[Y[h2]] = p2;
                  }
                  for (J(Z, v, 0, 19), i3 = 0; i3 < c2 + d2; ) {
                    var m2 = $(a2, Z);
                    switch (m2) {
                      case 16:
                        for (var y2 = v[i3 - 1], g2 = b(a2, 2, 3); g2; --g2)
                          v[i3++] = y2;
                        break;
                      case 17:
                        for (g2 = b(a2, 3, 3); g2; --g2)
                          v[i3++] = 0;
                        break;
                      case 18:
                        for (g2 = b(a2, 7, 11); g2; --g2)
                          v[i3++] = 0;
                        break;
                      default:
                        v[i3++] = m2;
                    }
                  }
                  J(l2, v, 0, c2), J(u2, v, c2, d2), r3 = ee(s3, s3.ltree, s3.dtree);
                  break;
                default:
                  r3 = F;
              }
              if (r3 !== N)
                throw new Error("Data error");
            } while (!o3);
            return s3.destLen < s3.dest.length ? "function" == typeof s3.dest.slice ? s3.dest.slice(0, s3.destLen) : s3.dest.subarray(0, s3.destLen) : s3.dest;
          };
          function g(e3, t3, r3, o3, n2) {
            return Math.pow(1 - n2, 3) * e3 + 3 * Math.pow(1 - n2, 2) * n2 * t3 + 3 * (1 - n2) * Math.pow(n2, 2) * r3 + Math.pow(n2, 3) * o3;
          }
          function a() {
            this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;
          }
          function f() {
            this.commands = [], this.fill = "black", this.stroke = null, this.strokeWidth = 1;
          }
          function oe(e3) {
            throw new Error(e3);
          }
          function ne(e3, t3) {
            e3 || oe(t3);
          }
          a.prototype.isEmpty = function() {
            return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
          }, a.prototype.addPoint = function(e3, t3) {
            "number" == typeof e3 && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = e3, this.x2 = e3), e3 < this.x1 && (this.x1 = e3), e3 > this.x2 && (this.x2 = e3)), "number" == typeof t3 && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = t3, this.y2 = t3), t3 < this.y1 && (this.y1 = t3), t3 > this.y2 && (this.y2 = t3));
          }, a.prototype.addX = function(e3) {
            this.addPoint(e3, null);
          }, a.prototype.addY = function(e3) {
            this.addPoint(null, e3);
          }, a.prototype.addBezier = function(e3, t3, r3, o3, n2, s3, i3, a2) {
            var l2 = [e3, t3], u2 = [r3, o3], c2 = [n2, s3], d2 = [i3, a2];
            this.addPoint(e3, t3), this.addPoint(i3, a2);
            for (var f2 = 0; f2 <= 1; f2++) {
              var h2, p2 = 6 * l2[f2] - 12 * u2[f2] + 6 * c2[f2], m2 = -3 * l2[f2] + 9 * u2[f2] - 9 * c2[f2] + 3 * d2[f2], y2 = 3 * u2[f2] - 3 * l2[f2];
              0 == m2 ? 0 == p2 || 0 < (h2 = -y2 / p2) && h2 < 1 && (0 === f2 && this.addX(g(l2[f2], u2[f2], c2[f2], d2[f2], h2)), 1 === f2 && this.addY(g(l2[f2], u2[f2], c2[f2], d2[f2], h2))) : (h2 = Math.pow(p2, 2) - 4 * y2 * m2) < 0 || (0 < (y2 = (-p2 + Math.sqrt(h2)) / (2 * m2)) && y2 < 1 && (0 === f2 && this.addX(g(l2[f2], u2[f2], c2[f2], d2[f2], y2)), 1 === f2 && this.addY(g(l2[f2], u2[f2], c2[f2], d2[f2], y2))), 0 < (y2 = (-p2 - Math.sqrt(h2)) / (2 * m2)) && y2 < 1 && (0 === f2 && this.addX(g(l2[f2], u2[f2], c2[f2], d2[f2], y2)), 1 === f2 && this.addY(g(l2[f2], u2[f2], c2[f2], d2[f2], y2))));
            }
          }, a.prototype.addQuad = function(e3, t3, r3, o3, n2, s3) {
            r3 = e3 + 2 / 3 * (r3 - e3), o3 = t3 + 2 / 3 * (o3 - t3);
            this.addBezier(e3, t3, r3, o3, r3 + 1 / 3 * (n2 - e3), o3 + 1 / 3 * (s3 - t3), n2, s3);
          }, f.prototype.moveTo = function(e3, t3) {
            this.commands.push({ type: "M", x: e3, y: t3 });
          }, f.prototype.lineTo = function(e3, t3) {
            this.commands.push({ type: "L", x: e3, y: t3 });
          }, f.prototype.curveTo = f.prototype.bezierCurveTo = function(e3, t3, r3, o3, n2, s3) {
            this.commands.push({ type: "C", x1: e3, y1: t3, x2: r3, y2: o3, x: n2, y: s3 });
          }, f.prototype.quadTo = f.prototype.quadraticCurveTo = function(e3, t3, r3, o3) {
            this.commands.push({ type: "Q", x1: e3, y1: t3, x: r3, y: o3 });
          }, f.prototype.close = f.prototype.closePath = function() {
            this.commands.push({ type: "Z" });
          }, f.prototype.extend = function(e3) {
            var t3;
            if (e3.commands)
              e3 = e3.commands;
            else if (e3 instanceof a)
              return t3 = e3, this.moveTo(t3.x1, t3.y1), this.lineTo(t3.x2, t3.y1), this.lineTo(t3.x2, t3.y2), this.lineTo(t3.x1, t3.y2), void this.close();
            Array.prototype.push.apply(this.commands, e3);
          }, f.prototype.getBoundingBox = function() {
            for (var e3 = new a(), t3 = 0, r3 = 0, o3 = 0, n2 = 0, s3 = 0; s3 < this.commands.length; s3++) {
              var i3 = this.commands[s3];
              switch (i3.type) {
                case "M":
                  e3.addPoint(i3.x, i3.y), t3 = o3 = i3.x, r3 = n2 = i3.y;
                  break;
                case "L":
                  e3.addPoint(i3.x, i3.y), o3 = i3.x, n2 = i3.y;
                  break;
                case "Q":
                  e3.addQuad(o3, n2, i3.x1, i3.y1, i3.x, i3.y), o3 = i3.x, n2 = i3.y;
                  break;
                case "C":
                  e3.addBezier(o3, n2, i3.x1, i3.y1, i3.x2, i3.y2, i3.x, i3.y), o3 = i3.x, n2 = i3.y;
                  break;
                case "Z":
                  o3 = t3, n2 = r3;
                  break;
                default:
                  throw new Error("Unexpected path command " + i3.type);
              }
            }
            return e3.isEmpty() && e3.addPoint(0, 0), e3;
          }, f.prototype.draw = function(e3) {
            e3.beginPath();
            for (var t3 = 0; t3 < this.commands.length; t3 += 1) {
              var r3 = this.commands[t3];
              "M" === r3.type ? e3.moveTo(r3.x, r3.y) : "L" === r3.type ? e3.lineTo(r3.x, r3.y) : "C" === r3.type ? e3.bezierCurveTo(r3.x1, r3.y1, r3.x2, r3.y2, r3.x, r3.y) : "Q" === r3.type ? e3.quadraticCurveTo(r3.x1, r3.y1, r3.x, r3.y) : "Z" === r3.type && e3.closePath();
            }
            this.fill && (e3.fillStyle = this.fill, e3.fill()), this.stroke && (e3.strokeStyle = this.stroke, e3.lineWidth = this.strokeWidth, e3.stroke());
          }, f.prototype.toPathData = function(n2) {
            function e3() {
              for (var e4 = arguments, t4 = "", r4 = 0; r4 < arguments.length; r4 += 1) {
                var o4 = e4[r4];
                0 <= o4 && 0 < r4 && (t4 += " "), t4 += (o4 = o4, Math.round(o4) === o4 ? "" + Math.round(o4) : o4.toFixed(n2));
              }
              return t4;
            }
            n2 = void 0 !== n2 ? n2 : 2;
            for (var t3 = "", r3 = 0; r3 < this.commands.length; r3 += 1) {
              var o3 = this.commands[r3];
              "M" === o3.type ? t3 += "M" + e3(o3.x, o3.y) : "L" === o3.type ? t3 += "L" + e3(o3.x, o3.y) : "C" === o3.type ? t3 += "C" + e3(o3.x1, o3.y1, o3.x2, o3.y2, o3.x, o3.y) : "Q" === o3.type ? t3 += "Q" + e3(o3.x1, o3.y1, o3.x, o3.y) : "Z" === o3.type && (t3 += "Z");
            }
            return t3;
          }, f.prototype.toSVG = function(e3) {
            var t3 = (t3 = '<path d="') + this.toPathData(e3) + '"';
            return this.fill && "black" !== this.fill && (null === this.fill ? t3 += ' fill="none"' : t3 += ' fill="' + this.fill + '"'), this.stroke && (t3 += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), t3 += "/>";
          }, f.prototype.toDOMElement = function(e3) {
            var e3 = this.toPathData(e3), t3 = document.createElementNS("http://www.w3.org/2000/svg", "path");
            return t3.setAttribute("d", e3), t3;
          };
          var P = { fail: oe, argument: ne, assert: ne }, m = {}, w = {}, l = {};
          function r2(e3) {
            return function() {
              return e3;
            };
          }
          w.BYTE = function(e3) {
            return P.argument(0 <= e3 && e3 <= 255, "Byte value should be between 0 and 255."), [e3];
          }, l.BYTE = r2(1), w.CHAR = function(e3) {
            return [e3.charCodeAt(0)];
          }, l.CHAR = r2(1), w.CHARARRAY = function(e3) {
            for (var t3 = [], r3 = 0; r3 < e3.length; r3 += 1)
              t3[r3] = e3.charCodeAt(r3);
            return t3;
          }, l.CHARARRAY = function(e3) {
            return e3.length;
          }, w.USHORT = function(e3) {
            return [e3 >> 8 & 255, 255 & e3];
          }, l.USHORT = r2(2), w.SHORT = function(e3) {
            return [(e3 = 32768 <= e3 ? -(65536 - e3) : e3) >> 8 & 255, 255 & e3];
          }, l.SHORT = r2(2), w.UINT24 = function(e3) {
            return [e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3];
          }, l.UINT24 = r2(3), w.ULONG = function(e3) {
            return [e3 >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3];
          }, l.ULONG = r2(4), w.LONG = function(e3) {
            return [(e3 = 2147483648 <= e3 ? -(4294967296 - e3) : e3) >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3];
          }, l.LONG = r2(4), w.FIXED = w.ULONG, l.FIXED = l.ULONG, w.FWORD = w.SHORT, l.FWORD = l.SHORT, w.UFWORD = w.USHORT, l.UFWORD = l.USHORT, w.LONGDATETIME = function(e3) {
            return [0, 0, 0, 0, e3 >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3];
          }, l.LONGDATETIME = r2(8), w.TAG = function(e3) {
            return P.argument(4 === e3.length, "Tag should be exactly 4 ASCII characters."), [e3.charCodeAt(0), e3.charCodeAt(1), e3.charCodeAt(2), e3.charCodeAt(3)];
          }, l.TAG = r2(4), w.Card8 = w.BYTE, l.Card8 = l.BYTE, w.Card16 = w.USHORT, l.Card16 = l.USHORT, w.OffSize = w.BYTE, l.OffSize = l.BYTE, w.SID = w.USHORT, l.SID = l.USHORT, w.NUMBER = function(e3) {
            return -107 <= e3 && e3 <= 107 ? [e3 + 139] : 108 <= e3 && e3 <= 1131 ? [247 + ((e3 -= 108) >> 8), 255 & e3] : -1131 <= e3 && e3 <= -108 ? [251 + ((e3 = -e3 - 108) >> 8), 255 & e3] : -32768 <= e3 && e3 <= 32767 ? w.NUMBER16(e3) : w.NUMBER32(e3);
          }, l.NUMBER = function(e3) {
            return w.NUMBER(e3).length;
          }, w.NUMBER16 = function(e3) {
            return [28, e3 >> 8 & 255, 255 & e3];
          }, l.NUMBER16 = r2(3), w.NUMBER32 = function(e3) {
            return [29, e3 >> 24 & 255, e3 >> 16 & 255, e3 >> 8 & 255, 255 & e3];
          }, l.NUMBER32 = r2(5), w.REAL = function(e3) {
            for (var t3 = e3.toString(), r3 = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t3), o3 = (r3 && (r3 = parseFloat("1e" + ((r3[2] ? +r3[2] : 0) + r3[1].length)), t3 = (Math.round(e3 * r3) / r3).toString()), ""), n2 = 0, s3 = t3.length; n2 < s3; n2 += 1) {
              var i3 = t3[n2];
              o3 += "e" === i3 ? "-" === t3[++n2] ? "c" : "b" : "." === i3 ? "a" : "-" === i3 ? "e" : i3;
            }
            for (var a2 = [30], l2 = 0, u2 = (o3 += 1 & o3.length ? "f" : "ff").length; l2 < u2; l2 += 2)
              a2.push(parseInt(o3.substr(l2, 2), 16));
            return a2;
          }, l.REAL = function(e3) {
            return w.REAL(e3).length;
          }, w.NAME = w.CHARARRAY, l.NAME = l.CHARARRAY, w.STRING = w.CHARARRAY, l.STRING = l.CHARARRAY, m.UTF8 = function(e3, t3, r3) {
            for (var o3 = [], n2 = r3, s3 = 0; s3 < n2; s3++, t3 += 1)
              o3[s3] = e3.getUint8(t3);
            return String.fromCharCode.apply(null, o3);
          }, m.UTF16 = function(e3, t3, r3) {
            for (var o3 = [], n2 = r3 / 2, s3 = 0; s3 < n2; s3++, t3 += 2)
              o3[s3] = e3.getUint16(t3);
            return String.fromCharCode.apply(null, o3);
          }, w.UTF16 = function(e3) {
            for (var t3 = [], r3 = 0; r3 < e3.length; r3 += 1) {
              var o3 = e3.charCodeAt(r3);
              t3[t3.length] = o3 >> 8 & 255, t3[t3.length] = 255 & o3;
            }
            return t3;
          }, l.UTF16 = function(e3) {
            return 2 * e3.length;
          };
          var se, ie = { "x-mac-croatian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ", "x-mac-cyrillic": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю", "x-mac-gaelic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ", "x-mac-greek": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­", "x-mac-icelandic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", "x-mac-inuit": "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł", "x-mac-ce": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ", macintosh: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", "x-mac-romanian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", "x-mac-turkish": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ" }, ae = (m.MACSTRING = function(e3, t3, r3, o3) {
            var n2 = ie[o3];
            if (void 0 !== n2) {
              for (var s3 = "", i3 = 0; i3 < r3; i3++) {
                var a2 = e3.getUint8(t3 + i3);
                s3 += a2 <= 127 ? String.fromCharCode(a2) : n2[127 & a2];
              }
              return s3;
            }
          }, "function" == typeof WeakMap && /* @__PURE__ */ new WeakMap());
          function le(e3) {
            return -128 <= e3 && e3 <= 127;
          }
          w.MACSTRING = function(e3, t3) {
            var r3 = function(e4) {
              if (!se)
                for (var t4 in se = {}, ie)
                  se[t4] = new String(t4);
              var r4 = se[e4];
              if (void 0 !== r4) {
                if (ae) {
                  var o4 = ae.get(r4);
                  if (void 0 !== o4)
                    return o4;
                }
                var n3 = ie[e4];
                if (void 0 !== n3) {
                  for (var s4 = {}, i3 = 0; i3 < n3.length; i3++)
                    s4[n3.charCodeAt(i3)] = i3 + 128;
                  return ae && ae.set(r4, s4), s4;
                }
              }
            }(t3);
            if (void 0 !== r3) {
              for (var o3 = [], n2 = 0; n2 < e3.length; n2++) {
                var s3 = e3.charCodeAt(n2);
                if (128 <= s3 && void 0 === (s3 = r3[s3]))
                  return;
                o3[n2] = s3;
              }
              return o3;
            }
          }, l.MACSTRING = function(e3, t3) {
            e3 = w.MACSTRING(e3, t3);
            return void 0 !== e3 ? e3.length : 0;
          }, w.VARDELTAS = function(e3) {
            for (var t3 = 0, r3 = []; t3 < e3.length; )
              var o3 = e3[t3], t3 = (0 === o3 ? function(e4, t4, r4) {
                for (var o4 = 0, n2 = e4.length; t4 < n2 && o4 < 64 && 0 === e4[t4]; )
                  ++t4, ++o4;
                return r4.push(128 | o4 - 1), t4;
              } : -128 <= o3 && o3 <= 127 ? function(e4, t4, r4) {
                for (var o4 = 0, n2 = e4.length, s3 = t4; s3 < n2 && o4 < 64; ) {
                  var i3 = e4[s3];
                  if (!le(i3))
                    break;
                  if (0 === i3 && s3 + 1 < n2 && 0 === e4[s3 + 1])
                    break;
                  ++s3, ++o4;
                }
                r4.push(o4 - 1);
                for (var a2 = t4; a2 < s3; ++a2)
                  r4.push(e4[a2] + 256 & 255);
                return s3;
              } : function(e4, t4, r4) {
                for (var o4 = 0, n2 = e4.length, s3 = t4; s3 < n2 && o4 < 64; ) {
                  var i3 = e4[s3];
                  if (0 === i3)
                    break;
                  if (le(i3) && s3 + 1 < n2 && le(e4[s3 + 1]))
                    break;
                  ++s3, ++o4;
                }
                r4.push(64 | o4 - 1);
                for (var a2 = t4; a2 < s3; ++a2) {
                  var l2 = e4[a2];
                  r4.push(l2 + 65536 >> 8 & 255, l2 + 256 & 255);
                }
                return s3;
              })(e3, t3, r3);
            return r3;
          }, w.INDEX = function(e3) {
            for (var t3 = 1, r3 = [t3], o3 = [], n2 = 0; n2 < e3.length; n2 += 1) {
              var s3 = w.OBJECT(e3[n2]);
              Array.prototype.push.apply(o3, s3), t3 += s3.length, r3.push(t3);
            }
            if (0 === o3.length)
              return [0, 0];
            for (var i3 = [], a2 = 1 + Math.floor(Math.log(t3) / Math.log(2)) / 8 | 0, l2 = [void 0, w.BYTE, w.USHORT, w.UINT24, w.ULONG][a2], u2 = 0; u2 < r3.length; u2 += 1) {
              var c2 = l2(r3[u2]);
              Array.prototype.push.apply(i3, c2);
            }
            return Array.prototype.concat(w.Card16(e3.length), w.OffSize(a2), i3, o3);
          }, l.INDEX = function(e3) {
            return w.INDEX(e3).length;
          }, w.DICT = function(e3) {
            for (var t3 = [], r3 = Object.keys(e3), o3 = r3.length, n2 = 0; n2 < o3; n2 += 1) {
              var s3 = parseInt(r3[n2], 0), i3 = e3[s3];
              t3 = (t3 = t3.concat(w.OPERAND(i3.value, i3.type))).concat(w.OPERATOR(s3));
            }
            return t3;
          }, l.DICT = function(e3) {
            return w.DICT(e3).length;
          }, w.OPERATOR = function(e3) {
            return e3 < 1200 ? [e3] : [12, e3 - 1200];
          }, w.OPERAND = function(e3, t3) {
            var r3 = [];
            if (Array.isArray(t3))
              for (var o3 = 0; o3 < t3.length; o3 += 1)
                P.argument(e3.length === t3.length, "Not enough arguments given for type" + t3), r3 = r3.concat(w.OPERAND(e3[o3], t3[o3]));
            else if ("SID" === t3)
              r3 = r3.concat(w.NUMBER(e3));
            else if ("offset" === t3)
              r3 = r3.concat(w.NUMBER32(e3));
            else if ("number" === t3)
              r3 = r3.concat(w.NUMBER(e3));
            else {
              if ("real" !== t3)
                throw new Error("Unknown operand type " + t3);
              r3 = r3.concat(w.REAL(e3));
            }
            return r3;
          }, w.OP = w.BYTE, l.OP = l.BYTE;
          var ue = "function" == typeof WeakMap && /* @__PURE__ */ new WeakMap();
          function n(e3, t3, r3) {
            for (var o3 = 0; o3 < t3.length; o3 += 1) {
              var n2 = t3[o3];
              this[n2.name] = n2.value;
            }
            if (this.tableName = e3, this.fields = t3, r3)
              for (var s3 = Object.keys(r3), i3 = 0; i3 < s3.length; i3 += 1) {
                var a2 = s3[i3], l2 = r3[a2];
                void 0 !== this[a2] && (this[a2] = l2);
              }
          }
          function ce(e3, t3, r3) {
            void 0 === r3 && (r3 = t3.length);
            var o3 = new Array(t3.length + 1);
            o3[0] = { name: e3 + "Count", type: "USHORT", value: r3 };
            for (var n2 = 0; n2 < t3.length; n2++)
              o3[n2 + 1] = { name: e3 + n2, type: "USHORT", value: t3[n2] };
            return o3;
          }
          function de(e3, t3, r3) {
            var o3 = t3.length, n2 = new Array(o3 + 1);
            n2[0] = { name: e3 + "Count", type: "USHORT", value: o3 };
            for (var s3 = 0; s3 < o3; s3++)
              n2[s3 + 1] = { name: e3 + s3, type: "TABLE", value: r3(t3[s3], s3) };
            return n2;
          }
          function fe(e3, t3, r3) {
            var o3 = t3.length, n2 = [];
            n2[0] = { name: e3 + "Count", type: "USHORT", value: o3 };
            for (var s3 = 0; s3 < o3; s3++)
              n2 = n2.concat(r3(t3[s3], s3));
            return n2;
          }
          function he(e3) {
            1 === e3.format ? n.call(this, "coverageTable", [{ name: "coverageFormat", type: "USHORT", value: 1 }].concat(ce("glyph", e3.glyphs))) : P.assert(false, "Can't create coverage table format 2 yet.");
          }
          function pe(e3) {
            n.call(this, "scriptListTable", fe("scriptRecord", e3, function(e4, t3) {
              var r3 = e4.script, o3 = r3.defaultLangSys;
              return P.assert(!!o3, "Unable to write GSUB: script " + e4.tag + " has no default language system."), [{ name: "scriptTag" + t3, type: "TAG", value: e4.tag }, { name: "script" + t3, type: "TABLE", value: new n("scriptTable", [{ name: "defaultLangSys", type: "TABLE", value: new n("defaultLangSys", [{ name: "lookupOrder", type: "USHORT", value: 0 }, { name: "reqFeatureIndex", type: "USHORT", value: o3.reqFeatureIndex }].concat(ce("featureIndex", o3.featureIndexes))) }].concat(fe("langSys", r3.langSysRecords, function(e5, t4) {
                var r4 = e5.langSys;
                return [{ name: "langSysTag" + t4, type: "TAG", value: e5.tag }, { name: "langSys" + t4, type: "TABLE", value: new n("langSys", [{ name: "lookupOrder", type: "USHORT", value: 0 }, { name: "reqFeatureIndex", type: "USHORT", value: r4.reqFeatureIndex }].concat(ce("featureIndex", r4.featureIndexes))) }];
              }))) }];
            }));
          }
          function me(e3) {
            n.call(this, "featureListTable", fe("featureRecord", e3, function(e4, t3) {
              var r3 = e4.feature;
              return [{ name: "featureTag" + t3, type: "TAG", value: e4.tag }, { name: "feature" + t3, type: "TABLE", value: new n("featureTable", [{ name: "featureParams", type: "USHORT", value: r3.featureParams }].concat(ce("lookupListIndex", r3.lookupListIndexes))) }];
            }));
          }
          function ye(e3, r3) {
            n.call(this, "lookupListTable", de("lookup", e3, function(e4) {
              var t3 = r3[e4.lookupType];
              return P.assert(!!t3, "Unable to write GSUB lookup type " + e4.lookupType + " tables."), new n("lookupTable", [{ name: "lookupType", type: "USHORT", value: e4.lookupType }, { name: "lookupFlag", type: "USHORT", value: e4.lookupFlag }].concat(de("subtable", e4.subtables, t3)));
            }));
          }
          w.CHARSTRING = function(e3) {
            if (ue) {
              var t3 = ue.get(e3);
              if (void 0 !== t3)
                return t3;
            }
            for (var r3 = [], o3 = e3.length, n2 = 0; n2 < o3; n2 += 1)
              var s3 = e3[n2], r3 = r3.concat(w[s3.type](s3.value));
            return ue && ue.set(e3, r3), r3;
          }, l.CHARSTRING = function(e3) {
            return w.CHARSTRING(e3).length;
          }, w.OBJECT = function(e3) {
            var t3 = w[e3.type];
            return P.argument(void 0 !== t3, "No encoding function for type " + e3.type), t3(e3.value);
          }, l.OBJECT = function(e3) {
            var t3 = l[e3.type];
            return P.argument(void 0 !== t3, "No sizeOf function for type " + e3.type), t3(e3.value);
          }, w.TABLE = function(e3) {
            for (var t3 = [], r3 = e3.fields.length, o3 = [], n2 = [], s3 = 0; s3 < r3; s3 += 1) {
              var i3 = e3.fields[s3], a2 = w[i3.type], l2 = (P.argument(void 0 !== a2, "No encoding function for field type " + i3.type + " (" + i3.name + ")"), e3[i3.name]), a2 = a2(l2 = void 0 === l2 ? i3.value : l2);
              "TABLE" === i3.type ? (n2.push(t3.length), t3 = t3.concat([0, 0]), o3.push(a2)) : t3 = t3.concat(a2);
            }
            for (var u2 = 0; u2 < o3.length; u2 += 1) {
              var c2 = n2[u2], d2 = t3.length;
              P.argument(d2 < 65536, "Table " + e3.tableName + " too big."), t3[c2] = d2 >> 8, t3[c2 + 1] = 255 & d2, t3 = t3.concat(o3[u2]);
            }
            return t3;
          }, l.TABLE = function(e3) {
            for (var t3 = 0, r3 = e3.fields.length, o3 = 0; o3 < r3; o3 += 1) {
              var n2 = e3.fields[o3], s3 = l[n2.type], i3 = (P.argument(void 0 !== s3, "No sizeOf function for field type " + n2.type + " (" + n2.name + ")"), e3[n2.name]);
              t3 += s3(i3 = void 0 === i3 ? n2.value : i3), "TABLE" === n2.type && (t3 += 2);
            }
            return t3;
          }, w.RECORD = w.TABLE, l.RECORD = l.TABLE, w.LITERAL = function(e3) {
            return e3;
          }, l.LITERAL = function(e3) {
            return e3.length;
          }, n.prototype.encode = function() {
            return w.TABLE(this);
          }, n.prototype.sizeOf = function() {
            return l.TABLE(this);
          };
          var S = { Table: n, Record: n, Coverage: (he.prototype = Object.create(n.prototype)).constructor = he, ScriptList: (pe.prototype = Object.create(n.prototype)).constructor = pe, FeatureList: (me.prototype = Object.create(n.prototype)).constructor = me, LookupList: (ye.prototype = Object.create(n.prototype)).constructor = ye, ushortList: ce, tableList: de, recordList: fe };
          function ge(e3, t3) {
            return e3.getUint8(t3);
          }
          function ve(e3, t3) {
            return e3.getUint16(t3, false);
          }
          function be(e3, t3) {
            return e3.getUint32(t3, false);
          }
          function je(e3, t3) {
            return e3.getInt16(t3, false) + e3.getUint16(t3 + 2, false) / 65535;
          }
          var _e = { byte: 1, uShort: 2, short: 2, uLong: 4, fixed: 4, longDateTime: 8, tag: 4 };
          function u(e3, t3) {
            this.data = e3, this.offset = t3, this.relativeOffset = 0;
          }
          u.prototype.parseByte = function() {
            var e3 = this.data.getUint8(this.offset + this.relativeOffset);
            return this.relativeOffset += 1, e3;
          }, u.prototype.parseChar = function() {
            var e3 = this.data.getInt8(this.offset + this.relativeOffset);
            return this.relativeOffset += 1, e3;
          }, u.prototype.parseCard8 = u.prototype.parseByte, u.prototype.parseCard16 = u.prototype.parseUShort = function() {
            var e3 = this.data.getUint16(this.offset + this.relativeOffset);
            return this.relativeOffset += 2, e3;
          }, u.prototype.parseSID = u.prototype.parseUShort, u.prototype.parseOffset16 = u.prototype.parseUShort, u.prototype.parseShort = function() {
            var e3 = this.data.getInt16(this.offset + this.relativeOffset);
            return this.relativeOffset += 2, e3;
          }, u.prototype.parseF2Dot14 = function() {
            var e3 = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
            return this.relativeOffset += 2, e3;
          }, u.prototype.parseOffset32 = u.prototype.parseULong = function() {
            var e3 = be(this.data, this.offset + this.relativeOffset);
            return this.relativeOffset += 4, e3;
          }, u.prototype.parseFixed = function() {
            var e3 = je(this.data, this.offset + this.relativeOffset);
            return this.relativeOffset += 4, e3;
          }, u.prototype.parseString = function(e3) {
            var t3 = this.data, r3 = this.offset + this.relativeOffset, o3 = "";
            this.relativeOffset += e3;
            for (var n2 = 0; n2 < e3; n2++)
              o3 += String.fromCharCode(t3.getUint8(r3 + n2));
            return o3;
          }, u.prototype.parseTag = function() {
            return this.parseString(4);
          }, u.prototype.parseLongDateTime = function() {
            var e3 = be(this.data, this.offset + this.relativeOffset + 4);
            return e3 -= 2082844800, this.relativeOffset += 8, e3;
          }, u.prototype.parseVersion = function(e3) {
            var t3 = ve(this.data, this.offset + this.relativeOffset), r3 = ve(this.data, this.offset + this.relativeOffset + 2);
            return this.relativeOffset += 4, t3 + r3 / (e3 = void 0 === e3 ? 4096 : e3) / 10;
          }, u.prototype.skip = function(e3, t3) {
            this.relativeOffset += _e[e3] * (t3 = void 0 === t3 ? 1 : t3);
          }, u.prototype.parseULongList = function(e3) {
            void 0 === e3 && (e3 = this.parseULong());
            for (var t3 = new Array(e3), r3 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e3; n2++)
              t3[n2] = r3.getUint32(o3), o3 += 4;
            return this.relativeOffset += 4 * e3, t3;
          }, u.prototype.parseOffset16List = u.prototype.parseUShortList = function(e3) {
            void 0 === e3 && (e3 = this.parseUShort());
            for (var t3 = new Array(e3), r3 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e3; n2++)
              t3[n2] = r3.getUint16(o3), o3 += 2;
            return this.relativeOffset += 2 * e3, t3;
          }, u.prototype.parseShortList = function(e3) {
            for (var t3 = new Array(e3), r3 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e3; n2++)
              t3[n2] = r3.getInt16(o3), o3 += 2;
            return this.relativeOffset += 2 * e3, t3;
          }, u.prototype.parseByteList = function(e3) {
            for (var t3 = new Array(e3), r3 = this.data, o3 = this.offset + this.relativeOffset, n2 = 0; n2 < e3; n2++)
              t3[n2] = r3.getUint8(o3++);
            return this.relativeOffset += e3, t3;
          }, u.prototype.parseList = function(e3, t3) {
            t3 || (t3 = e3, e3 = this.parseUShort());
            for (var r3 = new Array(e3), o3 = 0; o3 < e3; o3++)
              r3[o3] = t3.call(this);
            return r3;
          }, u.prototype.parseList32 = function(e3, t3) {
            t3 || (t3 = e3, e3 = this.parseULong());
            for (var r3 = new Array(e3), o3 = 0; o3 < e3; o3++)
              r3[o3] = t3.call(this);
            return r3;
          }, u.prototype.parseRecordList = function(e3, t3) {
            t3 || (t3 = e3, e3 = this.parseUShort());
            for (var r3 = new Array(e3), o3 = Object.keys(t3), n2 = 0; n2 < e3; n2++) {
              for (var s3 = {}, i3 = 0; i3 < o3.length; i3++) {
                var a2 = o3[i3], l2 = t3[a2];
                s3[a2] = l2.call(this);
              }
              r3[n2] = s3;
            }
            return r3;
          }, u.prototype.parseRecordList32 = function(e3, t3) {
            t3 || (t3 = e3, e3 = this.parseULong());
            for (var r3 = new Array(e3), o3 = Object.keys(t3), n2 = 0; n2 < e3; n2++) {
              for (var s3 = {}, i3 = 0; i3 < o3.length; i3++) {
                var a2 = o3[i3], l2 = t3[a2];
                s3[a2] = l2.call(this);
              }
              r3[n2] = s3;
            }
            return r3;
          }, u.prototype.parseStruct = function(e3) {
            if ("function" == typeof e3)
              return e3.call(this);
            for (var t3 = Object.keys(e3), r3 = {}, o3 = 0; o3 < t3.length; o3++) {
              var n2 = t3[o3], s3 = e3[n2];
              r3[n2] = s3.call(this);
            }
            return r3;
          }, u.prototype.parseValueRecord = function(e3) {
            var t3;
            if (0 !== (e3 = void 0 === e3 ? this.parseUShort() : e3))
              return t3 = {}, 1 & e3 && (t3.xPlacement = this.parseShort()), 2 & e3 && (t3.yPlacement = this.parseShort()), 4 & e3 && (t3.xAdvance = this.parseShort()), 8 & e3 && (t3.yAdvance = this.parseShort()), 16 & e3 && (t3.xPlaDevice = void 0, this.parseShort()), 32 & e3 && (t3.yPlaDevice = void 0, this.parseShort()), 64 & e3 && (t3.xAdvDevice = void 0, this.parseShort()), 128 & e3 && (t3.yAdvDevice = void 0, this.parseShort()), t3;
          }, u.prototype.parseValueRecordList = function() {
            for (var e3 = this.parseUShort(), t3 = this.parseUShort(), r3 = new Array(t3), o3 = 0; o3 < t3; o3++)
              r3[o3] = this.parseValueRecord(e3);
            return r3;
          }, u.prototype.parsePointer = function(e3) {
            var t3 = this.parseOffset16();
            if (0 < t3)
              return new u(this.data, this.offset + t3).parseStruct(e3);
          }, u.prototype.parsePointer32 = function(e3) {
            var t3 = this.parseOffset32();
            if (0 < t3)
              return new u(this.data, this.offset + t3).parseStruct(e3);
          }, u.prototype.parseListOfLists = function(e3) {
            for (var t3 = this.parseOffset16List(), r3 = t3.length, o3 = this.relativeOffset, n2 = new Array(r3), s3 = 0; s3 < r3; s3++) {
              var i3 = t3[s3];
              if (0 === i3)
                n2[s3] = void 0;
              else if (this.relativeOffset = i3, e3) {
                for (var a2 = this.parseOffset16List(), l2 = new Array(a2.length), u2 = 0; u2 < a2.length; u2++)
                  this.relativeOffset = i3 + a2[u2], l2[u2] = e3.call(this);
                n2[s3] = l2;
              } else
                n2[s3] = this.parseUShortList();
            }
            return this.relativeOffset = o3, n2;
          }, u.prototype.parseCoverage = function() {
            var e3 = this.offset + this.relativeOffset, t3 = this.parseUShort(), r3 = this.parseUShort();
            if (1 === t3)
              return { format: 1, glyphs: this.parseUShortList(r3) };
            if (2 !== t3)
              throw new Error("0x" + e3.toString(16) + ": Coverage format must be 1 or 2.");
            for (var o3 = new Array(r3), n2 = 0; n2 < r3; n2++)
              o3[n2] = { start: this.parseUShort(), end: this.parseUShort(), index: this.parseUShort() };
            return { format: 2, ranges: o3 };
          }, u.prototype.parseClassDef = function() {
            var e3 = this.offset + this.relativeOffset, t3 = this.parseUShort();
            if (1 === t3)
              return { format: 1, startGlyph: this.parseUShort(), classes: this.parseUShortList() };
            if (2 === t3)
              return { format: 2, ranges: this.parseRecordList({ start: u.uShort, end: u.uShort, classId: u.uShort }) };
            throw new Error("0x" + e3.toString(16) + ": ClassDef format must be 1 or 2.");
          }, u.list = function(e3, t3) {
            return function() {
              return this.parseList(e3, t3);
            };
          }, u.list32 = function(e3, t3) {
            return function() {
              return this.parseList32(e3, t3);
            };
          }, u.recordList = function(e3, t3) {
            return function() {
              return this.parseRecordList(e3, t3);
            };
          }, u.recordList32 = function(e3, t3) {
            return function() {
              return this.parseRecordList32(e3, t3);
            };
          }, u.pointer = function(e3) {
            return function() {
              return this.parsePointer(e3);
            };
          }, u.pointer32 = function(e3) {
            return function() {
              return this.parsePointer32(e3);
            };
          }, u.tag = u.prototype.parseTag, u.byte = u.prototype.parseByte, u.uShort = u.offset16 = u.prototype.parseUShort, u.uShortList = u.prototype.parseUShortList, u.uLong = u.offset32 = u.prototype.parseULong, u.uLongList = u.prototype.parseULongList, u.struct = u.prototype.parseStruct, u.coverage = u.prototype.parseCoverage, u.classDef = u.prototype.parseClassDef;
          var xe = { reserved: u.uShort, reqFeatureIndex: u.uShort, featureIndexes: u.uShortList }, R = (u.prototype.parseScriptList = function() {
            return this.parsePointer(u.recordList({ tag: u.tag, script: u.pointer({ defaultLangSys: u.pointer(xe), langSysRecords: u.recordList({ tag: u.tag, langSys: u.pointer(xe) }) }) })) || [];
          }, u.prototype.parseFeatureList = function() {
            return this.parsePointer(u.recordList({ tag: u.tag, feature: u.pointer({ featureParams: u.offset16, lookupListIndexes: u.uShortList }) })) || [];
          }, u.prototype.parseLookupList = function(o3) {
            return this.parsePointer(u.list(u.pointer(function() {
              var e3 = this.parseUShort(), t3 = (P.argument(1 <= e3 && e3 <= 9, "GPOS/GSUB lookup type " + e3 + " unknown."), this.parseUShort()), r3 = 16 & t3;
              return { lookupType: e3, lookupFlag: t3, subtables: this.parseList(u.pointer(o3[e3])), markFilteringSet: r3 ? this.parseUShort() : void 0 };
            }))) || [];
          }, u.prototype.parseFeatureVariationsList = function() {
            return this.parsePointer32(function() {
              var e3 = this.parseUShort(), t3 = this.parseUShort();
              return P.argument(1 === e3 && t3 < 1, "GPOS/GSUB feature variations table unknown."), this.parseRecordList32({ conditionSetOffset: u.offset32, featureTableSubstitutionOffset: u.offset32 });
            }) || [];
          }, { getByte: ge, getCard8: ge, getUShort: ve, getCard16: ve, getShort: function(e3, t3) {
            return e3.getInt16(t3, false);
          }, getULong: be, getFixed: je, getTag: function(e3, t3) {
            for (var r3 = "", o3 = t3; o3 < t3 + 4; o3 += 1)
              r3 += String.fromCharCode(e3.getInt8(o3));
            return r3;
          }, getOffset: function(e3, t3, r3) {
            for (var o3 = 0, n2 = 0; n2 < r3; n2 += 1)
              o3 = (o3 <<= 8) + e3.getUint8(t3 + n2);
            return o3;
          }, getBytes: function(e3, t3, r3) {
            for (var o3 = [], n2 = t3; n2 < r3; n2 += 1)
              o3.push(e3.getUint8(n2));
            return o3;
          }, bytesToString: function(e3) {
            for (var t3 = "", r3 = 0; r3 < e3.length; r3 += 1)
              t3 += String.fromCharCode(e3[r3]);
            return t3;
          }, Parser: u });
          var we = { parse: function(e3, t3) {
            for (var r3 = {}, o3 = (r3.version = R.getUShort(e3, t3), P.argument(0 === r3.version, "cmap table version should be 0."), r3.numTables = R.getUShort(e3, t3 + 2), -1), n2 = r3.numTables - 1; 0 <= n2; --n2) {
              var s3 = R.getUShort(e3, t3 + 4 + 8 * n2), i3 = R.getUShort(e3, t3 + 4 + 8 * n2 + 2);
              if (3 === s3 && (0 === i3 || 1 === i3 || 10 === i3) || 0 === s3 && (0 === i3 || 1 === i3 || 2 === i3 || 3 === i3 || 4 === i3)) {
                o3 = R.getULong(e3, t3 + 4 + 8 * n2 + 4);
                break;
              }
            }
            if (-1 === o3)
              throw new Error("No valid cmap sub-tables found.");
            var a2 = new R.Parser(e3, t3 + o3);
            if (r3.format = a2.parseUShort(), 12 === r3.format) {
              var l2, u2 = r3, c2 = a2;
              c2.parseUShort(), u2.length = c2.parseULong(), u2.language = c2.parseULong(), u2.groupCount = l2 = c2.parseULong(), u2.glyphIndexMap = {};
              for (var d2 = 0; d2 < l2; d2 += 1)
                for (var f2 = c2.parseULong(), h2 = c2.parseULong(), p2 = c2.parseULong(), m2 = f2; m2 <= h2; m2 += 1)
                  u2.glyphIndexMap[m2] = p2, p2++;
            } else {
              if (4 !== r3.format)
                throw new Error("Only format 4 and 12 cmap tables are supported (found format " + r3.format + ").");
              var y2 = r3, g2 = e3, v2 = t3, b2 = o3;
              y2.length = a2.parseUShort(), y2.language = a2.parseUShort(), y2.segCount = j2 = a2.parseUShort() >> 1, a2.skip("uShort", 3), y2.glyphIndexMap = {};
              for (var j2, _2 = new R.Parser(g2, v2 + b2 + 14), x2 = new R.Parser(g2, v2 + b2 + 16 + 2 * j2), w2 = new R.Parser(g2, v2 + b2 + 16 + 4 * j2), S2 = new R.Parser(g2, v2 + b2 + 16 + 6 * j2), M2 = v2 + b2 + 16 + 8 * j2, E2 = 0; E2 < j2 - 1; E2 += 1)
                for (var T2 = void 0, C2 = _2.parseUShort(), O2 = x2.parseUShort(), L2 = w2.parseShort(), k2 = S2.parseUShort(), A2 = O2; A2 <= C2; A2 += 1)
                  0 !== k2 ? (M2 = (M2 = S2.offset + S2.relativeOffset - 2) + k2 + 2 * (A2 - O2), 0 !== (T2 = R.getUShort(g2, M2)) && (T2 = T2 + L2 & 65535)) : T2 = A2 + L2 & 65535, y2.glyphIndexMap[A2] = T2;
            }
            return r3;
          }, make: function(e3) {
            for (var t3 = true, r3 = e3.length - 1; 0 < r3; --r3)
              if (65535 < e3.get(r3).unicode) {
                console.log("Adding CMAP format 12 (needed!)"), t3 = false;
                break;
              }
            var o3, n2, s3 = [{ name: "version", type: "USHORT", value: 0 }, { name: "numTables", type: "USHORT", value: t3 ? 1 : 2 }, { name: "platformID", type: "USHORT", value: 3 }, { name: "encodingID", type: "USHORT", value: 1 }, { name: "offset", type: "ULONG", value: t3 ? 12 : 20 }], i3 = (s3 = (s3 = t3 ? s3 : s3.concat([{ name: "cmap12PlatformID", type: "USHORT", value: 3 }, { name: "cmap12EncodingID", type: "USHORT", value: 10 }, { name: "cmap12Offset", type: "ULONG", value: 0 }])).concat([{ name: "format", type: "USHORT", value: 4 }, { name: "cmap4Length", type: "USHORT", value: 0 }, { name: "language", type: "USHORT", value: 0 }, { name: "segCountX2", type: "USHORT", value: 0 }, { name: "searchRange", type: "USHORT", value: 0 }, { name: "entrySelector", type: "USHORT", value: 0 }, { name: "rangeShift", type: "USHORT", value: 0 }]), new S.Table("cmap", s3));
            for (i3.segments = [], r3 = 0; r3 < e3.length; r3 += 1) {
              for (var a2 = e3.get(r3), l2 = 0; l2 < a2.unicodes.length; l2 += 1)
                o3 = a2.unicodes[l2], n2 = r3, i3.segments.push({ end: o3, start: o3, delta: -(o3 - n2), offset: 0, glyphIndex: n2 });
              i3.segments = i3.segments.sort(function(e4, t4) {
                return e4.start - t4.start;
              });
            }
            i3.segments.push({ end: 65535, start: 65535, delta: 1, offset: 0 });
            var u2 = i3.segments.length, c2 = 0, d2 = [], f2 = [], h2 = [], p2 = [], m2 = [], y2 = [];
            for (r3 = 0; r3 < u2; r3 += 1) {
              var g2 = i3.segments[r3];
              g2.end <= 65535 && g2.start <= 65535 ? (d2 = d2.concat({ name: "end_" + r3, type: "USHORT", value: g2.end }), f2 = f2.concat({ name: "start_" + r3, type: "USHORT", value: g2.start }), h2 = h2.concat({ name: "idDelta_" + r3, type: "SHORT", value: g2.delta }), p2 = p2.concat({ name: "idRangeOffset_" + r3, type: "USHORT", value: g2.offset }), void 0 !== g2.glyphId && (m2 = m2.concat({ name: "glyph_" + r3, type: "USHORT", value: g2.glyphId }))) : c2 += 1, t3 || void 0 === g2.glyphIndex || (y2 = (y2 = (y2 = y2.concat({ name: "cmap12Start_" + r3, type: "ULONG", value: g2.start })).concat({ name: "cmap12End_" + r3, type: "ULONG", value: g2.end })).concat({ name: "cmap12Glyph_" + r3, type: "ULONG", value: g2.glyphIndex }));
            }
            return i3.segCountX2 = 2 * (u2 - c2), i3.searchRange = 2 * Math.pow(2, Math.floor(Math.log(u2 - c2) / Math.log(2))), i3.entrySelector = Math.log(i3.searchRange / 2) / Math.log(2), i3.rangeShift = i3.segCountX2 - i3.searchRange, i3.fields = i3.fields.concat(d2), i3.fields.push({ name: "reservedPad", type: "USHORT", value: 0 }), i3.fields = i3.fields.concat(f2), i3.fields = i3.fields.concat(h2), i3.fields = i3.fields.concat(p2), i3.fields = i3.fields.concat(m2), i3.cmap4Length = 14 + 2 * d2.length + 2 + 2 * f2.length + 2 * h2.length + 2 * p2.length + 2 * m2.length, t3 || (s3 = 16 + 4 * y2.length, i3.cmap12Offset = 20 + i3.cmap4Length, i3.fields = i3.fields.concat([{ name: "cmap12Format", type: "USHORT", value: 12 }, { name: "cmap12Reserved", type: "USHORT", value: 0 }, { name: "cmap12Length", type: "ULONG", value: s3 }, { name: "cmap12Language", type: "ULONG", value: 0 }, { name: "cmap12nGroups", type: "ULONG", value: y2.length / 3 }]), i3.fields = i3.fields.concat(y2)), i3;
          } }, Se = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "266 ff", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"], Me = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls"], Ee = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], c = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
          function Te(e3) {
            this.font = e3;
          }
          function Ce(e3) {
            this.cmap = e3;
          }
          function Oe(e3, t3) {
            this.encoding = e3, this.charset = t3;
          }
          function Le(e3) {
            switch (e3.version) {
              case 1:
                this.names = c.slice();
                break;
              case 2:
                this.names = new Array(e3.numberOfGlyphs);
                for (var t3 = 0; t3 < e3.numberOfGlyphs; t3++)
                  e3.glyphNameIndex[t3] < c.length ? this.names[t3] = c[e3.glyphNameIndex[t3]] : this.names[t3] = e3.names[e3.glyphNameIndex[t3] - c.length];
                break;
              case 2.5:
                this.names = new Array(e3.numberOfGlyphs);
                for (var r3 = 0; r3 < e3.numberOfGlyphs; r3++)
                  this.names[r3] = c[r3 + e3.glyphNameIndex[r3]];
                break;
              default:
                this.names = [];
            }
          }
          Te.prototype.charToGlyphIndex = function(e3) {
            var t3 = e3.codePointAt(0), r3 = this.font.glyphs;
            if (r3) {
              for (var o3 = 0; o3 < r3.length; o3 += 1)
                for (var n2 = r3.get(o3), s3 = 0; s3 < n2.unicodes.length; s3 += 1)
                  if (n2.unicodes[s3] === t3)
                    return o3;
            }
            return null;
          }, Ce.prototype.charToGlyphIndex = function(e3) {
            return this.cmap.glyphIndexMap[e3.codePointAt(0)] || 0;
          }, Oe.prototype.charToGlyphIndex = function(e3) {
            e3 = e3.codePointAt(0), e3 = this.encoding[e3];
            return this.charset.indexOf(e3);
          }, Le.prototype.nameToGlyphIndex = function(e3) {
            return this.names.indexOf(e3);
          }, Le.prototype.glyphIndexToName = function(e3) {
            return this.names[e3];
          };
          var d = { line: function(e3, t3, r3, o3, n2) {
            e3.beginPath(), e3.moveTo(t3, r3), e3.lineTo(o3, n2), e3.stroke();
          } };
          function h(e3) {
            this.bindConstructorValues(e3);
          }
          function ke(t3, e3, r3) {
            Object.defineProperty(t3, e3, { get: function() {
              return t3.path, t3[r3];
            }, set: function(e4) {
              t3[r3] = e4;
            }, enumerable: true, configurable: true });
          }
          function Ae(e3, t3) {
            if (this.font = e3, this.glyphs = {}, Array.isArray(t3))
              for (var r3 = 0; r3 < t3.length; r3++)
                this.glyphs[r3] = t3[r3];
            this.length = t3 && t3.length || 0;
          }
          h.prototype.bindConstructorValues = function(e3) {
            var t3;
            this.index = e3.index || 0, this.name = e3.name || null, this.unicode = e3.unicode || void 0, this.unicodes = e3.unicodes || void 0 !== e3.unicode ? [e3.unicode] : [], e3.xMin && (this.xMin = e3.xMin), e3.yMin && (this.yMin = e3.yMin), e3.xMax && (this.xMax = e3.xMax), e3.yMax && (this.yMax = e3.yMax), e3.advanceWidth && (this.advanceWidth = e3.advanceWidth), Object.defineProperty(this, "path", (e3 = e3.path, t3 = e3 || new f(), { configurable: true, get: function() {
              return t3 = "function" == typeof t3 ? t3() : t3;
            }, set: function(e4) {
              t3 = e4;
            } }));
          }, h.prototype.addUnicode = function(e3) {
            0 === this.unicodes.length && (this.unicode = e3), this.unicodes.push(e3);
          }, h.prototype.getBoundingBox = function() {
            return this.path.getBoundingBox();
          }, h.prototype.getPath = function(e3, t3, r3, o3, n2) {
            e3 = void 0 !== e3 ? e3 : 0, t3 = void 0 !== t3 ? t3 : 0, r3 = void 0 !== r3 ? r3 : 72;
            for (var s3, i3, a2 = (o3 = o3 || {}).xScale, l2 = o3.yScale, u2 = ((s3 = o3.hinting && n2 && n2.hinting ? this.path && n2.hinting.exec(this, r3) : s3) ? (i3 = n2.hinting.getCommands(s3), e3 = Math.round(e3), t3 = Math.round(t3), a2 = l2 = 1) : (i3 = this.path.commands, o3 = 1 / this.path.unitsPerEm * r3, void 0 === a2 && (a2 = o3), void 0 === l2 && (l2 = o3)), new f()), c2 = 0; c2 < i3.length; c2 += 1) {
              var d2 = i3[c2];
              "M" === d2.type ? u2.moveTo(e3 + d2.x * a2, t3 + -d2.y * l2) : "L" === d2.type ? u2.lineTo(e3 + d2.x * a2, t3 + -d2.y * l2) : "Q" === d2.type ? u2.quadraticCurveTo(e3 + d2.x1 * a2, t3 + -d2.y1 * l2, e3 + d2.x * a2, t3 + -d2.y * l2) : "C" === d2.type ? u2.curveTo(e3 + d2.x1 * a2, t3 + -d2.y1 * l2, e3 + d2.x2 * a2, t3 + -d2.y2 * l2, e3 + d2.x * a2, t3 + -d2.y * l2) : "Z" === d2.type && u2.closePath();
            }
            return u2;
          }, h.prototype.getContours = function() {
            if (void 0 === this.points)
              return [];
            for (var e3 = [], t3 = [], r3 = 0; r3 < this.points.length; r3 += 1) {
              var o3 = this.points[r3];
              t3.push(o3), o3.lastPointOfContour && (e3.push(t3), t3 = []);
            }
            return P.argument(0 === t3.length, "There are still points left in the current contour."), e3;
          }, h.prototype.getMetrics = function() {
            for (var e3 = this.path.commands, t3 = [], r3 = [], o3 = 0; o3 < e3.length; o3 += 1) {
              var n2 = e3[o3];
              "Z" !== n2.type && (t3.push(n2.x), r3.push(n2.y)), "Q" !== n2.type && "C" !== n2.type || (t3.push(n2.x1), r3.push(n2.y1)), "C" === n2.type && (t3.push(n2.x2), r3.push(n2.y2));
            }
            var s3 = { xMin: Math.min.apply(null, t3), yMin: Math.min.apply(null, r3), xMax: Math.max.apply(null, t3), yMax: Math.max.apply(null, r3), leftSideBearing: this.leftSideBearing };
            return isFinite(s3.xMin) || (s3.xMin = 0), isFinite(s3.xMax) || (s3.xMax = this.advanceWidth), isFinite(s3.yMin) || (s3.yMin = 0), isFinite(s3.yMax) || (s3.yMax = 0), s3.rightSideBearing = this.advanceWidth - s3.leftSideBearing - (s3.xMax - s3.xMin), s3;
          }, h.prototype.draw = function(e3, t3, r3, o3, n2) {
            this.getPath(t3, r3, o3, n2).draw(e3);
          }, h.prototype.drawPoints = function(i3, e3, t3, r3) {
            function o3(e4, t4, r4, o4) {
              var n3 = 2 * Math.PI;
              i3.beginPath();
              for (var s4 = 0; s4 < e4.length; s4 += 1)
                i3.moveTo(t4 + e4[s4].x * o4, r4 + e4[s4].y * o4), i3.arc(t4 + e4[s4].x * o4, r4 + e4[s4].y * o4, 2, 0, n3, false);
              i3.closePath(), i3.fill();
            }
            e3 = void 0 !== e3 ? e3 : 0, t3 = void 0 !== t3 ? t3 : 0;
            for (var r3 = 1 / this.path.unitsPerEm * (r3 = void 0 !== r3 ? r3 : 24), n2 = [], s3 = [], a2 = this.path, l2 = 0; l2 < a2.commands.length; l2 += 1) {
              var u2 = a2.commands[l2];
              void 0 !== u2.x && n2.push({ x: u2.x, y: -u2.y }), void 0 !== u2.x1 && s3.push({ x: u2.x1, y: -u2.y1 }), void 0 !== u2.x2 && s3.push({ x: u2.x2, y: -u2.y2 });
            }
            i3.fillStyle = "blue", o3(n2, e3, t3, r3), i3.fillStyle = "red", o3(s3, e3, t3, r3);
          }, h.prototype.drawMetrics = function(e3, t3, r3, o3) {
            t3 = void 0 !== t3 ? t3 : 0, r3 = void 0 !== r3 ? r3 : 0, o3 = 1 / this.path.unitsPerEm * (o3 = void 0 !== o3 ? o3 : 24), e3.lineWidth = 1, e3.strokeStyle = "black", d.line(e3, t3, -1e4, t3, 1e4), d.line(e3, -1e4, r3, 1e4, r3);
            var n2 = this.xMin || 0, s3 = this.yMin || 0, i3 = this.xMax || 0, a2 = this.yMax || 0, l2 = this.advanceWidth || 0;
            e3.strokeStyle = "blue", d.line(e3, t3 + n2 * o3, -1e4, t3 + n2 * o3, 1e4), d.line(e3, t3 + i3 * o3, -1e4, t3 + i3 * o3, 1e4), d.line(e3, -1e4, r3 + -s3 * o3, 1e4, r3 + -s3 * o3), d.line(e3, -1e4, r3 + -a2 * o3, 1e4, r3 + -a2 * o3), e3.strokeStyle = "green", d.line(e3, t3 + l2 * o3, -1e4, t3 + l2 * o3, 1e4);
          }, Ae.prototype.get = function(e3) {
            return "function" == typeof this.glyphs[e3] && (this.glyphs[e3] = this.glyphs[e3]()), this.glyphs[e3];
          }, Ae.prototype.push = function(e3, t3) {
            this.glyphs[e3] = t3, this.length++;
          };
          var p = { GlyphSet: Ae, glyphLoader: function(e3, t3) {
            return new h({ index: t3, font: e3 });
          }, ttfGlyphLoader: function(r3, e3, o3, n2, s3, i3) {
            return function() {
              var t3 = new h({ index: e3, font: r3 });
              return t3.path = function() {
                o3(t3, n2, s3);
                var e4 = i3(r3.glyphs, t3);
                return e4.unitsPerEm = r3.unitsPerEm, e4;
              }, ke(t3, "xMin", "_xMin"), ke(t3, "xMax", "_xMax"), ke(t3, "yMin", "_yMin"), ke(t3, "yMax", "_yMax"), t3;
            };
          }, cffGlyphLoader: function(r3, e3, o3, n2) {
            return function() {
              var t3 = new h({ index: e3, font: r3 });
              return t3.path = function() {
                var e4 = o3(r3, t3, n2);
                return e4.unitsPerEm = r3.unitsPerEm, e4;
              }, t3;
            };
          } };
          function Pe(e3) {
            e3 = e3.length < 1240 ? 107 : e3.length < 33900 ? 1131 : 32768;
            return e3;
          }
          function y(e3, t3, r3) {
            var o3, n2 = [], s3 = [], i3 = R.getCard16(e3, t3);
            if (0 !== i3) {
              for (var a2 = R.getByte(e3, t3 + 2), l2 = t3 + (i3 + 1) * a2 + 2, u2 = t3 + 3, c2 = 0; c2 < i3 + 1; c2 += 1)
                n2.push(R.getOffset(e3, u2, a2)), u2 += a2;
              o3 = l2 + n2[i3];
            } else
              o3 = t3 + 2;
            for (var d2 = 0; d2 < n2.length - 1; d2 += 1) {
              var f2 = R.getBytes(e3, l2 + n2[d2], l2 + n2[d2 + 1]);
              r3 && (f2 = r3(f2)), s3.push(f2);
            }
            return { objects: s3, startOffset: t3, endOffset: o3 };
          }
          function Re(e3, t3) {
            if (28 === t3)
              return e3.parseByte() << 8 | e3.parseByte();
            if (29 === t3)
              return e3.parseByte() << 24 | e3.parseByte() << 16 | e3.parseByte() << 8 | e3.parseByte();
            if (30 === t3) {
              for (var r3 = e3, o3 = "", n2 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"]; ; ) {
                var s3 = r3.parseByte(), i3 = s3 >> 4, s3 = 15 & s3;
                if (15 == i3)
                  break;
                if (o3 += n2[i3], 15 == s3)
                  break;
                o3 += n2[s3];
              }
              return parseFloat(o3);
            }
            if (32 <= t3 && t3 <= 246)
              return t3 - 139;
            if (247 <= t3 && t3 <= 250)
              return 256 * (t3 - 247) + e3.parseByte() + 108;
            if (251 <= t3 && t3 <= 254)
              return 256 * -(t3 - 251) - e3.parseByte() - 108;
            throw new Error("Invalid b0 " + t3);
          }
          function De(e3, t3, r3) {
            var o3 = new R.Parser(e3, t3 = void 0 !== t3 ? t3 : 0), n2 = [], s3 = [];
            for (r3 = void 0 !== r3 ? r3 : e3.length; o3.relativeOffset < r3; ) {
              var i3 = o3.parseByte();
              i3 <= 21 ? (12 === i3 && (i3 = 1200 + o3.parseByte()), n2.push([i3, s3]), s3 = []) : s3.push(Re(o3, i3));
            }
            for (var a2 = n2, l2 = {}, u2 = 0; u2 < a2.length; u2 += 1) {
              var c2 = a2[u2][0], d2 = a2[u2][1], f2 = void 0, f2 = 1 === d2.length ? d2[0] : d2;
              if (l2.hasOwnProperty(c2) && !isNaN(l2[c2]))
                throw new Error("Object " + l2 + " already has key " + c2);
              l2[c2] = f2;
            }
            return l2;
          }
          function Ie(e3, t3) {
            return t3 = t3 <= 390 ? Se[t3] : e3[t3 - 391];
          }
          function Ue(e3, t3, r3) {
            for (var o3, n2 = {}, s3 = 0; s3 < t3.length; s3 += 1) {
              var i3 = t3[s3];
              if (Array.isArray(i3.type)) {
                var a2 = [];
                a2.length = i3.type.length;
                for (var l2 = 0; l2 < i3.type.length; l2++)
                  void 0 === (o3 = void 0 !== e3[i3.op] ? e3[i3.op][l2] : void 0) && (o3 = void 0 !== i3.value && void 0 !== i3.value[l2] ? i3.value[l2] : null), "SID" === i3.type[l2] && (o3 = Ie(r3, o3)), a2[l2] = o3;
                n2[i3.name] = a2;
              } else
                void 0 === (o3 = e3[i3.op]) && (o3 = void 0 !== i3.value ? i3.value : null), "SID" === i3.type && (o3 = Ie(r3, o3)), n2[i3.name] = o3;
            }
            return n2;
          }
          var Ne = [{ name: "version", op: 0, type: "SID" }, { name: "notice", op: 1, type: "SID" }, { name: "copyright", op: 1200, type: "SID" }, { name: "fullName", op: 2, type: "SID" }, { name: "familyName", op: 3, type: "SID" }, { name: "weight", op: 4, type: "SID" }, { name: "isFixedPitch", op: 1201, type: "number", value: 0 }, { name: "italicAngle", op: 1202, type: "number", value: 0 }, { name: "underlinePosition", op: 1203, type: "number", value: -100 }, { name: "underlineThickness", op: 1204, type: "number", value: 50 }, { name: "paintType", op: 1205, type: "number", value: 0 }, { name: "charstringType", op: 1206, type: "number", value: 2 }, { name: "fontMatrix", op: 1207, type: ["real", "real", "real", "real", "real", "real"], value: [1e-3, 0, 0, 1e-3, 0, 0] }, { name: "uniqueId", op: 13, type: "number" }, { name: "fontBBox", op: 5, type: ["number", "number", "number", "number"], value: [0, 0, 0, 0] }, { name: "strokeWidth", op: 1208, type: "number", value: 0 }, { name: "xuid", op: 14, type: [], value: null }, { name: "charset", op: 15, type: "offset", value: 0 }, { name: "encoding", op: 16, type: "offset", value: 0 }, { name: "charStrings", op: 17, type: "offset", value: 0 }, { name: "private", op: 18, type: ["number", "offset"], value: [0, 0] }, { name: "ros", op: 1230, type: ["SID", "SID", "number"] }, { name: "cidFontVersion", op: 1231, type: "number", value: 0 }, { name: "cidFontRevision", op: 1232, type: "number", value: 0 }, { name: "cidFontType", op: 1233, type: "number", value: 0 }, { name: "cidCount", op: 1234, type: "number", value: 8720 }, { name: "uidBase", op: 1235, type: "number" }, { name: "fdArray", op: 1236, type: "offset" }, { name: "fdSelect", op: 1237, type: "offset" }, { name: "fontName", op: 1238, type: "SID" }], Fe = [{ name: "subrs", op: 19, type: "offset", value: 0 }, { name: "defaultWidthX", op: 20, type: "number", value: 0 }, { name: "nominalWidthX", op: 21, type: "number", value: 0 }];
          function Be(e3, t3, r3, o3) {
            return Ue(De(e3, t3, r3), Fe, o3);
          }
          function Ge(e3, t3, r3, o3) {
            for (var n2 = [], s3 = 0; s3 < r3.length; s3 += 1) {
              var i3 = new DataView(new Uint8Array(r3[s3]).buffer), i3 = (a2 = o3, Ue(De(i3, 0, i3.byteLength), Ne, a2)), a2 = (i3._subrs = [], i3._subrsBias = 0, i3.private[0]), l2 = i3.private[1];
              0 !== a2 && 0 !== l2 && (a2 = Be(e3, l2 + t3, a2, o3), i3._defaultWidthX = a2.defaultWidthX, i3._nominalWidthX = a2.nominalWidthX, 0 !== a2.subrs && (l2 = y(e3, l2 + a2.subrs + t3), i3._subrs = l2.objects, i3._subrsBias = Pe(i3._subrs)), i3._privateDict = a2), n2.push(i3);
            }
            return n2;
          }
          function Ve(y2, g2, e3) {
            var v2, b2, j2, _2, t3, x2, w2, r3, S2, M2 = new f(), E2 = [], T2 = 0, C2 = false, O2 = false, L2 = 0, k2 = 0, A2 = (S2 = (y2.isCIDFont ? (t3 = y2.tables.cff.topDict._fdSelect[g2.index], t3 = y2.tables.cff.topDict._fdArray[t3], x2 = t3._subrs, w2 = t3._subrsBias, r3 = t3._defaultWidthX, t3) : (x2 = y2.tables.cff.topDict._subrs, w2 = y2.tables.cff.topDict._subrsBias, r3 = y2.tables.cff.topDict._defaultWidthX, y2.tables.cff.topDict))._nominalWidthX, r3);
            function P2(e4, t4) {
              O2 && M2.closePath(), M2.moveTo(e4, t4), O2 = true;
            }
            function R2() {
              E2.length % 2 == 0 || C2 || (A2 = E2.shift() + S2), T2 += E2.length >> 1, E2.length = 0, C2 = true;
            }
            return function e4(t4) {
              for (var r4, o3, n2, s3, i3, a2, l2, u2, c2, d2, f2, h2, p2 = 0; p2 < t4.length; ) {
                var m2 = t4[p2];
                switch (p2 += 1, m2) {
                  case 1:
                  case 3:
                    R2();
                    break;
                  case 4:
                    1 < E2.length && !C2 && (A2 = E2.shift() + S2, C2 = true), k2 += E2.pop(), P2(L2, k2);
                    break;
                  case 5:
                    for (; 0 < E2.length; )
                      L2 += E2.shift(), k2 += E2.shift(), M2.lineTo(L2, k2);
                    break;
                  case 6:
                    for (; 0 < E2.length && (L2 += E2.shift(), M2.lineTo(L2, k2), 0 !== E2.length); )
                      k2 += E2.shift(), M2.lineTo(L2, k2);
                    break;
                  case 7:
                    for (; 0 < E2.length && (k2 += E2.shift(), M2.lineTo(L2, k2), 0 !== E2.length); )
                      L2 += E2.shift(), M2.lineTo(L2, k2);
                    break;
                  case 8:
                    for (; 0 < E2.length; )
                      v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  case 10:
                    i3 = E2.pop() + w2, (a2 = x2[i3]) && e4(a2);
                    break;
                  case 11:
                    return;
                  case 12:
                    switch (m2 = t4[p2], p2 += 1, m2) {
                      case 35:
                        v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), l2 = j2 + E2.shift(), u2 = _2 + E2.shift(), c2 = l2 + E2.shift(), d2 = u2 + E2.shift(), f2 = c2 + E2.shift(), h2 = d2 + E2.shift(), L2 = f2 + E2.shift(), k2 = h2 + E2.shift(), E2.shift(), M2.curveTo(v2, b2, j2, _2, l2, u2), M2.curveTo(c2, d2, f2, h2, L2, k2);
                        break;
                      case 34:
                        v2 = L2 + E2.shift(), b2 = k2, j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), l2 = j2 + E2.shift(), u2 = _2, c2 = l2 + E2.shift(), d2 = _2, f2 = c2 + E2.shift(), h2 = k2, L2 = f2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, l2, u2), M2.curveTo(c2, d2, f2, h2, L2, k2);
                        break;
                      case 36:
                        v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), l2 = j2 + E2.shift(), u2 = _2, c2 = l2 + E2.shift(), d2 = _2, f2 = c2 + E2.shift(), h2 = d2 + E2.shift(), L2 = f2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, l2, u2), M2.curveTo(c2, d2, f2, h2, L2, k2);
                        break;
                      case 37:
                        v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), l2 = j2 + E2.shift(), u2 = _2 + E2.shift(), c2 = l2 + E2.shift(), d2 = u2 + E2.shift(), f2 = c2 + E2.shift(), h2 = d2 + E2.shift(), Math.abs(f2 - L2) > Math.abs(h2 - k2) ? L2 = f2 + E2.shift() : k2 = h2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, l2, u2), M2.curveTo(c2, d2, f2, h2, L2, k2);
                        break;
                      default:
                        console.log("Glyph " + g2.index + ": unknown operator 1200" + m2), E2.length = 0;
                    }
                    break;
                  case 14:
                    0 < E2.length && !C2 && (A2 = E2.shift() + S2, C2 = true), O2 && (M2.closePath(), O2 = false);
                    break;
                  case 18:
                    R2();
                    break;
                  case 19:
                  case 20:
                    R2(), p2 += T2 + 7 >> 3;
                    break;
                  case 21:
                    2 < E2.length && !C2 && (A2 = E2.shift() + S2, C2 = true), k2 += E2.pop(), P2(L2 += E2.pop(), k2);
                    break;
                  case 22:
                    1 < E2.length && !C2 && (A2 = E2.shift() + S2, C2 = true), P2(L2 += E2.pop(), k2);
                    break;
                  case 23:
                    R2();
                    break;
                  case 24:
                    for (; 2 < E2.length; )
                      v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    L2 += E2.shift(), k2 += E2.shift(), M2.lineTo(L2, k2);
                    break;
                  case 25:
                    for (; 6 < E2.length; )
                      L2 += E2.shift(), k2 += E2.shift(), M2.lineTo(L2, k2);
                    v2 = L2 + E2.shift(), b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  case 26:
                    for (E2.length % 2 && (L2 += E2.shift()); 0 < E2.length; )
                      v2 = L2, b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2, k2 = _2 + E2.shift(), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  case 27:
                    for (E2.length % 2 && (k2 += E2.shift()); 0 < E2.length; )
                      v2 = L2 + E2.shift(), b2 = k2, j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2, M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  case 28:
                    r4 = t4[p2], o3 = t4[p2 + 1], E2.push((r4 << 24 | o3 << 16) >> 16), p2 += 2;
                    break;
                  case 29:
                    i3 = E2.pop() + y2.gsubrsBias, (a2 = y2.gsubrs[i3]) && e4(a2);
                    break;
                  case 30:
                    for (; 0 < E2.length && (v2 = L2, b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2 + (1 === E2.length ? E2.shift() : 0), M2.curveTo(v2, b2, j2, _2, L2, k2), 0 !== E2.length); )
                      v2 = L2 + E2.shift(), b2 = k2, j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), k2 = _2 + E2.shift(), L2 = j2 + (1 === E2.length ? E2.shift() : 0), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  case 31:
                    for (; 0 < E2.length && (v2 = L2 + E2.shift(), b2 = k2, j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), k2 = _2 + E2.shift(), L2 = j2 + (1 === E2.length ? E2.shift() : 0), M2.curveTo(v2, b2, j2, _2, L2, k2), 0 !== E2.length); )
                      v2 = L2, b2 = k2 + E2.shift(), j2 = v2 + E2.shift(), _2 = b2 + E2.shift(), L2 = j2 + E2.shift(), k2 = _2 + (1 === E2.length ? E2.shift() : 0), M2.curveTo(v2, b2, j2, _2, L2, k2);
                    break;
                  default:
                    m2 < 32 ? console.log("Glyph " + g2.index + ": unknown operator " + m2) : m2 < 247 ? E2.push(m2 - 139) : m2 < 251 ? (r4 = t4[p2], p2 += 1, E2.push(256 * (m2 - 247) + r4 + 108)) : m2 < 255 ? (r4 = t4[p2], p2 += 1, E2.push(256 * -(m2 - 251) - r4 - 108)) : (r4 = t4[p2], o3 = t4[p2 + 1], n2 = t4[p2 + 2], s3 = t4[p2 + 3], p2 += 4, E2.push((r4 << 24 | o3 << 16 | n2 << 8 | s3) / 65536));
                }
              }
            }(e3), g2.advanceWidth = A2, M2;
          }
          function ze(e3, t3) {
            var r3, o3 = Se.indexOf(e3);
            return 0 <= o3 && (r3 = o3), 0 <= (o3 = t3.indexOf(e3)) ? r3 = o3 + Se.length : (r3 = Se.length + t3.length, t3.push(e3)), r3;
          }
          function He(e3, t3, r3) {
            for (var o3 = {}, n2 = 0; n2 < e3.length; n2 += 1) {
              var s3 = e3[n2], i3 = t3[s3.name];
              void 0 === i3 || function e4(t4, r4) {
                if (t4 === r4)
                  return 1;
                if (Array.isArray(t4) && Array.isArray(r4) && t4.length === r4.length) {
                  for (var o4 = 0; o4 < t4.length; o4 += 1)
                    if (!e4(t4[o4], r4[o4]))
                      return;
                  return 1;
                }
              }(i3, s3.value) || ("SID" === s3.type && (i3 = ze(i3, r3)), o3[s3.op] = { name: s3.name, type: s3.type, value: i3 });
            }
            return o3;
          }
          function We(e3, t3) {
            var r3 = new S.Record("Top DICT", [{ name: "dict", type: "DICT", value: {} }]);
            return r3.dict = He(Ne, e3, t3), r3;
          }
          function qe(e3) {
            var t3 = new S.Record("Top DICT INDEX", [{ name: "topDicts", type: "INDEX", value: [] }]);
            return t3.topDicts = [{ name: "topDict_0", type: "TABLE", value: e3 }], t3;
          }
          function Xe(e3) {
            for (var t3 = new S.Record("CharStrings INDEX", [{ name: "charStrings", type: "INDEX", value: [] }]), r3 = 0; r3 < e3.length; r3 += 1) {
              var o3 = e3.get(r3), n2 = function(e4) {
                for (var t4 = [], r4 = e4.path, o4 = (t4.push({ name: "width", type: "NUMBER", value: e4.advanceWidth }), 0), n3 = 0, s3 = 0; s3 < r4.commands.length; s3 += 1) {
                  var i3, a2, l2, u2, c2 = void 0, d2 = void 0, f2 = r4.commands[s3];
                  "M" === (f2 = "Q" === f2.type ? { type: "C", x: f2.x, y: f2.y, x1: 1 / 3 * o4 + 2 / 3 * f2.x1, y1: 1 / 3 * n3 + 2 / 3 * f2.y1, x2: 1 / 3 * f2.x + 2 / 3 * f2.x1, y2: 1 / 3 * f2.y + 2 / 3 * f2.y1 } : f2).type ? (c2 = Math.round(f2.x - o4), d2 = Math.round(f2.y - n3), t4.push({ name: "dx", type: "NUMBER", value: c2 }), t4.push({ name: "dy", type: "NUMBER", value: d2 }), t4.push({ name: "rmoveto", type: "OP", value: 21 }), o4 = Math.round(f2.x), n3 = Math.round(f2.y)) : "L" === f2.type ? (c2 = Math.round(f2.x - o4), d2 = Math.round(f2.y - n3), t4.push({ name: "dx", type: "NUMBER", value: c2 }), t4.push({ name: "dy", type: "NUMBER", value: d2 }), t4.push({ name: "rlineto", type: "OP", value: 5 }), o4 = Math.round(f2.x), n3 = Math.round(f2.y)) : "C" === f2.type && (i3 = Math.round(f2.x1 - o4), a2 = Math.round(f2.y1 - n3), l2 = Math.round(f2.x2 - f2.x1), u2 = Math.round(f2.y2 - f2.y1), c2 = Math.round(f2.x - f2.x2), d2 = Math.round(f2.y - f2.y2), t4.push({ name: "dx1", type: "NUMBER", value: i3 }), t4.push({ name: "dy1", type: "NUMBER", value: a2 }), t4.push({ name: "dx2", type: "NUMBER", value: l2 }), t4.push({ name: "dy2", type: "NUMBER", value: u2 }), t4.push({ name: "dx", type: "NUMBER", value: c2 }), t4.push({ name: "dy", type: "NUMBER", value: d2 }), t4.push({ name: "rrcurveto", type: "OP", value: 8 }), o4 = Math.round(f2.x), n3 = Math.round(f2.y));
                }
                return t4.push({ name: "endchar", type: "OP", value: 14 }), t4;
              }(o3);
              t3.charStrings.push({ name: o3.name, type: "CHARSTRING", value: n2 });
            }
            return t3;
          }
          var Ye = { parse: function(e3, t3, r3) {
            r3.tables.cff = {}, o3 = e3, n2 = t3, (s3 = {}).formatMajor = R.getCard8(o3, n2), s3.formatMinor = R.getCard8(o3, n2 + 1), s3.size = R.getCard8(o3, n2 + 2), s3.offsetSize = R.getCard8(o3, n2 + 3), s3.startOffset = n2, s3.endOffset = n2 + 4;
            var o3 = y(e3, s3.endOffset, R.bytesToString), n2 = y(e3, o3.endOffset), s3 = y(e3, n2.endOffset, R.bytesToString), o3 = y(e3, s3.endOffset);
            if (r3.gsubrs = o3.objects, r3.gsubrsBias = Pe(r3.gsubrs), 1 !== (o3 = Ge(e3, t3, n2.objects, s3.objects)).length)
              throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " + o3.length);
            if (n2 = o3[0], (r3.tables.cff.topDict = n2)._privateDict && (r3.defaultWidthX = n2._privateDict.defaultWidthX, r3.nominalWidthX = n2._privateDict.nominalWidthX), void 0 !== n2.ros[0] && void 0 !== n2.ros[1] && (r3.isCIDFont = true), r3.isCIDFont) {
              var o3 = n2.fdArray, i3 = n2.fdSelect;
              if (0 === o3 || 0 === i3)
                throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");
              o3 = Ge(e3, t3, y(e3, o3 += t3).objects, s3.objects);
              n2._fdArray = o3, n2._fdSelect = function(e4, t4, r4, o4) {
                var n3, s4 = [], i4 = new R.Parser(e4, t4);
                if (0 === (e4 = i4.parseCard8()))
                  for (var a3 = 0; a3 < r4; a3++) {
                    if (o4 <= (n3 = i4.parseCard8()))
                      throw new Error("CFF table CID Font FDSelect has bad FD index value " + n3 + " (FD count " + o4 + ")");
                    s4.push(n3);
                  }
                else {
                  if (3 !== e4)
                    throw new Error("CFF Table CID Font FDSelect table has unsupported format " + e4);
                  var l3, u3 = i4.parseCard16(), c2 = i4.parseCard16();
                  if (0 !== c2)
                    throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID " + c2);
                  for (var d2 = 0; d2 < u3; d2++) {
                    if (n3 = i4.parseCard8(), l3 = i4.parseCard16(), o4 <= n3)
                      throw new Error("CFF table CID Font FDSelect has bad FD index value " + n3 + " (FD count " + o4 + ")");
                    if (r4 < l3)
                      throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID " + l3);
                    for (; c2 < l3; c2++)
                      s4.push(n3);
                    c2 = l3;
                  }
                  if (l3 !== r4)
                    throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID " + l3);
                }
                return s4;
              }(e3, i3 += t3, r3.numGlyphs, o3.length);
            }
            var i3 = t3 + n2.private[1], o3 = Be(e3, i3, n2.private[0], s3.objects), a2 = (r3.defaultWidthX = o3.defaultWidthX, r3.nominalWidthX = o3.nominalWidthX, 0 !== o3.subrs ? (i3 = y(e3, i3 + o3.subrs), r3.subrs = i3.objects, r3.subrsBias = Pe(r3.subrs)) : (r3.subrs = [], r3.subrsBias = 0), y(e3, t3 + n2.charStrings)), o3 = (r3.nGlyphs = a2.objects.length, function(e4, t4, r4, o4) {
              var n3 = new R.Parser(e4, t4), s4 = (--r4, [".notdef"]);
              if (0 === (e4 = n3.parseCard8()))
                for (var i4 = 0; i4 < r4; i4 += 1)
                  a3 = n3.parseSID(), s4.push(Ie(o4, a3));
              else if (1 === e4)
                for (; s4.length <= r4; )
                  for (var a3 = n3.parseSID(), l3 = n3.parseCard8(), u3 = 0; u3 <= l3; u3 += 1)
                    s4.push(Ie(o4, a3)), a3 += 1;
              else {
                if (2 !== e4)
                  throw new Error("Unknown charset format " + e4);
                for (; s4.length <= r4; ) {
                  a3 = n3.parseSID(), l3 = n3.parseCard16();
                  for (var c2 = 0; c2 <= l3; c2 += 1)
                    s4.push(Ie(o4, a3)), a3 += 1;
                }
              }
              return s4;
            }(e3, t3 + n2.charset, r3.nGlyphs, s3.objects));
            0 === n2.encoding ? r3.cffEncoding = new Oe(Me, o3) : 1 === n2.encoding ? r3.cffEncoding = new Oe(Ee, o3) : r3.cffEncoding = function(e4, t4, r4) {
              var o4 = {}, n3 = new R.Parser(e4, t4);
              if (0 === (e4 = n3.parseCard8()))
                for (var s4 = n3.parseCard8(), i4 = 0; i4 < s4; i4 += 1)
                  o4[l3 = n3.parseCard8()] = i4;
              else {
                if (1 !== e4)
                  throw new Error("Unknown encoding format " + e4);
                for (var a3 = n3.parseCard8(), l3 = 1, u3 = 0; u3 < a3; u3 += 1)
                  for (var c2 = n3.parseCard8(), d2 = n3.parseCard8(), f2 = c2; f2 <= c2 + d2; f2 += 1)
                    o4[f2] = l3, l3 += 1;
              }
              return new Oe(o4, r4);
            }(e3, t3 + n2.encoding, o3), r3.encoding = r3.encoding || r3.cffEncoding, r3.glyphs = new p.GlyphSet(r3);
            for (var l2 = 0; l2 < r3.nGlyphs; l2 += 1) {
              var u2 = a2.objects[l2];
              r3.glyphs.push(l2, p.cffGlyphLoader(r3, l2, Ve, u2));
            }
          }, make: function(e3, t3) {
            for (var r3, o3 = new S.Table("CFF ", [{ name: "header", type: "RECORD" }, { name: "nameIndex", type: "RECORD" }, { name: "topDictIndex", type: "RECORD" }, { name: "stringIndex", type: "RECORD" }, { name: "globalSubrIndex", type: "RECORD" }, { name: "charsets", type: "RECORD" }, { name: "charStringsIndex", type: "RECORD" }, { name: "privateDict", type: "RECORD" }]), n2 = 1 / t3.unitsPerEm, n2 = { version: t3.version, fullName: t3.fullName, familyName: t3.familyName, weight: t3.weightName, fontBBox: t3.fontBBox || [0, 0, 0, 0], fontMatrix: [n2, 0, 0, n2, 0, 0], charset: 999, encoding: 0, charStrings: 999, private: [0, 999] }, s3 = [], i3 = 1; i3 < e3.length; i3 += 1)
              r3 = e3.get(i3), s3.push(r3.name);
            var a2, l2, u2 = [], t3 = (o3.header = new S.Record("Header", [{ name: "major", type: "Card8", value: 1 }, { name: "minor", type: "Card8", value: 0 }, { name: "hdrSize", type: "Card8", value: 4 }, { name: "major", type: "Card8", value: 1 }]), o3.nameIndex = function(e4) {
              var t4 = new S.Record("Name INDEX", [{ name: "names", type: "INDEX", value: [] }]);
              t4.names = [];
              for (var r4 = 0; r4 < e4.length; r4 += 1)
                t4.names.push({ name: "name_" + r4, type: "NAME", value: e4[r4] });
              return t4;
            }([t3.postScriptName]), We(n2, u2)), c2 = (o3.topDictIndex = qe(t3), o3.globalSubrIndex = new S.Record("Global Subr INDEX", [{ name: "subrs", type: "INDEX", value: [] }]), o3.charsets = function(e4, t4) {
              for (var r4 = new S.Record("Charsets", [{ name: "format", type: "Card8", value: 0 }]), o4 = 0; o4 < e4.length; o4 += 1) {
                var n3 = ze(e4[o4], t4);
                r4.fields.push({ name: "glyph_" + o4, type: "SID", value: n3 });
              }
              return r4;
            }(s3, u2), o3.charStringsIndex = Xe(e3), o3.privateDict = (c2 = {}, a2 = u2, (l2 = new S.Record("Private DICT", [{ name: "dict", type: "DICT", value: {} }])).dict = He(Fe, c2, a2), l2), o3.stringIndex = function(e4) {
              var t4 = new S.Record("String INDEX", [{ name: "strings", type: "INDEX", value: [] }]);
              t4.strings = [];
              for (var r4 = 0; r4 < e4.length; r4 += 1)
                t4.strings.push({ name: "string_" + r4, type: "STRING", value: e4[r4] });
              return t4;
            }(u2), o3.header.sizeOf() + o3.nameIndex.sizeOf() + o3.topDictIndex.sizeOf() + o3.stringIndex.sizeOf() + o3.globalSubrIndex.sizeOf());
            return n2.charset = c2, n2.encoding = 0, n2.charStrings = n2.charset + o3.charsets.sizeOf(), n2.private[1] = n2.charStrings + o3.charStringsIndex.sizeOf(), t3 = We(n2, u2), o3.topDictIndex = qe(t3), o3;
          } };
          var Ze = { parse: function(e3, t3) {
            var r3 = {}, e3 = new R.Parser(e3, t3);
            return r3.version = e3.parseVersion(), r3.fontRevision = Math.round(1e3 * e3.parseFixed()) / 1e3, r3.checkSumAdjustment = e3.parseULong(), r3.magicNumber = e3.parseULong(), P.argument(1594834165 === r3.magicNumber, "Font header has wrong magic number."), r3.flags = e3.parseUShort(), r3.unitsPerEm = e3.parseUShort(), r3.created = e3.parseLongDateTime(), r3.modified = e3.parseLongDateTime(), r3.xMin = e3.parseShort(), r3.yMin = e3.parseShort(), r3.xMax = e3.parseShort(), r3.yMax = e3.parseShort(), r3.macStyle = e3.parseUShort(), r3.lowestRecPPEM = e3.parseUShort(), r3.fontDirectionHint = e3.parseShort(), r3.indexToLocFormat = e3.parseShort(), r3.glyphDataFormat = e3.parseShort(), r3;
          }, make: function(e3) {
            var t3 = Math.round(new Date().getTime() / 1e3) + 2082844800, r3 = t3;
            return e3.createdTimestamp && (r3 = e3.createdTimestamp + 2082844800), new S.Table("head", [{ name: "version", type: "FIXED", value: 65536 }, { name: "fontRevision", type: "FIXED", value: 65536 }, { name: "checkSumAdjustment", type: "ULONG", value: 0 }, { name: "magicNumber", type: "ULONG", value: 1594834165 }, { name: "flags", type: "USHORT", value: 0 }, { name: "unitsPerEm", type: "USHORT", value: 1e3 }, { name: "created", type: "LONGDATETIME", value: r3 }, { name: "modified", type: "LONGDATETIME", value: t3 }, { name: "xMin", type: "SHORT", value: 0 }, { name: "yMin", type: "SHORT", value: 0 }, { name: "xMax", type: "SHORT", value: 0 }, { name: "yMax", type: "SHORT", value: 0 }, { name: "macStyle", type: "USHORT", value: 0 }, { name: "lowestRecPPEM", type: "USHORT", value: 0 }, { name: "fontDirectionHint", type: "SHORT", value: 2 }, { name: "indexToLocFormat", type: "SHORT", value: 0 }, { name: "glyphDataFormat", type: "SHORT", value: 0 }], e3);
          } };
          var Qe = { parse: function(e3, t3) {
            var r3 = {}, e3 = new R.Parser(e3, t3);
            return r3.version = e3.parseVersion(), r3.ascender = e3.parseShort(), r3.descender = e3.parseShort(), r3.lineGap = e3.parseShort(), r3.advanceWidthMax = e3.parseUShort(), r3.minLeftSideBearing = e3.parseShort(), r3.minRightSideBearing = e3.parseShort(), r3.xMaxExtent = e3.parseShort(), r3.caretSlopeRise = e3.parseShort(), r3.caretSlopeRun = e3.parseShort(), r3.caretOffset = e3.parseShort(), e3.relativeOffset += 8, r3.metricDataFormat = e3.parseShort(), r3.numberOfHMetrics = e3.parseUShort(), r3;
          }, make: function(e3) {
            return new S.Table("hhea", [{ name: "version", type: "FIXED", value: 65536 }, { name: "ascender", type: "FWORD", value: 0 }, { name: "descender", type: "FWORD", value: 0 }, { name: "lineGap", type: "FWORD", value: 0 }, { name: "advanceWidthMax", type: "UFWORD", value: 0 }, { name: "minLeftSideBearing", type: "FWORD", value: 0 }, { name: "minRightSideBearing", type: "FWORD", value: 0 }, { name: "xMaxExtent", type: "FWORD", value: 0 }, { name: "caretSlopeRise", type: "SHORT", value: 1 }, { name: "caretSlopeRun", type: "SHORT", value: 0 }, { name: "caretOffset", type: "SHORT", value: 0 }, { name: "reserved1", type: "SHORT", value: 0 }, { name: "reserved2", type: "SHORT", value: 0 }, { name: "reserved3", type: "SHORT", value: 0 }, { name: "reserved4", type: "SHORT", value: 0 }, { name: "metricDataFormat", type: "SHORT", value: 0 }, { name: "numberOfHMetrics", type: "USHORT", value: 0 }], e3);
          } };
          var Ke = { parse: function(e3, t3, r3, o3, n2) {
            for (var s3, i3, a2 = new R.Parser(e3, t3), l2 = 0; l2 < o3; l2 += 1) {
              l2 < r3 && (s3 = a2.parseUShort(), i3 = a2.parseShort());
              var u2 = n2.get(l2);
              u2.advanceWidth = s3, u2.leftSideBearing = i3;
            }
          }, make: function(e3) {
            for (var t3 = new S.Table("hmtx", []), r3 = 0; r3 < e3.length; r3 += 1) {
              var o3 = e3.get(r3), n2 = o3.advanceWidth || 0, o3 = o3.leftSideBearing || 0;
              t3.fields.push({ name: "advanceWidth_" + r3, type: "USHORT", value: n2 }), t3.fields.push({ name: "leftSideBearing_" + r3, type: "SHORT", value: o3 });
            }
            return t3;
          } };
          var Je = { make: function(e3) {
            for (var t3 = new S.Table("ltag", [{ name: "version", type: "ULONG", value: 1 }, { name: "flags", type: "ULONG", value: 0 }, { name: "numTags", type: "ULONG", value: e3.length }]), r3 = "", o3 = 12 + 4 * e3.length, n2 = 0; n2 < e3.length; ++n2) {
              var s3 = r3.indexOf(e3[n2]);
              s3 < 0 && (s3 = r3.length, r3 += e3[n2]), t3.fields.push({ name: "offset " + n2, type: "USHORT", value: o3 + s3 }), t3.fields.push({ name: "length " + n2, type: "USHORT", value: e3[n2].length });
            }
            return t3.fields.push({ name: "stringPool", type: "CHARARRAY", value: r3 }), t3;
          }, parse: function(e3, t3) {
            for (var r3 = new R.Parser(e3, t3), o3 = r3.parseULong(), n2 = (P.argument(1 === o3, "Unsupported ltag table version."), r3.skip("uLong", 1), r3.parseULong()), s3 = [], i3 = 0; i3 < n2; i3++) {
              for (var a2 = "", l2 = t3 + r3.parseUShort(), u2 = r3.parseUShort(), c2 = l2; c2 < l2 + u2; ++c2)
                a2 += String.fromCharCode(e3.getInt8(c2));
              s3.push(a2);
            }
            return s3;
          } };
          var $e = { parse: function(e3, t3) {
            var r3 = {}, e3 = new R.Parser(e3, t3);
            return r3.version = e3.parseVersion(), r3.numGlyphs = e3.parseUShort(), 1 === r3.version && (r3.maxPoints = e3.parseUShort(), r3.maxContours = e3.parseUShort(), r3.maxCompositePoints = e3.parseUShort(), r3.maxCompositeContours = e3.parseUShort(), r3.maxZones = e3.parseUShort(), r3.maxTwilightPoints = e3.parseUShort(), r3.maxStorage = e3.parseUShort(), r3.maxFunctionDefs = e3.parseUShort(), r3.maxInstructionDefs = e3.parseUShort(), r3.maxStackElements = e3.parseUShort(), r3.maxSizeOfInstructions = e3.parseUShort(), r3.maxComponentElements = e3.parseUShort(), r3.maxComponentDepth = e3.parseUShort()), r3;
          }, make: function(e3) {
            return new S.Table("maxp", [{ name: "version", type: "FIXED", value: 20480 }, { name: "numGlyphs", type: "USHORT", value: e3 }]);
          } }, et = ["copyright", "fontFamily", "fontSubfamily", "uniqueID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "manufacturerURL", "designerURL", "license", "licenseURL", "reserved", "preferredFamily", "preferredSubfamily", "compatibleFullName", "sampleText", "postScriptFindFontName", "wwsFamily", "wwsSubfamily"], tt = { 0: "en", 1: "fr", 2: "de", 3: "it", 4: "nl", 5: "sv", 6: "es", 7: "da", 8: "pt", 9: "no", 10: "he", 11: "ja", 12: "ar", 13: "fi", 14: "el", 15: "is", 16: "mt", 17: "tr", 18: "hr", 19: "zh-Hant", 20: "ur", 21: "hi", 22: "th", 23: "ko", 24: "lt", 25: "pl", 26: "hu", 27: "es", 28: "lv", 29: "se", 30: "fo", 31: "fa", 32: "ru", 33: "zh", 34: "nl-BE", 35: "ga", 36: "sq", 37: "ro", 38: "cz", 39: "sk", 40: "si", 41: "yi", 42: "sr", 43: "mk", 44: "bg", 45: "uk", 46: "be", 47: "uz", 48: "kk", 49: "az-Cyrl", 50: "az-Arab", 51: "hy", 52: "ka", 53: "mo", 54: "ky", 55: "tg", 56: "tk", 57: "mn-CN", 58: "mn", 59: "ps", 60: "ks", 61: "ku", 62: "sd", 63: "bo", 64: "ne", 65: "sa", 66: "mr", 67: "bn", 68: "as", 69: "gu", 70: "pa", 71: "or", 72: "ml", 73: "kn", 74: "ta", 75: "te", 76: "si", 77: "my", 78: "km", 79: "lo", 80: "vi", 81: "id", 82: "tl", 83: "ms", 84: "ms-Arab", 85: "am", 86: "ti", 87: "om", 88: "so", 89: "sw", 90: "rw", 91: "rn", 92: "ny", 93: "mg", 94: "eo", 128: "cy", 129: "eu", 130: "ca", 131: "la", 132: "qu", 133: "gn", 134: "ay", 135: "tt", 136: "ug", 137: "dz", 138: "jv", 139: "su", 140: "gl", 141: "af", 142: "br", 143: "iu", 144: "gd", 145: "gv", 146: "ga", 147: "to", 148: "el-polyton", 149: "kl", 150: "az", 151: "nn" }, rt = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 5, 11: 1, 12: 4, 13: 0, 14: 6, 15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 4, 21: 9, 22: 21, 23: 3, 24: 29, 25: 29, 26: 29, 27: 29, 28: 29, 29: 0, 30: 0, 31: 4, 32: 7, 33: 25, 34: 0, 35: 0, 36: 0, 37: 0, 38: 29, 39: 29, 40: 0, 41: 5, 42: 7, 43: 7, 44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 4, 51: 24, 52: 23, 53: 7, 54: 7, 55: 7, 56: 7, 57: 27, 58: 7, 59: 4, 60: 4, 61: 4, 62: 4, 63: 26, 64: 9, 65: 9, 66: 9, 67: 13, 68: 13, 69: 11, 70: 10, 71: 12, 72: 17, 73: 16, 74: 14, 75: 15, 76: 18, 77: 19, 78: 20, 79: 22, 80: 30, 81: 0, 82: 0, 83: 0, 84: 4, 85: 28, 86: 28, 87: 28, 88: 0, 89: 0, 90: 0, 91: 0, 92: 0, 93: 0, 94: 0, 128: 0, 129: 0, 130: 0, 131: 0, 132: 0, 133: 0, 134: 0, 135: 7, 136: 4, 137: 26, 138: 0, 139: 0, 140: 0, 141: 0, 142: 0, 143: 28, 144: 0, 145: 0, 146: 0, 147: 0, 148: 6, 149: 0, 150: 0, 151: 0 }, ot = { 1078: "af", 1052: "sq", 1156: "gsw", 1118: "am", 5121: "ar-DZ", 15361: "ar-BH", 3073: "ar", 2049: "ar-IQ", 11265: "ar-JO", 13313: "ar-KW", 12289: "ar-LB", 4097: "ar-LY", 6145: "ary", 8193: "ar-OM", 16385: "ar-QA", 1025: "ar-SA", 10241: "ar-SY", 7169: "aeb", 14337: "ar-AE", 9217: "ar-YE", 1067: "hy", 1101: "as", 2092: "az-Cyrl", 1068: "az", 1133: "ba", 1069: "eu", 1059: "be", 2117: "bn", 1093: "bn-IN", 8218: "bs-Cyrl", 5146: "bs", 1150: "br", 1026: "bg", 1027: "ca", 3076: "zh-HK", 5124: "zh-MO", 2052: "zh", 4100: "zh-SG", 1028: "zh-TW", 1155: "co", 1050: "hr", 4122: "hr-BA", 1029: "cs", 1030: "da", 1164: "prs", 1125: "dv", 2067: "nl-BE", 1043: "nl", 3081: "en-AU", 10249: "en-BZ", 4105: "en-CA", 9225: "en-029", 16393: "en-IN", 6153: "en-IE", 8201: "en-JM", 17417: "en-MY", 5129: "en-NZ", 13321: "en-PH", 18441: "en-SG", 7177: "en-ZA", 11273: "en-TT", 2057: "en-GB", 1033: "en", 12297: "en-ZW", 1061: "et", 1080: "fo", 1124: "fil", 1035: "fi", 2060: "fr-BE", 3084: "fr-CA", 1036: "fr", 5132: "fr-LU", 6156: "fr-MC", 4108: "fr-CH", 1122: "fy", 1110: "gl", 1079: "ka", 3079: "de-AT", 1031: "de", 5127: "de-LI", 4103: "de-LU", 2055: "de-CH", 1032: "el", 1135: "kl", 1095: "gu", 1128: "ha", 1037: "he", 1081: "hi", 1038: "hu", 1039: "is", 1136: "ig", 1057: "id", 1117: "iu", 2141: "iu-Latn", 2108: "ga", 1076: "xh", 1077: "zu", 1040: "it", 2064: "it-CH", 1041: "ja", 1099: "kn", 1087: "kk", 1107: "km", 1158: "quc", 1159: "rw", 1089: "sw", 1111: "kok", 1042: "ko", 1088: "ky", 1108: "lo", 1062: "lv", 1063: "lt", 2094: "dsb", 1134: "lb", 1071: "mk", 2110: "ms-BN", 1086: "ms", 1100: "ml", 1082: "mt", 1153: "mi", 1146: "arn", 1102: "mr", 1148: "moh", 1104: "mn", 2128: "mn-CN", 1121: "ne", 1044: "nb", 2068: "nn", 1154: "oc", 1096: "or", 1123: "ps", 1045: "pl", 1046: "pt", 2070: "pt-PT", 1094: "pa", 1131: "qu-BO", 2155: "qu-EC", 3179: "qu", 1048: "ro", 1047: "rm", 1049: "ru", 9275: "smn", 4155: "smj-NO", 5179: "smj", 3131: "se-FI", 1083: "se", 2107: "se-SE", 8251: "sms", 6203: "sma-NO", 7227: "sms", 1103: "sa", 7194: "sr-Cyrl-BA", 3098: "sr", 6170: "sr-Latn-BA", 2074: "sr-Latn", 1132: "nso", 1074: "tn", 1115: "si", 1051: "sk", 1060: "sl", 11274: "es-AR", 16394: "es-BO", 13322: "es-CL", 9226: "es-CO", 5130: "es-CR", 7178: "es-DO", 12298: "es-EC", 17418: "es-SV", 4106: "es-GT", 18442: "es-HN", 2058: "es-MX", 19466: "es-NI", 6154: "es-PA", 15370: "es-PY", 10250: "es-PE", 20490: "es-PR", 3082: "es", 1034: "es", 21514: "es-US", 14346: "es-UY", 8202: "es-VE", 2077: "sv-FI", 1053: "sv", 1114: "syr", 1064: "tg", 2143: "tzm", 1097: "ta", 1092: "tt", 1098: "te", 1054: "th", 1105: "bo", 1055: "tr", 1090: "tk", 1152: "ug", 1058: "uk", 1070: "hsb", 1056: "ur", 2115: "uz-Cyrl", 1091: "uz", 1066: "vi", 1106: "cy", 1160: "wo", 1157: "sah", 1144: "ii", 1130: "yo" };
          var nt = "utf-16", st = { 0: "macintosh", 1: "x-mac-japanese", 2: "x-mac-chinesetrad", 3: "x-mac-korean", 6: "x-mac-greek", 7: "x-mac-cyrillic", 9: "x-mac-devanagai", 10: "x-mac-gurmukhi", 11: "x-mac-gujarati", 12: "x-mac-oriya", 13: "x-mac-bengali", 14: "x-mac-tamil", 15: "x-mac-telugu", 16: "x-mac-kannada", 17: "x-mac-malayalam", 18: "x-mac-sinhalese", 19: "x-mac-burmese", 20: "x-mac-khmer", 21: "x-mac-thai", 22: "x-mac-lao", 23: "x-mac-georgian", 24: "x-mac-armenian", 25: "x-mac-chinesesimp", 26: "x-mac-tibetan", 27: "x-mac-mongolian", 28: "x-mac-ethiopic", 29: "x-mac-ce", 30: "x-mac-vietnamese", 31: "x-mac-extarabic" }, it = { 15: "x-mac-icelandic", 17: "x-mac-turkish", 18: "x-mac-croatian", 24: "x-mac-ce", 25: "x-mac-ce", 26: "x-mac-ce", 27: "x-mac-ce", 28: "x-mac-ce", 30: "x-mac-icelandic", 37: "x-mac-romanian", 38: "x-mac-ce", 39: "x-mac-ce", 40: "x-mac-ce", 143: "x-mac-inuit", 146: "x-mac-gaelic" };
          function at(e3, t3, r3) {
            switch (e3) {
              case 0:
                return nt;
              case 1:
                return it[r3] || st[t3];
              case 3:
                if (1 === t3 || 10 === t3)
                  return nt;
            }
          }
          function lt(e3) {
            var t3, r3 = {};
            for (t3 in e3)
              r3[e3[t3]] = parseInt(t3);
            return r3;
          }
          function ut(e3, t3, r3, o3, n2, s3) {
            return new S.Record("NameRecord", [{ name: "platformID", type: "USHORT", value: e3 }, { name: "encodingID", type: "USHORT", value: t3 }, { name: "languageID", type: "USHORT", value: r3 }, { name: "nameID", type: "USHORT", value: o3 }, { name: "length", type: "USHORT", value: n2 }, { name: "offset", type: "USHORT", value: s3 }]);
          }
          function ct(e3, t3) {
            if ((r3 = function(e4, t4) {
              var r4 = e4.length, o4 = t4.length - r4 + 1;
              e:
                for (var n3 = 0; n3 < o4; n3++)
                  for (; n3 < o4; n3++) {
                    for (var s3 = 0; s3 < r4; s3++)
                      if (t4[n3 + s3] !== e4[s3])
                        continue e;
                    return n3;
                  }
              return -1;
            }(e3, t3)) < 0)
              for (var r3 = t3.length, o3 = 0, n2 = e3.length; o3 < n2; ++o3)
                t3.push(e3[o3]);
            return r3;
          }
          var dt = { parse: function(e3, t3, r3) {
            for (var o3 = {}, n2 = new R.Parser(e3, t3), t3 = n2.parseUShort(), s3 = n2.parseUShort(), i3 = n2.offset + n2.parseUShort(), a2 = 0; a2 < s3; a2++) {
              var l2 = n2.parseUShort(), u2 = n2.parseUShort(), c2 = n2.parseUShort(), d2 = n2.parseUShort(), d2 = et[d2] || d2, f2 = n2.parseUShort(), h2 = n2.parseUShort(), p2 = function(e4, t4, r4) {
                switch (e4) {
                  case 0:
                    if (65535 === t4)
                      return "und";
                    if (r4)
                      return r4[t4];
                    break;
                  case 1:
                    return tt[t4];
                  case 3:
                    return ot[t4];
                }
              }(l2, c2, r3), l2 = at(l2, u2, c2);
              void 0 !== l2 && void 0 !== p2 && (u2 = void 0, (u2 = l2 === nt ? m.UTF16(e3, i3 + h2, f2) : m.MACSTRING(e3, i3 + h2, f2, l2)) && ((c2 = void 0 === (c2 = o3[d2]) ? o3[d2] = {} : c2)[p2] = u2));
            }
            return 1 === t3 && n2.parseUShort(), o3;
          }, make: function(e3, t3) {
            var r3, o3 = [], n2 = {}, s3 = lt(et);
            for (r3 in e3) {
              var i3 = s3[r3];
              if (void 0 === i3 && (i3 = r3), f2 = parseInt(i3), isNaN(f2))
                throw new Error('Name table entry "' + r3 + '" does not exist, see nameTableNames for complete list.');
              n2[f2] = e3[r3], o3.push(f2);
            }
            for (var a2 = lt(tt), l2 = lt(ot), u2 = [], c2 = [], d2 = 0; d2 < o3.length; d2++) {
              var f2, h2, p2 = n2[f2 = o3[d2]];
              for (h2 in p2) {
                var m2 = p2[h2], y2 = 1, g2 = a2[h2], v2 = rt[g2], b2 = at(y2, v2, g2), b2 = w.MACSTRING(m2, b2), j2 = (void 0 === b2 && (y2 = 0, (g2 = t3.indexOf(h2)) < 0 && (g2 = t3.length, t3.push(h2)), v2 = 4, b2 = w.UTF16(m2)), ct(b2, c2)), y2 = (u2.push(ut(y2, v2, g2, f2, b2.length, j2)), l2[h2]);
                void 0 !== y2 && (g2 = ct(v2 = w.UTF16(m2), c2), u2.push(ut(3, 1, y2, f2, v2.length, g2)));
              }
            }
            u2.sort(function(e4, t4) {
              return e4.platformID - t4.platformID || e4.encodingID - t4.encodingID || e4.languageID - t4.languageID || e4.nameID - t4.nameID;
            });
            for (var _2 = new S.Table("name", [{ name: "format", type: "USHORT", value: 0 }, { name: "count", type: "USHORT", value: u2.length }, { name: "stringOffset", type: "USHORT", value: 6 + 12 * u2.length }]), x2 = 0; x2 < u2.length; x2++)
              _2.fields.push({ name: "record_" + x2, type: "RECORD", value: u2[x2] });
            return _2.fields.push({ name: "strings", type: "LITERAL", value: c2 }), _2;
          } }, ft = [{ begin: 0, end: 127 }, { begin: 128, end: 255 }, { begin: 256, end: 383 }, { begin: 384, end: 591 }, { begin: 592, end: 687 }, { begin: 688, end: 767 }, { begin: 768, end: 879 }, { begin: 880, end: 1023 }, { begin: 11392, end: 11519 }, { begin: 1024, end: 1279 }, { begin: 1328, end: 1423 }, { begin: 1424, end: 1535 }, { begin: 42240, end: 42559 }, { begin: 1536, end: 1791 }, { begin: 1984, end: 2047 }, { begin: 2304, end: 2431 }, { begin: 2432, end: 2559 }, { begin: 2560, end: 2687 }, { begin: 2688, end: 2815 }, { begin: 2816, end: 2943 }, { begin: 2944, end: 3071 }, { begin: 3072, end: 3199 }, { begin: 3200, end: 3327 }, { begin: 3328, end: 3455 }, { begin: 3584, end: 3711 }, { begin: 3712, end: 3839 }, { begin: 4256, end: 4351 }, { begin: 6912, end: 7039 }, { begin: 4352, end: 4607 }, { begin: 7680, end: 7935 }, { begin: 7936, end: 8191 }, { begin: 8192, end: 8303 }, { begin: 8304, end: 8351 }, { begin: 8352, end: 8399 }, { begin: 8400, end: 8447 }, { begin: 8448, end: 8527 }, { begin: 8528, end: 8591 }, { begin: 8592, end: 8703 }, { begin: 8704, end: 8959 }, { begin: 8960, end: 9215 }, { begin: 9216, end: 9279 }, { begin: 9280, end: 9311 }, { begin: 9312, end: 9471 }, { begin: 9472, end: 9599 }, { begin: 9600, end: 9631 }, { begin: 9632, end: 9727 }, { begin: 9728, end: 9983 }, { begin: 9984, end: 10175 }, { begin: 12288, end: 12351 }, { begin: 12352, end: 12447 }, { begin: 12448, end: 12543 }, { begin: 12544, end: 12591 }, { begin: 12592, end: 12687 }, { begin: 43072, end: 43135 }, { begin: 12800, end: 13055 }, { begin: 13056, end: 13311 }, { begin: 44032, end: 55215 }, { begin: 55296, end: 57343 }, { begin: 67840, end: 67871 }, { begin: 19968, end: 40959 }, { begin: 57344, end: 63743 }, { begin: 12736, end: 12783 }, { begin: 64256, end: 64335 }, { begin: 64336, end: 65023 }, { begin: 65056, end: 65071 }, { begin: 65040, end: 65055 }, { begin: 65104, end: 65135 }, { begin: 65136, end: 65279 }, { begin: 65280, end: 65519 }, { begin: 65520, end: 65535 }, { begin: 3840, end: 4095 }, { begin: 1792, end: 1871 }, { begin: 1920, end: 1983 }, { begin: 3456, end: 3583 }, { begin: 4096, end: 4255 }, { begin: 4608, end: 4991 }, { begin: 5024, end: 5119 }, { begin: 5120, end: 5759 }, { begin: 5760, end: 5791 }, { begin: 5792, end: 5887 }, { begin: 6016, end: 6143 }, { begin: 6144, end: 6319 }, { begin: 10240, end: 10495 }, { begin: 40960, end: 42127 }, { begin: 5888, end: 5919 }, { begin: 66304, end: 66351 }, { begin: 66352, end: 66383 }, { begin: 66560, end: 66639 }, { begin: 118784, end: 119039 }, { begin: 119808, end: 120831 }, { begin: 1044480, end: 1048573 }, { begin: 65024, end: 65039 }, { begin: 917504, end: 917631 }, { begin: 6400, end: 6479 }, { begin: 6480, end: 6527 }, { begin: 6528, end: 6623 }, { begin: 6656, end: 6687 }, { begin: 11264, end: 11359 }, { begin: 11568, end: 11647 }, { begin: 19904, end: 19967 }, { begin: 43008, end: 43055 }, { begin: 65536, end: 65663 }, { begin: 65856, end: 65935 }, { begin: 66432, end: 66463 }, { begin: 66464, end: 66527 }, { begin: 66640, end: 66687 }, { begin: 66688, end: 66735 }, { begin: 67584, end: 67647 }, { begin: 68096, end: 68191 }, { begin: 119552, end: 119647 }, { begin: 73728, end: 74751 }, { begin: 119648, end: 119679 }, { begin: 7040, end: 7103 }, { begin: 7168, end: 7247 }, { begin: 7248, end: 7295 }, { begin: 43136, end: 43231 }, { begin: 43264, end: 43311 }, { begin: 43312, end: 43359 }, { begin: 43520, end: 43615 }, { begin: 65936, end: 65999 }, { begin: 66e3, end: 66047 }, { begin: 66208, end: 66271 }, { begin: 127024, end: 127135 }];
          var ht = { parse: function(e3, t3) {
            var r3 = {}, o3 = new R.Parser(e3, t3);
            r3.version = o3.parseUShort(), r3.xAvgCharWidth = o3.parseShort(), r3.usWeightClass = o3.parseUShort(), r3.usWidthClass = o3.parseUShort(), r3.fsType = o3.parseUShort(), r3.ySubscriptXSize = o3.parseShort(), r3.ySubscriptYSize = o3.parseShort(), r3.ySubscriptXOffset = o3.parseShort(), r3.ySubscriptYOffset = o3.parseShort(), r3.ySuperscriptXSize = o3.parseShort(), r3.ySuperscriptYSize = o3.parseShort(), r3.ySuperscriptXOffset = o3.parseShort(), r3.ySuperscriptYOffset = o3.parseShort(), r3.yStrikeoutSize = o3.parseShort(), r3.yStrikeoutPosition = o3.parseShort(), r3.sFamilyClass = o3.parseShort(), r3.panose = [];
            for (var n2 = 0; n2 < 10; n2++)
              r3.panose[n2] = o3.parseByte();
            return r3.ulUnicodeRange1 = o3.parseULong(), r3.ulUnicodeRange2 = o3.parseULong(), r3.ulUnicodeRange3 = o3.parseULong(), r3.ulUnicodeRange4 = o3.parseULong(), r3.achVendID = String.fromCharCode(o3.parseByte(), o3.parseByte(), o3.parseByte(), o3.parseByte()), r3.fsSelection = o3.parseUShort(), r3.usFirstCharIndex = o3.parseUShort(), r3.usLastCharIndex = o3.parseUShort(), r3.sTypoAscender = o3.parseShort(), r3.sTypoDescender = o3.parseShort(), r3.sTypoLineGap = o3.parseShort(), r3.usWinAscent = o3.parseUShort(), r3.usWinDescent = o3.parseUShort(), 1 <= r3.version && (r3.ulCodePageRange1 = o3.parseULong(), r3.ulCodePageRange2 = o3.parseULong()), 2 <= r3.version && (r3.sxHeight = o3.parseShort(), r3.sCapHeight = o3.parseShort(), r3.usDefaultChar = o3.parseUShort(), r3.usBreakChar = o3.parseUShort(), r3.usMaxContent = o3.parseUShort()), r3;
          }, make: function(e3) {
            return new S.Table("OS/2", [{ name: "version", type: "USHORT", value: 3 }, { name: "xAvgCharWidth", type: "SHORT", value: 0 }, { name: "usWeightClass", type: "USHORT", value: 0 }, { name: "usWidthClass", type: "USHORT", value: 0 }, { name: "fsType", type: "USHORT", value: 0 }, { name: "ySubscriptXSize", type: "SHORT", value: 650 }, { name: "ySubscriptYSize", type: "SHORT", value: 699 }, { name: "ySubscriptXOffset", type: "SHORT", value: 0 }, { name: "ySubscriptYOffset", type: "SHORT", value: 140 }, { name: "ySuperscriptXSize", type: "SHORT", value: 650 }, { name: "ySuperscriptYSize", type: "SHORT", value: 699 }, { name: "ySuperscriptXOffset", type: "SHORT", value: 0 }, { name: "ySuperscriptYOffset", type: "SHORT", value: 479 }, { name: "yStrikeoutSize", type: "SHORT", value: 49 }, { name: "yStrikeoutPosition", type: "SHORT", value: 258 }, { name: "sFamilyClass", type: "SHORT", value: 0 }, { name: "bFamilyType", type: "BYTE", value: 0 }, { name: "bSerifStyle", type: "BYTE", value: 0 }, { name: "bWeight", type: "BYTE", value: 0 }, { name: "bProportion", type: "BYTE", value: 0 }, { name: "bContrast", type: "BYTE", value: 0 }, { name: "bStrokeVariation", type: "BYTE", value: 0 }, { name: "bArmStyle", type: "BYTE", value: 0 }, { name: "bLetterform", type: "BYTE", value: 0 }, { name: "bMidline", type: "BYTE", value: 0 }, { name: "bXHeight", type: "BYTE", value: 0 }, { name: "ulUnicodeRange1", type: "ULONG", value: 0 }, { name: "ulUnicodeRange2", type: "ULONG", value: 0 }, { name: "ulUnicodeRange3", type: "ULONG", value: 0 }, { name: "ulUnicodeRange4", type: "ULONG", value: 0 }, { name: "achVendID", type: "CHARARRAY", value: "XXXX" }, { name: "fsSelection", type: "USHORT", value: 0 }, { name: "usFirstCharIndex", type: "USHORT", value: 0 }, { name: "usLastCharIndex", type: "USHORT", value: 0 }, { name: "sTypoAscender", type: "SHORT", value: 0 }, { name: "sTypoDescender", type: "SHORT", value: 0 }, { name: "sTypoLineGap", type: "SHORT", value: 0 }, { name: "usWinAscent", type: "USHORT", value: 0 }, { name: "usWinDescent", type: "USHORT", value: 0 }, { name: "ulCodePageRange1", type: "ULONG", value: 0 }, { name: "ulCodePageRange2", type: "ULONG", value: 0 }, { name: "sxHeight", type: "SHORT", value: 0 }, { name: "sCapHeight", type: "SHORT", value: 0 }, { name: "usDefaultChar", type: "USHORT", value: 0 }, { name: "usBreakChar", type: "USHORT", value: 0 }, { name: "usMaxContext", type: "USHORT", value: 0 }], e3);
          }, unicodeRanges: ft, getUnicodeRange: function(e3) {
            for (var t3 = 0; t3 < ft.length; t3 += 1) {
              var r3 = ft[t3];
              if (e3 >= r3.begin && e3 < r3.end)
                return t3;
            }
            return -1;
          } };
          var pt = { parse: function(e3, t3) {
            var r3 = {}, o3 = new R.Parser(e3, t3);
            switch (r3.version = o3.parseVersion(), r3.italicAngle = o3.parseFixed(), r3.underlinePosition = o3.parseShort(), r3.underlineThickness = o3.parseShort(), r3.isFixedPitch = o3.parseULong(), r3.minMemType42 = o3.parseULong(), r3.maxMemType42 = o3.parseULong(), r3.minMemType1 = o3.parseULong(), r3.maxMemType1 = o3.parseULong(), r3.version) {
              case 1:
                r3.names = c.slice();
                break;
              case 2:
                r3.numberOfGlyphs = o3.parseUShort(), r3.glyphNameIndex = new Array(r3.numberOfGlyphs);
                for (var n2 = 0; n2 < r3.numberOfGlyphs; n2++)
                  r3.glyphNameIndex[n2] = o3.parseUShort();
                r3.names = [];
                for (var s3, i3 = 0; i3 < r3.numberOfGlyphs; i3++)
                  r3.glyphNameIndex[i3] >= c.length && (s3 = o3.parseChar(), r3.names.push(o3.parseString(s3)));
                break;
              case 2.5:
                r3.numberOfGlyphs = o3.parseUShort(), r3.offset = new Array(r3.numberOfGlyphs);
                for (var a2 = 0; a2 < r3.numberOfGlyphs; a2++)
                  r3.offset[a2] = o3.parseChar();
            }
            return r3;
          }, make: function() {
            return new S.Table("post", [{ name: "version", type: "FIXED", value: 196608 }, { name: "italicAngle", type: "FIXED", value: 0 }, { name: "underlinePosition", type: "FWORD", value: 0 }, { name: "underlineThickness", type: "FWORD", value: 0 }, { name: "isFixedPitch", type: "ULONG", value: 0 }, { name: "minMemType42", type: "ULONG", value: 0 }, { name: "maxMemType42", type: "ULONG", value: 0 }, { name: "minMemType1", type: "ULONG", value: 0 }, { name: "maxMemType1", type: "ULONG", value: 0 }]);
          } }, o2 = new Array(9), s2 = (o2[1] = function() {
            var e3 = this.offset + this.relativeOffset, t3 = this.parseUShort();
            return 1 === t3 ? { substFormat: 1, coverage: this.parsePointer(u.coverage), deltaGlyphId: this.parseUShort() } : 2 === t3 ? { substFormat: 2, coverage: this.parsePointer(u.coverage), substitute: this.parseOffset16List() } : void P.assert(false, "0x" + e3.toString(16) + ": lookup type 1 format must be 1 or 2.");
          }, o2[2] = function() {
            var e3 = this.parseUShort();
            return P.argument(1 === e3, "GSUB Multiple Substitution Subtable identifier-format must be 1"), { substFormat: e3, coverage: this.parsePointer(u.coverage), sequences: this.parseListOfLists() };
          }, o2[3] = function() {
            var e3 = this.parseUShort();
            return P.argument(1 === e3, "GSUB Alternate Substitution Subtable identifier-format must be 1"), { substFormat: e3, coverage: this.parsePointer(u.coverage), alternateSets: this.parseListOfLists() };
          }, o2[4] = function() {
            var e3 = this.parseUShort();
            return P.argument(1 === e3, "GSUB ligature table identifier-format must be 1"), { substFormat: e3, coverage: this.parsePointer(u.coverage), ligatureSets: this.parseListOfLists(function() {
              return { ligGlyph: this.parseUShort(), components: this.parseUShortList(this.parseUShort() - 1) };
            }) };
          }, { sequenceIndex: u.uShort, lookupListIndex: u.uShort });
          o2[5] = function() {
            var e3, t3, r3 = this.offset + this.relativeOffset, o3 = this.parseUShort();
            return 1 === o3 ? { substFormat: o3, coverage: this.parsePointer(u.coverage), ruleSets: this.parseListOfLists(function() {
              var e4 = this.parseUShort(), t4 = this.parseUShort();
              return { input: this.parseUShortList(e4 - 1), lookupRecords: this.parseRecordList(t4, s2) };
            }) } : 2 === o3 ? { substFormat: o3, coverage: this.parsePointer(u.coverage), classDef: this.parsePointer(u.classDef), classSets: this.parseListOfLists(function() {
              var e4 = this.parseUShort(), t4 = this.parseUShort();
              return { classes: this.parseUShortList(e4 - 1), lookupRecords: this.parseRecordList(t4, s2) };
            }) } : 3 === o3 ? (e3 = this.parseUShort(), t3 = this.parseUShort(), { substFormat: o3, coverages: this.parseList(e3, u.pointer(u.coverage)), lookupRecords: this.parseRecordList(t3, s2) }) : void P.assert(false, "0x" + r3.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
          }, o2[6] = function() {
            var e3 = this.offset + this.relativeOffset, t3 = this.parseUShort();
            return 1 === t3 ? { substFormat: 1, coverage: this.parsePointer(u.coverage), chainRuleSets: this.parseListOfLists(function() {
              return { backtrack: this.parseUShortList(), input: this.parseUShortList(this.parseShort() - 1), lookahead: this.parseUShortList(), lookupRecords: this.parseRecordList(s2) };
            }) } : 2 === t3 ? { substFormat: 2, coverage: this.parsePointer(u.coverage), backtrackClassDef: this.parsePointer(u.classDef), inputClassDef: this.parsePointer(u.classDef), lookaheadClassDef: this.parsePointer(u.classDef), chainClassSet: this.parseListOfLists(function() {
              return { backtrack: this.parseUShortList(), input: this.parseUShortList(this.parseShort() - 1), lookahead: this.parseUShortList(), lookupRecords: this.parseRecordList(s2) };
            }) } : 3 === t3 ? { substFormat: 3, backtrackCoverage: this.parseList(u.pointer(u.coverage)), inputCoverage: this.parseList(u.pointer(u.coverage)), lookaheadCoverage: this.parseList(u.pointer(u.coverage)), lookupRecords: this.parseRecordList(s2) } : void P.assert(false, "0x" + e3.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
          }, o2[7] = function() {
            var e3 = this.parseUShort(), e3 = (P.argument(1 === e3, "GSUB Extension Substitution subtable identifier-format must be 1"), this.parseUShort()), t3 = new u(this.data, this.offset + this.parseULong());
            return { substFormat: 1, lookupType: e3, extension: o2[e3].call(t3) };
          }, o2[8] = function() {
            var e3 = this.parseUShort();
            return P.argument(1 === e3, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), { substFormat: e3, coverage: this.parsePointer(u.coverage), backtrackCoverage: this.parseList(u.pointer(u.coverage)), lookaheadCoverage: this.parseList(u.pointer(u.coverage)), substitutes: this.parseUShortList() };
          };
          var mt = new Array(9);
          mt[1] = function(e3) {
            return 1 === e3.substFormat ? new S.Table("substitutionTable", [{ name: "substFormat", type: "USHORT", value: 1 }, { name: "coverage", type: "TABLE", value: new S.Coverage(e3.coverage) }, { name: "deltaGlyphID", type: "USHORT", value: e3.deltaGlyphId }]) : new S.Table("substitutionTable", [{ name: "substFormat", type: "USHORT", value: 2 }, { name: "coverage", type: "TABLE", value: new S.Coverage(e3.coverage) }].concat(S.ushortList("substitute", e3.substitute)));
          }, mt[3] = function(e3) {
            return P.assert(1 === e3.substFormat, "Lookup type 3 substFormat must be 1."), new S.Table("substitutionTable", [{ name: "substFormat", type: "USHORT", value: 1 }, { name: "coverage", type: "TABLE", value: new S.Coverage(e3.coverage) }].concat(S.tableList("altSet", e3.alternateSets, function(e4) {
              return new S.Table("alternateSetTable", S.ushortList("alternate", e4));
            })));
          }, mt[4] = function(e3) {
            return P.assert(1 === e3.substFormat, "Lookup type 4 substFormat must be 1."), new S.Table("substitutionTable", [{ name: "substFormat", type: "USHORT", value: 1 }, { name: "coverage", type: "TABLE", value: new S.Coverage(e3.coverage) }].concat(S.tableList("ligSet", e3.ligatureSets, function(e4) {
              return new S.Table("ligatureSetTable", S.tableList("ligature", e4, function(e5) {
                return new S.Table("ligatureTable", [{ name: "ligGlyph", type: "USHORT", value: e5.ligGlyph }].concat(S.ushortList("component", e5.components, e5.components.length + 1)));
              }));
            })));
          };
          var yt = { parse: function(e3, t3) {
            return t3 = (e3 = new u(e3, t3 = t3 || 0)).parseVersion(1), P.argument(1 === t3 || 1.1 === t3, "Unsupported GSUB table version."), 1 === t3 ? { version: t3, scripts: e3.parseScriptList(), features: e3.parseFeatureList(), lookups: e3.parseLookupList(o2) } : { version: t3, scripts: e3.parseScriptList(), features: e3.parseFeatureList(), lookups: e3.parseLookupList(o2), variations: e3.parseFeatureVariationsList() };
          }, make: function(e3) {
            return new S.Table("GSUB", [{ name: "version", type: "ULONG", value: 65536 }, { name: "scripts", type: "TABLE", value: new S.ScriptList(e3.scripts) }, { name: "features", type: "TABLE", value: new S.FeatureList(e3.features) }, { name: "lookups", type: "TABLE", value: new S.LookupList(e3.lookups, mt) }]);
          } };
          var gt = { parse: function(e3, t3) {
            for (var r3 = new R.Parser(e3, t3), o3 = r3.parseULong(), n2 = (P.argument(1 === o3, "Unsupported META table version."), r3.parseULong(), r3.parseULong(), r3.parseULong()), s3 = {}, i3 = 0; i3 < n2; i3++) {
              var a2 = r3.parseTag(), l2 = r3.parseULong(), u2 = r3.parseULong(), l2 = m.UTF8(e3, t3 + l2, u2);
              s3[a2] = l2;
            }
            return s3;
          }, make: function(e3) {
            var t3, r3 = Object.keys(e3).length, o3 = "", n2 = 16 + 12 * r3, s3 = new S.Table("meta", [{ name: "version", type: "ULONG", value: 1 }, { name: "flags", type: "ULONG", value: 0 }, { name: "offset", type: "ULONG", value: n2 }, { name: "numTags", type: "ULONG", value: r3 }]);
            for (t3 in e3) {
              var i3 = o3.length;
              o3 += e3[t3], s3.fields.push({ name: "tag " + t3, type: "TAG", value: t3 }), s3.fields.push({ name: "offset " + t3, type: "ULONG", value: n2 + i3 }), s3.fields.push({ name: "length " + t3, type: "ULONG", value: e3[t3].length });
            }
            return s3.fields.push({ name: "stringPool", type: "CHARARRAY", value: o3 }), s3;
          } };
          function vt(e3) {
            return Math.log(e3) / Math.log(2) | 0;
          }
          function bt(e3) {
            for (; e3.length % 4 != 0; )
              e3.push(0);
            for (var t3 = 0, r3 = 0; r3 < e3.length; r3 += 4)
              t3 += (e3[r3] << 24) + (e3[r3 + 1] << 16) + (e3[r3 + 2] << 8) + e3[r3 + 3];
            return t3 %= Math.pow(2, 32);
          }
          function jt(e3, t3, r3, o3) {
            return new S.Record("Table Record", [{ name: "tag", type: "TAG", value: void 0 !== e3 ? e3 : "" }, { name: "checkSum", type: "ULONG", value: void 0 !== t3 ? t3 : 0 }, { name: "offset", type: "ULONG", value: void 0 !== r3 ? r3 : 0 }, { name: "length", type: "ULONG", value: void 0 !== o3 ? o3 : 0 }]);
          }
          function _t(e3) {
            for (var t3 = new S.Table("sfnt", [{ name: "version", type: "TAG", value: "OTTO" }, { name: "numTables", type: "USHORT", value: 0 }, { name: "searchRange", type: "USHORT", value: 0 }, { name: "entrySelector", type: "USHORT", value: 0 }, { name: "rangeShift", type: "USHORT", value: 0 }]), r3 = (t3.tables = e3, t3.numTables = e3.length, Math.pow(2, vt(t3.numTables))), o3 = (t3.searchRange = 16 * r3, t3.entrySelector = vt(r3), t3.rangeShift = 16 * t3.numTables - t3.searchRange, []), n2 = [], s3 = t3.sizeOf() + jt().sizeOf() * t3.numTables; s3 % 4 != 0; )
              s3 += 1, n2.push({ name: "padding", type: "BYTE", value: 0 });
            for (var i3 = 0; i3 < e3.length; i3 += 1) {
              var a2 = e3[i3], l2 = (P.argument(4 === a2.tableName.length, "Table name" + a2.tableName + " is invalid."), a2.sizeOf()), u2 = jt(a2.tableName, bt(a2.encode()), s3, l2);
              for (o3.push({ name: u2.tag + " Table Record", type: "RECORD", value: u2 }), n2.push({ name: a2.tableName + " table", type: "RECORD", value: a2 }), s3 += l2, P.argument(!isNaN(s3), "Something went wrong calculating the offset."); s3 % 4 != 0; )
                s3 += 1, n2.push({ name: "padding", type: "BYTE", value: 0 });
            }
            return o3.sort(function(e4, t4) {
              return e4.value.tag > t4.value.tag ? 1 : -1;
            }), t3.fields = t3.fields.concat(o3), t3.fields = t3.fields.concat(n2), t3;
          }
          function xt(e3, t3, r3) {
            for (var o3 = 0; o3 < t3.length; o3 += 1) {
              var n2 = e3.charToGlyphIndex(t3[o3]);
              if (0 < n2)
                return e3.glyphs.get(n2).getMetrics();
            }
            return r3;
          }
          var wt = { make: _t, fontToTable: function(e3) {
            for (var t3, r3 = [], o3 = [], n2 = [], s3 = [], i3 = [], a2 = [], l2 = [], u2 = 0, c2 = 0, d2 = 0, f2 = 0, h2 = 0, p2 = 0; p2 < e3.glyphs.length; p2 += 1) {
              var m2 = e3.glyphs.get(p2), y2 = 0 | m2.unicode;
              if (isNaN(m2.advanceWidth))
                throw new Error("Glyph " + m2.name + " (" + p2 + "): advanceWidth is not a number.");
              (y2 < t3 || void 0 === t3) && 0 < y2 && (t3 = y2), u2 < y2 && (u2 = y2);
              var y2 = ht.getUnicodeRange(y2);
              if (y2 < 32)
                c2 |= 1 << y2;
              else if (y2 < 64)
                d2 |= 1 << y2 - 32;
              else if (y2 < 96)
                f2 |= 1 << y2 - 64;
              else {
                if (!(y2 < 123))
                  throw new Error("Unicode ranges bits > 123 are reserved for internal usage");
                h2 |= 1 << y2 - 96;
              }
              ".notdef" !== m2.name && (y2 = m2.getMetrics(), r3.push(y2.xMin), o3.push(y2.yMin), n2.push(y2.xMax), s3.push(y2.yMax), a2.push(y2.leftSideBearing), l2.push(y2.rightSideBearing), i3.push(m2.advanceWidth));
            }
            var g2, v2 = { xMin: Math.min.apply(null, r3), yMin: Math.min.apply(null, o3), xMax: Math.max.apply(null, n2), yMax: Math.max.apply(null, s3), advanceWidthMax: Math.max.apply(null, i3), advanceWidthAvg: function(e4) {
              for (var t4 = 0, r4 = 0; r4 < e4.length; r4 += 1)
                t4 += e4[r4];
              return t4 / e4.length;
            }(i3), minLeftSideBearing: Math.min.apply(null, a2), maxLeftSideBearing: Math.max.apply(null, a2), minRightSideBearing: Math.min.apply(null, l2) }, b2 = (v2.ascender = e3.ascender, v2.descender = e3.descender, Ze.make({ flags: 3, unitsPerEm: e3.unitsPerEm, xMin: v2.xMin, yMin: v2.yMin, xMax: v2.xMax, yMax: v2.yMax, lowestRecPPEM: 3, createdTimestamp: e3.createdTimestamp })), j2 = Qe.make({ ascender: v2.ascender, descender: v2.descender, advanceWidthMax: v2.advanceWidthMax, minLeftSideBearing: v2.minLeftSideBearing, minRightSideBearing: v2.minRightSideBearing, xMaxExtent: v2.maxLeftSideBearing + (v2.xMax - v2.xMin), numberOfHMetrics: e3.glyphs.length }), _2 = $e.make(e3.glyphs.length), x2 = ht.make({ xAvgCharWidth: Math.round(v2.advanceWidthAvg), usWeightClass: e3.tables.os2.usWeightClass, usWidthClass: e3.tables.os2.usWidthClass, usFirstCharIndex: t3, usLastCharIndex: u2, ulUnicodeRange1: c2, ulUnicodeRange2: d2, ulUnicodeRange3: f2, ulUnicodeRange4: h2, fsSelection: e3.tables.os2.fsSelection, sTypoAscender: v2.ascender, sTypoDescender: v2.descender, sTypoLineGap: 0, usWinAscent: v2.yMax, usWinDescent: Math.abs(v2.yMin), ulCodePageRange1: 1, sxHeight: xt(e3, "xyvw", { yMax: Math.round(v2.ascender / 2) }).yMax, sCapHeight: xt(e3, "HIKLEFJMNTZBDPRAGOQSUVWXY", v2).yMax, usDefaultChar: e3.hasChar(" ") ? 32 : 0, usBreakChar: e3.hasChar(" ") ? 32 : 0 }), w2 = Ke.make(e3.glyphs), S2 = we.make(e3.glyphs), M2 = e3.getEnglishName("fontFamily"), E2 = e3.getEnglishName("fontSubfamily"), T2 = M2 + " " + E2, C2 = (C2 = e3.getEnglishName("postScriptName")) || M2.replace(/\s/g, "") + "-" + E2, O2 = {};
            for (g2 in e3.names)
              O2[g2] = e3.names[g2];
            O2.uniqueID || (O2.uniqueID = { en: e3.getEnglishName("manufacturer") + ":" + T2 }), O2.postScriptName || (O2.postScriptName = { en: C2 }), O2.preferredFamily || (O2.preferredFamily = e3.names.fontFamily), O2.preferredSubfamily || (O2.preferredSubfamily = e3.names.fontSubfamily);
            var L2 = [], k2 = dt.make(O2, L2), L2 = 0 < L2.length ? Je.make(L2) : void 0, A2 = pt.make(), T2 = Ye.make(e3.glyphs, { version: e3.getEnglishName("version"), fullName: T2, familyName: M2, weightName: E2, postScriptName: C2, unitsPerEm: e3.unitsPerEm, fontBBox: [0, v2.yMin, v2.ascender, v2.advanceWidthMax] }), M2 = e3.metas && 0 < Object.keys(e3.metas).length ? gt.make(e3.metas) : void 0, E2 = [b2, j2, _2, x2, k2, S2, A2, T2, w2];
            L2 && E2.push(L2), e3.tables.gsub && E2.push(yt.make(e3.tables.gsub)), M2 && E2.push(M2);
            for (var I2 = bt((C2 = _t(E2)).encode()), P2 = C2.fields, R2 = false, D2 = 0; D2 < P2.length; D2 += 1)
              if ("head table" === P2[D2].name) {
                P2[D2].value.checkSumAdjustment = 2981146554 - I2, R2 = true;
                break;
              }
            if (R2)
              return C2;
            throw new Error("Could not find head table with checkSum to adjust.");
          }, computeCheckSum: bt };
          function St(e3, t3) {
            for (var r3 = 0, o3 = e3.length - 1; r3 <= o3; ) {
              var n2 = r3 + o3 >>> 1, s3 = e3[n2].tag;
              if (s3 === t3)
                return n2;
              s3 < t3 ? r3 = 1 + n2 : o3 = n2 - 1;
            }
            return -r3 - 1;
          }
          function Mt(e3, t3) {
            for (var r3 = 0, o3 = e3.length - 1; r3 <= o3; ) {
              var n2 = r3 + o3 >>> 1, s3 = e3[n2];
              if (s3 === t3)
                return n2;
              s3 < t3 ? r3 = 1 + n2 : o3 = n2 - 1;
            }
            return -r3 - 1;
          }
          function Et(e3, t3) {
            for (var r3 = 0, o3 = e3.length - 1; r3 <= o3; ) {
              var n2, s3 = r3 + o3 >>> 1, i3 = (n2 = e3[s3]).start;
              if (i3 === t3)
                return n2;
              i3 < t3 ? r3 = 1 + s3 : o3 = s3 - 1;
            }
            if (0 < r3)
              return t3 > (n2 = e3[r3 - 1]).end ? 0 : n2;
          }
          function Tt(e3, t3) {
            this.font = e3, this.tableName = t3;
          }
          function Ct(e3) {
            Tt.call(this, e3, "gpos");
          }
          function i2(e3) {
            Tt.call(this, e3, "gsub");
          }
          function Ot(e3, t3, r3) {
            for (var o3 = e3.subtables, n2 = 0; n2 < o3.length; n2++) {
              var s3 = o3[n2];
              if (s3.substFormat === t3)
                return s3;
            }
            if (r3)
              return o3.push(r3), r3;
          }
          function Lt(e3) {
            for (var t3 = new ArrayBuffer(e3.length), r3 = new Uint8Array(t3), o3 = 0; o3 < e3.length; ++o3)
              r3[o3] = e3[o3];
            return t3;
          }
          function _(e3, t3) {
            if (!e3)
              throw t3;
          }
          function kt(e3, t3, r3, o3, n2) {
            var s3 = 0 < (t3 & o3) ? (s3 = e3.parseByte(), r3 + (s3 = 0 == (t3 & n2) ? -s3 : s3)) : 0 < (t3 & n2) ? r3 : r3 + e3.parseShort();
            return s3;
          }
          function At(e3, t3, r3) {
            var o3, n2 = new R.Parser(t3, r3);
            if (e3.numberOfContours = n2.parseShort(), e3._xMin = n2.parseShort(), e3._yMin = n2.parseShort(), e3._xMax = n2.parseShort(), e3._yMax = n2.parseShort(), 0 < e3.numberOfContours) {
              for (var s3 = e3.endPointIndices = [], i3 = 0; i3 < e3.numberOfContours; i3 += 1)
                s3.push(n2.parseUShort());
              e3.instructionLength = n2.parseUShort(), e3.instructions = [];
              for (var a2 = 0; a2 < e3.instructionLength; a2 += 1)
                e3.instructions.push(n2.parseByte());
              for (var l2 = s3[s3.length - 1] + 1, u2 = [], c2 = 0; c2 < l2; c2 += 1)
                if (o3 = n2.parseByte(), u2.push(o3), 0 < (8 & o3))
                  for (var d2 = n2.parseByte(), f2 = 0; f2 < d2; f2 += 1)
                    u2.push(o3), c2 += 1;
              if (P.argument(u2.length === l2, "Bad flags."), 0 < s3.length) {
                var h2, p2 = [];
                if (0 < l2) {
                  for (var m2 = 0; m2 < l2; m2 += 1)
                    o3 = u2[m2], (h2 = {}).onCurve = !!(1 & o3), h2.lastPointOfContour = 0 <= s3.indexOf(m2), p2.push(h2);
                  for (var y2 = 0, g2 = 0; g2 < l2; g2 += 1)
                    o3 = u2[g2], (h2 = p2[g2]).x = kt(n2, o3, y2, 2, 16), y2 = h2.x;
                  for (var v2 = 0, b2 = 0; b2 < l2; b2 += 1)
                    o3 = u2[b2], (h2 = p2[b2]).y = kt(n2, o3, v2, 4, 32), v2 = h2.y;
                }
                e3.points = p2;
              } else
                e3.points = [];
            } else if (0 === e3.numberOfContours)
              e3.points = [];
            else {
              e3.isComposite = true, e3.points = [], e3.components = [];
              for (var j2 = true; j2; ) {
                u2 = n2.parseUShort();
                var _2 = { glyphIndex: n2.parseUShort(), xScale: 1, scale01: 0, scale10: 0, yScale: 1, dx: 0, dy: 0 };
                0 < (1 & u2) ? 0 < (2 & u2) ? (_2.dx = n2.parseShort(), _2.dy = n2.parseShort()) : _2.matchedPoints = [n2.parseUShort(), n2.parseUShort()] : 0 < (2 & u2) ? (_2.dx = n2.parseChar(), _2.dy = n2.parseChar()) : _2.matchedPoints = [n2.parseByte(), n2.parseByte()], 0 < (8 & u2) ? _2.xScale = _2.yScale = n2.parseF2Dot14() : 0 < (64 & u2) ? (_2.xScale = n2.parseF2Dot14(), _2.yScale = n2.parseF2Dot14()) : 0 < (128 & u2) && (_2.xScale = n2.parseF2Dot14(), _2.scale01 = n2.parseF2Dot14(), _2.scale10 = n2.parseF2Dot14(), _2.yScale = n2.parseF2Dot14()), e3.components.push(_2), j2 = !!(32 & u2);
              }
              if (256 & u2) {
                e3.instructionLength = n2.parseUShort(), e3.instructions = [];
                for (var x2 = 0; x2 < e3.instructionLength; x2 += 1)
                  e3.instructions.push(n2.parseByte());
              }
            }
          }
          function Pt(e3, t3) {
            for (var r3 = [], o3 = 0; o3 < e3.length; o3 += 1) {
              var n2 = e3[o3], n2 = { x: t3.xScale * n2.x + t3.scale01 * n2.y + t3.dx, y: t3.scale10 * n2.x + t3.yScale * n2.y + t3.dy, onCurve: n2.onCurve, lastPointOfContour: n2.lastPointOfContour };
              r3.push(n2);
            }
            return r3;
          }
          function Rt(e3) {
            var t3 = new f();
            if (e3)
              for (var r3 = function(e4) {
                for (var t4 = [], r4 = [], o4 = 0; o4 < e4.length; o4 += 1) {
                  var n3 = e4[o4];
                  r4.push(n3), n3.lastPointOfContour && (t4.push(r4), r4 = []);
                }
                return P.argument(0 === r4.length, "There are still points left in the current contour."), t4;
              }(e3), o3 = 0; o3 < r3.length; ++o3) {
                var n2, s3 = r3[o3], i3 = s3[s3.length - 1], a2 = s3[0];
                i3.onCurve ? t3.moveTo(i3.x, i3.y) : a2.onCurve ? t3.moveTo(a2.x, a2.y) : (n2 = { x: 0.5 * (i3.x + a2.x), y: 0.5 * (i3.y + a2.y) }, t3.moveTo(n2.x, n2.y));
                for (var l2 = 0; l2 < s3.length; ++l2) {
                  var u2, c2 = i3, i3 = a2, a2 = s3[(l2 + 1) % s3.length];
                  i3.onCurve ? t3.lineTo(i3.x, i3.y) : (u2 = a2, c2.onCurve || (i3.x, c2.x, i3.y, c2.y), a2.onCurve || (u2 = { x: 0.5 * (i3.x + a2.x), y: 0.5 * (i3.y + a2.y) }), t3.quadraticCurveTo(i3.x, i3.y, u2.x, u2.y));
                }
                t3.closePath();
              }
            return t3;
          }
          function Dt(e3, t3) {
            if (t3.isComposite)
              for (var r3 = 0; r3 < t3.components.length; r3 += 1) {
                var o3 = t3.components[r3], n2 = e3.get(o3.glyphIndex);
                if (n2.getPath(), n2.points) {
                  var s3 = void 0;
                  if (void 0 === o3.matchedPoints)
                    s3 = Pt(n2.points, o3);
                  else {
                    if (o3.matchedPoints[0] > t3.points.length - 1 || o3.matchedPoints[1] > n2.points.length - 1)
                      throw Error("Matched points out of range in " + t3.name);
                    var i3 = t3.points[o3.matchedPoints[0]], a2 = n2.points[o3.matchedPoints[1]], o3 = { xScale: o3.xScale, scale01: o3.scale01, scale10: o3.scale10, yScale: o3.yScale, dx: 0, dy: 0 }, a2 = Pt([a2], o3)[0];
                    o3.dx = i3.x - a2.x, o3.dy = i3.y - a2.y, s3 = Pt(n2.points, o3);
                  }
                  t3.points = t3.points.concat(s3);
                }
              }
            return Rt(t3.points);
          }
          (Ct.prototype = Tt.prototype = { searchTag: St, binSearch: Mt, getTable: function(e3) {
            var t3 = this.font.tables[this.tableName];
            return t3 = !t3 && e3 ? this.font.tables[this.tableName] = this.createDefaultTable() : t3;
          }, getScriptNames: function() {
            var e3 = this.getTable();
            return e3 ? e3.scripts.map(function(e4) {
              return e4.tag;
            }) : [];
          }, getDefaultScriptName: function() {
            var e3 = this.getTable();
            if (e3) {
              for (var t3 = false, r3 = 0; r3 < e3.scripts.length; r3++) {
                var o3 = e3.scripts[r3].tag;
                if ("DFLT" === o3)
                  return o3;
                "latn" === o3 && (t3 = true);
              }
              return t3 ? "latn" : void 0;
            }
          }, getScriptTable: function(e3, t3) {
            var r3, o3 = this.getTable(t3);
            if (o3)
              return r3 = o3.scripts, 0 <= (o3 = St(o3.scripts, e3 = e3 || "DFLT")) ? r3[o3].script : t3 ? (r3.splice(-1 - o3, 0, t3 = { tag: e3, script: { defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] }, langSysRecords: [] } }), t3.script) : void 0;
          }, getLangSysTable: function(e3, t3, r3) {
            var o3, e3 = this.getScriptTable(e3, r3);
            if (e3)
              return t3 && "dflt" !== t3 && "DFLT" !== t3 ? 0 <= (o3 = St(e3.langSysRecords, t3)) ? e3.langSysRecords[o3].langSys : r3 ? (e3.langSysRecords.splice(-1 - o3, 0, r3 = { tag: t3, langSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] } }), r3.langSys) : void 0 : e3.defaultLangSys;
          }, getFeatureTable: function(e3, t3, r3, o3) {
            e3 = this.getLangSysTable(e3, t3, o3);
            if (e3) {
              for (var n2, s3 = e3.featureIndexes, i3 = this.font.tables[this.tableName].features, a2 = 0; a2 < s3.length; a2++)
                if ((n2 = i3[s3[a2]]).tag === r3)
                  return n2.feature;
              if (o3)
                return t3 = i3.length, P.assert(0 === t3 || r3 >= i3[t3 - 1].tag, "Features must be added in alphabetical order."), i3.push(n2 = { tag: r3, feature: { params: 0, lookupListIndexes: [] } }), s3.push(t3), n2.feature;
            }
          }, getLookupTables: function(e3, t3, r3, o3, n2) {
            var e3 = this.getFeatureTable(e3, t3, r3, n2), s3 = [];
            if (e3) {
              for (var i3, a2 = e3.lookupListIndexes, l2 = this.font.tables[this.tableName].lookups, u2 = 0; u2 < a2.length; u2++)
                (i3 = l2[a2[u2]]).lookupType === o3 && s3.push(i3);
              if (0 === s3.length && n2)
                return t3 = l2.length, l2.push(i3 = { lookupType: o3, lookupFlag: 0, subtables: [], markFilteringSet: void 0 }), a2.push(t3), [i3];
            }
            return s3;
          }, getGlyphClass: function(e3, t3) {
            switch (e3.format) {
              case 1:
                return e3.startGlyph <= t3 && t3 < e3.startGlyph + e3.classes.length ? e3.classes[t3 - e3.startGlyph] : 0;
              case 2:
                var r3 = Et(e3.ranges, t3);
                return r3 ? r3.classId : 0;
            }
          }, getCoverageIndex: function(e3, t3) {
            switch (e3.format) {
              case 1:
                var r3 = Mt(e3.glyphs, t3);
                return 0 <= r3 ? r3 : -1;
              case 2:
                r3 = Et(e3.ranges, t3);
                return r3 ? r3.index + t3 - r3.start : -1;
            }
          }, expandCoverage: function(e3) {
            if (1 === e3.format)
              return e3.glyphs;
            for (var t3 = [], r3 = e3.ranges, o3 = 0; o3 < r3.length; o3++)
              for (var n2 = r3[o3], s3 = n2.start, i3 = n2.end, a2 = s3; a2 <= i3; a2++)
                t3.push(a2);
            return t3;
          } }).init = function() {
            var e3 = this.getDefaultScriptName();
            this.defaultKerningTables = this.getKerningTables(e3);
          }, Ct.prototype.getKerningValue = function(e3, t3, r3) {
            for (var o3 = 0; o3 < e3.length; o3++)
              for (var n2 = e3[o3].subtables, s3 = 0; s3 < n2.length; s3++) {
                var i3 = n2[s3], a2 = this.getCoverageIndex(i3.coverage, t3);
                if (!(a2 < 0))
                  switch (i3.posFormat) {
                    case 1:
                      for (var l2 = i3.pairSets[a2], u2 = 0; u2 < l2.length; u2++) {
                        var c2 = l2[u2];
                        if (c2.secondGlyph === r3)
                          return c2.value1 && c2.value1.xAdvance || 0;
                      }
                      break;
                    case 2:
                      var d2 = this.getGlyphClass(i3.classDef1, t3), f2 = this.getGlyphClass(i3.classDef2, r3), d2 = i3.classRecords[d2][f2];
                      return d2.value1 && d2.value1.xAdvance || 0;
                  }
              }
            return 0;
          }, Ct.prototype.getKerningTables = function(e3, t3) {
            if (this.font.tables.gpos)
              return this.getLookupTables(e3, t3, "kern", 2);
          }, (i2.prototype = Tt.prototype).createDefaultTable = function() {
            return { version: 1, scripts: [{ tag: "DFLT", script: { defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] }, langSysRecords: [] } }], features: [], lookups: [] };
          }, i2.prototype.getSingle = function(e3, t3, r3) {
            for (var o3 = [], n2 = this.getLookupTables(t3, r3, e3, 1), s3 = 0; s3 < n2.length; s3++)
              for (var i3 = n2[s3].subtables, a2 = 0; a2 < i3.length; a2++) {
                var l2 = i3[a2], u2 = this.expandCoverage(l2.coverage), c2 = void 0;
                if (1 === l2.substFormat)
                  for (var d2 = l2.deltaGlyphId, c2 = 0; c2 < u2.length; c2++) {
                    var f2 = u2[c2];
                    o3.push({ sub: f2, by: f2 + d2 });
                  }
                else {
                  var h2 = l2.substitute;
                  for (c2 = 0; c2 < u2.length; c2++)
                    o3.push({ sub: u2[c2], by: h2[c2] });
                }
              }
            return o3;
          }, i2.prototype.getAlternates = function(e3, t3, r3) {
            for (var o3 = [], n2 = this.getLookupTables(t3, r3, e3, 3), s3 = 0; s3 < n2.length; s3++)
              for (var i3 = n2[s3].subtables, a2 = 0; a2 < i3.length; a2++)
                for (var l2 = i3[a2], u2 = this.expandCoverage(l2.coverage), c2 = l2.alternateSets, d2 = 0; d2 < u2.length; d2++)
                  o3.push({ sub: u2[d2], by: c2[d2] });
            return o3;
          }, i2.prototype.getLigatures = function(e3, t3, r3) {
            for (var o3 = [], n2 = this.getLookupTables(t3, r3, e3, 4), s3 = 0; s3 < n2.length; s3++)
              for (var i3 = n2[s3].subtables, a2 = 0; a2 < i3.length; a2++)
                for (var l2 = i3[a2], u2 = this.expandCoverage(l2.coverage), c2 = l2.ligatureSets, d2 = 0; d2 < u2.length; d2++)
                  for (var f2 = u2[d2], h2 = c2[d2], p2 = 0; p2 < h2.length; p2++) {
                    var m2 = h2[p2];
                    o3.push({ sub: [f2].concat(m2.components), by: m2.ligGlyph });
                  }
            return o3;
          }, i2.prototype.addSingle = function(e3, t3, r3, o3) {
            r3 = Ot(this.getLookupTables(r3, o3, e3, 1, true)[0], 2, { substFormat: 2, coverage: { format: 1, glyphs: [] }, substitute: [] }), P.assert(1 === r3.coverage.format, "Ligature: unable to modify coverage table format " + r3.coverage.format), o3 = t3.sub, e3 = this.binSearch(r3.coverage.glyphs, o3);
            e3 < 0 && (r3.coverage.glyphs.splice(e3 = -1 - e3, 0, o3), r3.substitute.splice(e3, 0, 0)), r3.substitute[e3] = t3.by;
          }, i2.prototype.addAlternate = function(e3, t3, r3, o3) {
            r3 = Ot(this.getLookupTables(r3, o3, e3, 3, true)[0], 1, { substFormat: 1, coverage: { format: 1, glyphs: [] }, alternateSets: [] }), P.assert(1 === r3.coverage.format, "Ligature: unable to modify coverage table format " + r3.coverage.format), o3 = t3.sub, e3 = this.binSearch(r3.coverage.glyphs, o3);
            e3 < 0 && (r3.coverage.glyphs.splice(e3 = -1 - e3, 0, o3), r3.alternateSets.splice(e3, 0, 0)), r3.alternateSets[e3] = t3.by;
          }, i2.prototype.addLigature = function(e3, t3, r3, o3) {
            var r3 = this.getLookupTables(r3, o3, e3, 4, true)[0], o3 = r3.subtables[0], e3 = (o3 || (r3.subtables[0] = o3 = { substFormat: 1, coverage: { format: 1, glyphs: [] }, ligatureSets: [] }), P.assert(1 === o3.coverage.format, "Ligature: unable to modify coverage table format " + o3.coverage.format), t3.sub[0]), n2 = t3.sub.slice(1), r3 = { ligGlyph: t3.by, components: n2 }, t3 = this.binSearch(o3.coverage.glyphs, e3);
            if (0 <= t3) {
              for (var s3 = o3.ligatureSets[t3], i3 = 0; i3 < s3.length; i3++)
                if (function(e4, t4) {
                  var r4 = e4.length;
                  if (r4 === t4.length) {
                    for (var o4 = 0; o4 < r4; o4++)
                      if (e4[o4] !== t4[o4])
                        return;
                    return 1;
                  }
                }(s3[i3].components, n2))
                  return;
              s3.push(r3);
            } else
              o3.coverage.glyphs.splice(t3 = -1 - t3, 0, e3), o3.ligatureSets.splice(t3, 0, [r3]);
          }, i2.prototype.getFeature = function(e3, t3, r3) {
            if (/ss\d\d/.test(e3))
              return this.getSingle(e3, t3, r3);
            switch (e3) {
              case "aalt":
              case "salt":
                return this.getSingle(e3, t3, r3).concat(this.getAlternates(e3, t3, r3));
              case "dlig":
              case "liga":
              case "rlig":
                return this.getLigatures(e3, t3, r3);
            }
          }, i2.prototype.add = function(e3, t3, r3, o3) {
            if (/ss\d\d/.test(e3))
              return this.addSingle(e3, t3, r3, o3);
            switch (e3) {
              case "aalt":
              case "salt":
                return "number" == typeof t3.by ? this.addSingle(e3, t3, r3, o3) : this.addAlternate(e3, t3, r3, o3);
              case "dlig":
              case "liga":
              case "rlig":
                return this.addLigature(e3, t3, r3, o3);
            }
          };
          var It = { getPath: Rt, parse: function(e3, t3, r3, o3) {
            for (var n2 = new p.GlyphSet(o3), s3 = 0; s3 < r3.length - 1; s3 += 1) {
              var i3 = r3[s3];
              i3 !== r3[s3 + 1] ? n2.push(s3, p.ttfGlyphLoader(o3, s3, At, e3, t3 + i3, Dt)) : n2.push(s3, p.glyphLoader(o3, s3));
            }
            return n2;
          } };
          function Ut(e3) {
            this.font = e3, this.getCommands = function(e4) {
              return It.getPath(e4).commands;
            }, this._fpgmState = this._prepState = void 0, this._errorState = 0;
          }
          function Nt(e3) {
            return e3;
          }
          function Ft(e3) {
            return Math.sign(e3) * Math.round(Math.abs(e3));
          }
          function Bt(e3) {
            return Math.sign(e3) * Math.round(Math.abs(2 * e3)) / 2;
          }
          function Gt(e3) {
            return Math.sign(e3) * (Math.round(Math.abs(e3) + 0.5) - 0.5);
          }
          function Vt(e3) {
            return Math.sign(e3) * Math.ceil(Math.abs(e3));
          }
          function zt(e3) {
            return Math.sign(e3) * Math.floor(Math.abs(e3));
          }
          function Ht(e3) {
            var t3 = this.srPeriod, r3 = this.srPhase, o3 = 1;
            return e3 < 0 && (e3 = -e3, o3 = -1), e3 += this.srThreshold - r3, e3 = Math.trunc(e3 / t3) * t3, (e3 += r3) < 0 ? r3 * o3 : e3 * o3;
          }
          var x = { x: 1, y: 0, axis: "x", distance: function(e3, t3, r3, o3) {
            return (r3 ? e3.xo : e3.x) - (o3 ? t3.xo : t3.x);
          }, interpolate: function(e3, t3, r3, o3) {
            var n2, s3, i3, a2, l2, u2, c2;
            if (!o3 || o3 === this)
              return n2 = e3.xo - t3.xo, s3 = e3.xo - r3.xo, l2 = t3.x - t3.xo, u2 = r3.x - r3.xo, 0 === (c2 = (i3 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? void (e3.x = e3.xo + (l2 + u2) / 2) : void (e3.x = e3.xo + (l2 * a2 + u2 * i3) / c2);
            n2 = o3.distance(e3, t3, true, true), s3 = o3.distance(e3, r3, true, true), l2 = o3.distance(t3, t3, false, true), u2 = o3.distance(r3, r3, false, true), 0 === (c2 = (i3 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? x.setRelative(e3, e3, (l2 + u2) / 2, o3, true) : x.setRelative(e3, e3, (l2 * a2 + u2 * i3) / c2, o3, true);
          }, normalSlope: Number.NEGATIVE_INFINITY, setRelative: function(e3, t3, r3, o3, n2) {
            var s3, i3;
            o3 && o3 !== this ? (s3 = n2 ? t3.xo : t3.x, i3 = n2 ? t3.yo : t3.y, s3 += r3 * o3.x, i3 += r3 * o3.y, e3.x = s3 + (e3.y - i3) / o3.normalSlope) : e3.x = (n2 ? t3.xo : t3.x) + r3;
          }, slope: 0, touch: function(e3) {
            e3.xTouched = true;
          }, touched: function(e3) {
            return e3.xTouched;
          }, untouch: function(e3) {
            e3.xTouched = false;
          } }, M = { x: 0, y: 1, axis: "y", distance: function(e3, t3, r3, o3) {
            return (r3 ? e3.yo : e3.y) - (o3 ? t3.yo : t3.y);
          }, interpolate: function(e3, t3, r3, o3) {
            var n2, s3, i3, a2, l2, u2, c2;
            if (!o3 || o3 === this)
              return n2 = e3.yo - t3.yo, s3 = e3.yo - r3.yo, l2 = t3.y - t3.yo, u2 = r3.y - r3.yo, 0 === (c2 = (i3 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? void (e3.y = e3.yo + (l2 + u2) / 2) : void (e3.y = e3.yo + (l2 * a2 + u2 * i3) / c2);
            n2 = o3.distance(e3, t3, true, true), s3 = o3.distance(e3, r3, true, true), l2 = o3.distance(t3, t3, false, true), u2 = o3.distance(r3, r3, false, true), 0 === (c2 = (i3 = Math.abs(n2)) + (a2 = Math.abs(s3))) ? M.setRelative(e3, e3, (l2 + u2) / 2, o3, true) : M.setRelative(e3, e3, (l2 * a2 + u2 * i3) / c2, o3, true);
          }, normalSlope: 0, setRelative: function(e3, t3, r3, o3, n2) {
            var s3, i3;
            o3 && o3 !== this ? (s3 = n2 ? t3.xo : t3.x, i3 = n2 ? t3.yo : t3.y, s3 += r3 * o3.x, i3 += r3 * o3.y, e3.y = i3 + o3.normalSlope * (e3.x - s3)) : e3.y = (n2 ? t3.yo : t3.y) + r3;
          }, slope: Number.POSITIVE_INFINITY, touch: function(e3) {
            e3.yTouched = true;
          }, touched: function(e3) {
            return e3.yTouched;
          }, untouch: function(e3) {
            e3.yTouched = false;
          } };
          function Wt(e3, t3) {
            this.x = e3, this.y = t3, this.axis = void 0, this.slope = t3 / e3, this.normalSlope = -e3 / t3, Object.freeze(this);
          }
          function qt(e3, t3) {
            var r3 = Math.sqrt(e3 * e3 + t3 * t3);
            return t3 /= r3, 1 === (e3 /= r3) && 0 === t3 ? x : 0 === e3 && 1 === t3 ? M : new Wt(e3, t3);
          }
          function E(e3, t3, r3, o3) {
            this.x = this.xo = Math.round(64 * e3) / 64, this.y = this.yo = Math.round(64 * t3) / 64, this.lastPointOfContour = r3, this.onCurve = o3, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = false, this.yTouched = false, Object.preventExtensions(this);
          }
          Object.freeze(x), Object.freeze(M), Wt.prototype.distance = function(e3, t3, r3, o3) {
            return this.x * x.distance(e3, t3, r3, o3) + this.y * M.distance(e3, t3, r3, o3);
          }, Wt.prototype.interpolate = function(e3, t3, r3, o3) {
            var n2 = o3.distance(e3, t3, true, true), s3 = o3.distance(e3, r3, true, true), t3 = o3.distance(t3, t3, false, true), r3 = o3.distance(r3, r3, false, true), n2 = Math.abs(n2), s3 = Math.abs(s3), i3 = n2 + s3;
            0 === i3 ? this.setRelative(e3, e3, (t3 + r3) / 2, o3, true) : this.setRelative(e3, e3, (t3 * s3 + r3 * n2) / i3, o3, true);
          }, Wt.prototype.setRelative = function(e3, t3, r3, o3, n2) {
            var s3 = n2 ? t3.xo : t3.x, n2 = n2 ? t3.yo : t3.y, t3 = s3 + r3 * (o3 = o3 || this).x, s3 = n2 + r3 * o3.y, n2 = o3.normalSlope, r3 = this.slope, o3 = e3.x, i3 = e3.y;
            e3.x = (r3 * o3 - n2 * t3 + s3 - i3) / (r3 - n2), e3.y = r3 * (e3.x - o3) + i3;
          }, Wt.prototype.touch = function(e3) {
            e3.xTouched = true, e3.yTouched = true;
          }, E.prototype.nextTouched = function(e3) {
            for (var t3 = this.nextPointOnContour; !e3.touched(t3) && t3 !== this; )
              t3 = t3.nextPointOnContour;
            return t3;
          }, E.prototype.prevTouched = function(e3) {
            for (var t3 = this.prevPointOnContour; !e3.touched(t3) && t3 !== this; )
              t3 = t3.prevPointOnContour;
            return t3;
          };
          var Xt = Object.freeze(new E(0, 0)), Yt = { cvCutIn: 17 / 16, deltaBase: 9, deltaShift: 0.125, loop: 1, minDis: 1, autoFlip: true };
          function T(e3, t3) {
            switch (this.env = e3, this.stack = [], this.prog = t3, e3) {
              case "glyf":
                this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;
              case "prep":
                this.fv = this.pv = this.dpv = x, this.round = Ft;
            }
          }
          function Zt(e3) {
            for (var t3 = e3.tZone = new Array(e3.gZone.length), r3 = 0; r3 < t3.length; r3++)
              t3[r3] = new E(0, 0);
          }
          function Qt(e3, t3) {
            var r3, o3 = e3.prog, n2 = e3.ip, s3 = 1;
            do {
              if (88 === (r3 = o3[++n2]))
                s3++;
              else if (89 === r3)
                s3--;
              else if (64 === r3)
                n2 += o3[n2 + 1] + 1;
              else if (65 === r3)
                n2 += 2 * o3[n2 + 1] + 1;
              else if (176 <= r3 && r3 <= 183)
                n2 += r3 - 176 + 1;
              else if (184 <= r3 && r3 <= 191)
                n2 += 2 * (r3 - 184 + 1);
              else if (t3 && 1 === s3 && 27 === r3)
                break;
            } while (0 < s3);
            e3.ip = n2;
          }
          function Kt(e3, t3) {
            j.DEBUG && console.log(t3.step, "SVTCA[" + e3.axis + "]"), t3.fv = t3.pv = t3.dpv = e3;
          }
          function Jt(e3, t3) {
            j.DEBUG && console.log(t3.step, "SPVTCA[" + e3.axis + "]"), t3.pv = t3.dpv = e3;
          }
          function $t(e3, t3) {
            j.DEBUG && console.log(t3.step, "SFVTCA[" + e3.axis + "]"), t3.fv = e3;
          }
          function er(e3, t3) {
            var r3, o3 = t3.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t3.z2[n2], i3 = t3.z1[o3];
            j.DEBUG && console.log("SPVTL[" + e3 + "]", n2, o3), n2 = e3 ? (r3 = s3.y - i3.y, i3.x - s3.x) : (r3 = i3.x - s3.x, i3.y - s3.y), t3.pv = t3.dpv = qt(r3, n2);
          }
          function tr(e3, t3) {
            var r3, o3 = t3.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t3.z2[n2], i3 = t3.z1[o3];
            j.DEBUG && console.log("SFVTL[" + e3 + "]", n2, o3), n2 = e3 ? (r3 = s3.y - i3.y, i3.x - s3.x) : (r3 = i3.x - s3.x, i3.y - s3.y), t3.fv = qt(r3, n2);
          }
          function rr(e3) {
            j.DEBUG && console.log(e3.step, "POP[]"), e3.stack.pop();
          }
          function or(e3, t3) {
            var r3 = t3.stack.pop(), o3 = t3.z0[r3], n2 = t3.fv, s3 = t3.pv, i3 = (j.DEBUG && console.log(t3.step, "MDAP[" + e3 + "]", r3), s3.distance(o3, Xt));
            e3 && (i3 = t3.round(i3)), n2.setRelative(o3, Xt, i3, s3), n2.touch(o3), t3.rp0 = t3.rp1 = r3;
          }
          function nr(e3, t3) {
            var r3, o3, n2, s3 = t3.z2, i3 = s3.length - 2;
            j.DEBUG && console.log(t3.step, "IUP[" + e3.axis + "]");
            for (var a2 = 0; a2 < i3; a2++)
              r3 = s3[a2], e3.touched(r3) || (o3 = r3.prevTouched(e3)) !== r3 && (o3 === (n2 = r3.nextTouched(e3)) && e3.setRelative(r3, r3, e3.distance(o3, o3, false, true), e3, true), e3.interpolate(r3, o3, n2, e3));
          }
          function sr(e3, t3) {
            for (var r3 = t3.stack, o3 = e3 ? t3.rp1 : t3.rp2, n2 = (e3 ? t3.z0 : t3.z1)[o3], s3 = t3.fv, i3 = t3.pv, a2 = t3.loop, l2 = t3.z2; a2--; ) {
              var u2 = r3.pop(), c2 = l2[u2], d2 = i3.distance(n2, n2, false, true);
              s3.setRelative(c2, c2, d2, i3), s3.touch(c2), j.DEBUG && console.log(t3.step, (1 < t3.loop ? "loop " + (t3.loop - a2) + ": " : "") + "SHP[" + (e3 ? "rp1" : "rp2") + "]", u2);
            }
            t3.loop = 1;
          }
          function ir(e3, t3) {
            for (var r3 = t3.stack, o3 = e3 ? t3.rp1 : t3.rp2, n2 = (e3 ? t3.z0 : t3.z1)[o3], s3 = t3.fv, i3 = t3.pv, o3 = r3.pop(), a2 = t3.z2[t3.contours[o3]], l2 = a2, u2 = (j.DEBUG && console.log(t3.step, "SHC[" + e3 + "]", o3), i3.distance(n2, n2, false, true)); l2 !== n2 && s3.setRelative(l2, l2, u2, i3), (l2 = l2.nextPointOnContour) !== a2; )
              ;
          }
          function ar(e3, t3) {
            var r3, o3, n2 = t3.stack, s3 = e3 ? t3.rp1 : t3.rp2, s3 = (e3 ? t3.z0 : t3.z1)[s3], i3 = t3.fv, a2 = t3.pv, n2 = n2.pop();
            switch (j.DEBUG && console.log(t3.step, "SHZ[" + e3 + "]", n2), n2) {
              case 0:
                r3 = t3.tZone;
                break;
              case 1:
                r3 = t3.gZone;
                break;
              default:
                throw new Error("Invalid zone");
            }
            for (var l2 = a2.distance(s3, s3, false, true), u2 = r3.length - 2, c2 = 0; c2 < u2; c2++)
              o3 = r3[c2], i3.setRelative(o3, o3, l2, a2);
          }
          function lr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop() / 64, r3 = r3.pop(), n2 = t3.z1[r3], s3 = t3.z0[t3.rp0], i3 = t3.fv, a2 = t3.pv;
            i3.setRelative(n2, s3, o3, a2), i3.touch(n2), j.DEBUG && console.log(t3.step, "MSIRP[" + e3 + "]", o3, r3), t3.rp1 = t3.rp0, t3.rp2 = r3, e3 && (t3.rp0 = r3);
          }
          function ur(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop(), r3 = r3.pop(), n2 = t3.z0[r3], s3 = t3.fv, i3 = t3.pv, a2 = t3.cvt[o3], o3 = (j.DEBUG && console.log(t3.step, "MIAP[" + e3 + "]", o3, "(", a2, ")", r3), i3.distance(n2, Xt));
            e3 && (Math.abs(o3 - a2) < t3.cvCutIn && (o3 = a2), o3 = t3.round(o3)), s3.setRelative(n2, Xt, o3, i3), 0 === t3.zp0 && (n2.xo = n2.x, n2.yo = n2.y), s3.touch(n2), t3.rp0 = t3.rp1 = r3;
          }
          function cr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop(), n2 = t3.z2[o3];
            j.DEBUG && console.log(t3.step, "GC[" + e3 + "]", o3), r3.push(64 * t3.dpv.distance(n2, Xt, e3, false));
          }
          function dr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop(), r3 = r3.pop(), n2 = t3.z1[o3], s3 = t3.z0[r3], s3 = t3.dpv.distance(s3, n2, e3, e3);
            j.DEBUG && console.log(t3.step, "MD[" + e3 + "]", o3, r3, "->", s3), t3.stack.push(Math.round(64 * s3));
          }
          function fr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop(), n2 = t3.fv, s3 = t3.pv, i3 = t3.ppem, a2 = t3.deltaBase + 16 * (e3 - 1), l2 = t3.deltaShift, u2 = t3.z0;
            j.DEBUG && console.log(t3.step, "DELTAP[" + e3 + "]", o3, r3);
            for (var c2 = 0; c2 < o3; c2++) {
              var d2 = r3.pop(), f2 = r3.pop();
              a2 + ((240 & f2) >> 4) === i3 && (0 <= (f2 = (15 & f2) - 8) && f2++, j.DEBUG && console.log(t3.step, "DELTAPFIX", d2, "by", f2 * l2), d2 = u2[d2], n2.setRelative(d2, d2, f2 * l2, s3));
            }
          }
          function hr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop();
            j.DEBUG && console.log(t3.step, "ROUND[]"), r3.push(64 * t3.round(o3 / 64));
          }
          function pr(e3, t3) {
            var r3 = t3.stack, o3 = r3.pop(), n2 = t3.ppem, s3 = t3.deltaBase + 16 * (e3 - 1), i3 = t3.deltaShift;
            j.DEBUG && console.log(t3.step, "DELTAC[" + e3 + "]", o3, r3);
            for (var a2 = 0; a2 < o3; a2++) {
              var l2 = r3.pop(), u2 = r3.pop();
              s3 + ((240 & u2) >> 4) === n2 && (0 <= (u2 = (15 & u2) - 8) && u2++, u2 = u2 * i3, j.DEBUG && console.log(t3.step, "DELTACFIX", l2, "by", u2), t3.cvt[l2] += u2);
            }
          }
          function mr(e3, t3) {
            var r3, o3 = t3.stack, n2 = o3.pop(), o3 = o3.pop(), s3 = t3.z2[n2], i3 = t3.z1[o3];
            j.DEBUG && console.log(t3.step, "SDPVTL[" + e3 + "]", n2, o3), n2 = e3 ? (r3 = s3.y - i3.y, i3.x - s3.x) : (r3 = i3.x - s3.x, i3.y - s3.y), t3.dpv = qt(r3, n2);
          }
          function C(e3, t3) {
            var r3 = t3.stack, o3 = t3.prog, n2 = t3.ip;
            j.DEBUG && console.log(t3.step, "PUSHB[" + e3 + "]");
            for (var s3 = 0; s3 < e3; s3++)
              r3.push(o3[++n2]);
            t3.ip = n2;
          }
          function O(e3, t3) {
            var r3 = t3.ip, o3 = t3.prog, n2 = t3.stack;
            j.DEBUG && console.log(t3.ip, "PUSHW[" + e3 + "]");
            for (var s3 = 0; s3 < e3; s3++) {
              var i3 = o3[++r3] << 8 | o3[++r3];
              32768 & i3 && (i3 = -(1 + (65535 ^ i3))), n2.push(i3);
            }
            t3.ip = r3;
          }
          function L(e3, t3, r3, o3, n2, s3) {
            var i3, a2, l2 = s3.stack, u2 = e3 && l2.pop(), l2 = l2.pop(), c2 = s3.rp0, c2 = s3.z0[c2], d2 = s3.z1[l2], f2 = s3.minDis, h2 = s3.fv, p2 = s3.dpv, m2 = i3 = p2.distance(d2, c2, true, true), y2 = 0 <= m2 ? 1 : -1;
            m2 = Math.abs(m2), e3 && (a2 = s3.cvt[u2], o3 && Math.abs(m2 - a2) < s3.cvCutIn && (m2 = a2)), r3 && m2 < f2 && (m2 = f2), o3 && (m2 = s3.round(m2)), h2.setRelative(d2, c2, y2 * m2, p2), h2.touch(d2), j.DEBUG && console.log(s3.step, (e3 ? "MIRP[" : "MDRP[") + (t3 ? "M" : "m") + (r3 ? ">" : "_") + (o3 ? "R" : "_") + (0 === n2 ? "Gr" : 1 === n2 ? "Bl" : 2 === n2 ? "Wh" : "") + "]", e3 ? u2 + "(" + s3.cvt[u2] + "," + a2 + ")" : "", l2, "(d =", i3, "->", y2 * m2, ")"), s3.rp1 = s3.rp0, s3.rp2 = l2, t3 && (s3.rp0 = l2);
          }
          Ut.prototype.exec = function(e3, t3) {
            if ("number" != typeof t3)
              throw new Error("Point size is not a number!");
            if (!(2 < this._errorState)) {
              var r3 = this.font, o3 = this._prepState;
              if (!o3 || o3.ppem !== t3) {
                var n2 = this._fpgmState;
                if (!n2) {
                  T.prototype = Yt, (n2 = this._fpgmState = new T("fpgm", r3.tables.fpgm)).funcs = [], n2.font = r3, j.DEBUG && (console.log("---EXEC FPGM---"), n2.step = -1);
                  try {
                    vr(n2);
                  } catch (e4) {
                    return console.log("Hinting error in FPGM:" + e4), void (this._errorState = 3);
                  }
                }
                T.prototype = n2, (o3 = this._prepState = new T("prep", r3.tables.prep)).ppem = t3;
                var s3 = r3.tables.cvt;
                if (s3)
                  for (var i3 = o3.cvt = new Array(s3.length), a2 = t3 / r3.unitsPerEm, l2 = 0; l2 < s3.length; l2++)
                    i3[l2] = s3[l2] * a2;
                else
                  o3.cvt = [];
                j.DEBUG && (console.log("---EXEC PREP---"), o3.step = -1);
                try {
                  vr(o3);
                } catch (e4) {
                  this._errorState < 2 && console.log("Hinting error in PREP:" + e4), this._errorState = 2;
                }
              }
              if (!(1 < this._errorState))
                try {
                  return yr(e3, o3);
                } catch (e4) {
                  this._errorState < 1 && (console.log("Hinting error:" + e4), console.log("Note: further hinting errors are silenced")), this._errorState = 1;
                }
            }
          };
          var yr = function(e3, t3) {
            var r3 = t3.ppem / t3.font.unitsPerEm, o3 = r3, n2 = e3.components;
            if (T.prototype = t3, n2) {
              for (var s3 = t3.font, i3 = [], a2 = [], l2 = 0; l2 < n2.length; l2++) {
                var u2 = n2[l2], c2 = s3.glyphs.get(u2.glyphIndex), d2 = new T("glyf", c2.instructions);
                j.DEBUG && (console.log("---EXEC COMP " + l2 + "---"), d2.step = -1), gr(c2, d2, r3, o3);
                for (var f2 = Math.round(u2.dx * r3), h2 = Math.round(u2.dy * o3), p2 = d2.gZone, m2 = d2.contours, y2 = 0; y2 < p2.length; y2++) {
                  var g2 = p2[y2];
                  g2.xTouched = g2.yTouched = false, g2.xo = g2.x = g2.x + f2, g2.yo = g2.y = g2.y + h2;
                }
                var v2 = i3.length;
                i3.push.apply(i3, p2);
                for (var b2 = 0; b2 < m2.length; b2++)
                  a2.push(m2[b2] + v2);
              }
              e3.instructions && !d2.inhibitGridFit && ((d2 = new T("glyf", e3.instructions)).gZone = d2.z0 = d2.z1 = d2.z2 = i3, d2.contours = a2, i3.push(new E(0, 0), new E(Math.round(e3.advanceWidth * r3), 0)), j.DEBUG && (console.log("---EXEC COMPOSITE---"), d2.step = -1), vr(d2), i3.length -= 2);
            } else
              d2 = new T("glyf", e3.instructions), j.DEBUG && (console.log("---EXEC GLYPH---"), d2.step = -1), gr(e3, d2, r3, o3), i3 = d2.gZone;
            return i3;
          }, gr = function(e3, t3, r3, o3) {
            for (var n2, s3, i3, a2 = e3.points || [], l2 = a2.length, u2 = t3.gZone = t3.z0 = t3.z1 = t3.z2 = [], c2 = t3.contours = [], d2 = 0; d2 < l2; d2++)
              n2 = a2[d2], u2[d2] = new E(n2.x * r3, n2.y * o3, n2.lastPointOfContour, n2.onCurve);
            for (var f2 = 0; f2 < l2; f2++)
              n2 = u2[f2], s3 || (s3 = n2, c2.push(f2)), n2.lastPointOfContour ? ((n2.nextPointOnContour = s3).prevPointOnContour = n2, s3 = void 0) : (i3 = u2[f2 + 1], (n2.nextPointOnContour = i3).prevPointOnContour = n2);
            if (!t3.inhibitGridFit) {
              if (j.DEBUG) {
                console.log("PROCESSING GLYPH", t3.stack);
                for (var h2 = 0; h2 < l2; h2++)
                  console.log(h2, u2[h2].x, u2[h2].y);
              }
              if (u2.push(new E(0, 0), new E(Math.round(e3.advanceWidth * r3), 0)), vr(t3), u2.length -= 2, j.DEBUG) {
                console.log("FINISHED GLYPH", t3.stack);
                for (var p2 = 0; p2 < l2; p2++)
                  console.log(p2, u2[p2].x, u2[p2].y);
              }
            }
          }, vr = function(e3) {
            var t3 = e3.prog;
            if (t3) {
              var r3, o3 = t3.length;
              for (e3.ip = 0; e3.ip < o3; e3.ip++) {
                if (j.DEBUG && e3.step++, !(r3 = br[t3[e3.ip]]))
                  throw new Error("unknown instruction: 0x" + Number(t3[e3.ip]).toString(16));
                r3(e3);
              }
            }
          }, br = [Kt.bind(void 0, M), Kt.bind(void 0, x), Jt.bind(void 0, M), Jt.bind(void 0, x), $t.bind(void 0, M), $t.bind(void 0, x), er.bind(void 0, 0), er.bind(void 0, 1), tr.bind(void 0, 0), tr.bind(void 0, 1), function(e3) {
            var t3 = (r3 = e3.stack).pop(), r3 = r3.pop();
            j.DEBUG && console.log(e3.step, "SPVFS[]", t3, r3), e3.pv = e3.dpv = qt(r3, t3);
          }, function(e3) {
            var t3 = (r3 = e3.stack).pop(), r3 = r3.pop();
            j.DEBUG && console.log(e3.step, "SPVFS[]", t3, r3), e3.fv = qt(r3, t3);
          }, function(e3) {
            var t3 = e3.stack, r3 = e3.pv;
            j.DEBUG && console.log(e3.step, "GPV[]"), t3.push(16384 * r3.x), t3.push(16384 * r3.y);
          }, function(e3) {
            var t3 = e3.stack, r3 = e3.fv;
            j.DEBUG && console.log(e3.step, "GFV[]"), t3.push(16384 * r3.x), t3.push(16384 * r3.y);
          }, function(e3) {
            e3.fv = e3.pv, j.DEBUG && console.log(e3.step, "SFVTPV[]");
          }, function(e3) {
            var t3 = (s3 = e3.stack).pop(), r3 = s3.pop(), o3 = s3.pop(), n2 = s3.pop(), s3 = s3.pop(), i3 = e3.z0, a2 = e3.z1, l2 = i3[t3], i3 = i3[r3], u2 = a2[o3], a2 = a2[n2], e3 = e3.z2[s3], t3 = (j.DEBUG && console.log("ISECT[], ", t3, r3, o3, n2, s3), l2.x), r3 = l2.y, o3 = i3.x, n2 = i3.y, s3 = u2.x, l2 = u2.y, i3 = a2.x, u2 = a2.y, a2 = (t3 - o3) * (l2 - u2) - (r3 - n2) * (s3 - i3), c2 = t3 * n2 - r3 * o3, d2 = s3 * u2 - l2 * i3;
            e3.x = (c2 * (s3 - i3) - d2 * (t3 - o3)) / a2, e3.y = (c2 * (l2 - u2) - d2 * (r3 - n2)) / a2;
          }, function(e3) {
            e3.rp0 = e3.stack.pop(), j.DEBUG && console.log(e3.step, "SRP0[]", e3.rp0);
          }, function(e3) {
            e3.rp1 = e3.stack.pop(), j.DEBUG && console.log(e3.step, "SRP1[]", e3.rp1);
          }, function(e3) {
            e3.rp2 = e3.stack.pop(), j.DEBUG && console.log(e3.step, "SRP2[]", e3.rp2);
          }, function(e3) {
            var t3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "SZP0[]", t3), e3.zp0 = t3) {
              case 0:
                e3.tZone || Zt(e3), e3.z0 = e3.tZone;
                break;
              case 1:
                e3.z0 = e3.gZone;
                break;
              default:
                throw new Error("Invalid zone pointer");
            }
          }, function(e3) {
            var t3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "SZP1[]", t3), e3.zp1 = t3) {
              case 0:
                e3.tZone || Zt(e3), e3.z1 = e3.tZone;
                break;
              case 1:
                e3.z1 = e3.gZone;
                break;
              default:
                throw new Error("Invalid zone pointer");
            }
          }, function(e3) {
            var t3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "SZP2[]", t3), e3.zp2 = t3) {
              case 0:
                e3.tZone || Zt(e3), e3.z2 = e3.tZone;
                break;
              case 1:
                e3.z2 = e3.gZone;
                break;
              default:
                throw new Error("Invalid zone pointer");
            }
          }, function(e3) {
            var t3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "SZPS[]", t3), e3.zp0 = e3.zp1 = e3.zp2 = t3) {
              case 0:
                e3.tZone || Zt(e3), e3.z0 = e3.z1 = e3.z2 = e3.tZone;
                break;
              case 1:
                e3.z0 = e3.z1 = e3.z2 = e3.gZone;
                break;
              default:
                throw new Error("Invalid zone pointer");
            }
          }, function(e3) {
            e3.loop = e3.stack.pop(), j.DEBUG && console.log(e3.step, "SLOOP[]", e3.loop);
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "RTG[]"), e3.round = Ft;
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "RTHG[]"), e3.round = Gt;
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SMD[]", t3), e3.minDis = t3 / 64;
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "ELSE[]"), Qt(e3, false);
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "JMPR[]", t3), e3.ip += t3 - 1;
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SCVTCI[]", t3), e3.cvCutIn = t3 / 64;
          }, void 0, void 0, function(e3) {
            var t3 = e3.stack;
            j.DEBUG && console.log(e3.step, "DUP[]"), t3.push(t3[t3.length - 1]);
          }, rr, function(e3) {
            j.DEBUG && console.log(e3.step, "CLEAR[]"), e3.stack.length = 0;
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "SWAP[]"), t3.push(r3), t3.push(o3);
          }, function(e3) {
            var t3 = e3.stack;
            j.DEBUG && console.log(e3.step, "DEPTH[]"), t3.push(t3.length);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "CINDEX[]", r3), t3.push(t3[t3.length - r3]);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "MINDEX[]", r3), t3.push(t3.splice(t3.length - r3, 1)[0]);
          }, void 0, void 0, void 0, function(e3) {
            var t3 = (o3 = e3.stack).pop(), r3 = o3.pop(), o3 = (j.DEBUG && console.log(e3.step, "LOOPCALL[]", t3, r3), e3.ip), n2 = e3.prog;
            e3.prog = e3.funcs[t3];
            for (var s3 = 0; s3 < r3; s3++)
              vr(e3), j.DEBUG && console.log(++e3.step, s3 + 1 < r3 ? "next loopcall" : "done loopcall", s3);
            e3.ip = o3, e3.prog = n2;
          }, function(e3) {
            var t3 = e3.stack.pop(), r3 = (j.DEBUG && console.log(e3.step, "CALL[]", t3), e3.ip), o3 = e3.prog;
            e3.prog = e3.funcs[t3], vr(e3), e3.ip = r3, e3.prog = o3, j.DEBUG && console.log(++e3.step, "returning from", t3);
          }, function(e3) {
            if ("fpgm" !== e3.env)
              throw new Error("FDEF not allowed here");
            var t3 = e3.stack, r3 = e3.prog, o3 = e3.ip, t3 = t3.pop(), n2 = o3;
            for (j.DEBUG && console.log(e3.step, "FDEF[]", t3); 45 !== r3[++o3]; )
              ;
            e3.ip = o3, e3.funcs[t3] = r3.slice(n2 + 1, o3);
          }, void 0, or.bind(void 0, 0), or.bind(void 0, 1), nr.bind(void 0, M), nr.bind(void 0, x), sr.bind(void 0, 0), sr.bind(void 0, 1), ir.bind(void 0, 0), ir.bind(void 0, 1), ar.bind(void 0, 0), ar.bind(void 0, 1), function(e3) {
            for (var t3 = e3.stack, r3 = e3.loop, o3 = e3.fv, n2 = t3.pop() / 64, s3 = e3.z2; r3--; ) {
              var i3 = t3.pop(), a2 = s3[i3];
              j.DEBUG && console.log(e3.step, (1 < e3.loop ? "loop " + (e3.loop - r3) + ": " : "") + "SHPIX[]", i3, n2), o3.setRelative(a2, a2, n2), o3.touch(a2);
            }
            e3.loop = 1;
          }, function(e3) {
            for (var t3 = e3.stack, r3 = e3.rp1, o3 = e3.rp2, n2 = e3.loop, s3 = e3.z0[r3], i3 = e3.z1[o3], a2 = e3.fv, l2 = e3.dpv, u2 = e3.z2; n2--; ) {
              var c2 = t3.pop(), d2 = u2[c2];
              j.DEBUG && console.log(e3.step, (1 < e3.loop ? "loop " + (e3.loop - n2) + ": " : "") + "IP[]", c2, r3, "<->", o3), a2.interpolate(d2, s3, i3, l2), a2.touch(d2);
            }
            e3.loop = 1;
          }, lr.bind(void 0, 0), lr.bind(void 0, 1), function(e3) {
            for (var t3 = e3.stack, r3 = e3.rp0, o3 = e3.z0[r3], n2 = e3.loop, s3 = e3.fv, i3 = e3.pv, a2 = e3.z1; n2--; ) {
              var l2 = t3.pop(), u2 = a2[l2];
              j.DEBUG && console.log(e3.step, (1 < e3.loop ? "loop " + (e3.loop - n2) + ": " : "") + "ALIGNRP[]", l2), s3.setRelative(u2, o3, 0, i3), s3.touch(u2);
            }
            e3.loop = 1;
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "RTDG[]"), e3.round = Bt;
          }, ur.bind(void 0, 0), ur.bind(void 0, 1), function(e3) {
            var t3 = e3.prog, r3 = e3.ip, o3 = e3.stack, n2 = t3[++r3];
            j.DEBUG && console.log(e3.step, "NPUSHB[]", n2);
            for (var s3 = 0; s3 < n2; s3++)
              o3.push(t3[++r3]);
            e3.ip = r3;
          }, function(e3) {
            var t3 = e3.ip, r3 = e3.prog, o3 = e3.stack, n2 = r3[++t3];
            j.DEBUG && console.log(e3.step, "NPUSHW[]", n2);
            for (var s3 = 0; s3 < n2; s3++) {
              var i3 = r3[++t3] << 8 | r3[++t3];
              32768 & i3 && (i3 = -(1 + (65535 ^ i3))), o3.push(i3);
            }
            e3.ip = t3;
          }, function(e3) {
            var t3 = e3.stack, r3 = (r3 = e3.store) || (e3.store = []), o3 = t3.pop(), t3 = t3.pop();
            j.DEBUG && console.log(e3.step, "WS", o3, t3), r3[t3] = o3;
          }, function(e3) {
            var t3 = e3.stack, r3 = e3.store, o3 = t3.pop(), e3 = (j.DEBUG && console.log(e3.step, "RS", o3), r3 && r3[o3] || 0);
            t3.push(e3);
          }, function(e3) {
            var t3 = (r3 = e3.stack).pop(), r3 = r3.pop();
            j.DEBUG && console.log(e3.step, "WCVTP", t3, r3), e3.cvt[r3] = t3 / 64;
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "RCVT", r3), t3.push(64 * e3.cvt[r3]);
          }, cr.bind(void 0, 0), cr.bind(void 0, 1), void 0, dr.bind(void 0, 0), dr.bind(void 0, 1), function(e3) {
            j.DEBUG && console.log(e3.step, "MPPEM[]"), e3.stack.push(e3.ppem);
          }, void 0, function(e3) {
            j.DEBUG && console.log(e3.step, "FLIPON[]"), e3.autoFlip = true;
          }, void 0, void 0, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "LT[]", r3, o3), t3.push(o3 < r3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "LTEQ[]", r3, o3), t3.push(o3 <= r3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "GT[]", r3, o3), t3.push(r3 < o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "GTEQ[]", r3, o3), t3.push(r3 <= o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "EQ[]", r3, o3), t3.push(r3 === o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "NEQ[]", r3, o3), t3.push(r3 !== o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "ODD[]", r3), t3.push(Math.trunc(r3) % 2 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "EVEN[]", r3), t3.push(Math.trunc(r3) % 2 ? 0 : 1);
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "IF[]", t3), t3 || (Qt(e3, true), j.DEBUG && console.log(e3.step, "EIF[]"));
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "EIF[]");
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "AND[]", r3, o3), t3.push(r3 && o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "OR[]", r3, o3), t3.push(r3 || o3 ? 1 : 0);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "NOT[]", r3), t3.push(r3 ? 0 : 1);
          }, fr.bind(void 0, 1), function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SDB[]", t3), e3.deltaBase = t3;
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SDS[]", t3), e3.deltaShift = Math.pow(0.5, t3);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "ADD[]", r3, o3), t3.push(o3 + r3);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "SUB[]", r3, o3), t3.push(o3 - r3);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "DIV[]", r3, o3), t3.push(64 * o3 / r3);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "MUL[]", r3, o3), t3.push(o3 * r3 / 64);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "ABS[]", r3), t3.push(Math.abs(r3));
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "NEG[]", r3), t3.push(-r3);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "FLOOR[]", r3), t3.push(64 * Math.floor(r3 / 64));
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop();
            j.DEBUG && console.log(e3.step, "CEILING[]", r3), t3.push(64 * Math.ceil(r3 / 64));
          }, hr.bind(void 0, 0), hr.bind(void 0, 1), hr.bind(void 0, 2), hr.bind(void 0, 3), void 0, void 0, void 0, void 0, function(e3) {
            var t3 = (r3 = e3.stack).pop(), r3 = r3.pop();
            j.DEBUG && console.log(e3.step, "WCVTF[]", t3, r3), e3.cvt[r3] = t3 * e3.ppem / e3.font.unitsPerEm;
          }, fr.bind(void 0, 2), fr.bind(void 0, 3), pr.bind(void 0, 1), pr.bind(void 0, 2), pr.bind(void 0, 3), function(e3) {
            var t3, r3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "SROUND[]", r3), e3.round = Ht, 192 & r3) {
              case 0:
                t3 = 0.5;
                break;
              case 64:
                t3 = 1;
                break;
              case 128:
                t3 = 2;
                break;
              default:
                throw new Error("invalid SROUND value");
            }
            switch (e3.srPeriod = t3, 48 & r3) {
              case 0:
                e3.srPhase = 0;
                break;
              case 16:
                e3.srPhase = 0.25 * t3;
                break;
              case 32:
                e3.srPhase = 0.5 * t3;
                break;
              case 48:
                e3.srPhase = 0.75 * t3;
                break;
              default:
                throw new Error("invalid SROUND value");
            }
            e3.srThreshold = 0 === (r3 &= 15) ? 0 : (r3 / 8 - 0.5) * t3;
          }, function(e3) {
            var t3, r3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "S45ROUND[]", r3), e3.round = Ht, 192 & r3) {
              case 0:
                t3 = Math.sqrt(2) / 2;
                break;
              case 64:
                t3 = Math.sqrt(2);
                break;
              case 128:
                t3 = 2 * Math.sqrt(2);
                break;
              default:
                throw new Error("invalid S45ROUND value");
            }
            switch (e3.srPeriod = t3, 48 & r3) {
              case 0:
                e3.srPhase = 0;
                break;
              case 16:
                e3.srPhase = 0.25 * t3;
                break;
              case 32:
                e3.srPhase = 0.5 * t3;
                break;
              case 48:
                e3.srPhase = 0.75 * t3;
                break;
              default:
                throw new Error("invalid S45ROUND value");
            }
            e3.srThreshold = 0 === (r3 &= 15) ? 0 : (r3 / 8 - 0.5) * t3;
          }, void 0, void 0, function(e3) {
            j.DEBUG && console.log(e3.step, "ROFF[]"), e3.round = Nt;
          }, void 0, function(e3) {
            j.DEBUG && console.log(e3.step, "RUTG[]"), e3.round = Vt;
          }, function(e3) {
            j.DEBUG && console.log(e3.step, "RDTG[]"), e3.round = zt;
          }, rr, rr, void 0, void 0, void 0, void 0, void 0, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SCANCTRL[]", t3);
          }, mr.bind(void 0, 0), mr.bind(void 0, 1), function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = 0;
            j.DEBUG && console.log(e3.step, "GETINFO[]", r3), 1 & r3 && (o3 = 35), 32 & r3 && (o3 |= 4096), t3.push(o3);
          }, void 0, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop(), n2 = t3.pop();
            j.DEBUG && console.log(e3.step, "ROLL[]"), t3.push(o3), t3.push(r3), t3.push(n2);
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "MAX[]", r3, o3), t3.push(Math.max(o3, r3));
          }, function(e3) {
            var t3 = e3.stack, r3 = t3.pop(), o3 = t3.pop();
            j.DEBUG && console.log(e3.step, "MIN[]", r3, o3), t3.push(Math.min(o3, r3));
          }, function(e3) {
            var t3 = e3.stack.pop();
            j.DEBUG && console.log(e3.step, "SCANTYPE[]", t3);
          }, function(e3) {
            var t3 = e3.stack.pop(), r3 = e3.stack.pop();
            switch (j.DEBUG && console.log(e3.step, "INSTCTRL[]", t3, r3), t3) {
              case 1:
                return void (e3.inhibitGridFit = !!r3);
              case 2:
                return void (e3.ignoreCvt = !!r3);
              default:
                throw new Error("invalid INSTCTRL[] selector");
            }
          }, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, C.bind(void 0, 1), C.bind(void 0, 2), C.bind(void 0, 3), C.bind(void 0, 4), C.bind(void 0, 5), C.bind(void 0, 6), C.bind(void 0, 7), C.bind(void 0, 8), O.bind(void 0, 1), O.bind(void 0, 2), O.bind(void 0, 3), O.bind(void 0, 4), O.bind(void 0, 5), O.bind(void 0, 6), O.bind(void 0, 7), O.bind(void 0, 8), L.bind(void 0, 0, 0, 0, 0, 0), L.bind(void 0, 0, 0, 0, 0, 1), L.bind(void 0, 0, 0, 0, 0, 2), L.bind(void 0, 0, 0, 0, 0, 3), L.bind(void 0, 0, 0, 0, 1, 0), L.bind(void 0, 0, 0, 0, 1, 1), L.bind(void 0, 0, 0, 0, 1, 2), L.bind(void 0, 0, 0, 0, 1, 3), L.bind(void 0, 0, 0, 1, 0, 0), L.bind(void 0, 0, 0, 1, 0, 1), L.bind(void 0, 0, 0, 1, 0, 2), L.bind(void 0, 0, 0, 1, 0, 3), L.bind(void 0, 0, 0, 1, 1, 0), L.bind(void 0, 0, 0, 1, 1, 1), L.bind(void 0, 0, 0, 1, 1, 2), L.bind(void 0, 0, 0, 1, 1, 3), L.bind(void 0, 0, 1, 0, 0, 0), L.bind(void 0, 0, 1, 0, 0, 1), L.bind(void 0, 0, 1, 0, 0, 2), L.bind(void 0, 0, 1, 0, 0, 3), L.bind(void 0, 0, 1, 0, 1, 0), L.bind(void 0, 0, 1, 0, 1, 1), L.bind(void 0, 0, 1, 0, 1, 2), L.bind(void 0, 0, 1, 0, 1, 3), L.bind(void 0, 0, 1, 1, 0, 0), L.bind(void 0, 0, 1, 1, 0, 1), L.bind(void 0, 0, 1, 1, 0, 2), L.bind(void 0, 0, 1, 1, 0, 3), L.bind(void 0, 0, 1, 1, 1, 0), L.bind(void 0, 0, 1, 1, 1, 1), L.bind(void 0, 0, 1, 1, 1, 2), L.bind(void 0, 0, 1, 1, 1, 3), L.bind(void 0, 1, 0, 0, 0, 0), L.bind(void 0, 1, 0, 0, 0, 1), L.bind(void 0, 1, 0, 0, 0, 2), L.bind(void 0, 1, 0, 0, 0, 3), L.bind(void 0, 1, 0, 0, 1, 0), L.bind(void 0, 1, 0, 0, 1, 1), L.bind(void 0, 1, 0, 0, 1, 2), L.bind(void 0, 1, 0, 0, 1, 3), L.bind(void 0, 1, 0, 1, 0, 0), L.bind(void 0, 1, 0, 1, 0, 1), L.bind(void 0, 1, 0, 1, 0, 2), L.bind(void 0, 1, 0, 1, 0, 3), L.bind(void 0, 1, 0, 1, 1, 0), L.bind(void 0, 1, 0, 1, 1, 1), L.bind(void 0, 1, 0, 1, 1, 2), L.bind(void 0, 1, 0, 1, 1, 3), L.bind(void 0, 1, 1, 0, 0, 0), L.bind(void 0, 1, 1, 0, 0, 1), L.bind(void 0, 1, 1, 0, 0, 2), L.bind(void 0, 1, 1, 0, 0, 3), L.bind(void 0, 1, 1, 0, 1, 0), L.bind(void 0, 1, 1, 0, 1, 1), L.bind(void 0, 1, 1, 0, 1, 2), L.bind(void 0, 1, 1, 0, 1, 3), L.bind(void 0, 1, 1, 1, 0, 0), L.bind(void 0, 1, 1, 1, 0, 1), L.bind(void 0, 1, 1, 1, 0, 2), L.bind(void 0, 1, 1, 1, 0, 3), L.bind(void 0, 1, 1, 1, 1, 0), L.bind(void 0, 1, 1, 1, 1, 1), L.bind(void 0, 1, 1, 1, 1, 2), L.bind(void 0, 1, 1, 1, 1, 3)], jr = Array.from || function(e3) {
            return e3.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
          };
          function k(e3) {
            (e3 = e3 || {}).empty || (_(e3.familyName, "When creating a new Font object, familyName is required."), _(e3.styleName, "When creating a new Font object, styleName is required."), _(e3.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), _(e3.ascender, "When creating a new Font object, ascender is required."), _(e3.descender, "When creating a new Font object, descender is required."), _(e3.descender < 0, "Descender should be negative (e.g. -512)."), this.names = { fontFamily: { en: e3.familyName || " " }, fontSubfamily: { en: e3.styleName || " " }, fullName: { en: e3.fullName || e3.familyName + " " + e3.styleName }, postScriptName: { en: e3.postScriptName || (e3.familyName + e3.styleName).replace(/\s/g, "") }, designer: { en: e3.designer || " " }, designerURL: { en: e3.designerURL || " " }, manufacturer: { en: e3.manufacturer || " " }, manufacturerURL: { en: e3.manufacturerURL || " " }, license: { en: e3.license || " " }, licenseURL: { en: e3.licenseURL || " " }, version: { en: e3.version || "Version 0.1" }, description: { en: e3.description || " " }, copyright: { en: e3.copyright || " " }, trademark: { en: e3.trademark || " " } }, this.unitsPerEm = e3.unitsPerEm || 1e3, this.ascender = e3.ascender, this.descender = e3.descender, this.createdTimestamp = e3.createdTimestamp, this.tables = { os2: { usWeightClass: e3.weightClass || this.usWeightClasses.MEDIUM, usWidthClass: e3.widthClass || this.usWidthClasses.MEDIUM, fsSelection: e3.fsSelection || this.fsSelectionValues.REGULAR } }), this.supported = true, this.glyphs = new p.GlyphSet(this, e3.glyphs || []), this.encoding = new Te(this), this.position = new Ct(this), this.substitution = new i2(this), this.tables = this.tables || {}, Object.defineProperty(this, "hinting", { get: function() {
              return this._hinting || ("truetype" === this.outlinesFormat ? this._hinting = new Ut(this) : void 0);
            } });
          }
          function _r(e3, t3) {
            var r3, o3 = JSON.stringify(e3), n2 = 256;
            for (r3 in t3) {
              var s3 = parseInt(r3);
              if (s3 && !(s3 < 256)) {
                if (JSON.stringify(t3[r3]) === o3)
                  return s3;
                n2 <= s3 && (n2 = s3 + 1);
              }
            }
            return t3[n2] = e3, n2;
          }
          k.prototype.hasChar = function(e3) {
            return null !== this.encoding.charToGlyphIndex(e3);
          }, k.prototype.charToGlyphIndex = function(e3) {
            return this.encoding.charToGlyphIndex(e3);
          }, k.prototype.charToGlyph = function(e3) {
            e3 = this.charToGlyphIndex(e3);
            return this.glyphs.get(e3) || this.glyphs.get(0);
          }, k.prototype.stringToGlyphs = function(e3, t3) {
            t3 = t3 || this.defaultRenderOptions;
            for (var r3 = jr(e3), o3 = [], n2 = 0; n2 < r3.length; n2 += 1) {
              var s3 = r3[n2];
              o3.push(this.charToGlyphIndex(s3));
            }
            var i3 = o3.length;
            if (t3.features) {
              var e3 = t3.script || this.substitution.getDefaultScriptName(), a2 = [];
              t3.features.liga && (a2 = a2.concat(this.substitution.getFeature("liga", e3, t3.language))), t3.features.rlig && (a2 = a2.concat(this.substitution.getFeature("rlig", e3, t3.language)));
              for (var l2 = 0; l2 < i3; l2 += 1)
                for (var u2 = 0; u2 < a2.length; u2++) {
                  for (var c2 = a2[u2], d2 = c2.sub, f2 = d2.length, h2 = 0; h2 < f2 && d2[h2] === o3[l2 + h2]; )
                    h2++;
                  h2 === f2 && (o3.splice(l2, f2, c2.by), i3 = i3 - f2 + 1);
                }
            }
            for (var p2 = new Array(i3), m2 = this.glyphs.get(0), y2 = 0; y2 < i3; y2 += 1)
              p2[y2] = this.glyphs.get(o3[y2]) || m2;
            return p2;
          }, k.prototype.nameToGlyphIndex = function(e3) {
            return this.glyphNames.nameToGlyphIndex(e3);
          }, k.prototype.nameToGlyph = function(e3) {
            e3 = this.nameToGlyphIndex(e3);
            return this.glyphs.get(e3) || this.glyphs.get(0);
          }, k.prototype.glyphIndexToName = function(e3) {
            return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(e3) : "";
          }, k.prototype.getKerningValue = function(e3, t3) {
            e3 = e3.index || e3, t3 = t3.index || t3;
            var r3 = this.position.defaultKerningTables;
            return r3 ? this.position.getKerningValue(r3, e3, t3) : this.kerningPairs[e3 + "," + t3] || 0;
          }, k.prototype.defaultRenderOptions = { kerning: true, features: { liga: true, rlig: true } }, k.prototype.forEachGlyph = function(e3, t3, r3, o3, n2, s3) {
            t3 = void 0 !== t3 ? t3 : 0, r3 = void 0 !== r3 ? r3 : 0, n2 = n2 || this.defaultRenderOptions;
            var i3, a2 = 1 / this.unitsPerEm * (o3 = void 0 !== o3 ? o3 : 72), l2 = this.stringToGlyphs(e3, n2);
            n2.kerning && (e3 = n2.script || this.position.getDefaultScriptName(), i3 = this.position.getKerningTables(e3, n2.language));
            for (var u2 = 0; u2 < l2.length; u2 += 1) {
              var c2 = l2[u2];
              s3.call(this, c2, t3, r3, o3, n2), c2.advanceWidth && (t3 += c2.advanceWidth * a2), n2.kerning && u2 < l2.length - 1 && (t3 += (i3 ? this.position.getKerningValue(i3, c2.index, l2[u2 + 1].index) : this.getKerningValue(c2, l2[u2 + 1])) * a2), n2.letterSpacing ? t3 += n2.letterSpacing * o3 : n2.tracking && (t3 += n2.tracking / 1e3 * o3);
            }
            return t3;
          }, k.prototype.getPath = function(e3, t3, r3, o3, n2) {
            var s3 = new f();
            return this.forEachGlyph(e3, t3, r3, o3, n2, function(e4, t4, r4, o4) {
              e4 = e4.getPath(t4, r4, o4, n2, this);
              s3.extend(e4);
            }), s3;
          }, k.prototype.getPaths = function(e3, t3, r3, o3, n2) {
            var s3 = [];
            return this.forEachGlyph(e3, t3, r3, o3, n2, function(e4, t4, r4, o4) {
              e4 = e4.getPath(t4, r4, o4, n2, this);
              s3.push(e4);
            }), s3;
          }, k.prototype.getAdvanceWidth = function(e3, t3, r3) {
            return this.forEachGlyph(e3, 0, 0, t3, r3, function() {
            });
          }, k.prototype.draw = function(e3, t3, r3, o3, n2, s3) {
            this.getPath(t3, r3, o3, n2, s3).draw(e3);
          }, k.prototype.drawPoints = function(n2, e3, t3, r3, o3, s3) {
            this.forEachGlyph(e3, t3, r3, o3, s3, function(e4, t4, r4, o4) {
              e4.drawPoints(n2, t4, r4, o4);
            });
          }, k.prototype.drawMetrics = function(n2, e3, t3, r3, o3, s3) {
            this.forEachGlyph(e3, t3, r3, o3, s3, function(e4, t4, r4, o4) {
              e4.drawMetrics(n2, t4, r4, o4);
            });
          }, k.prototype.getEnglishName = function(e3) {
            e3 = this.names[e3];
            if (e3)
              return e3.en;
          }, k.prototype.validate = function() {
            var t3 = this;
            function e3(e4) {
              e4 = t3.getEnglishName(e4);
              e4 && e4.trim().length;
            }
            e3("fontFamily"), e3("weightName"), e3("manufacturer"), e3("copyright"), e3("version"), this.unitsPerEm;
          }, k.prototype.toTables = function() {
            return wt.fontToTable(this);
          }, k.prototype.toBuffer = function() {
            return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
          }, k.prototype.toArrayBuffer = function() {
            for (var e3 = this.toTables().encode(), t3 = new ArrayBuffer(e3.length), r3 = new Uint8Array(t3), o3 = 0; o3 < e3.length; o3++)
              r3[o3] = e3[o3];
            return t3;
          }, k.prototype.download = function(t3) {
            var e3 = this.getEnglishName("fontFamily"), r3 = this.getEnglishName("fontSubfamily"), o3 = (t3 = t3 || e3.replace(/\s/g, "") + "-" + r3 + ".otf", this.toArrayBuffer());
            "undefined" != typeof window ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, o3.byteLength, function(e4) {
              e4.root.getFile(t3, { create: true }, function(r4) {
                r4.createWriter(function(e5) {
                  var t4 = new DataView(o3), t4 = new Blob([t4], { type: "font/opentype" });
                  e5.write(t4), e5.addEventListener("writeend", function() {
                    location.href = r4.toURL();
                  }, false);
                });
              });
            }, function(e4) {
              throw new Error(e4.name + ": " + e4.message);
            })) : (e3 = Ar("fs"), r3 = function(e4) {
              for (var t4 = new kr(e4.byteLength), r4 = new Uint8Array(e4), o4 = 0; o4 < t4.length; ++o4)
                t4[o4] = r4[o4];
              return t4;
            }(o3), e3.writeFileSync(t3, r3));
          }, k.prototype.fsSelectionValues = { ITALIC: 1, UNDERSCORE: 2, NEGATIVE: 4, OUTLINED: 8, STRIKEOUT: 16, BOLD: 32, REGULAR: 64, USER_TYPO_METRICS: 128, WWS: 256, OBLIQUE: 512 }, k.prototype.usWidthClasses = { ULTRA_CONDENSED: 1, EXTRA_CONDENSED: 2, CONDENSED: 3, SEMI_CONDENSED: 4, MEDIUM: 5, SEMI_EXPANDED: 6, EXPANDED: 7, EXTRA_EXPANDED: 8, ULTRA_EXPANDED: 9 }, k.prototype.usWeightClasses = { THIN: 100, EXTRA_LIGHT: 200, LIGHT: 300, NORMAL: 400, MEDIUM: 500, SEMI_BOLD: 600, BOLD: 700, EXTRA_BOLD: 800, BLACK: 900 };
          var xr = { make: function(e3, t3) {
            var r3 = new S.Table("fvar", [{ name: "version", type: "ULONG", value: 65536 }, { name: "offsetToData", type: "USHORT", value: 0 }, { name: "countSizePairs", type: "USHORT", value: 2 }, { name: "axisCount", type: "USHORT", value: e3.axes.length }, { name: "axisSize", type: "USHORT", value: 20 }, { name: "instanceCount", type: "USHORT", value: e3.instances.length }, { name: "instanceSize", type: "USHORT", value: 4 + 4 * e3.axes.length }]);
            r3.offsetToData = r3.sizeOf();
            for (var o3, n2, s3, i3 = 0; i3 < e3.axes.length; i3++)
              r3.fields = r3.fields.concat((o3 = i3, n2 = e3.axes[i3], s3 = t3, s3 = _r(n2.name, t3), [{ name: "tag_" + o3, type: "TAG", value: n2.tag }, { name: "minValue_" + o3, type: "FIXED", value: n2.minValue << 16 }, { name: "defaultValue_" + o3, type: "FIXED", value: n2.defaultValue << 16 }, { name: "maxValue_" + o3, type: "FIXED", value: n2.maxValue << 16 }, { name: "flags_" + o3, type: "USHORT", value: 0 }, { name: "nameID_" + o3, type: "USHORT", value: s3 }]));
            for (var a2 = 0; a2 < e3.instances.length; a2++)
              r3.fields = r3.fields.concat(function(e4, t4, r4, o4) {
                for (var n3 = [{ name: "nameID_" + e4, type: "USHORT", value: _r(t4.name, o4) }, { name: "flags_" + e4, type: "USHORT", value: 0 }], s4 = 0; s4 < r4.length; ++s4) {
                  var i4 = r4[s4].tag;
                  n3.push({ name: "axis_" + e4 + " " + i4, type: "FIXED", value: t4.coordinates[i4] << 16 });
                }
                return n3;
              }(a2, e3.instances[a2], e3.axes, t3));
            return r3;
          }, parse: function(e3, t3, r3) {
            for (var o3, n2, s3, i3, a2 = new R.Parser(e3, t3), l2 = a2.parseULong(), u2 = (P.argument(65536 === l2, "Unsupported fvar table version."), a2.parseOffset16()), c2 = (a2.skip("uShort", 1), a2.parseUShort()), d2 = a2.parseUShort(), f2 = a2.parseUShort(), h2 = a2.parseUShort(), p2 = [], m2 = 0; m2 < c2; m2++)
              p2.push((o3 = e3, n2 = t3 + u2 + m2 * d2, s3 = r3, i3 = {}, o3 = new R.Parser(o3, n2), i3.tag = o3.parseTag(), i3.minValue = o3.parseFixed(), i3.defaultValue = o3.parseFixed(), i3.maxValue = o3.parseFixed(), o3.skip("uShort", 1), i3.name = s3[o3.parseUShort()] || {}, i3));
            for (var y2 = [], g2 = t3 + u2 + c2 * d2, v2 = 0; v2 < f2; v2++)
              y2.push(function(e4, t4, r4, o4) {
                var n3 = {}, s4 = new R.Parser(e4, t4);
                n3.name = o4[s4.parseUShort()] || {}, s4.skip("uShort", 1), n3.coordinates = {};
                for (var i4 = 0; i4 < r4.length; ++i4)
                  n3.coordinates[r4[i4].tag] = s4.parseFixed();
                return n3;
              }(e3, g2 + v2 * h2, p2, r3));
            return { axes: p2, instances: y2 };
          } }, A = new Array(10);
          A[1] = function() {
            var e3 = this.offset + this.relativeOffset, t3 = this.parseUShort();
            return 1 === t3 ? { posFormat: 1, coverage: this.parsePointer(u.coverage), value: this.parseValueRecord() } : 2 === t3 ? { posFormat: 2, coverage: this.parsePointer(u.coverage), values: this.parseValueRecordList() } : void P.assert(false, "0x" + e3.toString(16) + ": GPOS lookup type 1 format must be 1 or 2.");
          }, A[2] = function() {
            var e3, t3, r3, o3, n2 = this.offset + this.relativeOffset, s3 = this.parseUShort(), n2 = (P.assert(1 === s3 || 2 === s3, "0x" + n2.toString(16) + ": GPOS lookup type 2 format must be 1 or 2."), this.parsePointer(u.coverage)), i3 = this.parseUShort(), a2 = this.parseUShort();
            return 1 === s3 ? { posFormat: s3, coverage: n2, valueFormat1: i3, valueFormat2: a2, pairSets: this.parseList(u.pointer(u.list(function() {
              return { secondGlyph: this.parseUShort(), value1: this.parseValueRecord(i3), value2: this.parseValueRecord(a2) };
            }))) } : 2 === s3 ? (e3 = this.parsePointer(u.classDef), t3 = this.parsePointer(u.classDef), r3 = this.parseUShort(), o3 = this.parseUShort(), { posFormat: s3, coverage: n2, valueFormat1: i3, valueFormat2: a2, classDef1: e3, classDef2: t3, class1Count: r3, class2Count: o3, classRecords: this.parseList(r3, u.list(o3, function() {
              return { value1: this.parseValueRecord(i3), value2: this.parseValueRecord(a2) };
            })) }) : void 0;
          }, A[3] = function() {
            return { error: "GPOS Lookup 3 not supported" };
          }, A[4] = function() {
            return { error: "GPOS Lookup 4 not supported" };
          }, A[5] = function() {
            return { error: "GPOS Lookup 5 not supported" };
          }, A[6] = function() {
            return { error: "GPOS Lookup 6 not supported" };
          }, A[7] = function() {
            return { error: "GPOS Lookup 7 not supported" };
          }, A[8] = function() {
            return { error: "GPOS Lookup 8 not supported" };
          }, A[9] = function() {
            return { error: "GPOS Lookup 9 not supported" };
          };
          var wr = new Array(10);
          var Sr = { parse: function(e3, t3) {
            return t3 = (e3 = new u(e3, t3 = t3 || 0)).parseVersion(1), P.argument(1 === t3 || 1.1 === t3, "Unsupported GPOS table version " + t3), 1 === t3 ? { version: t3, scripts: e3.parseScriptList(), features: e3.parseFeatureList(), lookups: e3.parseLookupList(A) } : { version: t3, scripts: e3.parseScriptList(), features: e3.parseFeatureList(), lookups: e3.parseLookupList(A), variations: e3.parseFeatureVariationsList() };
          }, make: function(e3) {
            return new S.Table("GPOS", [{ name: "version", type: "ULONG", value: 65536 }, { name: "scripts", type: "TABLE", value: new S.ScriptList(e3.scripts) }, { name: "features", type: "TABLE", value: new S.FeatureList(e3.features) }, { name: "lookups", type: "TABLE", value: new S.LookupList(e3.lookups, wr) }]);
          } };
          var Mr = { parse: function(e3, t3) {
            if (e3 = new R.Parser(e3, t3), 0 === (t3 = e3.parseUShort())) {
              var r3 = e3, o3 = {}, n2 = (r3.skip("uShort"), r3.parseUShort()), s3 = (P.argument(0 === n2, "Unsupported kern sub-table version."), r3.skip("uShort", 2), r3.parseUShort());
              r3.skip("uShort", 3);
              for (var i3 = 0; i3 < s3; i3 += 1) {
                var a2 = r3.parseUShort(), l2 = r3.parseUShort(), u2 = r3.parseShort();
                o3[a2 + "," + l2] = u2;
              }
              return o3;
            }
            if (1 !== t3)
              throw new Error("Unsupported kern table version (" + t3 + ").");
            var c2 = e3, d2 = {}, n2 = (c2.skip("uShort"), 1 < c2.parseULong() && console.warn("Only the first kern subtable is supported."), c2.skip("uLong"), 255 & c2.parseUShort());
            if (c2.skip("uShort"), 0 == n2) {
              var f2 = c2.parseUShort();
              c2.skip("uShort", 3);
              for (var h2 = 0; h2 < f2; h2 += 1) {
                var p2 = c2.parseUShort(), m2 = c2.parseUShort(), y2 = c2.parseShort();
                d2[p2 + "," + m2] = y2;
              }
            }
            return d2;
          } };
          var Er = { parse: function(e3, t3, r3, o3) {
            for (var n2 = new R.Parser(e3, t3), s3 = o3 ? n2.parseUShort : n2.parseULong, i3 = [], a2 = 0; a2 < r3 + 1; a2 += 1) {
              var l2 = s3.call(n2);
              o3 && (l2 *= 2), i3.push(l2);
            }
            return i3;
          } };
          function Tr(e3, r3) {
            Ar("fs").readFile(e3, function(e4, t3) {
              if (e4)
                return r3(e4.message);
              r3(null, Lt(t3));
            });
          }
          function Cr(e3, t3) {
            var r3 = new XMLHttpRequest();
            r3.open("get", e3, true), r3.responseType = "arraybuffer", r3.onload = function() {
              return r3.response ? t3(null, r3.response) : t3("Font could not be loaded: " + r3.statusText);
            }, r3.onerror = function() {
              t3("Font could not be loaded");
            }, r3.send();
          }
          function Or(e3, t3) {
            for (var r3 = [], o3 = 12, n2 = 0; n2 < t3; n2 += 1) {
              var s3 = R.getTag(e3, o3), i3 = R.getULong(e3, o3 + 4), a2 = R.getULong(e3, o3 + 8), l2 = R.getULong(e3, o3 + 12);
              r3.push({ tag: s3, checksum: i3, offset: a2, length: l2, compression: false }), o3 += 16;
            }
            return r3;
          }
          function D(e3, t3) {
            if ("WOFF" !== t3.compression)
              return { data: e3, offset: t3.offset };
            var e3 = new Uint8Array(e3.buffer, t3.offset + 2, t3.compressedLength - 2), r3 = new Uint8Array(t3.length);
            if (re2(e3, r3), r3.byteLength !== t3.length)
              throw new Error("Decompression error: " + t3.tag + " decompressed length doesn't match recorded length");
            return { data: new DataView(r3.buffer, 0), offset: 0 };
          }
          function Lr(e3) {
            var t3, r3, o3, n2, s3, i3, a2, l2, u2, c2, d2, f2, h2, p2, m2 = new k({ empty: true }), y2 = new DataView(e3, 0), g2 = [], e3 = R.getTag(y2, 0);
            if (e3 === String.fromCharCode(0, 1, 0, 0) || "true" === e3 || "typ1" === e3)
              m2.outlinesFormat = "truetype", g2 = Or(y2, o3 = R.getUShort(y2, 4));
            else if ("OTTO" === e3)
              m2.outlinesFormat = "cff", g2 = Or(y2, o3 = R.getUShort(y2, 4));
            else {
              if ("wOFF" !== e3)
                throw new Error("Unsupported OpenType signature " + e3);
              var v2 = R.getTag(y2, 4);
              if (v2 === String.fromCharCode(0, 1, 0, 0))
                m2.outlinesFormat = "truetype";
              else {
                if ("OTTO" !== v2)
                  throw new Error("Unsupported OpenType flavor " + e3);
                m2.outlinesFormat = "cff";
              }
              g2 = function(e4, t4) {
                for (var r4 = [], o4 = 44, n3 = 0; n3 < t4; n3 += 1) {
                  var s4 = R.getTag(e4, o4), i4 = R.getULong(e4, o4 + 4), a3 = R.getULong(e4, o4 + 8), l3 = R.getULong(e4, o4 + 12), u3 = void 0, u3 = a3 < l3 && "WOFF";
                  r4.push({ tag: s4, offset: i4, compression: u3, compressedLength: a3, length: l3 }), o4 += 20;
                }
                return r4;
              }(y2, o3 = R.getUShort(y2, 12));
            }
            for (var b2 = 0; b2 < o3; b2 += 1) {
              var j2 = g2[b2], _2 = void 0;
              switch (j2.tag) {
                case "cmap":
                  _2 = D(y2, j2), m2.tables.cmap = we.parse(_2.data, _2.offset), m2.encoding = new Ce(m2.tables.cmap);
                  break;
                case "cvt ":
                  _2 = D(y2, j2), p2 = new R.Parser(_2.data, _2.offset), m2.tables.cvt = p2.parseShortList(j2.length / 2);
                  break;
                case "fvar":
                  s3 = j2;
                  break;
                case "fpgm":
                  _2 = D(y2, j2), p2 = new R.Parser(_2.data, _2.offset), m2.tables.fpgm = p2.parseByteList(j2.length);
                  break;
                case "head":
                  _2 = D(y2, j2), m2.tables.head = Ze.parse(_2.data, _2.offset), m2.unitsPerEm = m2.tables.head.unitsPerEm, t3 = m2.tables.head.indexToLocFormat;
                  break;
                case "hhea":
                  _2 = D(y2, j2), m2.tables.hhea = Qe.parse(_2.data, _2.offset), m2.ascender = m2.tables.hhea.ascender, m2.descender = m2.tables.hhea.descender, m2.numberOfHMetrics = m2.tables.hhea.numberOfHMetrics;
                  break;
                case "hmtx":
                  u2 = j2;
                  break;
                case "ltag":
                  _2 = D(y2, j2), r3 = Je.parse(_2.data, _2.offset);
                  break;
                case "maxp":
                  _2 = D(y2, j2), m2.tables.maxp = $e.parse(_2.data, _2.offset), m2.numGlyphs = m2.tables.maxp.numGlyphs;
                  break;
                case "name":
                  f2 = j2;
                  break;
                case "OS/2":
                  _2 = D(y2, j2), m2.tables.os2 = ht.parse(_2.data, _2.offset);
                  break;
                case "post":
                  _2 = D(y2, j2), m2.tables.post = pt.parse(_2.data, _2.offset), m2.glyphNames = new Le(m2.tables.post);
                  break;
                case "prep":
                  _2 = D(y2, j2), p2 = new R.Parser(_2.data, _2.offset), m2.tables.prep = p2.parseByteList(j2.length);
                  break;
                case "glyf":
                  i3 = j2;
                  break;
                case "loca":
                  d2 = j2;
                  break;
                case "CFF ":
                  n2 = j2;
                  break;
                case "kern":
                  c2 = j2;
                  break;
                case "GPOS":
                  a2 = j2;
                  break;
                case "GSUB":
                  l2 = j2;
                  break;
                case "meta":
                  h2 = j2;
              }
            }
            v2 = D(y2, f2);
            if (m2.tables.name = dt.parse(v2.data, v2.offset, r3), m2.names = m2.tables.name, i3 && d2) {
              e3 = 0 === t3, v2 = D(y2, d2), v2 = Er.parse(v2.data, v2.offset, m2.numGlyphs, e3), e3 = D(y2, i3);
              m2.glyphs = It.parse(e3.data, e3.offset, v2, m2);
            } else {
              if (!n2)
                throw new Error("Font doesn't contain TrueType or CFF outlines.");
              e3 = D(y2, n2);
              Ye.parse(e3.data, e3.offset, m2);
            }
            for (var v2 = D(y2, u2), x2 = (Ke.parse(v2.data, v2.offset, m2.numberOfHMetrics, m2.numGlyphs, m2.glyphs), m2), w2 = x2.tables.cmap.glyphIndexMap, S2 = Object.keys(w2), M2 = 0; M2 < S2.length; M2 += 1) {
              var E2, T2 = S2[M2], C2 = w2[T2];
              (E2 = x2.glyphs.get(C2)).addUnicode(parseInt(T2));
            }
            for (var O2 = 0; O2 < x2.glyphs.length; O2 += 1)
              E2 = x2.glyphs.get(O2), x2.cffEncoding ? x2.isCIDFont ? E2.name = "gid" + O2 : E2.name = x2.cffEncoding.charset[O2] : x2.glyphNames.names && (E2.name = x2.glyphNames.glyphIndexToName(O2));
            return c2 ? (e3 = D(y2, c2), m2.kerningPairs = Mr.parse(e3.data, e3.offset)) : m2.kerningPairs = {}, a2 && (v2 = D(y2, a2), m2.tables.gpos = Sr.parse(v2.data, v2.offset), m2.position.init()), l2 && (e3 = D(y2, l2), m2.tables.gsub = yt.parse(e3.data, e3.offset)), s3 && (v2 = D(y2, s3), m2.tables.fvar = xr.parse(v2.data, v2.offset, m2.names)), h2 && (e3 = D(y2, h2), m2.tables.meta = gt.parse(e3.data, e3.offset), m2.metas = m2.tables.meta), m2;
          }
          j.Font = k, j.Glyph = h, j.Path = f, j.BoundingBox = a, j._parse = R, j.parse = Lr, j.load = function(e3, o3) {
            ("undefined" == typeof window ? Tr : Cr)(e3, function(e4, t3) {
              if (e4)
                return o3(e4);
              var r3;
              try {
                r3 = Lr(t3);
              } catch (e5) {
                return o3(e5, null);
              }
              return o3(null, r3);
            });
          }, j.loadSync = function(e3) {
            return Lr(Lt(Ar("fs").readFileSync(e3)));
          }, Object.defineProperty(j, "__esModule", { value: true });
        }, "object" == typeof o && void 0 !== r ? t(o) : t(e.opentype = {});
      }.call(this, Ar("buffer").Buffer);
    }, { buffer: 4, fs: 2 }], 242: [function(e, t, u) {
      !function(n) {
        function s2(e2, t2) {
          for (var r = 0, o2 = e2.length - 1; 0 <= o2; o2--) {
            var n2 = e2[o2];
            "." === n2 ? e2.splice(o2, 1) : ".." === n2 ? (e2.splice(o2, 1), r++) : r && (e2.splice(o2, 1), r--);
          }
          if (t2)
            for (; r--; )
              e2.unshift("..");
          return e2;
        }
        function i2(e2, t2) {
          if (e2.filter)
            return e2.filter(t2);
          for (var r = [], o2 = 0; o2 < e2.length; o2++)
            t2(e2[o2], o2, e2) && r.push(e2[o2]);
          return r;
        }
        u.resolve = function() {
          for (var e2 = "", t2 = false, r = arguments.length - 1; -1 <= r && !t2; r--) {
            var o2 = 0 <= r ? arguments[r] : n.cwd();
            if ("string" != typeof o2)
              throw new TypeError("Arguments to path.resolve must be strings");
            o2 && (e2 = o2 + "/" + e2, t2 = "/" === o2.charAt(0));
          }
          return (t2 ? "/" : "") + (e2 = s2(i2(e2.split("/"), function(e3) {
            return !!e3;
          }), !t2).join("/")) || ".";
        }, u.normalize = function(e2) {
          var t2 = u.isAbsolute(e2), r = "/" === o(e2, -1);
          return (e2 = (e2 = s2(i2(e2.split("/"), function(e3) {
            return !!e3;
          }), !t2).join("/")) || t2 ? e2 : ".") && r && (e2 += "/"), (t2 ? "/" : "") + e2;
        }, u.isAbsolute = function(e2) {
          return "/" === e2.charAt(0);
        }, u.join = function() {
          var e2 = Array.prototype.slice.call(arguments, 0);
          return u.normalize(i2(e2, function(e3, t2) {
            if ("string" != typeof e3)
              throw new TypeError("Arguments to path.join must be strings");
            return e3;
          }).join("/"));
        }, u.relative = function(e2, t2) {
          function r(e3) {
            for (var t3 = 0; t3 < e3.length && "" === e3[t3]; t3++)
              ;
            for (var r2 = e3.length - 1; 0 <= r2 && "" === e3[r2]; r2--)
              ;
            return r2 < t3 ? [] : e3.slice(t3, r2 - t3 + 1);
          }
          e2 = u.resolve(e2).substr(1), t2 = u.resolve(t2).substr(1);
          for (var o2 = r(e2.split("/")), n2 = r(t2.split("/")), s3 = Math.min(o2.length, n2.length), i3 = s3, a = 0; a < s3; a++)
            if (o2[a] !== n2[a]) {
              i3 = a;
              break;
            }
          for (var l = [], a = i3; a < o2.length; a++)
            l.push("..");
          return (l = l.concat(n2.slice(i3))).join("/");
        }, u.sep = "/", u.delimiter = ":", u.dirname = function(e2) {
          if ("string" != typeof e2 && (e2 += ""), 0 === e2.length)
            return ".";
          for (var t2 = 47 === e2.charCodeAt(0), r = -1, o2 = true, n2 = e2.length - 1; 1 <= n2; --n2)
            if (47 === e2.charCodeAt(n2)) {
              if (!o2) {
                r = n2;
                break;
              }
            } else
              o2 = false;
          return -1 === r ? t2 ? "/" : "." : t2 && 1 === r ? "/" : e2.slice(0, r);
        }, u.basename = function(e2, t2) {
          e2 = function(e3) {
            "string" != typeof e3 && (e3 += "");
            for (var t3 = 0, r = -1, o2 = true, n2 = e3.length - 1; 0 <= n2; --n2)
              if (47 === e3.charCodeAt(n2)) {
                if (!o2) {
                  t3 = n2 + 1;
                  break;
                }
              } else
                -1 === r && (o2 = false, r = n2 + 1);
            return -1 === r ? "" : e3.slice(t3, r);
          }(e2);
          return e2 = t2 && e2.substr(-1 * t2.length) === t2 ? e2.substr(0, e2.length - t2.length) : e2;
        }, u.extname = function(e2) {
          "string" != typeof e2 && (e2 += "");
          for (var t2 = -1, r = 0, o2 = -1, n2 = true, s3 = 0, i3 = e2.length - 1; 0 <= i3; --i3) {
            var a = e2.charCodeAt(i3);
            if (47 === a) {
              if (n2)
                continue;
              r = i3 + 1;
              break;
            }
            -1 === o2 && (n2 = false, o2 = i3 + 1), 46 === a ? -1 === t2 ? t2 = i3 : 1 !== s3 && (s3 = 1) : -1 !== t2 && (s3 = -1);
          }
          return -1 === t2 || -1 === o2 || 0 === s3 || 1 === s3 && t2 === o2 - 1 && t2 === r + 1 ? "" : e2.slice(t2, o2);
        };
        var o = "b" === "ab".substr(-1) ? function(e2, t2, r) {
          return e2.substr(t2, r);
        } : function(e2, t2, r) {
          return t2 < 0 && (t2 = e2.length + t2), e2.substr(t2, r);
        };
      }.call(this, e("_process"));
    }, { _process: 243 }], 243: [function(e, t, r) {
      var o, n, t = t.exports = {};
      function s2() {
        throw new Error("setTimeout has not been defined");
      }
      function i2() {
        throw new Error("clearTimeout has not been defined");
      }
      try {
        o = "function" == typeof setTimeout ? setTimeout : s2;
      } catch (e2) {
        o = s2;
      }
      try {
        n = "function" == typeof clearTimeout ? clearTimeout : i2;
      } catch (e2) {
        n = i2;
      }
      function a(t2) {
        if (o === setTimeout)
          return setTimeout(t2, 0);
        if ((o === s2 || !o) && setTimeout)
          return (o = setTimeout)(t2, 0);
        try {
          return o(t2, 0);
        } catch (e2) {
          try {
            return o.call(null, t2, 0);
          } catch (e3) {
            return o.call(this, t2, 0);
          }
        }
      }
      var l, u = [], c = false, d = -1;
      function f() {
        c && l && (c = false, l.length ? u = l.concat(u) : d = -1, u.length && h());
      }
      function h() {
        if (!c) {
          for (var e2 = a(f), t2 = (c = true, u.length); t2; ) {
            for (l = u, u = []; ++d < t2; )
              l && l[d].run();
            d = -1, t2 = u.length;
          }
          l = null, c = false, !function(t3) {
            if (n === clearTimeout)
              return clearTimeout(t3);
            if ((n === i2 || !n) && clearTimeout)
              return (n = clearTimeout)(t3);
            try {
              n(t3);
            } catch (e3) {
              try {
                return n.call(null, t3);
              } catch (e4) {
                return n.call(this, t3);
              }
            }
          }(e2);
        }
      }
      function p(e2, t2) {
        this.fun = e2, this.array = t2;
      }
      function m() {
      }
      t.nextTick = function(e2) {
        var t2 = new Array(arguments.length - 1);
        if (1 < arguments.length)
          for (var r2 = 1; r2 < arguments.length; r2++)
            t2[r2 - 1] = arguments[r2];
        u.push(new p(e2, t2)), 1 !== u.length || c || a(h);
      }, p.prototype.run = function() {
        this.fun.apply(null, this.array);
      }, t.title = "browser", t.browser = true, t.env = {}, t.argv = [], t.version = "", t.versions = {}, t.on = m, t.addListener = m, t.once = m, t.off = m, t.removeListener = m, t.removeAllListeners = m, t.emit = m, t.prependListener = m, t.prependOnceListener = m, t.listeners = function(e2) {
        return [];
      }, t.binding = function(e2) {
        throw new Error("process.binding is not supported");
      }, t.cwd = function() {
        return "/";
      }, t.chdir = function(e2) {
        throw new Error("process.chdir is not supported");
      }, t.umask = function() {
        return 0;
      };
    }, {}], 244: [function(e, t, r) {
      t = function(s2) {
        var l, e2 = Object.prototype, u = e2.hasOwnProperty, t2 = "function" == typeof Symbol ? Symbol : {}, o = t2.iterator || "@@iterator", r2 = t2.asyncIterator || "@@asyncIterator", n = t2.toStringTag || "@@toStringTag";
        function i2(e3, t3, r3, o2) {
          var n2, s3, i3, a2, t3 = t3 && t3.prototype instanceof y ? t3 : y, t3 = Object.create(t3.prototype), o2 = new S(o2 || []);
          return t3._invoke = (n2 = e3, s3 = r3, i3 = o2, a2 = d, function(e4, t4) {
            if (a2 === h)
              throw new Error("Generator is already running");
            if (a2 === p) {
              if ("throw" === e4)
                throw t4;
              return E();
            }
            for (i3.method = e4, i3.arg = t4; ; ) {
              var r4 = i3.delegate;
              if (r4) {
                r4 = function e5(t5, r5) {
                  var o3 = t5.iterator[r5.method];
                  if (o3 === l) {
                    if (r5.delegate = null, "throw" === r5.method) {
                      if (t5.iterator.return && (r5.method = "return", r5.arg = l, e5(t5, r5), "throw" === r5.method))
                        return m;
                      r5.method = "throw", r5.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return m;
                  }
                  o3 = c(o3, t5.iterator, r5.arg);
                  if ("throw" === o3.type)
                    return r5.method = "throw", r5.arg = o3.arg, r5.delegate = null, m;
                  o3 = o3.arg;
                  if (!o3)
                    return r5.method = "throw", r5.arg = new TypeError("iterator result is not an object"), r5.delegate = null, m;
                  {
                    if (!o3.done)
                      return o3;
                    r5[t5.resultName] = o3.value, r5.next = t5.nextLoc, "return" !== r5.method && (r5.method = "next", r5.arg = l);
                  }
                  r5.delegate = null;
                  return m;
                }(r4, i3);
                if (r4) {
                  if (r4 === m)
                    continue;
                  return r4;
                }
              }
              if ("next" === i3.method)
                i3.sent = i3._sent = i3.arg;
              else if ("throw" === i3.method) {
                if (a2 === d)
                  throw a2 = p, i3.arg;
                i3.dispatchException(i3.arg);
              } else
                "return" === i3.method && i3.abrupt("return", i3.arg);
              a2 = h;
              r4 = c(n2, s3, i3);
              if ("normal" === r4.type) {
                if (a2 = i3.done ? p : f, r4.arg !== m)
                  return { value: r4.arg, done: i3.done };
              } else
                "throw" === r4.type && (a2 = p, i3.method = "throw", i3.arg = r4.arg);
            }
          }), t3;
        }
        function c(e3, t3, r3) {
          try {
            return { type: "normal", arg: e3.call(t3, r3) };
          } catch (e4) {
            return { type: "throw", arg: e4 };
          }
        }
        s2.wrap = i2;
        var d = "suspendedStart", f = "suspendedYield", h = "executing", p = "completed", m = {};
        function y() {
        }
        function a() {
        }
        function g() {
        }
        var t2 = {}, v = (t2[o] = function() {
          return this;
        }, Object.getPrototypeOf), v = v && v(v(M([]))), b = (v && v !== e2 && u.call(v, o) && (t2 = v), g.prototype = y.prototype = Object.create(t2));
        function j(e3) {
          ["next", "throw", "return"].forEach(function(t3) {
            e3[t3] = function(e4) {
              return this._invoke(t3, e4);
            };
          });
        }
        function _(i3) {
          var t3;
          this._invoke = function(r3, o2) {
            function e3() {
              return new Promise(function(e4, t4) {
                !function t5(e5, r4, o3, n2) {
                  var s3, e5 = c(i3[e5], i3, r4);
                  if ("throw" !== e5.type)
                    return (r4 = (s3 = e5.arg).value) && "object" == typeof r4 && u.call(r4, "__await") ? Promise.resolve(r4.__await).then(function(e6) {
                      t5("next", e6, o3, n2);
                    }, function(e6) {
                      t5("throw", e6, o3, n2);
                    }) : Promise.resolve(r4).then(function(e6) {
                      s3.value = e6, o3(s3);
                    }, function(e6) {
                      return t5("throw", e6, o3, n2);
                    });
                  n2(e5.arg);
                }(r3, o2, e4, t4);
              });
            }
            return t3 = t3 ? t3.then(e3, e3) : e3();
          };
        }
        function x(e3) {
          var t3 = { tryLoc: e3[0] };
          1 in e3 && (t3.catchLoc = e3[1]), 2 in e3 && (t3.finallyLoc = e3[2], t3.afterLoc = e3[3]), this.tryEntries.push(t3);
        }
        function w(e3) {
          var t3 = e3.completion || {};
          t3.type = "normal", delete t3.arg, e3.completion = t3;
        }
        function S(e3) {
          this.tryEntries = [{ tryLoc: "root" }], e3.forEach(x, this), this.reset(true);
        }
        function M(t3) {
          if (t3) {
            var r3, e3 = t3[o];
            if (e3)
              return e3.call(t3);
            if ("function" == typeof t3.next)
              return t3;
            if (!isNaN(t3.length))
              return r3 = -1, (e3 = function e4() {
                for (; ++r3 < t3.length; )
                  if (u.call(t3, r3))
                    return e4.value = t3[r3], e4.done = false, e4;
                return e4.value = l, e4.done = true, e4;
              }).next = e3;
          }
          return { next: E };
        }
        function E() {
          return { value: l, done: true };
        }
        return (a.prototype = b.constructor = g).constructor = a, g[n] = a.displayName = "GeneratorFunction", s2.isGeneratorFunction = function(e3) {
          e3 = "function" == typeof e3 && e3.constructor;
          return !!e3 && (e3 === a || "GeneratorFunction" === (e3.displayName || e3.name));
        }, s2.mark = function(e3) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(e3, g) : (e3.__proto__ = g, n in e3 || (e3[n] = "GeneratorFunction")), e3.prototype = Object.create(b), e3;
        }, s2.awrap = function(e3) {
          return { __await: e3 };
        }, j(_.prototype), _.prototype[r2] = function() {
          return this;
        }, s2.AsyncIterator = _, s2.async = function(e3, t3, r3, o2) {
          var n2 = new _(i2(e3, t3, r3, o2));
          return s2.isGeneratorFunction(t3) ? n2 : n2.next().then(function(e4) {
            return e4.done ? e4.value : n2.next();
          });
        }, j(b), b[n] = "Generator", b[o] = function() {
          return this;
        }, b.toString = function() {
          return "[object Generator]";
        }, s2.keys = function(r3) {
          var e3, o2 = [];
          for (e3 in r3)
            o2.push(e3);
          return o2.reverse(), function e4() {
            for (; o2.length; ) {
              var t3 = o2.pop();
              if (t3 in r3)
                return e4.value = t3, e4.done = false, e4;
            }
            return e4.done = true, e4;
          };
        }, s2.values = M, S.prototype = { constructor: S, reset: function(e3) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = l, this.done = false, this.delegate = null, this.method = "next", this.arg = l, this.tryEntries.forEach(w), !e3)
            for (var t3 in this)
              "t" === t3.charAt(0) && u.call(this, t3) && !isNaN(+t3.slice(1)) && (this[t3] = l);
        }, stop: function() {
          this.done = true;
          var e3 = this.tryEntries[0].completion;
          if ("throw" === e3.type)
            throw e3.arg;
          return this.rval;
        }, dispatchException: function(r3) {
          if (this.done)
            throw r3;
          var o2 = this;
          function e3(e4, t4) {
            return s3.type = "throw", s3.arg = r3, o2.next = e4, t4 && (o2.method = "next", o2.arg = l), !!t4;
          }
          for (var t3 = this.tryEntries.length - 1; 0 <= t3; --t3) {
            var n2 = this.tryEntries[t3], s3 = n2.completion;
            if ("root" === n2.tryLoc)
              return e3("end");
            if (n2.tryLoc <= this.prev) {
              var i3 = u.call(n2, "catchLoc"), a2 = u.call(n2, "finallyLoc");
              if (i3 && a2) {
                if (this.prev < n2.catchLoc)
                  return e3(n2.catchLoc, true);
                if (this.prev < n2.finallyLoc)
                  return e3(n2.finallyLoc);
              } else if (i3) {
                if (this.prev < n2.catchLoc)
                  return e3(n2.catchLoc, true);
              } else {
                if (!a2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < n2.finallyLoc)
                  return e3(n2.finallyLoc);
              }
            }
          }
        }, abrupt: function(e3, t3) {
          for (var r3 = this.tryEntries.length - 1; 0 <= r3; --r3) {
            var o2 = this.tryEntries[r3];
            if (o2.tryLoc <= this.prev && u.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var n2 = o2;
              break;
            }
          }
          var s3 = (n2 = n2 && ("break" === e3 || "continue" === e3) && n2.tryLoc <= t3 && t3 <= n2.finallyLoc ? null : n2) ? n2.completion : {};
          return s3.type = e3, s3.arg = t3, n2 ? (this.method = "next", this.next = n2.finallyLoc, m) : this.complete(s3);
        }, complete: function(e3, t3) {
          if ("throw" === e3.type)
            throw e3.arg;
          return "break" === e3.type || "continue" === e3.type ? this.next = e3.arg : "return" === e3.type ? (this.rval = this.arg = e3.arg, this.method = "return", this.next = "end") : "normal" === e3.type && t3 && (this.next = t3), m;
        }, finish: function(e3) {
          for (var t3 = this.tryEntries.length - 1; 0 <= t3; --t3) {
            var r3 = this.tryEntries[t3];
            if (r3.finallyLoc === e3)
              return this.complete(r3.completion, r3.afterLoc), w(r3), m;
          }
        }, catch: function(e3) {
          for (var t3 = this.tryEntries.length - 1; 0 <= t3; --t3) {
            var r3, o2, n2 = this.tryEntries[t3];
            if (n2.tryLoc === e3)
              return "throw" === (r3 = n2.completion).type && (o2 = r3.arg, w(n2)), o2;
          }
          throw new Error("illegal catch attempt");
        }, delegateYield: function(e3, t3, r3) {
          return this.delegate = { iterator: M(e3), resultName: t3, nextLoc: r3 }, "next" === this.method && (this.arg = l), m;
        } }, s2;
      }("object" == typeof t ? t.exports : {});
      try {
        regeneratorRuntime = t;
      } catch (e2) {
        Function("r", "regeneratorRuntime = r")(t);
      }
    }, {}], 245: [function(e, t, r) {
      !function(e2) {
        var t2, r2, i2, o, n, s2, a, l, u, c;
        function d(e3) {
          if ("string" != typeof e3 && (e3 = String(e3)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e3))
            throw new TypeError("Invalid character in header field name");
          return e3.toLowerCase();
        }
        function f(e3) {
          return e3 = "string" != typeof e3 ? String(e3) : e3;
        }
        function h(t3) {
          var e3 = { next: function() {
            var e4 = t3.shift();
            return { done: void 0 === e4, value: e4 };
          } };
          return r2 && (e3[Symbol.iterator] = function() {
            return e3;
          }), e3;
        }
        function p(t3) {
          this.map = {}, t3 instanceof p ? t3.forEach(function(e3, t4) {
            this.append(t4, e3);
          }, this) : Array.isArray(t3) ? t3.forEach(function(e3) {
            this.append(e3[0], e3[1]);
          }, this) : t3 && Object.getOwnPropertyNames(t3).forEach(function(e3) {
            this.append(e3, t3[e3]);
          }, this);
        }
        function m(e3) {
          if (e3.bodyUsed)
            return Promise.reject(new TypeError("Already read"));
          e3.bodyUsed = true;
        }
        function y(r3) {
          return new Promise(function(e3, t3) {
            r3.onload = function() {
              e3(r3.result);
            }, r3.onerror = function() {
              t3(r3.error);
            };
          });
        }
        function g(e3) {
          var t3 = new FileReader(), r3 = y(t3);
          return t3.readAsArrayBuffer(e3), r3;
        }
        function v(e3) {
          var t3;
          return e3.slice ? e3.slice(0) : ((t3 = new Uint8Array(e3.byteLength)).set(new Uint8Array(e3)), t3.buffer);
        }
        function b() {
          return this.bodyUsed = false, this._initBody = function(e3) {
            if (this._bodyInit = e3)
              if ("string" == typeof e3)
                this._bodyText = e3;
              else if (i2 && Blob.prototype.isPrototypeOf(e3))
                this._bodyBlob = e3;
              else if (o && FormData.prototype.isPrototypeOf(e3))
                this._bodyFormData = e3;
              else if (t2 && URLSearchParams.prototype.isPrototypeOf(e3))
                this._bodyText = e3.toString();
              else if (n && i2 && a(e3))
                this._bodyArrayBuffer = v(e3.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);
              else {
                if (!n || !ArrayBuffer.prototype.isPrototypeOf(e3) && !l(e3))
                  throw new Error("unsupported BodyInit type");
                this._bodyArrayBuffer = v(e3);
              }
            else
              this._bodyText = "";
            this.headers.get("content-type") || ("string" == typeof e3 ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : t2 && URLSearchParams.prototype.isPrototypeOf(e3) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
          }, i2 && (this.blob = function() {
            var e3 = m(this);
            if (e3)
              return e3;
            if (this._bodyBlob)
              return Promise.resolve(this._bodyBlob);
            if (this._bodyArrayBuffer)
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            if (this._bodyFormData)
              throw new Error("could not read FormData body as blob");
            return Promise.resolve(new Blob([this._bodyText]));
          }, this.arrayBuffer = function() {
            return this._bodyArrayBuffer ? m(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(g);
          }), this.text = function() {
            var e3, t3, r3 = m(this);
            if (r3)
              return r3;
            if (this._bodyBlob)
              return r3 = this._bodyBlob, e3 = new FileReader(), t3 = y(e3), e3.readAsText(r3), t3;
            if (this._bodyArrayBuffer)
              return Promise.resolve(function(e4) {
                for (var t4 = new Uint8Array(e4), r4 = new Array(t4.length), o2 = 0; o2 < t4.length; o2++)
                  r4[o2] = String.fromCharCode(t4[o2]);
                return r4.join("");
              }(this._bodyArrayBuffer));
            if (this._bodyFormData)
              throw new Error("could not read FormData body as text");
            return Promise.resolve(this._bodyText);
          }, o && (this.formData = function() {
            return this.text().then(_);
          }), this.json = function() {
            return this.text().then(JSON.parse);
          }, this;
        }
        function j(e3, t3) {
          var r3, o2 = (t3 = t3 || {}).body;
          if (e3 instanceof j) {
            if (e3.bodyUsed)
              throw new TypeError("Already read");
            this.url = e3.url, this.credentials = e3.credentials, t3.headers || (this.headers = new p(e3.headers)), this.method = e3.method, this.mode = e3.mode, o2 || null == e3._bodyInit || (o2 = e3._bodyInit, e3.bodyUsed = true);
          } else
            this.url = String(e3);
          if (this.credentials = t3.credentials || this.credentials || "omit", !t3.headers && this.headers || (this.headers = new p(t3.headers)), this.method = (e3 = t3.method || this.method || "GET", r3 = e3.toUpperCase(), -1 < u.indexOf(r3) ? r3 : e3), this.mode = t3.mode || this.mode || null, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && o2)
            throw new TypeError("Body not allowed for GET or HEAD requests");
          this._initBody(o2);
        }
        function _(e3) {
          var r3 = new FormData();
          return e3.trim().split("&").forEach(function(e4) {
            var t3;
            e4 && (t3 = (e4 = e4.split("=")).shift().replace(/\+/g, " "), e4 = e4.join("=").replace(/\+/g, " "), r3.append(decodeURIComponent(t3), decodeURIComponent(e4)));
          }), r3;
        }
        function x(e3, t3) {
          t3 = t3 || {}, this.type = "default", this.status = void 0 === t3.status ? 200 : t3.status, this.ok = 200 <= this.status && this.status < 300, this.statusText = "statusText" in t3 ? t3.statusText : "OK", this.headers = new p(t3.headers), this.url = t3.url || "", this._initBody(e3);
        }
        e2.fetch || (t2 = "URLSearchParams" in e2, r2 = "Symbol" in e2 && "iterator" in Symbol, i2 = "FileReader" in e2 && "Blob" in e2 && function() {
          try {
            return new Blob(), true;
          } catch (e3) {
            return false;
          }
        }(), o = "FormData" in e2, (n = "ArrayBuffer" in e2) && (s2 = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"], a = function(e3) {
          return e3 && DataView.prototype.isPrototypeOf(e3);
        }, l = ArrayBuffer.isView || function(e3) {
          return e3 && -1 < s2.indexOf(Object.prototype.toString.call(e3));
        }), p.prototype.append = function(e3, t3) {
          e3 = d(e3), t3 = f(t3);
          var r3 = this.map[e3];
          this.map[e3] = r3 ? r3 + "," + t3 : t3;
        }, p.prototype.delete = function(e3) {
          delete this.map[d(e3)];
        }, p.prototype.get = function(e3) {
          return e3 = d(e3), this.has(e3) ? this.map[e3] : null;
        }, p.prototype.has = function(e3) {
          return this.map.hasOwnProperty(d(e3));
        }, p.prototype.set = function(e3, t3) {
          this.map[d(e3)] = f(t3);
        }, p.prototype.forEach = function(e3, t3) {
          for (var r3 in this.map)
            this.map.hasOwnProperty(r3) && e3.call(t3, this.map[r3], r3, this);
        }, p.prototype.keys = function() {
          var r3 = [];
          return this.forEach(function(e3, t3) {
            r3.push(t3);
          }), h(r3);
        }, p.prototype.values = function() {
          var t3 = [];
          return this.forEach(function(e3) {
            t3.push(e3);
          }), h(t3);
        }, p.prototype.entries = function() {
          var r3 = [];
          return this.forEach(function(e3, t3) {
            r3.push([t3, e3]);
          }), h(r3);
        }, r2 && (p.prototype[Symbol.iterator] = p.prototype.entries), u = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"], j.prototype.clone = function() {
          return new j(this, { body: this._bodyInit });
        }, b.call(j.prototype), b.call(x.prototype), x.prototype.clone = function() {
          return new x(this._bodyInit, { status: this.status, statusText: this.statusText, headers: new p(this.headers), url: this.url });
        }, x.error = function() {
          var e3 = new x(null, { status: 0, statusText: "" });
          return e3.type = "error", e3;
        }, c = [301, 302, 303, 307, 308], x.redirect = function(e3, t3) {
          if (-1 === c.indexOf(t3))
            throw new RangeError("Invalid status code");
          return new x(null, { status: t3, headers: { location: e3 } });
        }, e2.Headers = p, e2.Request = j, e2.Response = x, e2.fetch = function(r3, s3) {
          return new Promise(function(o2, e3) {
            var t3 = new j(r3, s3), n2 = new XMLHttpRequest();
            n2.onload = function() {
              var r4, e4 = { status: n2.status, statusText: n2.statusText, headers: (e4 = n2.getAllResponseHeaders() || "", r4 = new p(), e4.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(e5) {
                var e5 = e5.split(":"), t5 = e5.shift().trim();
                t5 && (e5 = e5.join(":").trim(), r4.append(t5, e5));
              }), r4) }, t4 = (e4.url = "responseURL" in n2 ? n2.responseURL : e4.headers.get("X-Request-URL"), "response" in n2 ? n2.response : n2.responseText);
              o2(new x(t4, e4));
            }, n2.onerror = function() {
              e3(new TypeError("Network request failed"));
            }, n2.ontimeout = function() {
              e3(new TypeError("Network request failed"));
            }, n2.open(t3.method, t3.url, true), "include" === t3.credentials ? n2.withCredentials = true : "omit" === t3.credentials && (n2.withCredentials = false), "responseType" in n2 && i2 && (n2.responseType = "blob"), t3.headers.forEach(function(e4, t4) {
              n2.setRequestHeader(t4, e4);
            }), n2.send(void 0 === t3._bodyInit ? null : t3._bodyInit);
          });
        }, e2.fetch.polyfill = true);
      }("undefined" != typeof self ? self : this);
    }, {}], 246: [function(e, t, r) {
      e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.split"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.split"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l, o = n(e("../core/main")), u = n(e("../color/color_conversion"));
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      var c = [{ h: 0, s: 0, b: 0.8275, name: "gray" }, { h: 0, s: 0, b: 0.8627, name: "gray" }, { h: 0, s: 0, b: 0.7529, name: "gray" }, { h: 0.0167, s: 0.1176, b: 1, name: "light pink" }], d = [{ h: 0, s: 0, b: 0, name: "black" }, { h: 0, s: 0, b: 0.5, name: "gray" }, { h: 0, s: 0, b: 1, name: "white" }, { h: 0, s: 0.5, b: 0.5, name: "dark maroon" }, { h: 0, s: 0.5, b: 1, name: "salmon pink" }, { h: 0, s: 1, b: 0, name: "black" }, { h: 0, s: 1, b: 0.5, name: "dark red" }, { h: 0, s: 1, b: 1, name: "red" }, { h: 5, s: 0, b: 1, name: "very light peach" }, { h: 5, s: 0.5, b: 0.5, name: "brown" }, { h: 5, s: 0.5, b: 1, name: "peach" }, { h: 5, s: 1, b: 0.5, name: "brick red" }, { h: 5, s: 1, b: 1, name: "crimson" }, { h: 10, s: 0, b: 1, name: "light peach" }, { h: 10, s: 0.5, b: 0.5, name: "brown" }, { h: 10, s: 0.5, b: 1, name: "light orange" }, { h: 10, s: 1, b: 0.5, name: "brown" }, { h: 10, s: 1, b: 1, name: "orange" }, { h: 15, s: 0, b: 1, name: "very light yellow" }, { h: 15, s: 0.5, b: 0.5, name: "olive green" }, { h: 15, s: 0.5, b: 1, name: "light yellow" }, { h: 15, s: 1, b: 0, name: "dark olive green" }, { h: 15, s: 1, b: 0.5, name: "olive green" }, { h: 15, s: 1, b: 1, name: "yellow" }, { h: 20, s: 0, b: 1, name: "very light yellow" }, { h: 20, s: 0.5, b: 0.5, name: "olive green" }, { h: 20, s: 0.5, b: 1, name: "light yellow green" }, { h: 20, s: 1, b: 0, name: "dark olive green" }, { h: 20, s: 1, b: 0.5, name: "dark yellow green" }, { h: 20, s: 1, b: 1, name: "yellow green" }, { h: 25, s: 0.5, b: 0.5, name: "dark yellow green" }, { h: 25, s: 0.5, b: 1, name: "light green" }, { h: 25, s: 1, b: 0.5, name: "dark green" }, { h: 25, s: 1, b: 1, name: "green" }, { h: 30, s: 0.5, b: 1, name: "light green" }, { h: 30, s: 1, b: 0.5, name: "dark green" }, { h: 30, s: 1, b: 1, name: "green" }, { h: 35, s: 0, b: 0.5, name: "light green" }, { h: 35, s: 0, b: 1, name: "very light green" }, { h: 35, s: 0.5, b: 0.5, name: "dark green" }, { h: 35, s: 0.5, b: 1, name: "light green" }, { h: 35, s: 1, b: 0, name: "very dark green" }, { h: 35, s: 1, b: 0.5, name: "dark green" }, { h: 35, s: 1, b: 1, name: "green" }, { h: 40, s: 0, b: 1, name: "very light green" }, { h: 40, s: 0.5, b: 0.5, name: "dark green" }, { h: 40, s: 0.5, b: 1, name: "light green" }, { h: 40, s: 1, b: 0.5, name: "dark green" }, { h: 40, s: 1, b: 1, name: "green" }, { h: 45, s: 0.5, b: 1, name: "light turquoise" }, { h: 45, s: 1, b: 0.5, name: "dark turquoise" }, { h: 45, s: 1, b: 1, name: "turquoise" }, { h: 50, s: 0, b: 1, name: "light sky blue" }, { h: 50, s: 0.5, b: 0.5, name: "dark cyan" }, { h: 50, s: 0.5, b: 1, name: "light cyan" }, { h: 50, s: 1, b: 0.5, name: "dark cyan" }, { h: 50, s: 1, b: 1, name: "cyan" }, { h: 55, s: 0, b: 1, name: "light sky blue" }, { h: 55, s: 0.5, b: 1, name: "light sky blue" }, { h: 55, s: 1, b: 0.5, name: "dark blue" }, { h: 55, s: 1, b: 1, name: "sky blue" }, { h: 60, s: 0, b: 0.5, name: "gray" }, { h: 60, s: 0, b: 1, name: "very light blue" }, { h: 60, s: 0.5, b: 0.5, name: "blue" }, { h: 60, s: 0.5, b: 1, name: "light blue" }, { h: 60, s: 1, b: 0.5, name: "navy blue" }, { h: 60, s: 1, b: 1, name: "blue" }, { h: 65, s: 0, b: 1, name: "lavender" }, { h: 65, s: 0.5, b: 0.5, name: "navy blue" }, { h: 65, s: 0.5, b: 1, name: "light purple" }, { h: 65, s: 1, b: 0.5, name: "dark navy blue" }, { h: 65, s: 1, b: 1, name: "blue" }, { h: 70, s: 0, b: 1, name: "lavender" }, { h: 70, s: 0.5, b: 0.5, name: "navy blue" }, { h: 70, s: 0.5, b: 1, name: "lavender blue" }, { h: 70, s: 1, b: 0.5, name: "dark navy blue" }, { h: 70, s: 1, b: 1, name: "blue" }, { h: 75, s: 0.5, b: 1, name: "lavender" }, { h: 75, s: 1, b: 0.5, name: "dark purple" }, { h: 75, s: 1, b: 1, name: "purple" }, { h: 80, s: 0.5, b: 1, name: "pinkish purple" }, { h: 80, s: 1, b: 0.5, name: "dark purple" }, { h: 80, s: 1, b: 1, name: "purple" }, { h: 85, s: 0, b: 1, name: "light pink" }, { h: 85, s: 0.5, b: 0.5, name: "purple" }, { h: 85, s: 0.5, b: 1, name: "light fuchsia" }, { h: 85, s: 1, b: 0.5, name: "dark fuchsia" }, { h: 85, s: 1, b: 1, name: "fuchsia" }, { h: 90, s: 0.5, b: 0.5, name: "dark fuchsia" }, { h: 90, s: 0.5, b: 1, name: "hot pink" }, { h: 90, s: 1, b: 0.5, name: "dark fuchsia" }, { h: 90, s: 1, b: 1, name: "fuchsia" }, { h: 95, s: 0, b: 1, name: "pink" }, { h: 95, s: 0.5, b: 1, name: "light pink" }, { h: 95, s: 1, b: 0.5, name: "dark magenta" }, { h: 95, s: 1, b: 1, name: "magenta" }];
      o.default.prototype._rgbColorName = function(e2) {
        var t2, r2, e2 = u.default._rgbaToHSBA(e2), o2 = [(l = e2)[0], e2[1], e2[2]];
        0 !== o2[0] && (o2[0] = Math.round(100 * o2[0]), (e2 = o2[0].toString().split(""))[r2 = e2.length - 1] = parseInt(e2[r2]), e2[r2] < 2.5 ? e2[r2] = 0 : 2.5 <= e2[r2] && e2[r2] < 7.5 && (e2[r2] = 5), 2 === e2.length ? (e2[0] = parseInt(e2[0]), 7.5 <= e2[r2] && (e2[r2] = 0, e2[0] = e2[0] + 1), o2[0] = 10 * e2[0] + e2[1]) : 7.5 <= e2[r2] ? o2[0] = 10 : o2[0] = e2[r2]), o2[2] = o2[2] / 255;
        for (var n2 = o2.length - 1; 1 <= n2; n2--)
          o2[n2] <= 0.25 ? o2[n2] = 0 : 0.25 < o2[n2] && o2[n2] < 0.75 ? o2[n2] = 0.5 : o2[n2] = 1;
        if (0 === o2[0] && 0 === o2[1] && 1 === o2[2]) {
          for (var s2 = 2; 0 <= s2; s2--)
            l[s2] = Math.round(1e4 * l[s2]) / 1e4;
          for (var i2 = 0; i2 < c.length; i2++) {
            if (c[i2].h === l[0] && c[i2].s === l[1] && c[i2].b === l[2]) {
              t2 = c[i2].name;
              break;
            }
            t2 = "white";
          }
        } else
          for (var a = 0; a < d.length; a++)
            if (d[a].h === o2[0] && d[a].s === o2[1] && d[a].b === o2[2]) {
              t2 = d[a].name;
              break;
            }
        return t2;
      };
      e = o.default;
      r.default = e;
    }, { "../color/color_conversion": 252, "../core/main": 267, "core-js/modules/es.function.name": 165, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.split": 191 }], 247: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.ends-with"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.ends-with"), e("core-js/modules/es.string.replace"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      var i2 = "_Description", a = "_fallbackDesc", l = "_fallbackTable", u = "_Label", c = "_labelDesc", d = "_labelTable";
      function f(e2) {
        if ("label" === e2 || "fallback" === e2)
          throw new Error("description should not be LABEL or FALLBACK");
        return e2.endsWith(".") || e2.endsWith(";") || e2.endsWith(",") || e2.endsWith("?") || e2.endsWith("!") || (e2 += "."), e2;
      }
      s2.default.prototype.describe = function(e2, t2) {
        var r2;
        s2.default._validateParameters("describe", arguments), "string" == typeof e2 && (r2 = this.canvas.id, e2 = f(e2), this.dummyDOM || (this.dummyDOM = document.getElementById(r2).parentNode), this.descriptions || (this.descriptions = {}), this.descriptions.fallback ? this.descriptions.fallback.innerHTML !== e2 && (this.descriptions.fallback.innerHTML = e2) : this._describeHTML("fallback", e2), t2 === this.LABEL && (this.descriptions.label ? this.descriptions.label.innerHTML !== e2 && (this.descriptions.label.innerHTML = e2) : this._describeHTML("label", e2)));
      }, s2.default.prototype.describeElement = function(e2, t2, r2) {
        var o, n;
        s2.default._validateParameters("describeElement", arguments), "string" == typeof t2 && "string" == typeof e2 && (o = this.canvas.id, t2 = f(t2), n = function(e3) {
          if ("label" === e3 || "fallback" === e3)
            throw new Error("element name should not be LABEL or FALLBACK");
          e3.endsWith(".") || e3.endsWith(";") || e3.endsWith(",") ? e3 = e3.replace(/.$/, ":") : e3.endsWith(":") || (e3 += ":");
          return e3;
        }(e2), e2 = e2.replace(/[^a-zA-Z0-9]/g, ""), n = '<th scope="row">'.concat(n, "</th><td>").concat(t2, "</td>"), this.dummyDOM || (this.dummyDOM = document.getElementById(o).parentNode), this.descriptions ? this.descriptions.fallbackElements || (this.descriptions.fallbackElements = {}) : this.descriptions = { fallbackElements: {} }, this.descriptions.fallbackElements[e2] ? this.descriptions.fallbackElements[e2].innerHTML !== n && (this.descriptions.fallbackElements[e2].innerHTML = n) : this._describeElementHTML("fallback", e2, n), r2 === this.LABEL && (this.descriptions.labelElements || (this.descriptions.labelElements = {}), this.descriptions.labelElements[e2] ? this.descriptions.labelElements[e2].innerHTML !== n && (this.descriptions.labelElements[e2].innerHTML = n) : this._describeElementHTML("label", e2, n)));
      }, s2.default.prototype._describeHTML = function(e2, t2) {
        var r2, o = this.canvas.id;
        "fallback" === e2 ? (this.dummyDOM.querySelector("#".concat(o + i2)) ? this.dummyDOM.querySelector("#" + o + l).insertAdjacentHTML("beforebegin", '<p id="'.concat(o + a, '"></p>')) : (r2 = '<div id="'.concat(o).concat(i2, '" role="region" aria-label="Canvas Description"><p id="').concat(o).concat(a, '"></p></div>'), this.dummyDOM.querySelector("#".concat(o, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(o, "accessibleOutput")).insertAdjacentHTML("beforebegin", r2) : this.dummyDOM.querySelector("#".concat(o)).innerHTML = r2), this.descriptions.fallback = this.dummyDOM.querySelector("#".concat(o).concat(a)), this.descriptions.fallback.innerHTML = t2) : "label" === e2 && (this.dummyDOM.querySelector("#".concat(o + u)) ? this.dummyDOM.querySelector("#".concat(o + d)) && this.dummyDOM.querySelector("#".concat(o + d)).insertAdjacentHTML("beforebegin", '<p id="'.concat(o).concat(c, '"></p>')) : (r2 = '<div id="'.concat(o).concat(u, '" class="p5Label"><p id="').concat(o).concat(c, '"></p></div>'), this.dummyDOM.querySelector("#".concat(o, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(o, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", r2) : this.dummyDOM.querySelector("#" + o).insertAdjacentHTML("afterend", r2)), this.descriptions.label = this.dummyDOM.querySelector("#" + o + c), this.descriptions.label.innerHTML = t2);
      }, s2.default.prototype._describeElementHTML = function(e2, t2, r2) {
        var o, n = this.canvas.id;
        "fallback" === e2 ? (this.dummyDOM.querySelector("#".concat(n + i2)) ? this.dummyDOM.querySelector("#" + n + l) || this.dummyDOM.querySelector("#" + n + a).insertAdjacentHTML("afterend", '<table id="'.concat(n).concat(l, '"><caption>Canvas elements and their descriptions</caption></table>')) : (o = '<div id="'.concat(n).concat(i2, '" role="region" aria-label="Canvas Description"><table id="').concat(n).concat(l, '"><caption>Canvas elements and their descriptions</caption></table></div>'), this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutput")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + n).innerHTML = o), (o = document.createElement("tr")).id = n + "_fte_" + t2, this.dummyDOM.querySelector("#" + n + l).appendChild(o), this.descriptions.fallbackElements[t2] = this.dummyDOM.querySelector("#".concat(n).concat("_fte_").concat(t2)), this.descriptions.fallbackElements[t2].innerHTML = r2) : "label" === e2 && (this.dummyDOM.querySelector("#".concat(n + u)) ? this.dummyDOM.querySelector("#".concat(n + d)) || this.dummyDOM.querySelector("#" + n + c).insertAdjacentHTML("afterend", '<table id="'.concat(n + d, '"></table>')) : (o = '<div id="'.concat(n).concat(u, '" class="p5Label"><table id="').concat(n).concat(d, '"></table></div>'), this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")) ? this.dummyDOM.querySelector("#".concat(n, "accessibleOutputLabel")).insertAdjacentHTML("beforebegin", o) : this.dummyDOM.querySelector("#" + n).insertAdjacentHTML("afterend", o)), (e2 = document.createElement("tr")).id = n + "_lte_" + t2, this.dummyDOM.querySelector("#" + n + d).appendChild(e2), this.descriptions.labelElements[t2] = this.dummyDOM.querySelector("#".concat(n).concat("_lte_").concat(t2)), this.descriptions.labelElements[t2].innerHTML = r2);
      };
      e = s2.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.ends-with": 184, "core-js/modules/es.string.replace": 189 }], 248: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.map"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.prototype._updateGridOutput = function(e2) {
        var t2, r2, o, n;
        this.dummyDOM.querySelector("#".concat(e2, "_summary")) && (t2 = this._accessibleOutputs[e2], o = function(e3, t3, r3, o2) {
          t3 = "".concat(t3, " canvas, ").concat(r3, " by ").concat(o2, " pixels, contains ").concat(e3[0]);
          t3 = (1 === e3[0] ? "".concat(t3, " shape: ") : "".concat(t3, " shapes: ")).concat(e3[1]);
          return t3;
        }((r2 = function(e3, t3) {
          var r3, o2 = "", n2 = "", s2 = 0;
          for (r3 in t3) {
            var i2, a = 0;
            for (i2 in t3[r3]) {
              var l = '<li id="'.concat(e3, "shape").concat(s2, '">').concat(t3[r3][i2].color, " ").concat(r3, ",");
              "line" === r3 ? l += " location = ".concat(t3[r3][i2].pos, ", length = ").concat(t3[r3][i2].length, " pixels") : (l += " location = ".concat(t3[r3][i2].pos), "point" !== r3 && (l += ", area = ".concat(t3[r3][i2].area, " %")), l += "</li>"), o2 += l, a++, s2++;
            }
            n2 = 1 < a ? "".concat(n2, " ").concat(a, " ").concat(r3, "s") : "".concat(n2, " ").concat(a, " ").concat(r3);
          }
          return { numShapes: [s2, n2], details: o2 };
        }(e2, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), n = function(e3, t3) {
          var r3, o2, n2, s2 = 0, i2 = "", a = Array.apply(null, Array(10)).map(function() {
          });
          for (r3 in a)
            a[r3] = Array.apply(null, Array(10)).map(function() {
            });
          for (o2 in t3)
            for (var l in t3[o2]) {
              var u = void 0;
              u = "line" !== o2 ? '<a href="#'.concat(e3, "shape").concat(s2, '">').concat(t3[o2][l].color, " ").concat(o2, "</a>") : '<a href="#'.concat(e3, "shape").concat(s2, '">').concat(t3[o2][l].color, " ").concat(o2, " midpoint</a>"), a[t3[o2][l].loc.locY][t3[o2][l].loc.locX] ? a[t3[o2][l].loc.locY][t3[o2][l].loc.locX] = a[t3[o2][l].loc.locY][t3[o2][l].loc.locX] + "  " + u : a[t3[o2][l].loc.locY][t3[o2][l].loc.locX] = u, s2++;
            }
          for (n2 in a) {
            var c, d = "<tr>";
            for (c in a[n2])
              d += "<td>", void 0 !== a[n2][c] && (d += a[n2][c]), d += "</td>";
            i2 = i2 + d + "</tr>";
          }
          return i2;
        }(e2, this.ingredients.shapes), o !== t2.summary.innerHTML && (t2.summary.innerHTML = o), n !== t2.map.innerHTML && (t2.map.innerHTML = n), r2.details !== t2.shapeDetails.innerHTML && (t2.shapeDetails.innerHTML = r2.details), this._accessibleOutputs[e2] = t2);
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.map": 161 }], 249: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.map"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.map"), e("core-js/modules/es.number.to-fixed"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function l(e2, t2, r2) {
        return e2[0] < 0.4 * t2 ? e2[1] < 0.4 * r2 ? "top left" : e2[1] > 0.6 * r2 ? "bottom left" : "mid left" : e2[0] > 0.6 * t2 ? e2[1] < 0.4 * r2 ? "top right" : e2[1] > 0.6 * r2 ? "bottom right" : "mid right" : e2[1] < 0.4 * r2 ? "top middle" : e2[1] > 0.6 * r2 ? "bottom middle" : "middle";
      }
      function u(e2, t2, r2) {
        t2 = Math.floor(e2[0] / t2 * 10), e2 = Math.floor(e2[1] / r2 * 10);
        return 10 === t2 && (t2 -= 1), 10 === e2 && (e2 -= 1), { locX: t2, locY: e2 };
      }
      o.default.prototype.textOutput = function(e2) {
        o.default._validateParameters("textOutput", arguments), this._accessibleOutputs.text || (this._accessibleOutputs.text = true, this._createOutput("textOutput", "Fallback"), e2 === this.LABEL && (this._accessibleOutputs.textLabel = true, this._createOutput("textOutput", "Label")));
      }, o.default.prototype.gridOutput = function(e2) {
        o.default._validateParameters("gridOutput", arguments), this._accessibleOutputs.grid || (this._accessibleOutputs.grid = true, this._createOutput("gridOutput", "Fallback"), e2 === this.LABEL && (this._accessibleOutputs.gridLabel = true, this._createOutput("gridOutput", "Label")));
      }, o.default.prototype._addAccsOutput = function() {
        return this._accessibleOutputs || (this._accessibleOutputs = { text: false, grid: false, textLabel: false, gridLabel: false }), this._accessibleOutputs.grid || this._accessibleOutputs.text;
      }, o.default.prototype._createOutput = function(e2, t2) {
        var r2, o2, n, s2 = this.canvas.id, i2 = (this.ingredients || (this.ingredients = { shapes: {}, colors: { background: "white", fill: "white", stroke: "black" }, pShapes: "" }), this.dummyDOM || (this.dummyDOM = document.getElementById(s2).parentNode), "");
        "Fallback" === t2 ? (r2 = s2 + e2, this.dummyDOM.querySelector("#".concat(o2 = s2 + "accessibleOutput")) || (this.dummyDOM.querySelector("#".concat(s2, "_Description")) ? this.dummyDOM.querySelector("#".concat(s2, "_Description")).insertAdjacentHTML("afterend", '<div id="'.concat(o2, '" role="region" aria-label="Canvas Outputs"></div>')) : this.dummyDOM.querySelector("#".concat(s2)).innerHTML = '<div id="'.concat(o2, '" role="region" aria-label="Canvas Outputs"></div>'))) : "Label" === t2 && (r2 = s2 + e2 + (i2 = t2), this.dummyDOM.querySelector("#".concat(o2 = s2 + "accessibleOutput" + t2)) || (this.dummyDOM.querySelector("#".concat(s2, "_Label")) ? this.dummyDOM.querySelector("#".concat(s2, "_Label")) : this.dummyDOM.querySelector("#".concat(s2))).insertAdjacentHTML("afterend", '<div id="'.concat(o2, '"></div>'))), this._accessibleOutputs[r2] = {}, "textOutput" === e2 ? (i2 = "#".concat(s2, "gridOutput").concat(i2), n = '<div id="'.concat(r2, '">Text Output<div id="').concat(r2, 'Summary" aria-label="text output summary"><p id="').concat(r2, '_summary"></p><ul id="').concat(r2, '_list"></ul></div><table id="').concat(r2, '_shapeDetails" summary="text output shape details"></table></div>'), this.dummyDOM.querySelector(i2) ? this.dummyDOM.querySelector(i2).insertAdjacentHTML("beforebegin", n) : this.dummyDOM.querySelector("#".concat(o2)).innerHTML = n, this._accessibleOutputs[r2].list = this.dummyDOM.querySelector("#".concat(r2, "_list"))) : "gridOutput" === e2 && (i2 = "#".concat(s2, "textOutput").concat(i2), n = '<div id="'.concat(r2, '">Grid Output<p id="').concat(r2, '_summary" aria-label="grid output summary"><table id="').concat(r2, '_map" summary="grid output content"></table><ul id="').concat(r2, '_shapeDetails" aria-label="grid output shape details"></ul></div>'), this.dummyDOM.querySelector(i2) ? this.dummyDOM.querySelector(i2).insertAdjacentHTML("afterend", n) : this.dummyDOM.querySelector("#".concat(o2)).innerHTML = n, this._accessibleOutputs[r2].map = this.dummyDOM.querySelector("#".concat(r2, "_map"))), this._accessibleOutputs[r2].shapeDetails = this.dummyDOM.querySelector("#".concat(r2, "_shapeDetails")), this._accessibleOutputs[r2].summary = this.dummyDOM.querySelector("#".concat(r2, "_summary"));
      }, o.default.prototype._updateAccsOutput = function() {
        var e2 = this.canvas.id;
        JSON.stringify(this.ingredients.shapes) !== this.ingredients.pShapes && (this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this._accessibleOutputs.text && this._updateTextOutput(e2 + "textOutput"), this._accessibleOutputs.grid && this._updateGridOutput(e2 + "gridOutput"), this._accessibleOutputs.textLabel && this._updateTextOutput(e2 + "textOutputLabel"), this._accessibleOutputs.gridLabel && this._updateGridOutput(e2 + "gridOutputLabel"));
      }, o.default.prototype._accsBackground = function(e2) {
        this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this.ingredients.shapes = {}, this.ingredients.colors.backgroundRGBA !== e2 && (this.ingredients.colors.backgroundRGBA = e2, this.ingredients.colors.background = this._rgbColorName(e2));
      }, o.default.prototype._accsCanvasColors = function(e2, t2) {
        "fill" === e2 ? this.ingredients.colors.fillRGBA !== t2 && (this.ingredients.colors.fillRGBA = t2, this.ingredients.colors.fill = this._rgbColorName(t2)) : "stroke" === e2 && this.ingredients.colors.strokeRGBA !== t2 && (this.ingredients.colors.strokeRGBA = t2, this.ingredients.colors.stroke = this._rgbColorName(t2));
      }, o.default.prototype._accsOutput = function(e2, t2) {
        "ellipse" === e2 && t2[2] === t2[3] ? e2 = "circle" : "rectangle" === e2 && t2[2] === t2[3] && (e2 = "square");
        var r2, o2, n = {}, s2 = true, i2 = function(e3, t3) {
          var r3;
          e3 = "rectangle" === e3 || "ellipse" === e3 || "arc" === e3 || "circle" === e3 || "square" === e3 ? (r3 = Math.round(t3[0] + t3[2] / 2), Math.round(t3[1] + t3[3] / 2)) : "triangle" === e3 ? (r3 = (t3[0] + t3[2] + t3[4]) / 3, (t3[1] + t3[3] + t3[5]) / 3) : "quadrilateral" === e3 ? (r3 = (t3[0] + t3[2] + t3[4] + t3[6]) / 4, (t3[1] + t3[3] + t3[5] + t3[7]) / 4) : "line" === e3 ? (r3 = (t3[0] + t3[2]) / 2, (t3[1] + t3[3]) / 2) : (r3 = t3[0], t3[1]);
          return [r3, e3];
        }(e2, t2);
        if ("line" === e2 ? (n.color = this.ingredients.colors.stroke, n.length = Math.round(this.dist(t2[0], t2[1], t2[2], t2[3])), r2 = l([t2[0], [1]], this.width, this.height), o2 = l([t2[2], [3]], this.width, this.height), n.loc = u(i2, this.width, this.height), n.pos = r2 === o2 ? "at ".concat(r2) : "from ".concat(r2, " to ").concat(o2)) : ("point" === e2 ? n.color = this.ingredients.colors.stroke : (n.color = this.ingredients.colors.fill, n.area = function(e3, t3, r3, o3) {
          var n2 = 0;
          {
            var s3, i3, a2, l2, u2, c, d;
            "arc" === e3 ? (s3 = ((t3[5] - t3[4]) % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI), n2 = s3 * t3[2] * t3[3] / 8, "open" !== t3[6] && "chord" !== t3[6] || (d = t3[0], i3 = t3[1], a2 = t3[0] + t3[2] / 2 * Math.cos(t3[4]).toFixed(2), l2 = t3[1] + t3[3] / 2 * Math.sin(t3[4]).toFixed(2), u2 = t3[0] + t3[2] / 2 * Math.cos(t3[5]).toFixed(2), c = t3[1] + t3[3] / 2 * Math.sin(t3[5]).toFixed(2), d = Math.abs(d * (l2 - c) + a2 * (c - i3) + u2 * (i3 - l2)) / 2, s3 > Math.PI ? n2 += d : n2 -= d)) : "ellipse" === e3 || "circle" === e3 ? n2 = 3.14 * t3[2] / 2 * t3[3] / 2 : "line" === e3 || "point" === e3 ? n2 = 0 : "quadrilateral" === e3 ? n2 = Math.abs((t3[6] + t3[0]) * (t3[7] - t3[1]) + (t3[0] + t3[2]) * (t3[1] - t3[3]) + (t3[2] + t3[4]) * (t3[3] - t3[5]) + (t3[4] + t3[6]) * (t3[5] - t3[7])) / 2 : "rectangle" === e3 || "square" === e3 ? n2 = t3[2] * t3[3] : "triangle" === e3 && (n2 = Math.abs(t3[0] * (t3[3] - t3[5]) + t3[2] * (t3[5] - t3[1]) + t3[4] * (t3[1] - t3[3])) / 2);
          }
          return Math.round(100 * n2 / (r3 * o3));
        }(e2, t2, this.width, this.height)), n.pos = l(i2, this.width, this.height), n.loc = u(i2, this.width, this.height)), this.ingredients.shapes[e2]) {
          if (this.ingredients.shapes[e2] !== [n]) {
            for (var a in this.ingredients.shapes[e2])
              JSON.stringify(this.ingredients.shapes[e2][a]) === JSON.stringify(n) && (s2 = false);
            true === s2 && this.ingredients.shapes[e2].push(n);
          }
        } else
          this.ingredients.shapes[e2] = [n];
      };
      e = o.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.map": 161, "core-js/modules/es.number.to-fixed": 171 }], 250: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.concat"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.prototype._updateTextOutput = function(e2) {
        var t2, r2, o, n;
        this.dummyDOM.querySelector("#".concat(e2, "_summary")) && (t2 = this._accessibleOutputs[e2], o = function(e3, t3, r3, o2) {
          r3 = "Your output is a, ".concat(r3, " by ").concat(o2, " pixels, ").concat(t3, " canvas containing the following");
          r3 = 1 === e3 ? "".concat(r3, " shape:") : "".concat(r3, " ").concat(e3, " shapes:");
          return r3;
        }((r2 = function(e3, t3) {
          var r3, o2 = "", n2 = 0;
          for (r3 in t3)
            for (var s2 in t3[r3]) {
              var i2 = '<li><a href="#'.concat(e3, "shape").concat(n2, '">').concat(t3[r3][s2].color, " ").concat(r3, "</a>");
              "line" === r3 ? i2 += ", ".concat(t3[r3][s2].pos, ", ").concat(t3[r3][s2].length, " pixels long.</li>") : (i2 += ", at ".concat(t3[r3][s2].pos), "point" !== r3 && (i2 += ", covering ".concat(t3[r3][s2].area, "% of the canvas")), i2 += ".</li>"), o2 += i2, n2++;
            }
          return { numShapes: n2, listShapes: o2 };
        }(e2, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), n = function(e3, t3) {
          var r3, o2 = "", n2 = 0;
          for (r3 in t3)
            for (var s2 in t3[r3]) {
              var i2 = '<tr id="'.concat(e3, "shape").concat(n2, '"><th>').concat(t3[r3][s2].color, " ").concat(r3, "</th>");
              "line" === r3 ? i2 += "<td>location = ".concat(t3[r3][s2].pos, "</td><td>length = ").concat(t3[r3][s2].length, " pixels</td></tr>") : (i2 += "<td>location = ".concat(t3[r3][s2].pos, "</td>"), "point" !== r3 && (i2 += "<td> area = ".concat(t3[r3][s2].area, "%</td>")), i2 += "</tr>"), o2 += i2, n2++;
            }
          return o2;
        }(e2, this.ingredients.shapes), o !== t2.summary.innerHTML && (t2.summary.innerHTML = o), r2.listShapes !== t2.list.innerHTML && (t2.list.innerHTML = r2.listShapes), n !== t2.shapeDetails.innerHTML && (t2.shapeDetails.innerHTML = n), this._accessibleOutputs[e2] = t2);
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149 }], 251: [function(e, t, r) {
      var o = (o = e("./core/main")) && o.__esModule ? o : { default: o };
      e("./core/constants"), e("./core/environment"), e("./core/friendly_errors/stacktrace"), e("./core/friendly_errors/validate_params"), e("./core/friendly_errors/file_errors"), e("./core/friendly_errors/fes_core"), e("./core/friendly_errors/sketch_reader"), e("./core/helpers"), e("./core/legacy"), e("./core/preload"), e("./core/p5.Element"), e("./core/p5.Graphics"), e("./core/p5.Renderer"), e("./core/p5.Renderer2D"), e("./core/rendering"), e("./core/shim"), e("./core/structure"), e("./core/transform"), e("./core/shape/2d_primitives"), e("./core/shape/attributes"), e("./core/shape/curves"), e("./core/shape/vertex"), e("./accessibility/outputs"), e("./accessibility/textOutput"), e("./accessibility/gridOutput"), e("./accessibility/color_namer"), e("./color/color_conversion"), e("./color/creating_reading"), e("./color/p5.Color"), e("./color/setting"), e("./data/p5.TypedDict"), e("./data/local_storage.js"), e("./dom/dom"), e("./accessibility/describe"), e("./events/acceleration"), e("./events/keyboard"), e("./events/mouse"), e("./events/touch"), e("./image/filters"), e("./image/image"), e("./image/loading_displaying"), e("./image/p5.Image"), e("./image/pixels"), e("./io/files"), e("./io/p5.Table"), e("./io/p5.TableRow"), e("./io/p5.XML"), e("./math/calculation"), e("./math/math"), e("./math/noise"), e("./math/p5.Vector"), e("./math/random"), e("./math/trigonometry"), e("./typography/attributes"), e("./typography/loading_displaying"), e("./typography/p5.Font"), e("./utilities/array_functions"), e("./utilities/conversion"), e("./utilities/string_functions"), e("./utilities/time_date"), e("./webgl/3d_primitives"), e("./webgl/interaction"), e("./webgl/light"), e("./webgl/loading"), e("./webgl/material"), e("./webgl/p5.Camera"), e("./webgl/p5.Geometry"), e("./webgl/p5.Matrix"), e("./webgl/p5.RendererGL.Immediate"), e("./webgl/p5.RendererGL"), e("./webgl/p5.RendererGL.Retained"), e("./webgl/p5.Shader"), e("./webgl/p5.RenderBuffer"), e("./webgl/p5.Texture"), e("./webgl/text"), e("./core/init"), t.exports = o.default;
    }, { "./accessibility/color_namer": 246, "./accessibility/describe": 247, "./accessibility/gridOutput": 248, "./accessibility/outputs": 249, "./accessibility/textOutput": 250, "./color/color_conversion": 252, "./color/creating_reading": 253, "./color/p5.Color": 254, "./color/setting": 255, "./core/constants": 256, "./core/environment": 257, "./core/friendly_errors/fes_core": 258, "./core/friendly_errors/file_errors": 259, "./core/friendly_errors/sketch_reader": 260, "./core/friendly_errors/stacktrace": 261, "./core/friendly_errors/validate_params": 262, "./core/helpers": 263, "./core/init": 264, "./core/legacy": 266, "./core/main": 267, "./core/p5.Element": 268, "./core/p5.Graphics": 269, "./core/p5.Renderer": 270, "./core/p5.Renderer2D": 271, "./core/preload": 272, "./core/rendering": 273, "./core/shape/2d_primitives": 274, "./core/shape/attributes": 275, "./core/shape/curves": 276, "./core/shape/vertex": 277, "./core/shim": 278, "./core/structure": 279, "./core/transform": 280, "./data/local_storage.js": 281, "./data/p5.TypedDict": 282, "./dom/dom": 283, "./events/acceleration": 284, "./events/keyboard": 285, "./events/mouse": 286, "./events/touch": 287, "./image/filters": 288, "./image/image": 289, "./image/loading_displaying": 290, "./image/p5.Image": 291, "./image/pixels": 292, "./io/files": 293, "./io/p5.Table": 294, "./io/p5.TableRow": 295, "./io/p5.XML": 296, "./math/calculation": 297, "./math/math": 298, "./math/noise": 299, "./math/p5.Vector": 300, "./math/random": 301, "./math/trigonometry": 302, "./typography/attributes": 303, "./typography/loading_displaying": 304, "./typography/p5.Font": 305, "./utilities/array_functions": 306, "./utilities/conversion": 307, "./utilities/string_functions": 308, "./utilities/time_date": 309, "./webgl/3d_primitives": 310, "./webgl/interaction": 311, "./webgl/light": 312, "./webgl/loading": 313, "./webgl/material": 314, "./webgl/p5.Camera": 315, "./webgl/p5.Geometry": 316, "./webgl/p5.Matrix": 317, "./webgl/p5.RenderBuffer": 318, "./webgl/p5.RendererGL": 321, "./webgl/p5.RendererGL.Immediate": 319, "./webgl/p5.RendererGL.Retained": 320, "./webgl/p5.Shader": 322, "./webgl/p5.Texture": 323, "./webgl/text": 324 }], 252: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.ColorConversion = {}, e.default.ColorConversion._hsbaToHSLA = function(e2) {
        var t2 = e2[0], r2 = e2[1], o = e2[2], n = (2 - r2) * o / 2;
        return 0 != n && (1 == n ? r2 = 0 : n < 0.5 ? r2 /= 2 - r2 : r2 = r2 * o / (2 - 2 * n)), [t2, r2, n, e2[3]];
      }, e.default.ColorConversion._hsbaToRGBA = function(e2) {
        var t2, r2, o, n, s2, i2 = 6 * e2[0], a = e2[1], l = e2[2];
        return 0 === a ? [l, l, l, e2[3]] : (r2 = l * (1 - a), o = l * (1 - a * (i2 - (t2 = Math.floor(i2)))), a = l * (1 - a * (1 + t2 - i2)), i2 = 1 === t2 ? (n = o, s2 = l, r2) : 2 === t2 ? (n = r2, s2 = l, a) : 3 === t2 ? (n = r2, s2 = o, l) : 4 === t2 ? (n = a, s2 = r2, l) : 5 === t2 ? (n = l, s2 = r2, o) : (n = l, s2 = a, r2), [n, s2, i2, e2[3]]);
      }, e.default.ColorConversion._hslaToHSBA = function(e2) {
        var t2 = e2[0], r2 = e2[1], o = e2[2], n = o < 0.5 ? (1 + r2) * o : o + r2 - o * r2;
        return [t2, r2 = 2 * (n - o) / n, n, e2[3]];
      }, e.default.ColorConversion._hslaToRGBA = function(e2) {
        var t2, r2 = 6 * e2[0], o = e2[1], n = e2[2];
        return 0 === o ? [n, n, n, e2[3]] : [(t2 = function(e3, t3, r3) {
          return e3 < 0 ? e3 += 6 : 6 <= e3 && (e3 -= 6), e3 < 1 ? t3 + (r3 - t3) * e3 : e3 < 3 ? r3 : e3 < 4 ? t3 + (r3 - t3) * (4 - e3) : t3;
        })(2 + r2, o = 2 * n - (n = n < 0.5 ? (1 + o) * n : n + o - n * o), n), t2(r2, o, n), t2(r2 - 2, o, n), e2[3]];
      }, e.default.ColorConversion._rgbaToHSBA = function(e2) {
        var t2, r2, o = e2[0], n = e2[1], s2 = e2[2], i2 = Math.max(o, n, s2), a = i2 - Math.min(o, n, s2);
        return 0 == a ? r2 = t2 = 0 : (r2 = a / i2, o === i2 ? t2 = (n - s2) / a : n === i2 ? t2 = 2 + (s2 - o) / a : s2 === i2 && (t2 = 4 + (o - n) / a), t2 < 0 ? t2 += 6 : 6 <= t2 && (t2 -= 6)), [t2 / 6, r2, i2, e2[3]];
      }, e.default.ColorConversion._rgbaToHSLA = function(e2) {
        var t2, r2, o = e2[0], n = e2[1], s2 = e2[2], i2 = Math.max(o, n, s2), a = Math.min(o, n, s2), l = i2 + a, a = i2 - a;
        return 0 == a ? r2 = t2 = 0 : (r2 = l < 1 ? a / l : a / (2 - l), o === i2 ? t2 = (n - s2) / a : n === i2 ? t2 = 2 + (s2 - o) / a : s2 === i2 && (t2 = 4 + (o - n) / a), t2 < 0 ? t2 += 6 : 6 <= t2 && (t2 -= 6)), [t2 / 6, r2, l / 2, e2[3]];
      };
      e = e.default.ColorConversion;
      r.default = e;
    }, { "../core/main": 267 }], 253: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.map"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = (n = e("../core/main")) && n.__esModule ? n : { default: n }, u = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      e("./p5.Color"), e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), l.default.prototype.alpha = function(e2) {
        return l.default._validateParameters("alpha", arguments), this.color(e2)._getAlpha();
      }, l.default.prototype.blue = function(e2) {
        return l.default._validateParameters("blue", arguments), this.color(e2)._getBlue();
      }, l.default.prototype.brightness = function(e2) {
        return l.default._validateParameters("brightness", arguments), this.color(e2)._getBrightness();
      }, l.default.prototype.color = function() {
        var e2;
        return l.default._validateParameters("color", arguments), arguments[0] instanceof l.default.Color ? arguments[0] : (e2 = arguments[0] instanceof Array ? arguments[0] : arguments, new l.default.Color(this, e2));
      }, l.default.prototype.green = function(e2) {
        return l.default._validateParameters("green", arguments), this.color(e2)._getGreen();
      }, l.default.prototype.hue = function(e2) {
        return l.default._validateParameters("hue", arguments), this.color(e2)._getHue();
      }, l.default.prototype.lerpColor = function(e2, t2, r2) {
        l.default._validateParameters("lerpColor", arguments);
        var o2, n2, s2, i3 = this._colorMode, a2 = this._colorMaxes;
        if (i3 === u.RGB)
          n2 = e2.levels.map(function(e3) {
            return e3 / 255;
          }), s2 = t2.levels.map(function(e3) {
            return e3 / 255;
          });
        else if (i3 === u.HSB)
          e2._getBrightness(), t2._getBrightness(), n2 = e2.hsba, s2 = t2.hsba;
        else {
          if (i3 !== u.HSL)
            throw new Error("".concat(i3, "cannot be used for interpolation."));
          e2._getLightness(), t2._getLightness(), n2 = e2.hsla, s2 = t2.hsla;
        }
        return r2 = Math.max(Math.min(r2, 1), 0), void 0 === this.lerp && (this.lerp = function(e3, t3, r3) {
          return r3 * (t3 - e3) + e3;
        }), e2 = this.lerp(n2[0], s2[0], r2), t2 = this.lerp(n2[1], s2[1], r2), o2 = this.lerp(n2[2], s2[2], r2), n2 = this.lerp(n2[3], s2[3], r2), e2 *= a2[i3][0], t2 *= a2[i3][1], o2 *= a2[i3][2], n2 *= a2[i3][3], this.color(e2, t2, o2, n2);
      }, l.default.prototype.lightness = function(e2) {
        return l.default._validateParameters("lightness", arguments), this.color(e2)._getLightness();
      }, l.default.prototype.red = function(e2) {
        return l.default._validateParameters("red", arguments), this.color(e2)._getRed();
      }, l.default.prototype.saturation = function(e2) {
        return l.default._validateParameters("saturation", arguments), this.color(e2)._getSaturation();
      };
      var n = l.default;
      r.default = n;
    }, { "../core/constants": 256, "../core/friendly_errors/fes_core": 258, "../core/friendly_errors/file_errors": 259, "../core/friendly_errors/validate_params": 262, "../core/main": 267, "./p5.Color": 254, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.map": 161, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 254: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.trim"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var c = n(e("../core/main")), d = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants")), f = n(e("./color_conversion"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      c.default.Color = function(e2, t2) {
        if (this._storeModeAndMaxes(e2._colorMode, e2._colorMaxes), this.mode !== d.RGB && this.mode !== d.HSL && this.mode !== d.HSB)
          throw new Error("".concat(this.mode, " is an invalid colorMode."));
        return this._array = c.default.Color._parseInputs.apply(this, t2), this._calculateLevels(), this;
      }, c.default.Color.prototype.toString = function(e2) {
        var t2 = this.levels, r2 = this._array, o2 = r2[3];
        switch (e2) {
          case "#rrggbb":
            return "#".concat(t2[0] < 16 ? "0".concat(t2[0].toString(16)) : t2[0].toString(16), t2[1] < 16 ? "0".concat(t2[1].toString(16)) : t2[1].toString(16), t2[2] < 16 ? "0".concat(t2[2].toString(16)) : t2[2].toString(16));
          case "#rrggbbaa":
            return "#".concat(t2[0] < 16 ? "0".concat(t2[0].toString(16)) : t2[0].toString(16), t2[1] < 16 ? "0".concat(t2[1].toString(16)) : t2[1].toString(16), t2[2] < 16 ? "0".concat(t2[2].toString(16)) : t2[2].toString(16), t2[3] < 16 ? "0".concat(t2[3].toString(16)) : t2[3].toString(16));
          case "#rgb":
            return "#".concat(Math.round(15 * r2[0]).toString(16), Math.round(15 * r2[1]).toString(16), Math.round(15 * r2[2]).toString(16));
          case "#rgba":
            return "#".concat(Math.round(15 * r2[0]).toString(16), Math.round(15 * r2[1]).toString(16), Math.round(15 * r2[2]).toString(16), Math.round(15 * r2[3]).toString(16));
          case "rgb":
            return "rgb(".concat(t2[0], ", ", t2[1], ", ", t2[2], ")");
          case "rgb%":
            return "rgb(".concat((100 * r2[0]).toPrecision(3), "%, ", (100 * r2[1]).toPrecision(3), "%, ", (100 * r2[2]).toPrecision(3), "%)");
          case "rgba%":
            return "rgba(".concat((100 * r2[0]).toPrecision(3), "%, ", (100 * r2[1]).toPrecision(3), "%, ", (100 * r2[2]).toPrecision(3), "%, ", (100 * r2[3]).toPrecision(3), "%)");
          case "hsb":
          case "hsv":
            return this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), "hsb(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ")");
          case "hsb%":
          case "hsv%":
            return this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), "hsb(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%)");
          case "hsba":
          case "hsva":
            return this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), "hsba(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ", ", o2, ")");
          case "hsba%":
          case "hsva%":
            return this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), "hsba(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%, ", (100 * o2).toPrecision(3), "%)");
          case "hsl":
            return this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), "hsl(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ")");
          case "hsl%":
            return this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%)");
          case "hsla":
            return this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), "hsla(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ", ", o2, ")");
          case "hsla%":
            return this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%, ", (100 * o2).toPrecision(3), "%)");
          default:
            return "rgba(".concat(t2[0], ",", t2[1], ",", t2[2], ",", o2, ")");
        }
      }, c.default.Color.prototype.setRed = function(e2) {
        this._array[0] = e2 / this.maxes[d.RGB][0], this._calculateLevels();
      }, c.default.Color.prototype.setGreen = function(e2) {
        this._array[1] = e2 / this.maxes[d.RGB][1], this._calculateLevels();
      }, c.default.Color.prototype.setBlue = function(e2) {
        this._array[2] = e2 / this.maxes[d.RGB][2], this._calculateLevels();
      }, c.default.Color.prototype.setAlpha = function(e2) {
        this._array[3] = e2 / this.maxes[this.mode][3], this._calculateLevels();
      }, c.default.Color.prototype._calculateLevels = function() {
        for (var e2 = this._array, t2 = this.levels = new Array(e2.length), r2 = e2.length - 1; 0 <= r2; --r2)
          t2[r2] = Math.round(255 * e2[r2]);
        this.hsla = null, this.hsba = null;
      }, c.default.Color.prototype._getAlpha = function() {
        return this._array[3] * this.maxes[this.mode][3];
      }, c.default.Color.prototype._storeModeAndMaxes = function(e2, t2) {
        this.mode = e2, this.maxes = t2;
      }, c.default.Color.prototype._getMode = function() {
        return this.mode;
      }, c.default.Color.prototype._getMaxes = function() {
        return this.maxes;
      }, c.default.Color.prototype._getBlue = function() {
        return this._array[2] * this.maxes[d.RGB][2];
      }, c.default.Color.prototype._getBrightness = function() {
        return this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), this.hsba[2] * this.maxes[d.HSB][2];
      }, c.default.Color.prototype._getGreen = function() {
        return this._array[1] * this.maxes[d.RGB][1];
      }, c.default.Color.prototype._getHue = function() {
        return this.mode === d.HSB ? (this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), this.hsba[0] * this.maxes[d.HSB][0]) : (this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), this.hsla[0] * this.maxes[d.HSL][0]);
      }, c.default.Color.prototype._getLightness = function() {
        return this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), this.hsla[2] * this.maxes[d.HSL][2];
      }, c.default.Color.prototype._getRed = function() {
        return this._array[0] * this.maxes[d.RGB][0];
      }, c.default.Color.prototype._getSaturation = function() {
        return this.mode === d.HSB ? (this.hsba || (this.hsba = f.default._rgbaToHSBA(this._array)), this.hsba[1] * this.maxes[d.HSB][1]) : (this.hsla || (this.hsla = f.default._rgbaToHSLA(this._array)), this.hsla[1] * this.maxes[d.HSL][1]);
      };
      var h = { aliceblue: "#f0f8ff", antiquewhite: "#faebd7", aqua: "#00ffff", aquamarine: "#7fffd4", azure: "#f0ffff", beige: "#f5f5dc", bisque: "#ffe4c4", black: "#000000", blanchedalmond: "#ffebcd", blue: "#0000ff", blueviolet: "#8a2be2", brown: "#a52a2a", burlywood: "#deb887", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", cornflowerblue: "#6495ed", cornsilk: "#fff8dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkgray: "#a9a9a9", darkgreen: "#006400", darkgrey: "#a9a9a9", darkkhaki: "#bdb76b", darkmagenta: "#8b008b", darkolivegreen: "#556b2f", darkorange: "#ff8c00", darkorchid: "#9932cc", darkred: "#8b0000", darksalmon: "#e9967a", darkseagreen: "#8fbc8f", darkslateblue: "#483d8b", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", darkturquoise: "#00ced1", darkviolet: "#9400d3", deeppink: "#ff1493", deepskyblue: "#00bfff", dimgray: "#696969", dimgrey: "#696969", dodgerblue: "#1e90ff", firebrick: "#b22222", floralwhite: "#fffaf0", forestgreen: "#228b22", fuchsia: "#ff00ff", gainsboro: "#dcdcdc", ghostwhite: "#f8f8ff", gold: "#ffd700", goldenrod: "#daa520", gray: "#808080", green: "#008000", greenyellow: "#adff2f", grey: "#808080", honeydew: "#f0fff0", hotpink: "#ff69b4", indianred: "#cd5c5c", indigo: "#4b0082", ivory: "#fffff0", khaki: "#f0e68c", lavender: "#e6e6fa", lavenderblush: "#fff0f5", lawngreen: "#7cfc00", lemonchiffon: "#fffacd", lightblue: "#add8e6", lightcoral: "#f08080", lightcyan: "#e0ffff", lightgoldenrodyellow: "#fafad2", lightgray: "#d3d3d3", lightgreen: "#90ee90", lightgrey: "#d3d3d3", lightpink: "#ffb6c1", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", lightskyblue: "#87cefa", lightslategray: "#778899", lightslategrey: "#778899", lightsteelblue: "#b0c4de", lightyellow: "#ffffe0", lime: "#00ff00", limegreen: "#32cd32", linen: "#faf0e6", magenta: "#ff00ff", maroon: "#800000", mediumaquamarine: "#66cdaa", mediumblue: "#0000cd", mediumorchid: "#ba55d3", mediumpurple: "#9370db", mediumseagreen: "#3cb371", mediumslateblue: "#7b68ee", mediumspringgreen: "#00fa9a", mediumturquoise: "#48d1cc", mediumvioletred: "#c71585", midnightblue: "#191970", mintcream: "#f5fffa", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", navajowhite: "#ffdead", navy: "#000080", oldlace: "#fdf5e6", olive: "#808000", olivedrab: "#6b8e23", orange: "#ffa500", orangered: "#ff4500", orchid: "#da70d6", palegoldenrod: "#eee8aa", palegreen: "#98fb98", paleturquoise: "#afeeee", palevioletred: "#db7093", papayawhip: "#ffefd5", peachpuff: "#ffdab9", peru: "#cd853f", pink: "#ffc0cb", plum: "#dda0dd", powderblue: "#b0e0e6", purple: "#800080", rebeccapurple: "#663399", red: "#ff0000", rosybrown: "#bc8f8f", royalblue: "#4169e1", saddlebrown: "#8b4513", salmon: "#fa8072", sandybrown: "#f4a460", seagreen: "#2e8b57", seashell: "#fff5ee", sienna: "#a0522d", silver: "#c0c0c0", skyblue: "#87ceeb", slateblue: "#6a5acd", slategray: "#708090", slategrey: "#708090", snow: "#fffafa", springgreen: "#00ff7f", steelblue: "#4682b4", tan: "#d2b48c", teal: "#008080", thistle: "#d8bfd8", tomato: "#ff6347", turquoise: "#40e0d0", violet: "#ee82ee", wheat: "#f5deb3", white: "#ffffff", whitesmoke: "#f5f5f5", yellow: "#ffff00", yellowgreen: "#9acd32" }, e = /\s*/, s2 = /(\d{1,3})/, l = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/, u = new RegExp("".concat(l.source, "%")), p = { HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i, HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i, HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i, HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i, RGB: new RegExp(["^rgb\\(", s2.source, ",", s2.source, ",", s2.source, "\\)$"].join(e.source), "i"), RGB_PERCENT: new RegExp(["^rgb\\(", u.source, ",", u.source, ",", u.source, "\\)$"].join(e.source), "i"), RGBA: new RegExp(["^rgba\\(", s2.source, ",", s2.source, ",", s2.source, ",", l.source, "\\)$"].join(e.source), "i"), RGBA_PERCENT: new RegExp(["^rgba\\(", u.source, ",", u.source, ",", u.source, ",", l.source, "\\)$"].join(e.source), "i"), HSL: new RegExp(["^hsl\\(", s2.source, ",", u.source, ",", u.source, "\\)$"].join(e.source), "i"), HSLA: new RegExp(["^hsla\\(", s2.source, ",", u.source, ",", u.source, ",", l.source, "\\)$"].join(e.source), "i"), HSB: new RegExp(["^hsb\\(", s2.source, ",", u.source, ",", u.source, "\\)$"].join(e.source), "i"), HSBA: new RegExp(["^hsba\\(", s2.source, ",", u.source, ",", u.source, ",", l.source, "\\)$"].join(e.source), "i") }, s2 = (c.default.Color._parseInputs = function(e2, t2, r2, o2) {
        var n2, s3 = arguments.length, i3 = this.mode, a2 = this.maxes[i3], l2 = [];
        if (3 <= s3) {
          for (l2[0] = e2 / a2[0], l2[1] = t2 / a2[1], l2[2] = r2 / a2[2], l2[3] = "number" == typeof o2 ? o2 / a2[3] : 1, n2 = l2.length - 1; 0 <= n2; --n2) {
            var u2 = l2[n2];
            u2 < 0 ? l2[n2] = 0 : 1 < u2 && (l2[n2] = 1);
          }
          return i3 === d.HSL ? f.default._hslaToRGBA(l2) : i3 === d.HSB ? f.default._hsbaToRGBA(l2) : l2;
        }
        if (1 === s3 && "string" == typeof e2) {
          r2 = e2.trim().toLowerCase();
          if (h[r2])
            return c.default.Color._parseInputs.call(this, h[r2]);
          if (p.HEX3.test(r2))
            return (l2 = p.HEX3.exec(r2).slice(1).map(function(e3) {
              return parseInt(e3 + e3, 16) / 255;
            }))[3] = 1, l2;
          if (p.HEX6.test(r2))
            return (l2 = p.HEX6.exec(r2).slice(1).map(function(e3) {
              return parseInt(e3, 16) / 255;
            }))[3] = 1, l2;
          if (p.HEX4.test(r2))
            return l2 = p.HEX4.exec(r2).slice(1).map(function(e3) {
              return parseInt(e3 + e3, 16) / 255;
            });
          if (p.HEX8.test(r2))
            return l2 = p.HEX8.exec(r2).slice(1).map(function(e3) {
              return parseInt(e3, 16) / 255;
            });
          if (p.RGB.test(r2))
            return (l2 = p.RGB.exec(r2).slice(1).map(function(e3) {
              return e3 / 255;
            }))[3] = 1, l2;
          if (p.RGB_PERCENT.test(r2))
            return (l2 = p.RGB_PERCENT.exec(r2).slice(1).map(function(e3) {
              return parseFloat(e3) / 100;
            }))[3] = 1, l2;
          if (p.RGBA.test(r2))
            return l2 = p.RGBA.exec(r2).slice(1).map(function(e3, t3) {
              return 3 === t3 ? parseFloat(e3) : e3 / 255;
            });
          if (p.RGBA_PERCENT.test(r2))
            return l2 = p.RGBA_PERCENT.exec(r2).slice(1).map(function(e3, t3) {
              return 3 === t3 ? parseFloat(e3) : parseFloat(e3) / 100;
            });
          if (p.HSL.test(r2) ? (l2 = p.HSL.exec(r2).slice(1).map(function(e3, t3) {
            return 0 === t3 ? parseInt(e3, 10) / 360 : parseInt(e3, 10) / 100;
          }))[3] = 1 : p.HSLA.test(r2) && (l2 = p.HSLA.exec(r2).slice(1).map(function(e3, t3) {
            return 0 === t3 ? parseInt(e3, 10) / 360 : 3 === t3 ? parseFloat(e3) : parseInt(e3, 10) / 100;
          })), (l2 = l2.map(function(e3) {
            return Math.max(Math.min(e3, 1), 0);
          })).length)
            return f.default._hslaToRGBA(l2);
          if (p.HSB.test(r2) ? (l2 = p.HSB.exec(r2).slice(1).map(function(e3, t3) {
            return 0 === t3 ? parseInt(e3, 10) / 360 : parseInt(e3, 10) / 100;
          }))[3] = 1 : p.HSBA.test(r2) && (l2 = p.HSBA.exec(r2).slice(1).map(function(e3, t3) {
            return 0 === t3 ? parseInt(e3, 10) / 360 : 3 === t3 ? parseFloat(e3) : parseInt(e3, 10) / 100;
          })), l2.length) {
            for (n2 = l2.length - 1; 0 <= n2; --n2)
              l2[n2] = Math.max(Math.min(l2[n2], 1), 0);
            return f.default._hsbaToRGBA(l2);
          }
          l2 = [1, 1, 1, 1];
        } else {
          if (1 !== s3 && 2 !== s3 || "number" != typeof e2)
            throw new Error("".concat(arguments, "is not a valid color representation."));
          l2[0] = e2 / a2[2], l2[1] = e2 / a2[2], l2[2] = e2 / a2[2], l2[3] = "number" == typeof t2 ? t2 / a2[3] : 1, l2 = l2.map(function(e3) {
            return Math.max(Math.min(e3, 1), 0);
          });
        }
        return l2;
      }, c.default.Color);
      r.default = s2;
    }, { "../core/constants": 256, "../core/main": 267, "./color_conversion": 252, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.constructor": 180, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.trim": 193, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 255: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.fill"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (n = e("../core/main")) && n.__esModule ? n : { default: n }, a = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = l();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function l() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), l = function() {
          return e2;
        }, e2);
      }
      e("./p5.Color"), s2.default.prototype.background = function() {
        var e2;
        return (e2 = this._renderer).background.apply(e2, arguments), this;
      }, s2.default.prototype.clear = function() {
        return this._renderer.clear((arguments.length <= 0 ? void 0 : arguments[0]) || 0, (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0, (arguments.length <= 3 ? void 0 : arguments[3]) || 0), this;
      }, s2.default.prototype.colorMode = function(e2, t2, r2, o2, n2) {
        return s2.default._validateParameters("colorMode", arguments), e2 !== a.RGB && e2 !== a.HSB && e2 !== a.HSL || (this._colorMode = e2, e2 = this._colorMaxes[e2], 2 === arguments.length ? (e2[0] = t2, e2[1] = t2, e2[2] = t2, e2[3] = t2) : 4 === arguments.length ? (e2[0] = t2, e2[1] = r2, e2[2] = o2) : 5 === arguments.length && (e2[0] = t2, e2[1] = r2, e2[2] = o2, e2[3] = n2)), this;
      }, s2.default.prototype.fill = function() {
        var e2;
        return this._renderer._setProperty("_fillSet", true), this._renderer._setProperty("_doFill", true), (e2 = this._renderer).fill.apply(e2, arguments), this;
      }, s2.default.prototype.noFill = function() {
        return this._renderer._setProperty("_doFill", false), this;
      }, s2.default.prototype.noStroke = function() {
        return this._renderer._setProperty("_doStroke", false), this;
      }, s2.default.prototype.stroke = function() {
        var e2;
        return this._renderer._setProperty("_strokeSet", true), this._renderer._setProperty("_doStroke", true), (e2 = this._renderer).stroke.apply(e2, arguments), this;
      }, s2.default.prototype.erase = function() {
        return this._renderer.erase(0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255), this;
      }, s2.default.prototype.noErase = function() {
        return this._renderer.noErase(), this;
      };
      var n = s2.default;
      r.default = n;
    }, { "../core/constants": 256, "../core/main": 267, "./p5.Color": 254, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 256: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.BEZIER = r.QUADRATIC = r.LINEAR = r._CTX_MIDDLE = r._DEFAULT_LEADMULT = r._DEFAULT_TEXT_FILL = r.WORD = r.CHAR = r.BOLDITALIC = r.BOLD = r.ITALIC = r.NORMAL = r.BLUR = r.ERODE = r.DILATE = r.POSTERIZE = r.INVERT = r.OPAQUE = r.GRAY = r.THRESHOLD = r.BURN = r.DODGE = r.SOFT_LIGHT = r.HARD_LIGHT = r.OVERLAY = r.REPLACE = r.SCREEN = r.MULTIPLY = r.EXCLUSION = r.SUBTRACT = r.DIFFERENCE = r.LIGHTEST = r.DARKEST = r.ADD = r.REMOVE = r.BLEND = r.UP_ARROW = r.TAB = r.SHIFT = r.RIGHT_ARROW = r.RETURN = r.OPTION = r.LEFT_ARROW = r.ESCAPE = r.ENTER = r.DOWN_ARROW = r.DELETE = r.CONTROL = r.BACKSPACE = r.ALT = r.AUTO = r.HSL = r.HSB = r.RGB = r.MITER = r.BEVEL = r.ROUND = r.SQUARE = r.PROJECT = r.PIE = r.CHORD = r.OPEN = r.CLOSE = r.TESS = r.QUAD_STRIP = r.QUADS = r.TRIANGLE_STRIP = r.TRIANGLE_FAN = r.TRIANGLES = r.LINE_LOOP = r.LINE_STRIP = r.LINES = r.POINTS = r.BASELINE = r.BOTTOM = r.TOP = r.CENTER = r.LEFT = r.RIGHT = r.RADIUS = r.CORNERS = r.CORNER = r.RAD_TO_DEG = r.DEG_TO_RAD = r.RADIANS = r.DEGREES = r.TWO_PI = r.TAU = r.QUARTER_PI = r.PI = r.HALF_PI = r.WAIT = r.TEXT = r.MOVE = r.HAND = r.CROSS = r.ARROW = r.WEBGL = r.P2D = r.VERSION = void 0, r.COVER = r.CONTAIN = r.FALLBACK = r.LABEL = r.AXES = r.GRID = r._DEFAULT_FILL = r._DEFAULT_STROKE = r.PORTRAIT = r.LANDSCAPE = r.MIRROR = r.CLAMP = r.REPEAT = r.NEAREST = r.IMAGE = r.IMMEDIATE = r.TEXTURE = r.FILL = r.STROKE = r.CURVE = void 0;
      var o = Math.PI, n = (r.VERSION = "1.5.0", r.P2D = "p2d", r.WEBGL = "webgl", r.ARROW = "default", r.CROSS = "crosshair", r.HAND = "pointer", r.MOVE = "move", r.TEXT = "text", r.WAIT = "wait", o / 2), n = (r.HALF_PI = n, o), n = (r.PI = n, o / 4), n = (r.QUARTER_PI = n, 2 * o), n = (r.TAU = n, 2 * o), n = (r.TWO_PI = n, r.DEGREES = "degrees", r.RADIANS = "radians", o / 180), n = (r.DEG_TO_RAD = n, 180 / o);
      r.RAD_TO_DEG = n, r.CORNER = "corner", r.CORNERS = "corners", r.RADIUS = "radius", r.RIGHT = "right", r.LEFT = "left", r.CENTER = "center", r.TOP = "top", r.BOTTOM = "bottom", r.BASELINE = "alphabetic", r.POINTS = 0, r.LINES = 1, r.LINE_STRIP = 3, r.LINE_LOOP = 2, r.TRIANGLES = 4, r.TRIANGLE_FAN = 6, r.TRIANGLE_STRIP = 5, r.QUADS = "quads", r.QUAD_STRIP = "quad_strip", r.TESS = "tess", r.CLOSE = "close", r.OPEN = "open", r.CHORD = "chord", r.PIE = "pie", r.PROJECT = "square", r.SQUARE = "butt", r.ROUND = "round", r.BEVEL = "bevel", r.MITER = "miter", r.RGB = "rgb", r.HSB = "hsb", r.HSL = "hsl", r.AUTO = "auto", r.ALT = 18, r.BACKSPACE = 8, r.CONTROL = 17, r.DELETE = 46, r.DOWN_ARROW = 40, r.ENTER = 13, r.ESCAPE = 27, r.LEFT_ARROW = 37, r.OPTION = 18, r.RETURN = 13, r.RIGHT_ARROW = 39, r.SHIFT = 16, r.TAB = 9, r.UP_ARROW = 38, r.BLEND = "source-over", r.REMOVE = "destination-out", r.ADD = "lighter", r.DARKEST = "darken", r.LIGHTEST = "lighten", r.DIFFERENCE = "difference", r.SUBTRACT = "subtract", r.EXCLUSION = "exclusion", r.MULTIPLY = "multiply", r.SCREEN = "screen", r.REPLACE = "copy", r.OVERLAY = "overlay", r.HARD_LIGHT = "hard-light", r.SOFT_LIGHT = "soft-light", r.DODGE = "color-dodge", r.BURN = "color-burn", r.THRESHOLD = "threshold", r.GRAY = "gray", r.OPAQUE = "opaque", r.INVERT = "invert", r.POSTERIZE = "posterize", r.DILATE = "dilate", r.ERODE = "erode", r.BLUR = "blur", r.NORMAL = "normal", r.ITALIC = "italic", r.BOLD = "bold", r.BOLDITALIC = "bold italic", r.CHAR = "CHAR", r.WORD = "WORD", r._DEFAULT_TEXT_FILL = "#000000", r._DEFAULT_LEADMULT = 1.25, r._CTX_MIDDLE = "middle", r.LINEAR = "linear", r.QUADRATIC = "quadratic", r.BEZIER = "bezier", r.CURVE = "curve", r.STROKE = "stroke", r.FILL = "fill", r.TEXTURE = "texture", r.IMMEDIATE = "immediate", r.IMAGE = "image", r.NEAREST = "nearest", r.REPEAT = "repeat", r.CLAMP = "clamp", r.MIRROR = "mirror", r.LANDSCAPE = "landscape", r.PORTRAIT = "portrait", r._DEFAULT_STROKE = "#000000", r._DEFAULT_FILL = "#FFFFFF", r.GRID = "grid", r.AXES = "axes", r.LABEL = "label", r.FALLBACK = "fallback", r.CONTAIN = "contain";
      r.COVER = "cover";
    }, {}], 257: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.search"), e("core-js/modules/es.string.split"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.search"), e("core-js/modules/es.string.split"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (s2 = e("./main")) && s2.__esModule ? s2 : { default: s2 }, s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      var l = [s2.ARROW, s2.CROSS, s2.HAND, s2.MOVE, s2.TEXT, s2.WAIT], u = (n.default.prototype._frameRate = 0, n.default.prototype._lastFrameTime = window.performance.now(), n.default.prototype._targetFrameRate = 60, window.print);
      function c() {
        return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
      }
      function d() {
        return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
      }
      n.default.prototype.print = function() {
        var e2;
        arguments.length ? (e2 = console).log.apply(e2, arguments) : u();
      }, n.default.prototype.frameCount = 0, n.default.prototype.deltaTime = 0, n.default.prototype.focused = document.hasFocus(), n.default.prototype.cursor = function(e2, t2, r2) {
        var o2, n2 = "auto", s3 = this._curElement.elt;
        l.includes(e2) ? n2 = e2 : "string" == typeof e2 && (o2 = "", t2 && r2 && "number" == typeof t2 && "number" == typeof r2 && (o2 = "".concat(t2, " ").concat(r2)), n2 = "http://" === e2.substring(0, 7) || "https://" === e2.substring(0, 8) || /\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e2) ? "url(".concat(e2, ") ").concat(o2, ", auto") : e2), s3.style.cursor = n2;
      }, n.default.prototype.frameRate = function(e2) {
        return n.default._validateParameters("frameRate", arguments), "number" != typeof e2 || e2 < 0 ? this._frameRate : (this._setProperty("_targetFrameRate", e2), 0 === e2 && this._setProperty("_frameRate", e2), this);
      }, n.default.prototype.getFrameRate = function() {
        return this.frameRate();
      }, n.default.prototype.setFrameRate = function(e2) {
        return this.frameRate(e2);
      }, n.default.prototype.noCursor = function() {
        this._curElement.elt.style.cursor = "none";
      }, n.default.prototype.displayWidth = screen.width, n.default.prototype.displayHeight = screen.height, n.default.prototype.windowWidth = c(), n.default.prototype.windowHeight = d(), n.default.prototype._onresize = function(e2) {
        this._setProperty("windowWidth", c()), this._setProperty("windowHeight", d());
        var t2 = this._isGlobal ? window : this;
        "function" != typeof t2.windowResized || void 0 === (t2 = t2.windowResized(e2)) || t2 || e2.preventDefault();
      }, n.default.prototype.width = 0, n.default.prototype.height = 0, n.default.prototype.fullscreen = function(e2) {
        if (n.default._validateParameters("fullscreen", arguments), void 0 === e2)
          return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
        if (e2) {
          e2 = document.documentElement;
          if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled))
            throw new Error("Fullscreen not enabled in this browser.");
          e2.requestFullscreen ? e2.requestFullscreen() : e2.mozRequestFullScreen ? e2.mozRequestFullScreen() : e2.webkitRequestFullscreen ? e2.webkitRequestFullscreen() : e2.msRequestFullscreen && e2.msRequestFullscreen();
        } else
          document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
      }, n.default.prototype.pixelDensity = function(e2) {
        var t2;
        return n.default._validateParameters("pixelDensity", arguments), "number" == typeof e2 ? (e2 !== this._pixelDensity && (this._pixelDensity = e2), (t2 = this).resizeCanvas(this.width, this.height, true)) : t2 = this._pixelDensity, t2;
      }, n.default.prototype.displayDensity = function() {
        return window.devicePixelRatio;
      }, n.default.prototype.getURL = function() {
        return location.href;
      }, n.default.prototype.getURLPath = function() {
        return location.pathname.split("/").filter(function(e2) {
          return "" !== e2;
        });
      }, n.default.prototype.getURLParams = function() {
        for (var e2, t2 = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim, r2 = {}; null != (e2 = t2.exec(location.search)); )
          e2.index === t2.lastIndex && t2.lastIndex++, r2[e2[1]] = e2[2];
        return r2;
      };
      e = n.default;
      r.default = e;
    }, { "./constants": 256, "./main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.search": 190, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 258: [function(r, e, t) {
      r("core-js/modules/es.symbol"), r("core-js/modules/es.symbol.description"), r("core-js/modules/es.symbol.iterator"), r("core-js/modules/es.array.concat"), r("core-js/modules/es.array.filter"), r("core-js/modules/es.array.for-each"), r("core-js/modules/es.array.includes"), r("core-js/modules/es.array.iterator"), r("core-js/modules/es.array.join"), r("core-js/modules/es.array.map"), r("core-js/modules/es.array.slice"), r("core-js/modules/es.array.some"), r("core-js/modules/es.function.name"), r("core-js/modules/es.object.assign"), r("core-js/modules/es.object.get-own-property-names"), r("core-js/modules/es.object.keys"), r("core-js/modules/es.object.to-string"), r("core-js/modules/es.regexp.constructor"), r("core-js/modules/es.regexp.exec"), r("core-js/modules/es.regexp.to-string"), r("core-js/modules/es.string.iterator"), r("core-js/modules/es.string.match"), r("core-js/modules/es.string.replace"), r("core-js/modules/es.string.search"), r("core-js/modules/es.string.split"), r("core-js/modules/web.dom-collections.for-each"), r("core-js/modules/web.dom-collections.iterator"), r("core-js/modules/es.symbol"), r("core-js/modules/es.symbol.description"), r("core-js/modules/es.symbol.iterator"), r("core-js/modules/es.array.concat"), r("core-js/modules/es.array.filter"), r("core-js/modules/es.array.for-each"), r("core-js/modules/es.array.includes"), r("core-js/modules/es.array.iterator"), r("core-js/modules/es.array.join"), r("core-js/modules/es.array.map"), r("core-js/modules/es.array.slice"), r("core-js/modules/es.array.some"), r("core-js/modules/es.function.name"), r("core-js/modules/es.object.assign"), r("core-js/modules/es.object.get-own-property-names"), r("core-js/modules/es.object.keys"), r("core-js/modules/es.object.to-string"), r("core-js/modules/es.regexp.constructor"), r("core-js/modules/es.regexp.exec"), r("core-js/modules/es.regexp.to-string"), r("core-js/modules/es.string.iterator"), r("core-js/modules/es.string.match"), r("core-js/modules/es.string.replace"), r("core-js/modules/es.string.search"), r("core-js/modules/es.string.split"), r("core-js/modules/web.dom-collections.for-each"), r("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(t, "__esModule", { value: true }), t.default = void 0;
      var o = (l = r("../main")) && l.__esModule ? l : { default: l };
      r("../internationalization");
      function n(r2, o2) {
        o2 = o2 || console.log.bind(console), s2 || i2(), s2.some(function(e2) {
          var t2;
          if (r2.message && null !== r2.message.match("\\W?".concat(e2.name, "\\W")))
            return t2 = "function" === e2.type ? "".concat(e2.name, "()") : e2.name, o2("Did you just try to use p5.js's ".concat(t2, " ").concat(e2.type, "? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(a)), true;
        });
      }
      var s2 = null, i2 = null, a = (o.default._friendlyError = o.default._checkForUserDefinedFunctions = o.default._fesErrorMonitor = function() {
      }, s2 = null, "https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup"), i2 = function() {
        function e2(r2) {
          return Object.getOwnPropertyNames(r2).filter(function(e3) {
            return "_" !== e3[0] && (!(e3 in t2) && (t2[e3] = true));
          }).map(function(e3) {
            var t3 = "function" == typeof r2[e3] ? "function" : e3 === e3.toUpperCase() ? "constant" : "variable";
            return { name: e3, type: t3 };
          });
        }
        var t2 = {};
        (s2 = [].concat(e2(o.default.prototype), e2(r("../constants")))).sort(function(e3, t3) {
          return t3.name.length - e3.name.length;
        });
      }, l = (o.default.prototype._helpForMisusedAtTopLevelCode = n, "complete" !== document.readyState && (window.addEventListener("error", n, false), window.addEventListener("load", function() {
        window.removeEventListener("error", n, false);
      })), o.default);
      t.default = l;
    }, { "../constants": 256, "../internationalization": 265, "../main": 267, "./browser_errors": void 0, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.some": 163, "core-js/modules/es.function.name": 165, "core-js/modules/es.object.assign": 172, "core-js/modules/es.object.get-own-property-names": 174, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.constructor": 180, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.search": 190, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.for-each": 229, "core-js/modules/web.dom-collections.iterator": 230 }], 259: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (o = e("../main")) && o.__esModule ? o : { default: o };
      e("../internationalization");
      o.default._friendlyFileLoadError = function() {
      };
      e = o.default;
      r.default = e;
    }, { "../internationalization": 265, "../main": 267 }], 260: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = L(e("../main"));
      e("../internationalization");
      O(e("../constants"));
      function C() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), C = function() {
          return e2;
        }, e2);
      }
      function O(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = C();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2, n2 = {}, s2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2)
          Object.prototype.hasOwnProperty.call(e2, r2) && ((o2 = s2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (o2.get || o2.set) ? Object.defineProperty(n2, r2, o2) : n2[r2] = e2[r2]);
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      function L(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      n.default._fesCodeReader = function() {
      };
      var R = n.default;
      r.default = R;
    }, { "../constants": 256, "../internationalization": 265, "../main": 267, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.constructor": 180, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.trim": 193, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.for-each": 229, "core-js/modules/web.dom-collections.iterator": 230 }], 261: [function(e, t, r) {
      e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../main")) && e.__esModule ? e : { default: e };
      function o() {
        var t2 = /(^|@)\S+:\d+/, r2 = /^\s*at .*(\S+:\d+|\(native\))/m, o2 = /^(eval@)?(\[native code])?$/;
        return { parse: function(e2) {
          return void 0 !== e2.stacktrace || void 0 !== e2["opera#sourceloc"] ? this.parseOpera(e2) : e2.stack && e2.stack.match(r2) ? this.parseV8OrIE(e2) : e2.stack ? this.parseFFOrSafari(e2) : void 0;
        }, extractLocation: function(e2) {
          return -1 === e2.indexOf(":") ? [e2] : [(e2 = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e2.replace(/[()]/g, "")))[1], e2[2] || void 0, e2[3] || void 0];
        }, parseV8OrIE: function(e2) {
          return e2.stack.split("\n").filter(function(e3) {
            return !!e3.match(r2);
          }, this).map(function(e3) {
            var t3 = (e3 = -1 < e3.indexOf("(eval ") ? e3.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, "") : e3).replace(/^\s+/, "").replace(/\(eval code/g, "("), r3 = t3.match(/ (\((.+):(\d+):(\d+)\)$)/), t3 = (t3 = r3 ? t3.replace(r3[0], "") : t3).split(/\s+/).slice(1), r3 = this.extractLocation(r3 ? r3[1] : t3.pop());
            return { functionName: t3.join(" ") || void 0, fileName: -1 < ["eval", "<anonymous>"].indexOf(r3[0]) ? void 0 : r3[0], lineNumber: r3[1], columnNumber: r3[2], source: e3 };
          }, this);
        }, parseFFOrSafari: function(e2) {
          return e2.stack.split("\n").filter(function(e3) {
            return !e3.match(o2);
          }, this).map(function(e3) {
            var t3, r3;
            return -1 === (e3 = -1 < e3.indexOf(" > eval") ? e3.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1") : e3).indexOf("@") && -1 === e3.indexOf(":") ? { functionName: e3 } : { functionName: (r3 = e3.match(t3 = /((.*".+"[^@]*)?[^@]*)(?:@)/)) && r3[1] ? r3[1] : void 0, fileName: (r3 = this.extractLocation(e3.replace(t3, "")))[0], lineNumber: r3[1], columnNumber: r3[2], source: e3 };
          }, this);
        }, parseOpera: function(e2) {
          return !e2.stacktrace || -1 < e2.message.indexOf("\n") && e2.message.split("\n").length > e2.stacktrace.split("\n").length ? this.parseOpera9(e2) : e2.stack ? this.parseOpera11(e2) : this.parseOpera10(e2);
        }, parseOpera9: function(e2) {
          for (var t3 = /Line (\d+).*script (?:in )?(\S+)/i, r3 = e2.message.split("\n"), o3 = [], n = 2, s2 = r3.length; n < s2; n += 2) {
            var i2 = t3.exec(r3[n]);
            i2 && o3.push({ fileName: i2[2], lineNumber: i2[1], source: r3[n] });
          }
          return o3;
        }, parseOpera10: function(e2) {
          for (var t3 = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, r3 = e2.stacktrace.split("\n"), o3 = [], n = 0, s2 = r3.length; n < s2; n += 2) {
            var i2 = t3.exec(r3[n]);
            i2 && o3.push({ functionName: i2[3] || void 0, fileName: i2[2], lineNumber: i2[1], source: r3[n] });
          }
          return o3;
        }, parseOpera11: function(e2) {
          return e2.stack.split("\n").filter(function(e3) {
            return !!e3.match(t2) && !e3.match(/^Error created at/);
          }, this).map(function(e3) {
            var t3, r3 = e3.split("@"), o3 = this.extractLocation(r3.pop()), r3 = r3.shift() || "";
            return { functionName: r3.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0, args: void 0 === (t3 = r3.match(/\(([^)]*)\)/) ? r3.replace(/^[^(]+\(([^)]*)\)$/, "$1") : t3) || "[arguments not available]" === t3 ? void 0 : t3.split(","), fileName: o3[0], lineNumber: o3[1], columnNumber: o3[2], source: e3 };
          }, this);
        } };
      }
      e.default._getErrorStackParser = function() {
        return new o();
      };
      e = e.default;
      r.default = e;
    }, { "../main": 267, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191 }], 262: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.map"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.get-prototype-of"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.reflect.construct"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.set"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.map"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.get-prototype-of"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.reflect.construct"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.set"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (n = e("../main")) && n.__esModule ? n : { default: n };
      (function(e2) {
        if (e2 && e2.__esModule)
          return;
        if (null === e2 || "object" !== a(e2) && "function" != typeof e2)
          return;
        var t2 = i2();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
      })(e("../constants")), e("../internationalization");
      function i2() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), i2 = function() {
          return e2;
        }, e2);
      }
      function a(e2) {
        return (a = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      n.default._validateParameters = n.default._clearValidateParamsCache = function() {
      };
      e = n.default;
      r.default = e;
    }, { "../../../docs/parameterData.json": void 0, "../constants": 256, "../internationalization": 265, "../main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.last-index-of": 160, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.function.name": 165, "core-js/modules/es.map": 166, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.get-prototype-of": 175, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.reflect.construct": 179, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.set": 183, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.for-each": 229, "core-js/modules/web.dom-collections.iterator": 230 }], 263: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      r.default = { modeAdjust: function(e2, t2, r2, o2, n) {
        return n === s2.CORNER ? { x: e2, y: t2, w: r2, h: o2 } : n === s2.CORNERS ? { x: e2, y: t2, w: r2 - e2, h: o2 - t2 } : n === s2.RADIUS ? { x: e2 - r2, y: t2 - o2, w: 2 * r2, h: 2 * o2 } : n === s2.CENTER ? { x: e2 - 0.5 * r2, y: t2 - 0.5 * o2, w: r2, h: o2 } : void 0;
      } };
    }, { "./constants": 256, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 264: [function(e, t, r) {
      e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator");
      var o = (n = e("../core/main")) && n.__esModule ? n : { default: n };
      e("./internationalization");
      var n = Promise.resolve();
      Promise.all([new Promise(function(e2, t2) {
        "complete" === document.readyState ? e2() : window.addEventListener("load", e2, false);
      }), n]).then(function() {
        void 0 !== window._setupDone ? console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import") : window.mocha || (window.setup && "function" == typeof window.setup || window.draw && "function" == typeof window.draw) && !o.default.instance && new o.default();
      });
    }, { "../core/main": 267, "./internationalization": 265, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.string.iterator": 186, "core-js/modules/web.dom-collections.iterator": 230 }], 265: [function(e, t, r) {
      e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.setTranslatorLanguage = r.currentTranslatorLanguage = r.availableTranslatorLanguages = r.initialize = r.translator = void 0;
      var n, s2, o = a(e("i18next")), i2 = a(e("i18next-browser-languagedetector"));
      function a(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      function l(e2, t2) {
        for (var r2 = 0; r2 < t2.length; r2++) {
          var o2 = t2[r2];
          o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, o2.key, o2);
        }
      }
      var u = function() {
        function r2(e3, t3) {
          if (!(this instanceof r2))
            throw new TypeError("Cannot call a class as a function");
          this.init(e3, t3);
        }
        var e2, t2;
        return e2 = r2, (t2 = [{ key: "fetchWithTimeout", value: function(e3, t3) {
          var r3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 2e3;
          return Promise.race([fetch(e3, t3), new Promise(function(e4, t4) {
            return setTimeout(function() {
              return t4(new Error("timeout"));
            }, r3);
          })]);
        } }, { key: "init", value: function(e3) {
          var t3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
          this.services = e3, this.options = t3;
        } }, { key: "read", value: function(e3, t3, r3) {
          var o2 = this.options.loadPath;
          e3 === this.options.fallback ? r3(null, n[e3][t3]) : s2.includes(e3) ? (o2 = this.services.interpolator.interpolate(o2, { lng: e3, ns: t3 }), this.loadUrl(o2, r3)) : r3("Not found", false);
        } }, { key: "loadUrl", value: function(t3, r3) {
          this.fetchWithTimeout(t3).then(function(e3) {
            if (e3.ok)
              return e3.json();
            throw new Error("failed loading ".concat(t3));
          }, function() {
            throw new Error("failed loading ".concat(t3));
          }).then(function(e3) {
            return r3(null, e3);
          }).catch(r3);
        } }]) && l(e2.prototype, t2), r2;
      }();
      u.type = "backend", r.translator = function(e2, t2) {
        console.debug("p5.js translator called before translations were loaded"), o.default.t(e2, t2);
      }, r.initialize = function() {
        return o.default.use(i2.default).use(u).init({ fallbackLng: "en", nestingPrefix: "$tr(", nestingSuffix: ")", defaultNS: "translation", returnEmptyString: false, interpolation: { escapeValue: false }, detection: { checkWhitelist: false, order: ["querystring", "navigator", "htmlTag", "path", "subdomain"], caches: [] }, backend: { fallback: "en", loadPath: "https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json" }, partialBundledLanguages: true, resources: n }).then(function(e2) {
          r.translator = e2;
        }, function(e2) {
          return console.debug("Translations failed to load (".concat(e2, ")"));
        });
      }, r.availableTranslatorLanguages = function() {
        return o.default.languages;
      }, r.currentTranslatorLanguage = function(e2) {
        return o.default.language;
      };
      r.setTranslatorLanguage = function(e2) {
        return o.default.changeLanguage(e2 || void 0, function(e3) {
          return console.debug("Translations failed to load (".concat(e3, ")"));
        });
      };
    }, { "../../translations": void 0, "../../translations/dev": void 0, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.split": 191, "core-js/modules/web.dom-collections.iterator": 230, i18next: 3, "i18next-browser-languagedetector": 3 }], 266: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("./main")) && e.__esModule ? e : { default: e };
      e.default.prototype.pushStyle = function() {
        throw new Error("pushStyle() not used, see push()");
      }, e.default.prototype.popStyle = function() {
        throw new Error("popStyle() not used, see pop()");
      }, e.default.prototype.popMatrix = function() {
        throw new Error("popMatrix() not used, see pop()");
      }, e.default.prototype.pushMatrix = function() {
        throw new Error("pushMatrix() not used, see push()");
      };
      e = e.default;
      r.default = e;
    }, { "./main": 267 }], 267: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.get-own-property-names"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-names"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0, e("./shim");
      var n = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function s2(e2, t2) {
        for (var r2 = 0; r2 < t2.length; r2++) {
          var o2 = t2[r2];
          o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, o2.key, o2);
        }
      }
      var l, u = function() {
        function v(e3, t3, r2) {
          var d = this;
          if (!(this instanceof v))
            throw new TypeError("Cannot call a class as a function");
          this._setupDone = false, this._preloadDone = false, this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1, this._userNode = t3, this._curElement = null, this._elements = [], this._glAttributes = null, this._requestAnimId = 0, this._preloadCount = 0, this._isGlobal = false, this._loop = true, this._initializeInstanceVariables(), this._defaultCanvasSize = { width: 100, height: 100 }, this._events = { mousemove: null, mousedown: null, mouseup: null, dragend: null, dragover: null, click: null, dblclick: null, mouseover: null, mouseout: null, keydown: null, keyup: null, keypress: null, touchstart: null, touchmove: null, touchend: null, resize: null, blur: null }, this._millisStart = -1, this._lcg_random_state = null, this._gaussian_previous = false, this._events.wheel = null, this._loadingScreenId = "p5_loading", this._registeredMethods = {};
          var t3 = Object.getOwnPropertyNames(v.prototype._registeredMethods), o2 = true, n2 = false, s3 = void 0;
          try {
            for (var i3, a2 = t3[Symbol.iterator](); !(o2 = (i3 = a2.next()).done); o2 = true) {
              var l2 = i3.value;
              this._registeredMethods[l2] = v.prototype._registeredMethods[l2].slice();
            }
          } catch (e4) {
            n2 = true, s3 = e4;
          } finally {
            try {
              o2 || null == a2.return || a2.return();
            } finally {
              if (n2)
                throw s3;
            }
          }
          window.DeviceOrientationEvent && (this._events.deviceorientation = null), window.DeviceMotionEvent && !window._isNodeWebkit && (this._events.devicemotion = null), this._start = function() {
            d._userNode && "string" == typeof d._userNode && (d._userNode = document.getElementById(d._userNode));
            var e4 = d._isGlobal ? window : d;
            if (e4.preload) {
              var t4, r3 = document.getElementById(d._loadingScreenId), o3 = (r3 || ((r3 = document.createElement("div")).innerHTML = "Loading...", r3.style.position = "absolute", r3.id = d._loadingScreenId, (d._userNode || document.body).appendChild(r3)), d._preloadMethods);
              for (t4 in o3) {
                o3[t4] = o3[t4] || v;
                var n3 = o3[t4];
                n3 !== v.prototype && n3 !== v || (d._isGlobal && (window[t4] = d._wrapPreload(d, t4)), n3 = d), d._registeredPreloadMethods[t4] = n3[t4], n3[t4] = d._wrapPreload(n3, t4);
              }
              e4.preload(), d._runIfPreloadsAreDone();
            } else
              d._setup(), d._draw();
          }, this._runIfPreloadsAreDone = function() {
            var e4, t4 = this._isGlobal ? window : this;
            0 === t4._preloadCount && ((e4 = document.getElementById(t4._loadingScreenId)) && e4.parentNode.removeChild(e4), this._setupDone || (this._lastFrameTime = window.performance.now(), t4._setup(), t4._draw()));
          }, this._decrementPreload = function() {
            var e4 = this._isGlobal ? window : this;
            e4._preloadDone || "function" != typeof e4.preload || (e4._setProperty("_preloadCount", e4._preloadCount - 1), e4._runIfPreloadsAreDone());
          }, this._wrapPreload = function(o3, n3) {
            var s4 = this;
            return function() {
              s4._incrementPreload();
              for (var e4 = arguments.length, t4 = new Array(e4), r3 = 0; r3 < e4; r3++)
                t4[r3] = arguments[r3];
              return s4._registeredPreloadMethods[n3].apply(o3, t4);
            };
          }, this._incrementPreload = function() {
            var e4 = this._isGlobal ? window : this;
            e4._preloadDone || e4._setProperty("_preloadCount", e4._preloadCount + 1);
          }, this._setup = function() {
            d.createCanvas(d._defaultCanvasSize.width, d._defaultCanvasSize.height, "p2d");
            var e4 = d._isGlobal ? window : d;
            if ("function" == typeof e4.preload)
              for (var t4 in d._preloadMethods)
                e4[t4] = d._preloadMethods[t4][t4], e4[t4] && d && (e4[t4] = e4[t4].bind(d));
            d._millisStart = window.performance.now(), e4._preloadDone = true, "function" == typeof e4.setup && e4.setup();
            var r3 = document.getElementsByTagName("canvas"), o3 = true, n3 = false, s4 = void 0;
            try {
              for (var i4, a3 = r3[Symbol.iterator](); !(o3 = (i4 = a3.next()).done); o3 = true) {
                var l3 = i4.value;
                "true" === l3.dataset.hidden && (l3.style.visibility = "", delete l3.dataset.hidden);
              }
            } catch (e5) {
              n3 = true, s4 = e5;
            } finally {
              try {
                o3 || null == a3.return || a3.return();
              } finally {
                if (n3)
                  throw s4;
              }
            }
            d._lastFrameTime = window.performance.now(), d._setupDone = true, (d._accessibleOutputs.grid || d._accessibleOutputs.text) && d._updateAccsOutput();
          }, this._draw = function() {
            var e4 = window.performance.now(), t4 = e4 - d._lastFrameTime, r3 = 1e3 / d._targetFrameRate;
            (!d._loop || r3 - 5 <= t4) && (d.redraw(), d._frameRate = 1e3 / (e4 - d._lastFrameTime), d.deltaTime = e4 - d._lastFrameTime, d._setProperty("deltaTime", d.deltaTime), d._lastFrameTime = e4, void 0 !== d._updateMouseCoords && (d._updateMouseCoords(), d._setProperty("movedX", 0), d._setProperty("movedY", 0))), d._loop && (d._requestAnimId = window.requestAnimationFrame(d._draw));
          }, this._setProperty = function(e4, t4) {
            d[e4] = t4, d._isGlobal && (window[e4] = t4);
          }, this.remove = function() {
            var t4 = document.getElementById(d._loadingScreenId);
            if (t4 && (t4.parentNode.removeChild(t4), d._incrementPreload()), d._curElement) {
              for (var e4 in d._loop = false, d._requestAnimId && window.cancelAnimationFrame(d._requestAnimId), d._events)
                window.removeEventListener(e4, d._events[e4]);
              var r3 = true, t4 = false, o3 = void 0;
              try {
                for (var n3, s4 = d._elements[Symbol.iterator](); !(r3 = (n3 = s4.next()).done); r3 = true) {
                  var i4, a3 = n3.value;
                  for (i4 in a3.elt && a3.elt.parentNode && a3.elt.parentNode.removeChild(a3.elt), a3._events)
                    a3.elt.removeEventListener(i4, a3._events[i4]);
                }
              } catch (e5) {
                t4 = true, o3 = e5;
              } finally {
                try {
                  r3 || null == s4.return || s4.return();
                } finally {
                  if (t4)
                    throw o3;
                }
              }
              var l3 = d;
              d._registeredMethods.remove.forEach(function(e5) {
                void 0 !== e5 && e5.call(l3);
              });
            }
            if (d._isGlobal) {
              for (var u3 in v.prototype)
                try {
                  delete window[u3];
                } catch (e5) {
                  window[u3] = void 0;
                }
              for (var c2 in d)
                if (d.hasOwnProperty(c2))
                  try {
                    delete window[c2];
                  } catch (e5) {
                    window[c2] = void 0;
                  }
              v.instance = null;
            }
          }, this._registeredMethods.init.forEach(function(e4) {
            void 0 !== e4 && e4.call(this);
          }, this), this._setupPromisePreloads();
          var u2, c, f = this._createFriendlyGlobalFunctionBinder();
          if (e3)
            e3(this), v._checkForUserDefinedFunctions(this);
          else {
            for (var h in this._isGlobal = true, v.instance = this, v.prototype)
              "function" == typeof v.prototype[h] ? (u2 = h.substring(2), this._events.hasOwnProperty(u2) || (Math.hasOwnProperty(h) && Math[h] === v.prototype[h] ? f(h, v.prototype[h]) : f(h, v.prototype[h].bind(this)))) : f(h, v.prototype[h]);
            for (var p in this)
              this.hasOwnProperty(p) && f(p, this[p]);
          }
          for (c in this._events) {
            var m = this["_on".concat(c)];
            m && (m = m.bind(this), window.addEventListener(c, m, { passive: false }), this._events[c] = m);
          }
          function y() {
            d._setProperty("focused", true);
          }
          function g() {
            d._setProperty("focused", false);
          }
          window.addEventListener("focus", y), window.addEventListener("blur", g), this.registerMethod("remove", function() {
            window.removeEventListener("focus", y), window.removeEventListener("blur", g);
          }), "complete" === document.readyState ? this._start() : window.addEventListener("load", this._start.bind(this), false);
        }
        var e2, t2;
        return e2 = v, (t2 = [{ key: "_initializeInstanceVariables", value: function() {
          this._accessibleOutputs = { text: false, grid: false, textLabel: false, gridLabel: false }, this._styles = [], this._bezierDetail = 20, this._curveDetail = 20, this._colorMode = n.RGB, this._colorMaxes = { rgb: [255, 255, 255, 255], hsb: [360, 100, 100, 1], hsl: [360, 100, 100, 1] }, this._downKeys = {};
        } }, { key: "registerPreloadMethod", value: function(e3, t3) {
          v.prototype._preloadMethods.hasOwnProperty(e3) || (v.prototype._preloadMethods[e3] = t3);
        } }, { key: "registerMethod", value: function(e3, t3) {
          var r2 = this || v.prototype;
          r2._registeredMethods.hasOwnProperty(e3) || (r2._registeredMethods[e3] = []), r2._registeredMethods[e3].push(t3);
        } }, { key: "_createFriendlyGlobalFunctionBinder", value: function() {
          var e3 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {}, r2 = e3.globalObject || window;
          e3.log || console.log.bind(console);
          return function(e4, t3) {
            v.disableFriendlyErrors, r2[e4] = t3;
          };
        } }]) && s2(e2.prototype, t2), v;
      }();
      for (l in u.instance = null, u.disableFriendlyErrors = false, n)
        u.prototype[l] = n[l];
      u.VERSION = n.VERSION, u.prototype._preloadMethods = { loadJSON: u.prototype, loadImage: u.prototype, loadStrings: u.prototype, loadXML: u.prototype, loadBytes: u.prototype, loadTable: u.prototype, loadFont: u.prototype, loadModel: u.prototype, loadShader: u.prototype }, u.prototype._registeredMethods = { init: [], pre: [], post: [], remove: [] }, u.prototype._registeredPreloadMethods = {}, r.default = u;
    }, { "./constants": 256, "./shim": 278, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.get-own-property-names": 174, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.for-each": 229, "core-js/modules/web.dom-collections.iterator": 230 }], 268: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("./main")) && e.__esModule ? e : { default: e };
      o.default.Element = function(e2, t2) {
        this.elt = e2, this._pInst = this._pixelsState = t2, this._events = {}, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight;
      }, o.default.Element.prototype.parent = function(e2) {
        return void 0 === e2 ? this.elt.parentNode : ("string" == typeof e2 ? ("#" === e2[0] && (e2 = e2.substring(1)), e2 = document.getElementById(e2)) : e2 instanceof o.default.Element && (e2 = e2.elt), e2.appendChild(this.elt), this);
      }, o.default.Element.prototype.id = function(e2) {
        return void 0 === e2 ? this.elt.id : (this.elt.id = e2, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this);
      }, o.default.Element.prototype.class = function(e2) {
        return void 0 === e2 ? this.elt.className : (this.elt.className = e2, this);
      }, o.default.Element.prototype.mousePressed = function(t2) {
        return o.default.Element._adjustListener("mousedown", function(e2) {
          return this._pInst._setProperty("mouseIsPressed", true), this._pInst._setMouseButton(e2), t2.call(this, e2);
        }, this), this;
      }, o.default.Element.prototype.doubleClicked = function(e2) {
        return o.default.Element._adjustListener("dblclick", e2, this), this;
      }, o.default.Element.prototype.mouseWheel = function(e2) {
        return o.default.Element._adjustListener("wheel", e2, this), this;
      }, o.default.Element.prototype.mouseReleased = function(e2) {
        return o.default.Element._adjustListener("mouseup", e2, this), this;
      }, o.default.Element.prototype.mouseClicked = function(e2) {
        return o.default.Element._adjustListener("click", e2, this), this;
      }, o.default.Element.prototype.mouseMoved = function(e2) {
        return o.default.Element._adjustListener("mousemove", e2, this), this;
      }, o.default.Element.prototype.mouseOver = function(e2) {
        return o.default.Element._adjustListener("mouseover", e2, this), this;
      }, o.default.Element.prototype.mouseOut = function(e2) {
        return o.default.Element._adjustListener("mouseout", e2, this), this;
      }, o.default.Element.prototype.touchStarted = function(e2) {
        return o.default.Element._adjustListener("touchstart", e2, this), this;
      }, o.default.Element.prototype.touchMoved = function(e2) {
        return o.default.Element._adjustListener("touchmove", e2, this), this;
      }, o.default.Element.prototype.touchEnded = function(e2) {
        return o.default.Element._adjustListener("touchend", e2, this), this;
      }, o.default.Element.prototype.dragOver = function(e2) {
        return o.default.Element._adjustListener("dragover", e2, this), this;
      }, o.default.Element.prototype.dragLeave = function(e2) {
        return o.default.Element._adjustListener("dragleave", e2, this), this;
      }, o.default.Element._adjustListener = function(e2, t2, r2) {
        return false === t2 ? o.default.Element._detachListener(e2, r2) : o.default.Element._attachListener(e2, t2, r2), this;
      }, o.default.Element._attachListener = function(e2, t2, r2) {
        r2._events[e2] && o.default.Element._detachListener(e2, r2);
        t2 = t2.bind(r2);
        r2.elt.addEventListener(e2, t2, false), r2._events[e2] = t2;
      }, o.default.Element._detachListener = function(e2, t2) {
        var r2 = t2._events[e2];
        t2.elt.removeEventListener(e2, r2, false), t2._events[e2] = null;
      }, o.default.Element.prototype._setProperty = function(e2, t2) {
        this[e2] = t2;
      };
      e = o.default.Element;
      r.default = e;
    }, { "./main": 267 }], 269: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.splice"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (n = e("./main")) && n.__esModule ? n : { default: n }, a = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = l();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function l() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), l = function() {
          return e2;
        }, e2);
      }
      s2.default.Graphics = function(e2, t2, r2, o2) {
        var n2, r2 = r2 || a.P2D;
        for (n2 in this.canvas = document.createElement("canvas"), (o2._userNode || document.body).appendChild(this.canvas), s2.default.Element.call(this, this.canvas, o2), s2.default.prototype)
          this[n2] || ("function" == typeof s2.default.prototype[n2] ? this[n2] = s2.default.prototype[n2].bind(this) : this[n2] = s2.default.prototype[n2]);
        return s2.default.prototype._initializeInstanceVariables.apply(this), this.width = e2, this.height = t2, this._pixelDensity = o2._pixelDensity, r2 === a.WEBGL ? this._renderer = new s2.default.RendererGL(this.canvas, this, false) : this._renderer = new s2.default.Renderer2D(this.canvas, this, false), o2._elements.push(this), Object.defineProperty(this, "deltaTime", { get: function() {
          return this._pInst.deltaTime;
        } }), this._renderer.resize(e2, t2), this._renderer._applyDefaults(), this;
      }, s2.default.Graphics.prototype = Object.create(s2.default.Element.prototype), s2.default.Graphics.prototype.reset = function() {
        this._renderer.resetMatrix(), this._renderer.isP3D && this._renderer._update();
      }, s2.default.Graphics.prototype.remove = function() {
        this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
        var e2, t2 = this._pInst._elements.indexOf(this);
        for (e2 in -1 !== t2 && this._pInst._elements.splice(t2, 1), this._events)
          this.elt.removeEventListener(e2, this._events[e2]);
      };
      var n = s2.default.Graphics;
      r.default = n;
    }, { "./constants": 256, "./main": 267, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.splice": 164, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 270: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (n = e("./main")) && n.__esModule ? n : { default: n }, k = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== l(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = i2();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function i2() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), i2 = function() {
          return e2;
        }, e2);
      }
      function l(e2) {
        return (l = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      function u(e2) {
        var t2 = 0, r2 = 0;
        if (e2.offsetParent)
          for (; t2 += e2.offsetLeft, r2 += e2.offsetTop, e2 = e2.offsetParent; )
            ;
        else
          t2 += e2.offsetLeft, r2 += e2.offsetTop;
        return [t2, r2];
      }
      a.default.Renderer = function(e2, t2, r2) {
        a.default.Element.call(this, e2, t2), this.canvas = e2, this._pixelsState = t2, r2 ? (this._isMainCanvas = true, this._pInst._setProperty("_curElement", this), this._pInst._setProperty("canvas", this.canvas), this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height)) : (this.canvas.style.display = "none", this._styles = []), this._textSize = 12, this._textLeading = 15, this._textFont = "sans-serif", this._textStyle = k.NORMAL, this._textAscent = null, this._textDescent = null, this._textAlign = k.LEFT, this._textBaseline = k.BASELINE, this._textWrap = k.WORD, this._rectMode = k.CORNER, this._ellipseMode = k.CENTER, this._curveTightness = 0, this._imageMode = k.CORNER, this._tint = null, this._doStroke = true, this._doFill = true, this._strokeSet = false, this._fillSet = false, this._leadingSet = false;
      }, a.default.Renderer.prototype = Object.create(a.default.Element.prototype), a.default.Renderer.prototype.push = function() {
        return { properties: { _doStroke: this._doStroke, _strokeSet: this._strokeSet, _doFill: this._doFill, _fillSet: this._fillSet, _tint: this._tint, _imageMode: this._imageMode, _rectMode: this._rectMode, _ellipseMode: this._ellipseMode, _textFont: this._textFont, _textLeading: this._textLeading, _leadingSet: this._leadingSet, _textSize: this._textSize, _textAlign: this._textAlign, _textBaseline: this._textBaseline, _textStyle: this._textStyle, _textWrap: this._textWrap } };
      }, a.default.Renderer.prototype.pop = function(e2) {
        e2.properties && Object.assign(this, e2.properties);
      }, a.default.Renderer.prototype.resize = function(e2, t2) {
        this.width = e2, this.height = t2, this.elt.width = e2 * this._pInst._pixelDensity, this.elt.height = t2 * this._pInst._pixelDensity, this.elt.style.width = "".concat(e2, "px"), this.elt.style.height = "".concat(t2, "px"), this._isMainCanvas && (this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height));
      }, a.default.Renderer.prototype.get = function(e2, t2, r2, o2) {
        var n2 = this._pixelsState, s2 = n2._pixelDensity, i3 = this.canvas;
        if (void 0 === e2 && void 0 === t2)
          e2 = t2 = 0, r2 = n2.width, o2 = n2.height;
        else if (e2 *= s2, t2 *= s2, void 0 === r2 && void 0 === o2)
          return e2 < 0 || t2 < 0 || e2 >= i3.width || t2 >= i3.height ? [0, 0, 0, 0] : this._getPixel(e2, t2);
        n2 = new a.default.Image(r2, o2);
        return n2.canvas.getContext("2d").drawImage(i3, e2, t2, r2 * s2, o2 * s2, 0, 0, r2, o2), n2;
      }, a.default.Renderer.prototype.textLeading = function(e2) {
        return "number" == typeof e2 ? (this._setProperty("_leadingSet", true), this._setProperty("_textLeading", e2), this._pInst) : this._textLeading;
      }, a.default.Renderer.prototype.textSize = function(e2) {
        return "number" == typeof e2 ? (this._setProperty("_textSize", e2), this._leadingSet || this._setProperty("_textLeading", e2 * k._DEFAULT_LEADMULT), this._applyTextProperties()) : this._textSize;
      }, a.default.Renderer.prototype.textStyle = function(e2) {
        return e2 ? (e2 !== k.NORMAL && e2 !== k.ITALIC && e2 !== k.BOLD && e2 !== k.BOLDITALIC || this._setProperty("_textStyle", e2), this._applyTextProperties()) : this._textStyle;
      }, a.default.Renderer.prototype.textAscent = function() {
        return null === this._textAscent && this._updateTextMetrics(), this._textAscent;
      }, a.default.Renderer.prototype.textDescent = function() {
        return null === this._textDescent && this._updateTextMetrics(), this._textDescent;
      }, a.default.Renderer.prototype.textAlign = function(e2, t2) {
        return void 0 !== e2 ? (this._setProperty("_textAlign", e2), void 0 !== t2 && this._setProperty("_textBaseline", t2), this._applyTextProperties()) : { horizontal: this._textAlign, vertical: this._textBaseline };
      }, a.default.Renderer.prototype.textWrap = function(e2) {
        return this._setProperty("_textWrap", e2), this._textWrap;
      }, a.default.Renderer.prototype.text = function(e2, t2, r2, o2, n2) {
        var s2, i3, a2, l2, u2 = this._pInst, c = this._textWrap, d = Number.MAX_VALUE, f = r2;
        if ((this._doFill || this._doStroke) && void 0 !== e2) {
          if (s2 = (e2 = (e2 = "string" != typeof e2 ? e2.toString() : e2).replace(/(\t)/g, "  ")).split("\n"), void 0 !== o2) {
            switch (this._rectMode === k.CENTER && (t2 -= o2 / 2), this._textAlign) {
              case k.CENTER:
                t2 += o2 / 2;
                break;
              case k.RIGHT:
                t2 += o2;
            }
            if (void 0 !== n2) {
              this._rectMode === k.CENTER && (r2 -= n2 / 2);
              var e2 = r2, h = u2.textAscent();
              switch (this._textBaseline) {
                case k.BOTTOM:
                  l2 = r2 + n2, r2 = Math.max(l2, r2), f += h;
                  break;
                case k.CENTER:
                  l2 = r2 + n2 / 2, r2 = Math.max(l2, r2), f += h / 2;
              }
              d = r2 + n2 - h, this._textBaseline === k.CENTER && (d = e2 + n2 - h / 2);
            } else {
              if (this._textBaseline === k.BOTTOM)
                return console.warn("textAlign(*, BOTTOM) requires x, y, width and height");
              if (this._textBaseline === k.CENTER)
                return console.warn("textAlign(*, CENTER) requires x, y, width and height");
            }
            if (c === k.WORD) {
              for (var p = [], m = 0; m < s2.length; m++) {
                for (var y = "", g = s2[m].split(" "), v = 0; v < g.length; v++)
                  i3 = "".concat(y + g[v]) + " ", y = o2 < (a2 = this.textWidth(i3)) && 0 < y.length ? (p.push(y), "".concat(g[v]) + " ") : i3;
                p.push(y);
              }
              var b = 0;
              this._textBaseline === k.CENTER ? b = (p.length - 1) * u2.textLeading() / 2 : this._textBaseline === k.BOTTOM && (b = (p.length - 1) * u2.textLeading());
              for (var j = 0; j < s2.length; j++) {
                y = "", g = s2[j].split(" ");
                for (var _ = 0; _ < g.length; _++)
                  i3 = "".concat(y + g[_]) + " ", o2 < (a2 = this.textWidth(i3)) && 0 < y.length ? (this._renderText(u2, y.trim(), t2, r2 - b, d, f), y = "".concat(g[_]) + " ", r2 += u2.textLeading()) : y = i3;
                this._renderText(u2, y.trim(), t2, r2 - b, d, f), r2 += u2.textLeading();
              }
            } else {
              for (var x = [], w = 0; w < s2.length; w++)
                for (var S = s2[w].split(y = ""), M = 0; M < S.length; M++)
                  i3 = "".concat(y + S[M]), (a2 = this.textWidth(i3)) <= o2 ? y += S[M] : o2 < a2 && 0 < y.length && (x.push(y), y = "".concat(S[M]));
              x.push(y);
              var E = 0;
              this._textBaseline === k.CENTER ? E = (x.length - 1) * u2.textLeading() / 2 : this._textBaseline === k.BOTTOM && (E = (x.length - 1) * u2.textLeading());
              for (var T = 0; T < s2.length; T++) {
                S = s2[T].split(y = "");
                for (var C = 0; C < S.length; C++)
                  i3 = "".concat(y + S[C]), (a2 = this.textWidth(i3)) <= o2 ? y += S[C] : o2 < a2 && 0 < y.length && (this._renderText(u2, y.trim(), t2, r2 - E, d, f), r2 += u2.textLeading(), y = "".concat(S[C]));
              }
              this._renderText(u2, y.trim(), t2, r2 - E, d, f), r2 += u2.textLeading();
            }
          } else {
            var O = 0;
            this._textBaseline === k.CENTER ? O = (s2.length - 1) * u2.textLeading() / 2 : this._textBaseline === k.BOTTOM && (O = (s2.length - 1) * u2.textLeading());
            for (var L = 0; L < s2.length; L++)
              this._renderText(u2, s2[L], t2, r2 - O, d, f), r2 += u2.textLeading();
          }
          return u2;
        }
      }, a.default.Renderer.prototype._applyDefaults = function() {
        return this;
      }, a.default.Renderer.prototype._isOpenType = function() {
        var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this._textFont;
        return "object" === l(e2) && e2.font && e2.font.supported;
      }, a.default.Renderer.prototype._updateTextMetrics = function() {
        var e2, t2, r2, o2, n2, s2;
        return this._isOpenType() ? (this._setProperty("_textAscent", this._textFont._textAscent()), this._setProperty("_textDescent", this._textFont._textDescent())) : ((e2 = document.createElement("span")).style.fontFamily = this._textFont, e2.style.fontSize = "".concat(this._textSize, "px"), e2.innerHTML = "ABCjgq|", (s2 = document.createElement("div")).style.display = "inline-block", s2.style.width = "1px", s2.style.height = "0px", o2 = ((t2 = document.createElement("div")).appendChild(e2), t2.appendChild(s2), t2.style.height = "0px", t2.style.overflow = "hidden", document.body.appendChild(t2), s2.style.verticalAlign = "baseline", u(s2)), n2 = u(e2), r2 = o2[1] - n2[1], o2 = (s2.style.verticalAlign = "bottom", u(s2)), n2 = u(e2), s2 = o2[1] - n2[1] - r2, document.body.removeChild(t2), this._setProperty("_textAscent", r2), this._setProperty("_textDescent", s2)), this;
      };
      var n = a.default.Renderer;
      r.default = n;
    }, { "../core/constants": 256, "./main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.object.assign": 172, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.trim": 193, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 271: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var d = (n = e("./main")) && n.__esModule ? n : { default: n }, p = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      e("./p5.Renderer");
      var h = "rgba(0,0,0,0)", n = (d.default.Renderer2D = function(e2, t2, r2) {
        return d.default.Renderer.call(this, e2, t2, r2), this.drawingContext = this.canvas.getContext("2d"), this._pInst._setProperty("drawingContext", this.drawingContext), this;
      }, d.default.Renderer2D.prototype = Object.create(d.default.Renderer.prototype), d.default.Renderer2D.prototype._applyDefaults = function() {
        this._cachedFillStyle = this._cachedStrokeStyle = void 0, this._cachedBlendMode = p.BLEND, this._setFill(p._DEFAULT_FILL), this._setStroke(p._DEFAULT_STROKE), this.drawingContext.lineCap = p.ROUND, this.drawingContext.font = "normal 12px sans-serif";
      }, d.default.Renderer2D.prototype.resize = function(e2, t2) {
        d.default.Renderer.prototype.resize.call(this, e2, t2), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
      }, d.default.Renderer2D.prototype.background = function() {
        var e2, t2;
        this.drawingContext.save(), this.resetMatrix(), (arguments.length <= 0 ? void 0 : arguments[0]) instanceof d.default.Image ? 0 <= (arguments.length <= 1 ? void 0 : arguments[1]) ? (e2 = arguments.length <= 0 ? void 0 : arguments[0], this.drawingContext.globalAlpha = (arguments.length <= 1 ? void 0 : arguments[1]) / 255, this._pInst.image(e2, 0, 0, this.width, this.height)) : this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height) : (e2 = this._getFill(), t2 = (t2 = this._pInst).color.apply(t2, arguments), this._pInst._addAccsOutput() && this._pInst._accsBackground(t2.levels), t2 = t2.toString(), this._setFill(t2), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.fillRect(0, 0, this.width, this.height), this._setFill(e2), this._isErasing && this._pInst.erase()), this.drawingContext.restore();
      }, d.default.Renderer2D.prototype.clear = function() {
        this.drawingContext.save(), this.resetMatrix(), this.drawingContext.clearRect(0, 0, this.width, this.height), this.drawingContext.restore();
      }, d.default.Renderer2D.prototype.fill = function() {
        var e2 = (e2 = this._pInst).color.apply(e2, arguments);
        this._setFill(e2.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("fill", e2.levels);
      }, d.default.Renderer2D.prototype.stroke = function() {
        var e2 = (e2 = this._pInst).color.apply(e2, arguments);
        this._setStroke(e2.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors("stroke", e2.levels);
      }, d.default.Renderer2D.prototype.erase = function(e2, t2) {
        this._isErasing || (this._cachedFillStyle = this.drawingContext.fillStyle, e2 = this._pInst.color(255, e2).toString(), this.drawingContext.fillStyle = e2, this._cachedStrokeStyle = this.drawingContext.strokeStyle, e2 = this._pInst.color(255, t2).toString(), this.drawingContext.strokeStyle = e2, t2 = this._cachedBlendMode, this.blendMode(p.REMOVE), this._cachedBlendMode = t2, this._isErasing = true);
      }, d.default.Renderer2D.prototype.noErase = function() {
        this._isErasing && (this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode), this._isErasing = false);
      }, d.default.Renderer2D.prototype.image = function(e2, t2, r2, o2, n2, s2, i3, a2, l) {
        e2.gifProperties && e2._animateGif(this._pInst);
        try {
          var u = (u = this._tint && e2.canvas ? this._getTintedImageCanvas(e2) : u) || e2.canvas || e2.elt, c = 1;
          e2.width && 0 < e2.width && (c = u.width / e2.width), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.drawImage(u, c * t2, c * r2, c * o2, c * n2, s2, i3, a2, l), this._isErasing && this._pInst.erase();
        } catch (e3) {
          if ("NS_ERROR_NOT_AVAILABLE" !== e3.name)
            throw e3;
        }
      }, d.default.Renderer2D.prototype._getTintedImageCanvas = function(e2) {
        if (!e2.canvas)
          return e2;
        e2.tintCanvas || (e2.tintCanvas = document.createElement("canvas")), e2.tintCanvas.width !== e2.canvas.width && (e2.tintCanvas.width = e2.canvas.width), e2.tintCanvas.height !== e2.canvas.height && (e2.tintCanvas.height = e2.canvas.height);
        var t2 = e2.tintCanvas.getContext("2d");
        return t2.save(), t2.clearRect(0, 0, e2.canvas.width, e2.canvas.height), (this._tint[0] < 255 || this._tint[1] < 255 || this._tint[2] < 255) && (t2.drawImage(e2.canvas, 0, 0), t2.globalCompositeOperation = "luminosity", t2.drawImage(e2.canvas, 0, 0), t2.globalCompositeOperation = "color", t2.drawImage(e2.canvas, 0, 0), t2.globalCompositeOperation = "multiply", t2.fillStyle = "rgb(".concat(this._tint.slice(0, 3).join(", "), ")"), t2.fillRect(0, 0, e2.canvas.width, e2.canvas.height), t2.globalCompositeOperation = "destination-in"), t2.globalAlpha = this._tint[3] / 255, t2.drawImage(e2.canvas, 0, 0), t2.restore(), e2.tintCanvas;
      }, d.default.Renderer2D.prototype.blendMode = function(e2) {
        if (e2 === p.SUBTRACT)
          console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");
        else {
          if (e2 !== p.BLEND && e2 !== p.REMOVE && e2 !== p.DARKEST && e2 !== p.LIGHTEST && e2 !== p.DIFFERENCE && e2 !== p.MULTIPLY && e2 !== p.EXCLUSION && e2 !== p.SCREEN && e2 !== p.REPLACE && e2 !== p.OVERLAY && e2 !== p.HARD_LIGHT && e2 !== p.SOFT_LIGHT && e2 !== p.DODGE && e2 !== p.BURN && e2 !== p.ADD)
            throw new Error("Mode ".concat(e2, " not recognized."));
          this._cachedBlendMode = e2, this.drawingContext.globalCompositeOperation = e2;
        }
      }, d.default.Renderer2D.prototype.blend = function() {
        for (var e2 = this.drawingContext.globalCompositeOperation, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        var n2 = r2[r2.length - 1], s2 = Array.prototype.slice.call(r2, 0, r2.length - 1);
        this.drawingContext.globalCompositeOperation = n2, d.default.prototype.copy.apply(this, s2), this.drawingContext.globalCompositeOperation = e2;
      }, d.default.Renderer2D.prototype._getPixel = function(e2, t2) {
        e2 = this.drawingContext.getImageData(e2, t2, 1, 1).data;
        return [e2[0], e2[1], e2[2], e2[3]];
      }, d.default.Renderer2D.prototype.loadPixels = function() {
        var e2 = this._pixelsState, t2 = e2._pixelDensity, r2 = this.width * t2, t2 = this.height * t2, r2 = this.drawingContext.getImageData(0, 0, r2, t2);
        e2._setProperty("imageData", r2), e2._setProperty("pixels", r2.data);
      }, d.default.Renderer2D.prototype.set = function(e2, t2, r2) {
        e2 = Math.floor(e2), t2 = Math.floor(t2);
        var o2 = this._pixelsState;
        if (r2 instanceof d.default.Image)
          this.drawingContext.save(), this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(o2._pixelDensity, o2._pixelDensity), this.drawingContext.clearRect(e2, t2, r2.width, r2.height), this.drawingContext.drawImage(r2.canvas, e2, t2), this.drawingContext.restore();
        else {
          var n2 = 0, s2 = 0, i3 = 0, a2 = 0, l = 4 * (t2 * o2._pixelDensity * (this.width * o2._pixelDensity) + e2 * o2._pixelDensity);
          if (o2.imageData || o2.loadPixels.call(o2), "number" == typeof r2)
            l < o2.pixels.length && (i3 = s2 = n2 = r2, a2 = 255);
          else if (r2 instanceof Array) {
            if (r2.length < 4)
              throw new Error("pixel array must be of the form [R, G, B, A]");
            l < o2.pixels.length && (n2 = r2[0], s2 = r2[1], i3 = r2[2], a2 = r2[3]);
          } else
            r2 instanceof d.default.Color && l < o2.pixels.length && (n2 = r2.levels[0], s2 = r2.levels[1], i3 = r2.levels[2], a2 = r2.levels[3]);
          for (var u = 0; u < o2._pixelDensity; u++)
            for (var c = 0; c < o2._pixelDensity; c++)
              l = 4 * ((t2 * o2._pixelDensity + c) * this.width * o2._pixelDensity + (e2 * o2._pixelDensity + u)), o2.pixels[l] = n2, o2.pixels[l + 1] = s2, o2.pixels[l + 2] = i3, o2.pixels[l + 3] = a2;
        }
      }, d.default.Renderer2D.prototype.updatePixels = function(e2, t2, r2, o2) {
        var n2 = this._pixelsState, s2 = n2._pixelDensity;
        void 0 === e2 && void 0 === t2 && void 0 === r2 && void 0 === o2 && (t2 = e2 = 0, r2 = this.width, o2 = this.height), e2 *= s2, t2 *= s2, r2 *= s2, o2 *= s2, this.gifProperties && (this.gifProperties.frames[this.gifProperties.displayIndex].image = n2.imageData), this.drawingContext.putImageData(n2.imageData, e2, t2, 0, 0, r2, o2);
      }, d.default.Renderer2D.prototype._acuteArcToBezier = function(e2, t2) {
        var r2 = t2 / 2, o2 = Math.cos(r2), n2 = Math.sin(r2), s2 = 1 / Math.tan(r2), r2 = e2 + r2, i3 = Math.cos(r2), r2 = Math.sin(r2), a2 = (4 - o2) / 3, n2 = n2 + (o2 - a2) * s2;
        return { ax: Math.cos(e2).toFixed(7), ay: Math.sin(e2).toFixed(7), bx: (a2 * i3 + n2 * r2).toFixed(7), by: (a2 * r2 - n2 * i3).toFixed(7), cx: (a2 * i3 - n2 * r2).toFixed(7), cy: (a2 * r2 + n2 * i3).toFixed(7), dx: Math.cos(e2 + t2).toFixed(7), dy: Math.sin(e2 + t2).toFixed(7) };
      }, d.default.Renderer2D.prototype.arc = function(r2, o2, e2, t2, n2, s2, i3) {
        var a2, l = this.drawingContext, u = e2 / 2, c = t2 / 2, d2 = [];
        for (r2 += u, o2 += c; 1e-5 <= s2 - n2; )
          a2 = Math.min(s2 - n2, p.HALF_PI), d2.push(this._acuteArcToBezier(n2, a2)), n2 += a2;
        return this._doFill && (l.beginPath(), d2.forEach(function(e3, t3) {
          0 === t3 && l.moveTo(r2 + e3.ax * u, o2 + e3.ay * c), l.bezierCurveTo(r2 + e3.bx * u, o2 + e3.by * c, r2 + e3.cx * u, o2 + e3.cy * c, r2 + e3.dx * u, o2 + e3.dy * c);
        }), i3 !== p.PIE && null != i3 || l.lineTo(r2, o2), l.closePath(), l.fill()), this._doStroke && (l.beginPath(), d2.forEach(function(e3, t3) {
          0 === t3 && l.moveTo(r2 + e3.ax * u, o2 + e3.ay * c), l.bezierCurveTo(r2 + e3.bx * u, o2 + e3.by * c, r2 + e3.cx * u, o2 + e3.cy * c, r2 + e3.dx * u, o2 + e3.dy * c);
        }), i3 === p.PIE ? (l.lineTo(r2, o2), l.closePath()) : i3 === p.CHORD && l.closePath(), l.stroke()), this;
      }, d.default.Renderer2D.prototype.ellipse = function(e2) {
        var t2 = this.drawingContext, r2 = this._doFill, o2 = this._doStroke, n2 = parseFloat(e2[0]), s2 = parseFloat(e2[1]), i3 = parseFloat(e2[2]), e2 = parseFloat(e2[3]);
        if (r2 && !o2) {
          if (this._getFill() === h)
            return this;
        } else if (!r2 && o2 && this._getStroke() === h)
          return this;
        var a2 = i3 / 2 * 0.5522847498, l = e2 / 2 * 0.5522847498, u = n2 + i3, c = s2 + e2, i3 = n2 + i3 / 2, e2 = s2 + e2 / 2;
        t2.beginPath(), t2.moveTo(n2, e2), t2.bezierCurveTo(n2, e2 - l, i3 - a2, s2, i3, s2), t2.bezierCurveTo(i3 + a2, s2, u, e2 - l, u, e2), t2.bezierCurveTo(u, e2 + l, i3 + a2, c, i3, c), t2.bezierCurveTo(i3 - a2, c, n2, e2 + l, n2, e2), r2 && t2.fill(), o2 && t2.stroke();
      }, d.default.Renderer2D.prototype.line = function(e2, t2, r2, o2) {
        var n2 = this.drawingContext;
        return this._doStroke && this._getStroke() !== h && (n2.beginPath(), n2.moveTo(e2, t2), n2.lineTo(r2, o2), n2.stroke()), this;
      }, d.default.Renderer2D.prototype.point = function(e2, t2) {
        var r2, o2, n2 = this.drawingContext;
        return !this._doStroke || this._getStroke() === h ? this : (r2 = this._getStroke(), o2 = this._getFill(), this._setFill(r2), n2.beginPath(), n2.arc(e2, t2, n2.lineWidth / 2, 0, p.TWO_PI, false), n2.fill(), void this._setFill(o2));
      }, d.default.Renderer2D.prototype.quad = function(e2, t2, r2, o2, n2, s2, i3, a2) {
        var l = this.drawingContext, u = this._doFill, c = this._doStroke;
        if (u && !c) {
          if (this._getFill() === h)
            return this;
        } else if (!u && c && this._getStroke() === h)
          return this;
        return l.beginPath(), l.moveTo(e2, t2), l.lineTo(r2, o2), l.lineTo(n2, s2), l.lineTo(i3, a2), l.closePath(), u && l.fill(), c && l.stroke(), this;
      }, d.default.Renderer2D.prototype.rect = function(e2) {
        var t2, r2, o2 = e2[0], n2 = e2[1], s2 = e2[2], i3 = e2[3], a2 = e2[4], l = e2[5], u = e2[6], e2 = e2[7], c = this.drawingContext, d2 = this._doFill, f = this._doStroke;
        if (d2 && !f) {
          if (this._getFill() === h)
            return this;
        } else if (!d2 && f && this._getStroke() === h)
          return this;
        return c.beginPath(), void 0 === a2 ? c.rect(o2, n2, s2, i3) : (void 0 === l && (l = a2), void 0 === u && (u = l), void 0 === e2 && (e2 = u), f = (d2 = Math.abs(s2)) / 2, r2 = (t2 = Math.abs(i3)) / 2, t2 < 2 * (a2 = d2 < 2 * a2 ? f : a2) && (a2 = r2), t2 < 2 * (l = d2 < 2 * l ? f : l) && (l = r2), t2 < 2 * (u = d2 < 2 * u ? f : u) && (u = r2), t2 < 2 * (e2 = d2 < 2 * e2 ? f : e2) && (e2 = r2), c.beginPath(), c.moveTo(o2 + a2, n2), c.arcTo(o2 + s2, n2, o2 + s2, n2 + i3, l), c.arcTo(o2 + s2, n2 + i3, o2, n2 + i3, u), c.arcTo(o2, n2 + i3, o2, n2, e2), c.arcTo(o2, n2, o2 + s2, n2, a2), c.closePath()), this._doFill && c.fill(), this._doStroke && c.stroke(), this;
      }, d.default.Renderer2D.prototype.triangle = function(e2) {
        var t2 = this.drawingContext, r2 = this._doFill, o2 = this._doStroke, n2 = e2[0], s2 = e2[1], i3 = e2[2], a2 = e2[3], l = e2[4], e2 = e2[5];
        if (r2 && !o2) {
          if (this._getFill() === h)
            return this;
        } else if (!r2 && o2 && this._getStroke() === h)
          return this;
        t2.beginPath(), t2.moveTo(n2, s2), t2.lineTo(i3, a2), t2.lineTo(l, e2), t2.closePath(), r2 && t2.fill(), o2 && t2.stroke();
      }, d.default.Renderer2D.prototype.endShape = function(e2, t2, r2, o2, n2, s2, i3) {
        if (0 !== t2.length && (this._doStroke || this._doFill)) {
          var a2, l, u, c = e2 === p.CLOSE, d2 = (c && !s2 && t2.push(t2[0]), t2.length);
          if (!r2 || i3 !== p.POLYGON && null !== i3)
            if (!o2 || i3 !== p.POLYGON && null !== i3)
              if (!n2 || i3 !== p.POLYGON && null !== i3)
                if (i3 === p.POINTS)
                  for (l = 0; l < d2; l++)
                    a2 = t2[l], this._doStroke && this._pInst.stroke(a2[6]), this._pInst.point(a2[0], a2[1]);
                else if (i3 === p.LINES)
                  for (l = 0; l + 1 < d2; l += 2)
                    a2 = t2[l], this._doStroke && this._pInst.stroke(t2[l + 1][6]), this._pInst.line(a2[0], a2[1], t2[l + 1][0], t2[l + 1][1]);
                else if (i3 === p.TRIANGLES)
                  for (l = 0; l + 2 < d2; l += 3)
                    a2 = t2[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(a2[0], a2[1]), this.drawingContext.lineTo(t2[l + 1][0], t2[l + 1][1]), this.drawingContext.lineTo(t2[l + 2][0], t2[l + 2][1]), this.drawingContext.closePath(), this._doFill && (this._pInst.fill(t2[l + 2][5]), this.drawingContext.fill()), this._doStroke && (this._pInst.stroke(t2[l + 2][6]), this.drawingContext.stroke());
                else if (i3 === p.TRIANGLE_STRIP)
                  for (l = 0; l + 1 < d2; l++)
                    a2 = t2[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(t2[l + 1][0], t2[l + 1][1]), this.drawingContext.lineTo(a2[0], a2[1]), this._doStroke && this._pInst.stroke(t2[l + 1][6]), this._doFill && this._pInst.fill(t2[l + 1][5]), l + 2 < d2 && (this.drawingContext.lineTo(t2[l + 2][0], t2[l + 2][1]), this._doStroke && this._pInst.stroke(t2[l + 2][6]), this._doFill && this._pInst.fill(t2[l + 2][5])), this._doFillStrokeClose(c);
                else if (i3 === p.TRIANGLE_FAN) {
                  if (2 < d2) {
                    for (this.drawingContext.beginPath(), l = 2; l < d2; l++)
                      a2 = t2[l], this.drawingContext.moveTo(t2[0][0], t2[0][1]), this.drawingContext.lineTo(t2[l - 1][0], t2[l - 1][1]), this.drawingContext.lineTo(a2[0], a2[1]), this.drawingContext.lineTo(t2[0][0], t2[0][1]), l < d2 - 1 && (this._doFill && a2[5] !== t2[l + 1][5] || this._doStroke && a2[6] !== t2[l + 1][6]) && (this._doFill && (this._pInst.fill(a2[5]), this.drawingContext.fill(), this._pInst.fill(t2[l + 1][5])), this._doStroke && (this._pInst.stroke(a2[6]), this.drawingContext.stroke(), this._pInst.stroke(t2[l + 1][6])), this.drawingContext.closePath(), this.drawingContext.beginPath());
                    this._doFillStrokeClose(c);
                  }
                } else if (i3 === p.QUADS)
                  for (l = 0; l + 3 < d2; l += 4) {
                    for (a2 = t2[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(a2[0], a2[1]), u = 1; u < 4; u++)
                      this.drawingContext.lineTo(t2[l + u][0], t2[l + u][1]);
                    this.drawingContext.lineTo(a2[0], a2[1]), this._doFill && this._pInst.fill(t2[l + 3][5]), this._doStroke && this._pInst.stroke(t2[l + 3][6]), this._doFillStrokeClose(c);
                  }
                else if (i3 === p.QUAD_STRIP) {
                  if (3 < d2)
                    for (l = 0; l + 1 < d2; l += 2)
                      a2 = t2[l], this.drawingContext.beginPath(), l + 3 < d2 ? (this.drawingContext.moveTo(t2[l + 2][0], t2[l + 2][1]), this.drawingContext.lineTo(a2[0], a2[1]), this.drawingContext.lineTo(t2[l + 1][0], t2[l + 1][1]), this.drawingContext.lineTo(t2[l + 3][0], t2[l + 3][1]), this._doFill && this._pInst.fill(t2[l + 3][5]), this._doStroke && this._pInst.stroke(t2[l + 3][6])) : (this.drawingContext.moveTo(a2[0], a2[1]), this.drawingContext.lineTo(t2[l + 1][0], t2[l + 1][1])), this._doFillStrokeClose(c);
                } else {
                  for (this.drawingContext.beginPath(), this.drawingContext.moveTo(t2[0][0], t2[0][1]), l = 1; l < d2; l++)
                    (a2 = t2[l]).isVert && (a2.moveTo ? this.drawingContext.moveTo(a2[0], a2[1]) : this.drawingContext.lineTo(a2[0], a2[1]));
                  this._doFillStrokeClose(c);
                }
              else {
                for (this.drawingContext.beginPath(), l = 0; l < d2; l++)
                  t2[l].isVert ? t2[l].moveTo ? this.drawingContext.moveTo(t2[l][0], t2[l][1]) : this.drawingContext.lineTo(t2[l][0], t2[l][1]) : this.drawingContext.quadraticCurveTo(t2[l][0], t2[l][1], t2[l][2], t2[l][3]);
                this._doFillStrokeClose(c);
              }
            else {
              for (this.drawingContext.beginPath(), l = 0; l < d2; l++)
                t2[l].isVert ? t2[l].moveTo ? this.drawingContext.moveTo(t2[l][0], t2[l][1]) : this.drawingContext.lineTo(t2[l][0], t2[l][1]) : this.drawingContext.bezierCurveTo(t2[l][0], t2[l][1], t2[l][2], t2[l][3], t2[l][4], t2[l][5]);
              this._doFillStrokeClose(c);
            }
          else if (3 < d2) {
            var f = [], h2 = 1 - this._curveTightness;
            for (this.drawingContext.beginPath(), this.drawingContext.moveTo(t2[1][0], t2[1][1]), l = 1; l + 2 < d2; l++)
              a2 = t2[l], f[0] = [a2[0], a2[1]], f[1] = [a2[0] + (h2 * t2[l + 1][0] - h2 * t2[l - 1][0]) / 6, a2[1] + (h2 * t2[l + 1][1] - h2 * t2[l - 1][1]) / 6], f[2] = [t2[l + 1][0] + (h2 * t2[l][0] - h2 * t2[l + 2][0]) / 6, t2[l + 1][1] + (h2 * t2[l][1] - h2 * t2[l + 2][1]) / 6], f[3] = [t2[l + 1][0], t2[l + 1][1]], this.drawingContext.bezierCurveTo(f[1][0], f[1][1], f[2][0], f[2][1], f[3][0], f[3][1]);
            c && this.drawingContext.lineTo(t2[l + 1][0], t2[l + 1][1]), this._doFillStrokeClose(c);
          }
          s2 = n2 = o2 = r2 = false, c && t2.pop();
        }
        return this;
      }, d.default.Renderer2D.prototype.strokeCap = function(e2) {
        return e2 !== p.ROUND && e2 !== p.SQUARE && e2 !== p.PROJECT || (this.drawingContext.lineCap = e2), this;
      }, d.default.Renderer2D.prototype.strokeJoin = function(e2) {
        return e2 !== p.ROUND && e2 !== p.BEVEL && e2 !== p.MITER || (this.drawingContext.lineJoin = e2), this;
      }, d.default.Renderer2D.prototype.strokeWeight = function(e2) {
        return this.drawingContext.lineWidth = void 0 === e2 || 0 === e2 ? 1e-4 : e2, this;
      }, d.default.Renderer2D.prototype._getFill = function() {
        return this._cachedFillStyle || (this._cachedFillStyle = this.drawingContext.fillStyle), this._cachedFillStyle;
      }, d.default.Renderer2D.prototype._setFill = function(e2) {
        e2 !== this._cachedFillStyle && (this.drawingContext.fillStyle = e2, this._cachedFillStyle = e2);
      }, d.default.Renderer2D.prototype._getStroke = function() {
        return this._cachedStrokeStyle || (this._cachedStrokeStyle = this.drawingContext.strokeStyle), this._cachedStrokeStyle;
      }, d.default.Renderer2D.prototype._setStroke = function(e2) {
        e2 !== this._cachedStrokeStyle && (this.drawingContext.strokeStyle = e2, this._cachedStrokeStyle = e2);
      }, d.default.Renderer2D.prototype.bezier = function(e2, t2, r2, o2, n2, s2, i3, a2) {
        return this._pInst.beginShape(), this._pInst.vertex(e2, t2), this._pInst.bezierVertex(r2, o2, n2, s2, i3, a2), this._pInst.endShape(), this;
      }, d.default.Renderer2D.prototype.curve = function(e2, t2, r2, o2, n2, s2, i3, a2) {
        return this._pInst.beginShape(), this._pInst.curveVertex(e2, t2), this._pInst.curveVertex(r2, o2), this._pInst.curveVertex(n2, s2), this._pInst.curveVertex(i3, a2), this._pInst.endShape(), this;
      }, d.default.Renderer2D.prototype._doFillStrokeClose = function(e2) {
        e2 && this.drawingContext.closePath(), this._doFill && this.drawingContext.fill(), this._doStroke && this.drawingContext.stroke();
      }, d.default.Renderer2D.prototype.applyMatrix = function(e2, t2, r2, o2, n2, s2) {
        this.drawingContext.transform(e2, t2, r2, o2, n2, s2);
      }, d.default.Renderer2D.prototype.resetMatrix = function() {
        return this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), this;
      }, d.default.Renderer2D.prototype.rotate = function(e2) {
        this.drawingContext.rotate(e2);
      }, d.default.Renderer2D.prototype.scale = function(e2, t2) {
        return this.drawingContext.scale(e2, t2), this;
      }, d.default.Renderer2D.prototype.translate = function(e2, t2) {
        return e2 instanceof d.default.Vector && (t2 = e2.y, e2 = e2.x), this.drawingContext.translate(e2, t2), this;
      }, d.default.Renderer2D.prototype.text = function(e2, t2, r2, o2, n2) {
        void 0 !== o2 && this.drawingContext.textBaseline === p.BASELINE && (s2 = true, this.drawingContext.textBaseline = p.TOP);
        var s2, o2 = d.default.Renderer.prototype.text.apply(this, arguments);
        return s2 && (this.drawingContext.textBaseline = p.BASELINE), o2;
      }, d.default.Renderer2D.prototype._renderText = function(e2, t2, r2, o2, n2, s2) {
        if (!(o2 < s2 || n2 <= o2))
          return e2.push(), this._isOpenType() ? this._textFont._renderPath(t2, r2, o2, { renderer: this }) : (this._doStroke && this._strokeSet && this.drawingContext.strokeText(t2, r2, o2), this._doFill && (this._fillSet || this._setFill(p._DEFAULT_TEXT_FILL), this.drawingContext.fillText(t2, r2, o2))), e2.pop(), e2;
      }, d.default.Renderer2D.prototype.textWidth = function(e2) {
        return this._isOpenType() ? this._textFont._textWidth(e2, this._textSize) : this.drawingContext.measureText(e2).width;
      }, d.default.Renderer2D.prototype._applyTextProperties = function() {
        var e2, t2 = this._pInst;
        return this._setProperty("_textAscent", null), this._setProperty("_textDescent", null), e2 = this._textFont, this._isOpenType() && (e2 = this._textFont.font.familyName, this._setProperty("_textStyle", this._textFont.font.styleName)), this.drawingContext.font = "".concat(this._textStyle || "normal", " ").concat(this._textSize || 12, "px ").concat(e2 || "sans-serif"), this.drawingContext.textAlign = this._textAlign, this._textBaseline === p.CENTER ? this.drawingContext.textBaseline = p._CTX_MIDDLE : this.drawingContext.textBaseline = this._textBaseline, t2;
      }, d.default.Renderer2D.prototype.push = function() {
        return this.drawingContext.save(), d.default.Renderer.prototype.push.apply(this);
      }, d.default.Renderer2D.prototype.pop = function(e2) {
        this.drawingContext.restore(), this._cachedFillStyle = this.drawingContext.fillStyle, this._cachedStrokeStyle = this.drawingContext.strokeStyle, d.default.Renderer.prototype.pop.call(this, e2);
      }, d.default.Renderer2D);
      r.default = n;
    }, { "./constants": 256, "./main": 267, "./p5.Renderer": 270, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.slice": 162, "core-js/modules/es.function.name": 165, "core-js/modules/es.number.to-fixed": 171, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 272: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator");
      var f = (e = e("./main")) && e.__esModule ? e : { default: e };
      f.default.prototype._promisePreloads = [];
      function s2() {
        return {};
      }
      var h = !(f.default.prototype.registerPromisePreload = function(e2) {
        f.default.prototype._promisePreloads.push(e2);
      });
      f.default.prototype._setupPromisePreloads = function() {
        var e2 = true, t2 = false, r2 = void 0;
        try {
          for (var o, n = this._promisePreloads[Symbol.iterator](); !(e2 = (o = n.next()).done); e2 = true) {
            var s3 = o.value, i2 = this, a = s3.method, l = s3.addCallbacks, u = s3.legacyPreloadSetup, c = s3.target || this, d = c[a].bind(c);
            if (c === f.default.prototype) {
              if (h)
                continue;
              i2 = null, d = c[a];
            }
            c[a] = this._wrapPromisePreload(i2, d, l), u && (c[u.method] = this._legacyPreloadGenerator(i2, u, c[a]));
          }
        } catch (e3) {
          t2 = true, r2 = e3;
        } finally {
          try {
            e2 || null == n.return || n.return();
          } finally {
            if (t2)
              throw r2;
          }
        }
        h = true;
      }, f.default.prototype._wrapPromisePreload = function(e2, l, u) {
        var t2 = function() {
          for (var e3 = this, t3 = (this._incrementPreload(), null), r2 = null, o = arguments.length, n = new Array(o), s3 = 0; s3 < o; s3++)
            n[s3] = arguments[s3];
          if (u)
            for (var i2 = n.length - 1; 0 <= i2 && !r2 && "function" == typeof n[i2]; i2--)
              r2 = t3, t3 = n.pop();
          var a = Promise.resolve(l.apply(this, n));
          return t3 && a.then(t3), r2 && a.catch(r2), a.then(function() {
            return e3._decrementPreload();
          }), a;
        };
        return t2 = e2 ? t2.bind(e2) : t2;
      };
      f.default.prototype._legacyPreloadGenerator = function(e2, t2, o) {
        var n = t2.createBaseObject || s2, t2 = function() {
          var t3 = this, r2 = (this._incrementPreload(), n.apply(this, arguments));
          return o.apply(this, arguments).then(function(e3) {
            Object.assign(r2, e3), t3._decrementPreload();
          }), r2;
        };
        return t2 = e2 ? t2.bind(e2) : t2;
      };
    }, { "./main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.assign": 172, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.iterator": 230 }], 273: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (n = e("./main")) && n.__esModule ? n : { default: n }, l = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== u(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = i2();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("./constants"));
      function i2() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), i2 = function() {
          return e2;
        }, e2);
      }
      function u(e2) {
        return (u = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("./p5.Graphics"), e("./p5.Renderer2D"), e("../webgl/p5.RendererGL");
      var c = "defaultCanvas0", n = (a.default.prototype.createCanvas = function(e2, t2, r2) {
        a.default._validateParameters("createCanvas", arguments);
        var o2, n2, s2, r2 = r2 || l.P2D;
        if (r2 === l.WEBGL)
          (n2 = document.getElementById(c)) && (n2.parentNode.removeChild(n2), o2 = this._renderer, this._elements = this._elements.filter(function(e3) {
            return e3 !== o2;
          })), (n2 = document.createElement("canvas")).id = c, n2.classList.add("p5Canvas");
        else if (this._defaultGraphicsCreated)
          n2 = this.canvas;
        else {
          n2 = document.createElement("canvas");
          for (var i3 = 0; document.getElementById("defaultCanvas".concat(i3)); )
            i3++;
          c = "defaultCanvas".concat(i3), n2.id = c, n2.classList.add("p5Canvas");
        }
        return this._setupDone || (n2.dataset.hidden = true, n2.style.visibility = "hidden"), (this._userNode || (0 === document.getElementsByTagName("main").length && (s2 = document.createElement("main"), document.body.appendChild(s2)), document.getElementsByTagName("main")[0])).appendChild(n2), r2 === l.WEBGL ? (this._setProperty("_renderer", new a.default.RendererGL(n2, this, true)), this._elements.push(this._renderer)) : this._defaultGraphicsCreated || (this._setProperty("_renderer", new a.default.Renderer2D(n2, this, true)), this._defaultGraphicsCreated = true, this._elements.push(this._renderer)), this._renderer.resize(e2, t2), this._renderer._applyDefaults(), this._renderer;
      }, a.default.prototype.resizeCanvas = function(e2, t2, r2) {
        if (a.default._validateParameters("resizeCanvas", arguments), this._renderer) {
          var o2, n2, s2 = {};
          for (o2 in this.drawingContext) {
            var i3 = this.drawingContext[o2];
            "object" !== u(i3) && "function" != typeof i3 && (s2[o2] = i3);
          }
          for (n2 in this._renderer.resize(e2, t2), this.width = e2, this.height = t2, s2)
            try {
              this.drawingContext[n2] = s2[n2];
            } catch (e3) {
            }
          r2 || this.redraw();
        }
        this._addAccsOutput() && this._updateAccsOutput();
      }, a.default.prototype.noCanvas = function() {
        this.canvas && this.canvas.parentNode.removeChild(this.canvas);
      }, a.default.prototype.createGraphics = function(e2, t2, r2) {
        return a.default._validateParameters("createGraphics", arguments), new a.default.Graphics(e2, t2, r2, this);
      }, a.default.prototype.blendMode = function(e2) {
        a.default._validateParameters("blendMode", arguments), e2 === l.NORMAL && (console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead."), e2 = l.BLEND), this._renderer.blendMode(e2);
      }, a.default);
      r.default = n;
    }, { "../webgl/p5.RendererGL": 321, "./constants": 256, "./main": 267, "./p5.Graphics": 269, "./p5.Renderer2D": 271, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 274: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.slice"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = n(e("../main")), a = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = c();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../constants")), u = n(e("../helpers"));
      function c() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), c = function() {
          return e2;
        }, e2);
      }
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      e("../friendly_errors/fes_core"), e("../friendly_errors/file_errors"), e("../friendly_errors/validate_params"), l.default.prototype._normalizeArcAngles = function(e2, t2, r2, o2, n2) {
        var s2;
        return e2 -= a.TWO_PI * Math.floor(e2 / a.TWO_PI), t2 -= a.TWO_PI * Math.floor(t2 / a.TWO_PI), s2 = Math.min(Math.abs(e2 - t2), a.TWO_PI - Math.abs(e2 - t2)), n2 && (e2 = e2 <= a.HALF_PI ? Math.atan(r2 / o2 * Math.tan(e2)) : e2 > a.HALF_PI && e2 <= 3 * a.HALF_PI ? Math.atan(r2 / o2 * Math.tan(e2)) + a.PI : Math.atan(r2 / o2 * Math.tan(e2)) + a.TWO_PI, t2 = t2 <= a.HALF_PI ? Math.atan(r2 / o2 * Math.tan(t2)) : t2 > a.HALF_PI && t2 <= 3 * a.HALF_PI ? Math.atan(r2 / o2 * Math.tan(t2)) + a.PI : Math.atan(r2 / o2 * Math.tan(t2)) + a.TWO_PI), t2 < e2 && (t2 += a.TWO_PI), { start: e2, stop: t2, correspondToSamePoint: s2 < 1e-5 };
      }, l.default.prototype.arc = function(e2, t2, r2, o2, n2, s2, i3, a2) {
        return l.default._validateParameters("arc", arguments), (this._renderer._doStroke || this._renderer._doFill) && n2 !== s2 && (n2 = this._toRadians(n2), s2 = this._toRadians(s2), r2 = Math.abs(r2), o2 = Math.abs(o2), e2 = u.default.modeAdjust(e2, t2, r2, o2, this._renderer._ellipseMode), (t2 = this._normalizeArcAngles(n2, s2, e2.w, e2.h, true)).correspondToSamePoint ? this._renderer.ellipse([e2.x, e2.y, e2.w, e2.h, a2]) : (this._renderer.arc(e2.x, e2.y, e2.w, e2.h, t2.start, t2.stop, i3, a2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("arc", [e2.x, e2.y, e2.w, e2.h, t2.start, t2.stop, i3]))), this;
      }, l.default.prototype.ellipse = function(e2, t2, r2, o2, n2) {
        return l.default._validateParameters("ellipse", arguments), this._renderEllipse.apply(this, arguments);
      }, l.default.prototype.circle = function() {
        l.default._validateParameters("circle", arguments);
        var e2 = Array.prototype.slice.call(arguments, 0, 2);
        return e2.push(arguments[2]), e2.push(arguments[2]), this._renderEllipse.apply(this, e2);
      }, l.default.prototype._renderEllipse = function(e2, t2, r2, o2, n2) {
        return (this._renderer._doStroke || this._renderer._doFill) && (r2 < 0 && (r2 = Math.abs(r2)), void 0 === o2 ? o2 = r2 : o2 < 0 && (o2 = Math.abs(o2)), e2 = u.default.modeAdjust(e2, t2, r2, o2, this._renderer._ellipseMode), this._renderer.ellipse([e2.x, e2.y, e2.w, e2.h, n2]), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("ellipse", [e2.x, e2.y, e2.w, e2.h])), this;
      }, l.default.prototype.line = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return l.default._validateParameters("line", r2), this._renderer._doStroke && (e2 = this._renderer).line.apply(e2, r2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("line", r2), this;
      }, l.default.prototype.point = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return l.default._validateParameters("point", r2), this._renderer._doStroke && (1 === r2.length && r2[0] instanceof l.default.Vector ? this._renderer.point.call(this._renderer, r2[0].x, r2[0].y, r2[0].z) : ((e2 = this._renderer).point.apply(e2, r2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("point", r2))), this;
      }, l.default.prototype.quad = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return l.default._validateParameters("quad", r2), (this._renderer._doStroke || this._renderer._doFill) && (this._renderer.isP3D && r2.length <= 12 ? this._renderer.quad.call(this._renderer, r2[0], r2[1], 0, r2[2], r2[3], 0, r2[4], r2[5], 0, r2[6], r2[7], 0, r2[8], r2[9]) : ((e2 = this._renderer).quad.apply(e2, r2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("quadrilateral", r2))), this;
      }, l.default.prototype.rect = function() {
        return l.default._validateParameters("rect", arguments), this._renderRect.apply(this, arguments);
      }, l.default.prototype.square = function(e2, t2, r2, o2, n2, s2, i3) {
        return l.default._validateParameters("square", arguments), this._renderRect.call(this, e2, t2, r2, r2, o2, n2, s2, i3);
      }, l.default.prototype._renderRect = function() {
        if (this._renderer._doStroke || this._renderer._doFill) {
          3 === arguments.length && (arguments[3] = arguments[2]);
          for (var e2 = u.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode), t2 = [e2.x, e2.y, e2.w, e2.h], r2 = 4; r2 < arguments.length; r2++)
            t2[r2] = arguments[r2];
          this._renderer.rect(t2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("rectangle", [e2.x, e2.y, e2.w, e2.h]);
        }
        return this;
      }, l.default.prototype.triangle = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return l.default._validateParameters("triangle", t2), (this._renderer._doStroke || this._renderer._doFill) && this._renderer.triangle(t2), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput("triangle", t2), this;
      };
      e = l.default;
      r.default = e;
    }, { "../constants": 256, "../friendly_errors/fes_core": 258, "../friendly_errors/file_errors": 259, "../friendly_errors/validate_params": 262, "../helpers": 263, "../main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 275: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (l = e("../main")) && l.__esModule ? l : { default: l }, s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      n.default.prototype.ellipseMode = function(e2) {
        return n.default._validateParameters("ellipseMode", arguments), e2 !== s2.CORNER && e2 !== s2.CORNERS && e2 !== s2.RADIUS && e2 !== s2.CENTER || (this._renderer._ellipseMode = e2), this;
      }, n.default.prototype.noSmooth = function() {
        return this._renderer.isP3D ? this.setAttributes("antialias", false) : "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = false), this;
      }, n.default.prototype.rectMode = function(e2) {
        return n.default._validateParameters("rectMode", arguments), e2 !== s2.CORNER && e2 !== s2.CORNERS && e2 !== s2.RADIUS && e2 !== s2.CENTER || (this._renderer._rectMode = e2), this;
      }, n.default.prototype.smooth = function() {
        return this.setAttributes("antialias", true), this._renderer.isP3D || "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = true), this;
      }, n.default.prototype.strokeCap = function(e2) {
        return n.default._validateParameters("strokeCap", arguments), e2 !== s2.ROUND && e2 !== s2.SQUARE && e2 !== s2.PROJECT || this._renderer.strokeCap(e2), this;
      }, n.default.prototype.strokeJoin = function(e2) {
        return n.default._validateParameters("strokeJoin", arguments), e2 !== s2.ROUND && e2 !== s2.BEVEL && e2 !== s2.MITER || this._renderer.strokeJoin(e2), this;
      }, n.default.prototype.strokeWeight = function(e2) {
        return n.default._validateParameters("strokeWeight", arguments), this._renderer.strokeWeight(e2), this;
      };
      var l = n.default;
      r.default = l;
    }, { "../constants": 256, "../main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 276: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (o = e("../main")) && o.__esModule ? o : { default: o };
      e("../friendly_errors/fes_core"), e("../friendly_errors/file_errors"), e("../friendly_errors/validate_params"), a.default.prototype.bezier = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return a.default._validateParameters("bezier", r2), (this._renderer._doStroke || this._renderer._doFill) && (e2 = this._renderer).bezier.apply(e2, r2), this;
      }, a.default.prototype.bezierDetail = function(e2) {
        return a.default._validateParameters("bezierDetail", arguments), this._bezierDetail = e2, this;
      }, a.default.prototype.bezierPoint = function(e2, t2, r2, o2, n) {
        a.default._validateParameters("bezierPoint", arguments);
        var s2 = 1 - n;
        return Math.pow(s2, 3) * e2 + 3 * Math.pow(s2, 2) * n * t2 + 3 * s2 * Math.pow(n, 2) * r2 + Math.pow(n, 3) * o2;
      }, a.default.prototype.bezierTangent = function(e2, t2, r2, o2, n) {
        a.default._validateParameters("bezierTangent", arguments);
        var s2 = 1 - n;
        return 3 * o2 * Math.pow(n, 2) - 3 * r2 * Math.pow(n, 2) + 6 * r2 * s2 * n - 6 * t2 * s2 * n + 3 * t2 * Math.pow(s2, 2) - 3 * e2 * Math.pow(s2, 2);
      }, a.default.prototype.curve = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return a.default._validateParameters("curve", r2), this._renderer._doStroke && (e2 = this._renderer).curve.apply(e2, r2), this;
      }, a.default.prototype.curveDetail = function(e2) {
        return a.default._validateParameters("curveDetail", arguments), this._curveDetail = e2 < 3 ? 3 : e2, this;
      }, a.default.prototype.curveTightness = function(e2) {
        return a.default._validateParameters("curveTightness", arguments), this._renderer._curveTightness = e2, this;
      }, a.default.prototype.curvePoint = function(e2, t2, r2, o2, n) {
        a.default._validateParameters("curvePoint", arguments);
        var s2 = n * n * n, i2 = n * n;
        return e2 * (-0.5 * s2 + i2 - 0.5 * n) + t2 * (1.5 * s2 - 2.5 * i2 + 1) + r2 * (-1.5 * s2 + 2 * i2 + 0.5 * n) + o2 * (0.5 * s2 - 0.5 * i2);
      }, a.default.prototype.curveTangent = function(e2, t2, r2, o2, n) {
        a.default._validateParameters("curveTangent", arguments);
        var s2 = n * n;
        return e2 * (-3 * s2 / 2 + 2 * n - 0.5) + t2 * (9 * s2 / 2 - 5 * n) + r2 * (-9 * s2 / 2 + 4 * n + 0.5) + o2 * (3 * s2 / 2 - n);
      };
      var o = a.default;
      r.default = o;
    }, { "../friendly_errors/fes_core": 258, "../friendly_errors/file_errors": 259, "../friendly_errors/validate_params": 262, "../main": 267 }], 277: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.slice"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (y = e("../main")) && y.__esModule ? y : { default: y }, l = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = u();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../constants"));
      function u() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), u = function() {
          return e2;
        }, e2);
      }
      var n = null, c = [], d = [], f = false, s2 = false, h = false, p = false, m = true, y = (a.default.prototype.beginContour = function() {
        return d = [], p = true, this;
      }, a.default.prototype.beginShape = function(e2) {
        var t2;
        return a.default._validateParameters("beginShape", arguments), this._renderer.isP3D ? (t2 = this._renderer).beginShape.apply(t2, arguments) : (n = e2 === l.POINTS || e2 === l.LINES || e2 === l.TRIANGLES || e2 === l.TRIANGLE_FAN || e2 === l.TRIANGLE_STRIP || e2 === l.QUADS || e2 === l.QUAD_STRIP ? e2 : null, c = [], d = []), this;
      }, a.default.prototype.bezierVertex = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        if (a.default._validateParameters("bezierVertex", r2), this._renderer.isP3D)
          (e2 = this._renderer).bezierVertex.apply(e2, r2);
        else if (0 === c.length)
          a.default._friendlyError("vertex() must be used once before calling bezierVertex()", "bezierVertex");
        else {
          f = true;
          for (var n2 = [], s3 = 0; s3 < r2.length; s3++)
            n2[s3] = r2[s3];
          n2.isVert = false, (p ? d : c).push(n2);
        }
        return this;
      }, a.default.prototype.curveVertex = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        return a.default._validateParameters("curveVertex", r2), this._renderer.isP3D ? (e2 = this._renderer).curveVertex.apply(e2, r2) : (s2 = true, this.vertex(r2[0], r2[1])), this;
      }, a.default.prototype.endContour = function() {
        var e2 = d[0].slice();
        e2.isVert = d[0].isVert, e2.moveTo = false, d.push(e2), m && (c.push(c[0]), m = false);
        for (var t2 = 0; t2 < d.length; t2++)
          c.push(d[t2]);
        return this;
      }, a.default.prototype.endShape = function(e2) {
        if (a.default._validateParameters("endShape", arguments), this._renderer.isP3D)
          this._renderer.endShape(e2, s2, f, h, p, n);
        else {
          if (0 === c.length)
            return this;
          if (!this._renderer._doStroke && !this._renderer._doFill)
            return this;
          var t2 = e2 === l.CLOSE;
          t2 && !p && c.push(c[0]), this._renderer.endShape(e2, c, s2, f, h, p, n), m = !(p = h = f = s2 = false), t2 && c.pop();
        }
        return this;
      }, a.default.prototype.quadraticVertex = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        if (a.default._validateParameters("quadraticVertex", r2), this._renderer.isP3D)
          (e2 = this._renderer).quadraticVertex.apply(e2, r2);
        else {
          if (this._contourInited)
            return (e2 = {}).x = r2[0], e2.y = r2[1], e2.x3 = r2[2], e2.y3 = r2[3], e2.type = l.QUADRATIC, this._contourVertices.push(e2), this;
          if (0 < c.length) {
            h = true;
            for (var n2 = [], s3 = 0; s3 < r2.length; s3++)
              n2[s3] = r2[s3];
            n2.isVert = false, (p ? d : c).push(n2);
          } else
            a.default._friendlyError("vertex() must be used once before calling quadraticVertex()", "quadraticVertex");
        }
        return this;
      }, a.default.prototype.vertex = function(e2, t2, r2, o2, n2) {
        var s3;
        return this._renderer.isP3D ? (s3 = this._renderer).vertex.apply(s3, arguments) : ((s3 = []).isVert = true, s3[0] = e2, s3[1] = t2, s3[2] = 0, s3[3] = 0, s3[4] = 0, s3[5] = this._renderer._getFill(), s3[6] = this._renderer._getStroke(), r2 && (s3.moveTo = r2), (p ? (0 === d.length && (s3.moveTo = true), d) : c).push(s3)), this;
      }, a.default.prototype.normal = function(e2, t2, r2) {
        var o2;
        return this._assert3d("normal"), a.default._validateParameters("normal", arguments), (o2 = this._renderer).normal.apply(o2, arguments), this;
      }, a.default);
      r.default = y;
    }, { "../constants": 256, "../main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 278: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function n(e2) {
        return (n = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      var a, l, u;
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-clamped-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-clamped-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e2, t2) {
        window.setTimeout(e2, 1e3 / 60);
      }, "undefined" == typeof Uint8ClampedArray || Uint8ClampedArray.prototype.slice || Object.defineProperty(Uint8ClampedArray.prototype, "slice", { value: Array.prototype.slice, writable: true, configurable: true, enumerable: false }), Object.assign || (a = Object.keys, e = Object.defineProperty, l = "function" == typeof Symbol && "symbol" === n(Symbol()), u = Object.prototype.propertyIsEnumerable, e(Object, "assign", { value: function(e2, t2) {
        if (null == e2)
          throw new TypeError("target must be an object");
        for (var r2, o2, n2, s2 = Object(e2), i2 = 1; i2 < arguments.length; ++i2)
          for (r2 = Object(arguments[i2]), n2 = a(r2), l && Object.getOwnPropertySymbols && n2.push.apply(n2, Object.getOwnPropertySymbols(r2).filter(function(t3) {
            return function(e3) {
              return u.call(t3, e3);
            };
          }(r2))), o2 = 0; o2 < n2.length; ++o2)
            s2[n2[o2]] = r2[n2[o2]];
        return s2;
      }, configurable: true, enumerable: false, writable: true }));
    }, { "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.assign": 172, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-clamped-array": 227, "core-js/modules/web.dom-collections.iterator": 230 }], 279: [function(e, t, r) {
      e("core-js/modules/es.array.for-each"), e("core-js/modules/es.object.assign"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.object.assign"), e("core-js/modules/web.dom-collections.for-each"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("./main")) && e.__esModule ? e : { default: e };
      e.default.prototype.noLoop = function() {
        this._loop = false;
      }, e.default.prototype.loop = function() {
        this._loop || (this._loop = true, this._setupDone && this._draw());
      }, e.default.prototype.isLooping = function() {
        return this._loop;
      }, e.default.prototype.push = function() {
        this._styles.push({ props: { _colorMode: this._colorMode }, renderer: this._renderer.push() });
      }, e.default.prototype.pop = function() {
        var e2 = this._styles.pop();
        e2 ? (this._renderer.pop(e2.renderer), Object.assign(this, e2.props)) : console.warn("pop() was called without matching push()");
      }, e.default.prototype.redraw = function(e2) {
        if (!this._inUserDraw && this._setupDone) {
          var t2 = parseInt(e2), r2 = ((isNaN(t2) || t2 < 1) && (t2 = 1), this._isGlobal ? window : this);
          if ("function" == typeof r2.draw) {
            void 0 === r2.setup && r2.scale(r2._pixelDensity, r2._pixelDensity);
            for (var o = function(e3) {
              e3.call(r2);
            }, n = 0; n < t2; n++) {
              r2.resetMatrix(), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._updateAccsOutput(), r2._renderer.isP3D && r2._renderer._update(), r2._setProperty("frameCount", r2.frameCount + 1), r2._registeredMethods.pre.forEach(o), this._inUserDraw = true;
              try {
                r2.draw();
              } finally {
                this._inUserDraw = false;
              }
              r2._registeredMethods.post.forEach(o);
            }
          }
        }
      };
      e = e.default;
      r.default = e;
    }, { "./main": 267, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.object.assign": 172, "core-js/modules/web.dom-collections.for-each": 229 }], 280: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-prototype-of"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-prototype-of"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (e = e("./main")) && e.__esModule ? e : { default: e };
      function o(e2) {
        return function(e3) {
          if (Array.isArray(e3)) {
            for (var t2 = 0, r2 = new Array(e3.length); t2 < e3.length; t2++)
              r2[t2] = e3[t2];
            return r2;
          }
        }(e2) || function(e3) {
          if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3))
            return Array.from(e3);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      n.default.prototype.applyMatrix = function() {
        var e2 = arguments[0] instanceof Object.getPrototypeOf(Uint8Array);
        return Array.isArray(arguments[0]) || e2 ? (e2 = this._renderer).applyMatrix.apply(e2, o(arguments[0])) : (e2 = this._renderer).applyMatrix.apply(e2, arguments), this;
      }, n.default.prototype.resetMatrix = function() {
        return this._renderer.resetMatrix(), this;
      }, n.default.prototype.rotate = function(e2, t2) {
        return n.default._validateParameters("rotate", arguments), this._renderer.rotate(this._toRadians(e2), t2), this;
      }, n.default.prototype.rotateX = function(e2) {
        return this._assert3d("rotateX"), n.default._validateParameters("rotateX", arguments), this._renderer.rotateX(this._toRadians(e2)), this;
      }, n.default.prototype.rotateY = function(e2) {
        return this._assert3d("rotateY"), n.default._validateParameters("rotateY", arguments), this._renderer.rotateY(this._toRadians(e2)), this;
      }, n.default.prototype.rotateZ = function(e2) {
        return this._assert3d("rotateZ"), n.default._validateParameters("rotateZ", arguments), this._renderer.rotateZ(this._toRadians(e2)), this;
      }, n.default.prototype.scale = function(e2, t2, r2) {
        var o2;
        return n.default._validateParameters("scale", arguments), e2 instanceof n.default.Vector ? (e2 = (o2 = e2).x, t2 = o2.y, r2 = o2.z) : e2 instanceof Array && (e2 = (o2 = e2)[0], t2 = o2[1], r2 = o2[2] || 1), isNaN(t2) ? t2 = r2 = e2 : isNaN(r2) && (r2 = 1), this._renderer.scale.call(this._renderer, e2, t2, r2), this;
      }, n.default.prototype.shearX = function(e2) {
        n.default._validateParameters("shearX", arguments);
        e2 = this._toRadians(e2);
        return this._renderer.applyMatrix(1, 0, Math.tan(e2), 1, 0, 0), this;
      }, n.default.prototype.shearY = function(e2) {
        n.default._validateParameters("shearY", arguments);
        e2 = this._toRadians(e2);
        return this._renderer.applyMatrix(1, Math.tan(e2), 0, 1, 0, 0), this;
      }, n.default.prototype.translate = function(e2, t2, r2) {
        return n.default._validateParameters("translate", arguments), this._renderer.isP3D ? this._renderer.translate(e2, t2, r2) : this._renderer.translate(e2, t2), this;
      };
      e = n.default;
      r.default = e;
    }, { "./main": 267, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-prototype-of": 175, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/web.dom-collections.iterator": 230 }], 281: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.ends-with"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.ends-with"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator");
      var n = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function s2(e2) {
        return function(e3) {
          if (Array.isArray(e3)) {
            for (var t2 = 0, r2 = new Array(e3.length); t2 < e3.length; t2++)
              r2[t2] = e3[t2];
            return r2;
          }
        }(e2) || function(e3) {
          if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3))
            return Array.from(e3);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      n.default.prototype.storeItem = function(e2, t2) {
        "string" != typeof e2 && console.log("The argument that you passed to storeItem() - ".concat(e2, " is not a string.")), e2.endsWith("p5TypeID") && console.log("The argument that you passed to storeItem() - ".concat(e2, " must not end with 'p5TypeID'.")), void 0 === t2 && console.log("You cannot store undefined variables using storeItem().");
        var r2 = i2(t2);
        switch (r2) {
          case "number":
          case "boolean":
            t2 = t2.toString();
            break;
          case "object":
            t2 instanceof n.default.Color ? r2 = "p5.Color" : t2 instanceof n.default.Vector && (r2 = "p5.Vector", t2 = [t2.x, t2.y, t2.z]), t2 = JSON.stringify(t2);
        }
        localStorage.setItem(e2, t2);
        e2 = "".concat(e2, "p5TypeID");
        localStorage.setItem(e2, r2);
      }, n.default.prototype.getItem = function(e2) {
        var t2 = localStorage.getItem(e2), r2 = localStorage.getItem("".concat(e2, "p5TypeID"));
        if (void 0 === r2)
          console.log("Unable to determine type of item stored under ".concat(e2, "in local storage. Did you save the item with something other than setItem()?"));
        else if (null !== t2)
          switch (r2) {
            case "number":
              t2 = parseFloat(t2);
              break;
            case "boolean":
              t2 = "true" === t2;
              break;
            case "object":
              t2 = JSON.parse(t2);
              break;
            case "p5.Color":
              t2 = JSON.parse(t2), t2 = this.color.apply(this, s2(t2.levels));
              break;
            case "p5.Vector":
              t2 = JSON.parse(t2), t2 = this.createVector.apply(this, s2(t2));
          }
        return t2;
      }, n.default.prototype.clearStorage = function() {
        localStorage.clear();
      }, n.default.prototype.removeItem = function(e2) {
        "string" != typeof e2 && console.log("The argument that you passed to removeItem() - ".concat(e2, " is not a string.")), localStorage.removeItem(e2), localStorage.removeItem("".concat(e2, "p5TypeID"));
      };
    }, { "../core/main": 267, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.ends-with": 184, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.iterator": 230 }], 282: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.string.sub"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.string.sub"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      n.default.prototype.createStringDict = function(e2, t2) {
        return n.default._validateParameters("createStringDict", arguments), new n.default.StringDict(e2, t2);
      }, n.default.prototype.createNumberDict = function(e2, t2) {
        return n.default._validateParameters("createNumberDict", arguments), new n.default.NumberDict(e2, t2);
      }, n.default.TypedDict = function(e2, t2) {
        return e2 instanceof Object ? this.data = e2 : (this.data = {}, this.data[e2] = t2), this;
      }, n.default.TypedDict.prototype.size = function() {
        return Object.keys(this.data).length;
      }, n.default.TypedDict.prototype.hasKey = function(e2) {
        return this.data.hasOwnProperty(e2);
      }, n.default.TypedDict.prototype.get = function(e2) {
        if (this.data.hasOwnProperty(e2))
          return this.data[e2];
        console.log("".concat(e2, " does not exist in this Dictionary"));
      }, n.default.TypedDict.prototype.set = function(e2, t2) {
        this._validate(t2) ? this.data[e2] = t2 : console.log("Those values dont work for this dictionary type.");
      }, n.default.TypedDict.prototype._addObj = function(e2) {
        for (var t2 in e2)
          this.set(t2, e2[t2]);
      }, n.default.TypedDict.prototype.create = function(e2, t2) {
        e2 instanceof Object && void 0 === t2 ? this._addObj(e2) : void 0 !== e2 ? this.set(e2, t2) : console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");
      }, n.default.TypedDict.prototype.clear = function() {
        this.data = {};
      }, n.default.TypedDict.prototype.remove = function(e2) {
        if (!this.data.hasOwnProperty(e2))
          throw new Error("".concat(e2, " does not exist in this Dictionary"));
        delete this.data[e2];
      }, n.default.TypedDict.prototype.print = function() {
        for (var e2 in this.data)
          console.log("key:".concat(e2, " value:").concat(this.data[e2]));
      }, n.default.TypedDict.prototype.saveTable = function(e2) {
        var t2, r2 = "";
        for (t2 in this.data)
          r2 += "".concat(t2, ",").concat(this.data[t2], "\n");
        var o = new Blob([r2], { type: "text/csv" });
        n.default.prototype.downloadFile(o, e2 || "mycsv", "csv");
      }, n.default.TypedDict.prototype.saveJSON = function(e2, t2) {
        n.default.prototype.saveJSON(this.data, e2, t2);
      }, n.default.TypedDict.prototype._validate = function(e2) {
        return true;
      }, n.default.StringDict = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        n.default.TypedDict.apply(this, t2);
      }, n.default.StringDict.prototype = Object.create(n.default.TypedDict.prototype), n.default.StringDict.prototype._validate = function(e2) {
        return "string" == typeof e2;
      }, n.default.NumberDict = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        n.default.TypedDict.apply(this, t2);
      }, n.default.NumberDict.prototype = Object.create(n.default.TypedDict.prototype), n.default.NumberDict.prototype._validate = function(e2) {
        return "number" == typeof e2;
      }, n.default.NumberDict.prototype.add = function(e2, t2) {
        this.data.hasOwnProperty(e2) ? this.data[e2] += t2 : console.log("The key - ".concat(e2, " does not exist in this dictionary."));
      }, n.default.NumberDict.prototype.sub = function(e2, t2) {
        this.add(e2, -t2);
      }, n.default.NumberDict.prototype.mult = function(e2, t2) {
        this.data.hasOwnProperty(e2) ? this.data[e2] *= t2 : console.log("The key - ".concat(e2, " does not exist in this dictionary."));
      }, n.default.NumberDict.prototype.div = function(e2, t2) {
        this.data.hasOwnProperty(e2) ? this.data[e2] /= t2 : console.log("The key - ".concat(e2, " does not exist in this dictionary."));
      }, n.default.NumberDict.prototype._valueTest = function(e2) {
        if (0 === Object.keys(this.data).length)
          throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");
        if (1 === Object.keys(this.data).length)
          return this.data[Object.keys(this.data)[0]];
        var t2, r2 = this.data[Object.keys(this.data)[0]];
        for (t2 in this.data)
          this.data[t2] * e2 < r2 * e2 && (r2 = this.data[t2]);
        return r2;
      }, n.default.NumberDict.prototype.minValue = function() {
        return this._valueTest(1);
      }, n.default.NumberDict.prototype.maxValue = function() {
        return this._valueTest(-1);
      }, n.default.NumberDict.prototype._keyTest = function(e2) {
        if (0 === Object.keys(this.data).length)
          throw new Error("Unable to use minValue on an empty NumberDict");
        if (1 === Object.keys(this.data).length)
          return Object.keys(this.data)[0];
        for (var t2 = Object.keys(this.data)[0], r2 = 1; r2 < Object.keys(this.data).length; r2++)
          Object.keys(this.data)[r2] * e2 < t2 * e2 && (t2 = Object.keys(this.data)[r2]);
        return t2;
      }, n.default.NumberDict.prototype.minKey = function() {
        return this._keyTest(1);
      }, n.default.NumberDict.prototype.maxKey = function() {
        return this._keyTest(-1);
      };
      e = n.default.TypedDict;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.object.keys": 176, "core-js/modules/es.string.sub": 192 }], 283: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/web.url"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.for-each"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/web.dom-collections.for-each"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/web.url"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var h = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function f(e2) {
        return (f = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      function p(e2, t2, r2) {
        (t2._userNode || document.body).appendChild(e2);
        r2 = new (r2 ? h.default.MediaElement : h.default.Element)(e2, t2);
        return t2._elements.push(r2), r2;
      }
      function n(e2, t2, r2, o2) {
        var n2 = document.createElement(t2), s3 = ("string" == typeof (r2 = r2 || "") && (r2 = [r2]), true), t2 = false, i2 = void 0;
        try {
          for (var a, l = r2[Symbol.iterator](); !(s3 = (a = l.next()).done); s3 = true) {
            var u = a.value, c = document.createElement("source");
            c.setAttribute("src", u), n2.appendChild(c);
          }
        } catch (e3) {
          t2 = true, i2 = e3;
        } finally {
          try {
            s3 || null == l.return || l.return();
          } finally {
            if (t2)
              throw i2;
          }
        }
        "function" == typeof o2 && n2.addEventListener("canplaythrough", function e3() {
          o2(), n2.removeEventListener("canplaythrough", e3);
        });
        var d = p(n2, e2, true);
        return d.loadedmetadata = false, n2.addEventListener("loadedmetadata", function() {
          d.width = n2.videoWidth, d.height = n2.videoHeight, 0 === d.elt.width && (d.elt.width = n2.videoWidth), 0 === d.elt.height && (d.elt.height = n2.videoHeight), d.presetPlaybackRate && (d.elt.playbackRate = d.presetPlaybackRate, delete d.presetPlaybackRate), d.loadedmetadata = true;
        }), d;
      }
      h.default.prototype.select = function(e2, t2) {
        h.default._validateParameters("select", arguments);
        t2 = this._getContainer(t2).querySelector(e2);
        return t2 ? this._wrapElement(t2) : null;
      }, h.default.prototype.selectAll = function(e2, t2) {
        h.default._validateParameters("selectAll", arguments);
        var r2 = [], o2 = this._getContainer(t2).querySelectorAll(e2);
        if (o2)
          for (var n2 = 0; n2 < o2.length; n2++) {
            var s3 = this._wrapElement(o2[n2]);
            r2.push(s3);
          }
        return r2;
      }, h.default.prototype._getContainer = function(e2) {
        var t2 = document;
        return "string" == typeof e2 ? t2 = document.querySelector(e2) || document : e2 instanceof h.default.Element ? t2 = e2.elt : e2 instanceof HTMLElement && (t2 = e2), t2;
      }, h.default.prototype._wrapElement = function(e2) {
        var t2, r2 = Array.prototype.slice.call(e2.children);
        return "INPUT" === e2.tagName && "checkbox" === e2.type ? ((t2 = new h.default.Element(e2, this)).checked = function() {
          return 0 === arguments.length ? this.elt.checked : (this.elt.checked = !!arguments[0], this);
        }, t2) : "VIDEO" === e2.tagName || "AUDIO" === e2.tagName ? new h.default.MediaElement(e2, this) : "SELECT" === e2.tagName ? this.createSelect(new h.default.Element(e2, this)) : 0 < r2.length && r2.every(function(e3) {
          return "INPUT" === e3.tagName || "LABEL" === e3.tagName;
        }) ? this.createRadio(new h.default.Element(e2, this)) : new h.default.Element(e2, this);
      }, h.default.prototype.removeElements = function(e2) {
        h.default._validateParameters("removeElements", arguments);
        this._elements.filter(function(e3) {
          return !(e3.elt instanceof HTMLCanvasElement);
        }).map(function(e3) {
          return e3.remove();
        });
      }, h.default.Element.prototype.changed = function(e2) {
        return h.default.Element._adjustListener("change", e2, this), this;
      }, h.default.Element.prototype.input = function(e2) {
        return h.default.Element._adjustListener("input", e2, this), this;
      }, h.default.prototype.createDiv = function() {
        var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t2 = document.createElement("div");
        return t2.innerHTML = e2, p(t2, this);
      }, h.default.prototype.createP = function() {
        var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t2 = document.createElement("p");
        return t2.innerHTML = e2, p(t2, this);
      }, h.default.prototype.createSpan = function() {
        var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t2 = document.createElement("span");
        return t2.innerHTML = e2, p(t2, this);
      }, h.default.prototype.createImg = function() {
        h.default._validateParameters("createImg", arguments);
        var t2, r2 = document.createElement("img"), o2 = arguments;
        return 1 < o2.length && "string" == typeof o2[1] && (r2.alt = o2[1]), 2 < o2.length && "string" == typeof o2[2] && (r2.crossOrigin = o2[2]), r2.src = o2[0], t2 = p(r2, this), r2.addEventListener("load", function() {
          t2.width = r2.offsetWidth || r2.width, t2.height = r2.offsetHeight || r2.height;
          var e2 = o2[o2.length - 1];
          "function" == typeof e2 && e2(t2);
        }), t2;
      }, h.default.prototype.createA = function(e2, t2, r2) {
        h.default._validateParameters("createA", arguments);
        var o2 = document.createElement("a");
        return o2.href = e2, o2.innerHTML = t2, r2 && (o2.target = r2), p(o2, this);
      }, h.default.prototype.createSlider = function(e2, t2, r2, o2) {
        h.default._validateParameters("createSlider", arguments);
        var n2 = document.createElement("input");
        return n2.type = "range", n2.min = e2, n2.max = t2, 0 === o2 ? n2.step = 1e-18 : o2 && (n2.step = o2), "number" == typeof r2 && (n2.value = r2), p(n2, this);
      }, h.default.prototype.createButton = function(e2, t2) {
        h.default._validateParameters("createButton", arguments);
        var r2 = document.createElement("button");
        return r2.innerHTML = e2, t2 && (r2.value = t2), p(r2, this);
      }, h.default.prototype.createCheckbox = function() {
        h.default._validateParameters("createCheckbox", arguments);
        var e2 = document.createElement("div"), t2 = document.createElement("input"), r2 = (t2.type = "checkbox", document.createElement("label")), o2 = (r2.appendChild(t2), e2.appendChild(r2), p(e2, this));
        return o2.checked = function() {
          var e3 = o2.elt.firstElementChild.getElementsByTagName("input")[0];
          if (e3) {
            if (0 === arguments.length)
              return e3.checked;
            e3.checked = !!arguments[0];
          }
          return o2;
        }, this.value = function(e3) {
          return o2.value = e3, this;
        }, arguments[0] && (o2.value(arguments[0]), (e2 = document.createElement("span")).innerHTML = arguments[0], r2.appendChild(e2)), arguments[1] && (t2.checked = true), o2;
      }, h.default.prototype.createSelect = function() {
        h.default._validateParameters("createSelect", arguments);
        var e2, t2, r2 = arguments[0];
        return r2 instanceof h.default.Element && r2.elt instanceof HTMLSelectElement ? this.elt = (e2 = r2).elt : r2 instanceof HTMLSelectElement ? (e2 = p(r2, this), this.elt = r2) : (t2 = document.createElement("select"), r2 && "boolean" == typeof r2 && t2.setAttribute("multiple", "true"), e2 = p(t2, this), this.elt = t2), e2.option = function(e3, t3) {
          var r3;
          if (void 0 !== e3) {
            for (var o2, n2 = 0; n2 < this.elt.length; n2 += 1)
              if (this.elt[n2].textContent === e3) {
                r3 = n2;
                break;
              }
            void 0 !== r3 ? false === t3 ? this.elt.remove(r3) : this.elt[r3].value = t3 : ((o2 = document.createElement("option")).textContent = e3, o2.value = void 0 === t3 ? e3 : t3, this.elt.appendChild(o2), this._pInst._elements.push(o2));
          }
        }, e2.selected = function(e3) {
          if (void 0 !== e3) {
            for (var t3 = 0; t3 < this.elt.length; t3 += 1)
              this.elt[t3].value.toString() === e3.toString() && (this.elt.selectedIndex = t3);
            return this;
          }
          if (this.elt.getAttribute("multiple")) {
            var r3 = [], o2 = true, n2 = false, s3 = void 0;
            try {
              for (var i2, a = this.elt.selectedOptions[Symbol.iterator](); !(o2 = (i2 = a.next()).done); o2 = true) {
                var l = i2.value;
                r3.push(l.value);
              }
            } catch (e4) {
              n2 = true, s3 = e4;
            } finally {
              try {
                o2 || null == a.return || a.return();
              } finally {
                if (n2)
                  throw s3;
              }
            }
            return r3;
          }
          return this.elt.value;
        }, e2.disable = function(e3) {
          if ("string" == typeof e3)
            for (var t3 = 0; t3 < this.elt.length; t3++)
              this.elt[t3].value.toString() === e3 && (this.elt[t3].disabled = true, this.elt[t3].selected = false);
          else
            this.elt.disabled = true;
          return this;
        }, e2;
      }, h.default.prototype.createRadio = function() {
        function t2(e3) {
          return e3 instanceof HTMLInputElement && "radio" === e3.type;
        }
        function d(e3) {
          return e3 instanceof HTMLLabelElement;
        }
        var f2, e2, r2, o2 = arguments[0];
        o2 instanceof h.default.Element && (o2.elt instanceof HTMLDivElement || o2.elt instanceof HTMLSpanElement) ? (f2 = o2, this.elt = o2.elt) : o2 instanceof HTMLDivElement || o2 instanceof HTMLSpanElement ? (f2 = p(o2, this), e2 = this.elt = o2, "string" == typeof arguments[1] && (r2 = arguments[1])) : ("string" == typeof o2 && (r2 = o2), e2 = document.createElement("div"), f2 = p(e2, this), this.elt = e2), f2._name = r2 || "radioOption";
        return f2._getOptionsArray = function() {
          return Array.from(this.elt.children).filter(function(e3) {
            return t2(e3) || d(e3) && t2(e3.firstElementChild);
          }).map(function(e3) {
            return t2(e3) ? e3 : e3.firstElementChild;
          });
        }, f2.option = function(e3, t3) {
          var r3, o3, n2, s3 = true, i2 = false, a = void 0;
          try {
            for (var l, u = f2._getOptionsArray()[Symbol.iterator](); !(s3 = (l = u.next()).done); s3 = true) {
              var c = l.value;
              if (c.value === e3) {
                r3 = c;
                break;
              }
            }
          } catch (e4) {
            i2 = true, a = e4;
          } finally {
            try {
              s3 || null == u.return || u.return();
            } finally {
              if (i2)
                throw a;
            }
          }
          return void 0 === r3 && ((r3 = document.createElement("input")).setAttribute("type", "radio"), r3.setAttribute("value", e3)), r3.setAttribute("name", f2._name), d(r3.parentElement) ? o3 = r3.parentElement : (o3 = document.createElement("label")).insertAdjacentElement("afterbegin", r3), o3.lastElementChild instanceof HTMLSpanElement ? n2 = o3.lastElementChild : (n2 = document.createElement("span"), r3.insertAdjacentElement("afterend", n2)), n2.innerHTML = void 0 === t3 ? e3 : t3, this.elt.appendChild(o3), r3;
        }, f2.remove = function(e3) {
          var t3 = true, r3 = false, o3 = void 0;
          try {
            for (var n2, s3 = f2._getOptionsArray()[Symbol.iterator](); !(t3 = (n2 = s3.next()).done); t3 = true) {
              var i2 = n2.value;
              if (i2.value === e3)
                return void (d(i2.parentElement) ? i2.parentElement : i2).remove();
            }
          } catch (e4) {
            r3 = true, o3 = e4;
          } finally {
            try {
              t3 || null == s3.return || s3.return();
            } finally {
              if (r3)
                throw o3;
            }
          }
        }, f2.value = function() {
          var e3 = "", t3 = true, r3 = false, o3 = void 0;
          try {
            for (var n2, s3 = f2._getOptionsArray()[Symbol.iterator](); !(t3 = (n2 = s3.next()).done); t3 = true) {
              var i2 = n2.value;
              if (i2.checked) {
                e3 = i2.value;
                break;
              }
            }
          } catch (e4) {
            r3 = true, o3 = e4;
          } finally {
            try {
              t3 || null == s3.return || s3.return();
            } finally {
              if (r3)
                throw o3;
            }
          }
          return e3;
        }, f2.selected = function(e3) {
          var t3 = null;
          if (void 0 === e3) {
            var r3 = true, o3 = false, n2 = void 0;
            try {
              for (var s3, i2 = f2._getOptionsArray()[Symbol.iterator](); !(r3 = (s3 = i2.next()).done); r3 = true) {
                var a = s3.value;
                if (a.checked) {
                  t3 = a;
                  break;
                }
              }
            } catch (e4) {
              o3 = true, n2 = e4;
            } finally {
              try {
                r3 || null == i2.return || i2.return();
              } finally {
                if (o3)
                  throw n2;
              }
            }
          } else {
            f2._getOptionsArray().forEach(function(e4) {
              e4.checked = false, e4.removeAttribute("checked");
            });
            var l = true, o3 = false, n2 = void 0;
            try {
              for (var u, c = f2._getOptionsArray()[Symbol.iterator](); !(l = (u = c.next()).done); l = true) {
                var d2 = u.value;
                d2.value === e3 && (d2.setAttribute("checked", true), d2.checked = true, t3 = d2);
              }
            } catch (e4) {
              o3 = true, n2 = e4;
            } finally {
              try {
                l || null == c.return || c.return();
              } finally {
                if (o3)
                  throw n2;
              }
            }
          }
          return t3;
        }, f2.disable = function() {
          var e3 = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t3 = true, r3 = false, o3 = void 0;
          try {
            for (var n2, s3 = f2._getOptionsArray()[Symbol.iterator](); !(t3 = (n2 = s3.next()).done); t3 = true)
              n2.value.setAttribute("disabled", e3);
          } catch (e4) {
            r3 = true, o3 = e4;
          } finally {
            try {
              t3 || null == s3.return || s3.return();
            } finally {
              if (r3)
                throw o3;
            }
          }
        }, f2;
      }, h.default.prototype.createColorPicker = function(e2) {
        h.default._validateParameters("createColorPicker", arguments);
        var t2 = document.createElement("input");
        return t2.type = "color", e2 ? e2 instanceof h.default.Color ? t2.value = e2.toString("#rrggbb") : (h.default.prototype._colorMode = "rgb", h.default.prototype._colorMaxes = { rgb: [255, 255, 255, 255], hsb: [360, 100, 100, 1], hsl: [360, 100, 100, 1] }, t2.value = h.default.prototype.color(e2).toString("#rrggbb")) : t2.value = "#000000", (t2 = p(t2, this)).color = function() {
          return e2 && (e2.mode && (h.default.prototype._colorMode = e2.mode), e2.maxes && (h.default.prototype._colorMaxes = e2.maxes)), h.default.prototype.color(this.elt.value);
        }, t2;
      }, h.default.prototype.createInput = function() {
        var e2 = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "", t2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "text", r2 = (h.default._validateParameters("createInput", arguments), document.createElement("input"));
        return r2.setAttribute("value", e2), r2.setAttribute("type", t2), p(r2, this);
      }, h.default.prototype.createFileInput = function(a) {
        var e2, t2 = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
        h.default._validateParameters("createFileInput", arguments);
        if (window.File && window.FileReader && window.FileList && window.Blob)
          return (e2 = document.createElement("input")).setAttribute("type", "file"), t2 && e2.setAttribute("multiple", true), e2.addEventListener("change", function(e3) {
            var t3 = true, r2 = false, o2 = void 0;
            try {
              for (var n2, s3 = e3.target.files[Symbol.iterator](); !(t3 = (n2 = s3.next()).done); t3 = true) {
                var i2 = n2.value;
                h.default.File._load(i2, a);
              }
            } catch (e4) {
              r2 = true, o2 = e4;
            } finally {
              try {
                t3 || null == s3.return || s3.return();
              } finally {
                if (r2)
                  throw o2;
              }
            }
          }, false), p(e2, this);
        console.log("The File APIs are not fully supported in this browser. Cannot create element.");
      }, h.default.prototype.createVideo = function(e2, t2) {
        return h.default._validateParameters("createVideo", arguments), n(this, "video", e2, t2);
      }, h.default.prototype.createAudio = function(e2, t2) {
        return h.default._validateParameters("createAudio", arguments), n(this, "audio", e2, t2);
      }, h.default.prototype.VIDEO = "video", h.default.prototype.AUDIO = "audio", void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function(r2) {
        var o2 = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
        return o2 ? new Promise(function(e2, t2) {
          o2.call(navigator, r2, e2, t2);
        }) : Promise.reject(new Error("getUserMedia is not implemented in this browser"));
      }), h.default.prototype.createCapture = function() {
        if (h.default._validateParameters("createCapture", arguments), !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)
          throw new DOMException("getUserMedia not supported in this browser");
        var e2, t2 = true, r2 = true, o2 = true, n2 = false, s3 = void 0;
        try {
          for (var i2, a = arguments[Symbol.iterator](); !(o2 = (i2 = a.next()).done); o2 = true) {
            var l = i2.value;
            l === h.default.prototype.VIDEO ? r2 = false : l === h.default.prototype.AUDIO ? t2 = false : "object" === f(l) ? u = l : "function" == typeof l && (e2 = l);
          }
        } catch (e3) {
          n2 = true, s3 = e3;
        } finally {
          try {
            o2 || null == a.return || a.return();
          } finally {
            if (n2)
              throw s3;
          }
        }
        var u = u || { video: t2, audio: r2 }, c = document.createElement("video"), d = (c.setAttribute("playsinline", ""), navigator.mediaDevices.getUserMedia(u).then(function(t3) {
          try {
            "srcObject" in c ? c.srcObject = t3 : c.src = window.URL.createObjectURL(t3);
          } catch (e3) {
            c.src = t3;
          }
        }, console.log), p(c, this, true));
        return d.loadedmetadata = false, c.addEventListener("loadedmetadata", function() {
          c.play(), c.width ? (d.width = c.width, d.height = c.height) : (d.width = d.elt.width = c.videoWidth, d.height = d.elt.height = c.videoHeight), d.loadedmetadata = true, e2 && e2(c.srcObject);
        }), d;
      }, h.default.prototype.createElement = function(e2, t2) {
        h.default._validateParameters("createElement", arguments);
        e2 = document.createElement(e2);
        return void 0 !== t2 && (e2.innerHTML = t2), p(e2, this);
      }, h.default.Element.prototype.addClass = function(e2) {
        return this.elt.className ? this.hasClass(e2) || (this.elt.className = this.elt.className + " " + e2) : this.elt.className = e2, this;
      }, h.default.Element.prototype.removeClass = function(e2) {
        return this.elt.classList.remove(e2), this;
      }, h.default.Element.prototype.hasClass = function(e2) {
        return this.elt.classList.contains(e2);
      }, h.default.Element.prototype.toggleClass = function(e2) {
        return this.elt.classList.contains(e2) ? this.elt.classList.remove(e2) : this.elt.classList.add(e2), this;
      }, h.default.Element.prototype.child = function(e2) {
        return void 0 === e2 ? this.elt.childNodes : ("string" == typeof e2 ? ("#" === e2[0] && (e2 = e2.substring(1)), e2 = document.getElementById(e2)) : e2 instanceof h.default.Element && (e2 = e2.elt), e2 instanceof HTMLElement && this.elt.appendChild(e2), this);
      }, h.default.Element.prototype.center = function(e2) {
        var t2 = this.elt.style.display, r2 = "none" === this.elt.style.display, o2 = "none" === this.parent().style.display, n2 = { x: this.elt.offsetLeft, y: this.elt.offsetTop }, s3 = (r2 && this.show(), o2 && this.parent().show(), this.elt.style.display = "block", this.position(0, 0), Math.abs(this.parent().offsetWidth - this.elt.offsetWidth)), i2 = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
        return "both" === e2 || void 0 === e2 ? this.position(s3 / 2 + this.parent().offsetLeft, i2 / 2 + this.parent().offsetTop) : "horizontal" === e2 ? this.position(s3 / 2 + this.parent().offsetLeft, n2.y) : "vertical" === e2 && this.position(n2.x, i2 / 2 + this.parent().offsetTop), this.style("display", t2), r2 && this.hide(), o2 && this.parent().hide(), this;
      }, h.default.Element.prototype.html = function() {
        return 0 === arguments.length ? this.elt.innerHTML : (arguments[1] ? this.elt.insertAdjacentHTML("beforeend", arguments[0]) : this.elt.innerHTML = arguments[0], this);
      }, h.default.Element.prototype.position = function() {
        return 0 === arguments.length ? { x: this.elt.offsetLeft, y: this.elt.offsetTop } : (this.elt.style.position = "static" !== arguments[2] && "fixed" !== arguments[2] && "relative" !== arguments[2] && "sticky" !== arguments[2] && "initial" !== arguments[2] && "inherit" !== arguments[2] ? "absolute" : arguments[2], this.elt.style.left = arguments[0] + "px", this.elt.style.top = arguments[1] + "px", this.x = arguments[0], this.y = arguments[1], this);
      }, h.default.Element.prototype._translate = function() {
        this.elt.style.position = "absolute";
        var e2 = "";
        return this.elt.style.transform && (e2 = (e2 = this.elt.style.transform.replace(/translate3d\(.*\)/g, "")).replace(/translate[X-Z]?\(.*\)/g, "")), 2 === arguments.length ? this.elt.style.transform = "translate(" + arguments[0] + "px, " + arguments[1] + "px)" : 2 < arguments.length && (this.elt.style.transform = "translate3d(" + arguments[0] + "px," + arguments[1] + "px," + arguments[2] + "px)", this.elt.parentElement.style.perspective = 3 === arguments.length ? "1000px" : arguments[3] + "px"), this.elt.style.transform += e2, this;
      }, h.default.Element.prototype._rotate = function() {
        var e2 = "";
        return this.elt.style.transform && (e2 = (e2 = this.elt.style.transform.replace(/rotate3d\(.*\)/g, "")).replace(/rotate[X-Z]?\(.*\)/g, "")), 1 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg)" : 2 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg, " + arguments[1] + "deg)" : 3 === arguments.length && (this.elt.style.transform = "rotateX(" + arguments[0] + "deg)", this.elt.style.transform += "rotateY(" + arguments[1] + "deg)", this.elt.style.transform += "rotateZ(" + arguments[2] + "deg)"), this.elt.style.transform += e2, this;
      }, h.default.Element.prototype.style = function(e2, t2) {
        if (void 0 === (t2 = t2 instanceof h.default.Color ? "rgba(" + t2.levels[0] + "," + t2.levels[1] + "," + t2.levels[2] + "," + t2.levels[3] / 255 + ")" : t2)) {
          if (-1 === e2.indexOf(":"))
            return window.getComputedStyle(this.elt).getPropertyValue(e2);
          for (var r2 = e2.split(";"), o2 = 0; o2 < r2.length; o2++) {
            var n2 = r2[o2].split(":");
            n2[0] && n2[1] && (this.elt.style[n2[0].trim()] = n2[1].trim());
          }
        } else
          this.elt.style[e2] = t2, "width" !== e2 && "height" !== e2 && "left" !== e2 && "top" !== e2 || (t2 = window.getComputedStyle(this.elt).getPropertyValue(e2).replace(/[^\d.]/g, ""), this[e2] = Math.round(parseFloat(t2, 10)));
        return this;
      }, h.default.Element.prototype.attribute = function(e2, t2) {
        if (null == this.elt.firstChild || "checkbox" !== this.elt.firstChild.type && "radio" !== this.elt.firstChild.type)
          return void 0 === t2 ? this.elt.getAttribute(e2) : (this.elt.setAttribute(e2, t2), this);
        if (void 0 === t2)
          return this.elt.firstChild.getAttribute(e2);
        for (var r2 = 0; r2 < this.elt.childNodes.length; r2++)
          this.elt.childNodes[r2].setAttribute(e2, t2);
      }, h.default.Element.prototype.removeAttribute = function(e2) {
        if (null != this.elt.firstChild && ("checkbox" === this.elt.firstChild.type || "radio" === this.elt.firstChild.type))
          for (var t2 = 0; t2 < this.elt.childNodes.length; t2++)
            this.elt.childNodes[t2].removeAttribute(e2);
        return this.elt.removeAttribute(e2), this;
      }, h.default.Element.prototype.value = function() {
        return 0 < arguments.length ? (this.elt.value = arguments[0], this) : "range" === this.elt.type ? parseFloat(this.elt.value) : this.elt.value;
      }, h.default.Element.prototype.show = function() {
        return this.elt.style.display = "block", this;
      }, h.default.Element.prototype.hide = function() {
        return this.elt.style.display = "none", this;
      }, h.default.Element.prototype.size = function(e2, t2) {
        if (0 === arguments.length)
          return { width: this.elt.offsetWidth, height: this.elt.offsetHeight };
        var r2 = e2, o2 = t2, n2 = h.default.prototype.AUTO;
        if (r2 !== n2 || o2 !== n2) {
          if (r2 === n2 ? r2 = t2 * this.width / this.height : o2 === n2 && (o2 = e2 * this.height / this.width), this.elt instanceof HTMLCanvasElement) {
            var s3, i2 = {}, a = this.elt.getContext("2d");
            for (s3 in a)
              i2[s3] = a[s3];
            for (s3 in this.elt.setAttribute("width", r2 * this._pInst._pixelDensity), this.elt.setAttribute("height", o2 * this._pInst._pixelDensity), this.elt.style.width = r2 + "px", this.elt.style.height = o2 + "px", this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), i2)
              this.elt.getContext("2d")[s3] = i2[s3];
          } else
            this.elt.style.width = r2 + "px", this.elt.style.height = o2 + "px", this.elt.width = r2, this.elt.height = o2;
          this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this._pInst && this._pInst._curElement && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty("width", this.elt.offsetWidth), this._pInst._setProperty("height", this.elt.offsetHeight));
        }
        return this;
      }, h.default.Element.prototype.remove = function() {
        this instanceof h.default.MediaElement && (this.stop(), null !== (t2 = this.elt.srcObject) && t2.getTracks().forEach(function(e3) {
          e3.stop();
        }));
        var e2, t2 = this._pInst._elements.indexOf(this);
        for (e2 in -1 !== t2 && this._pInst._elements.splice(t2, 1), this._events)
          this.elt.removeEventListener(e2, this._events[e2]);
        this.elt && this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
      }, h.default.Element.prototype.drop = function(n2, s3) {
        var e2;
        return window.File && window.FileReader && window.FileList && window.Blob ? (this._dragDisabled || (this._dragDisabled = true, this.elt.addEventListener("dragover", e2 = function(e3) {
          e3.preventDefault();
        }), this.elt.addEventListener("dragleave", e2)), h.default.Element._attachListener("drop", function(e3) {
          e3.preventDefault(), "function" == typeof s3 && s3.call(this, e3);
          for (var t2 = e3.dataTransfer.files, r2 = 0; r2 < t2.length; r2++) {
            var o2 = t2[r2];
            h.default.File._load(o2, n2);
          }
        }, this)) : console.log("The File APIs are not fully supported in this browser."), this;
      }, h.default.MediaElement = function(o2, e2) {
        h.default.Element.call(this, o2, e2);
        var n2 = this;
        this.elt.crossOrigin = "anonymous", this._prevTime = 0, this._cueIDCounter = 0, this._cues = [], (this._pixelsState = this)._pixelDensity = 1, this._modified = false, Object.defineProperty(n2, "src", { get: function() {
          var e3 = n2.elt.children[0].src, t2 = n2.elt.src === window.location.href ? "" : n2.elt.src;
          return e3 === window.location.href ? t2 : e3;
        }, set: function(e3) {
          for (var t2 = 0; t2 < n2.elt.children.length; t2++)
            n2.elt.removeChild(n2.elt.children[t2]);
          var r2 = document.createElement("source");
          r2.src = e3, o2.appendChild(r2), n2.elt.src = e3, n2.modified = true;
        } }), n2._onended = function() {
        }, n2.elt.onended = function() {
          n2._onended(n2);
        };
      }, h.default.MediaElement.prototype = Object.create(h.default.Element.prototype), h.default.MediaElement.prototype.play = function() {
        var e2, t2 = this;
        return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), 1 < this.elt.readyState || this.elt.load(), (e2 = this.elt.play()) && e2.catch && e2.catch(function(e3) {
          "NotAllowedError" === e3.name ? h.default._friendlyAutoplayError(t2.src) : console.error("Media play method encountered an unexpected error", e3);
        }), this;
      }, h.default.MediaElement.prototype.stop = function() {
        return this.elt.pause(), this.elt.currentTime = 0, this;
      }, h.default.MediaElement.prototype.pause = function() {
        return this.elt.pause(), this;
      }, h.default.MediaElement.prototype.loop = function() {
        return this.elt.setAttribute("loop", true), this.play(), this;
      }, h.default.MediaElement.prototype.noLoop = function() {
        return this.elt.removeAttribute("loop"), this;
      }, h.default.MediaElement.prototype._setupAutoplayFailDetection = function() {
        var e2 = this, t2 = setTimeout(function() {
          return h.default._friendlyAutoplayError(e2.src);
        }, 500);
        this.elt.addEventListener("play", function() {
          return clearTimeout(t2);
        }, { passive: true, once: true });
      }, h.default.MediaElement.prototype.autoplay = function(e2) {
        var t2 = this, r2 = this.elt.getAttribute("autoplay");
        return this.elt.setAttribute("autoplay", e2), e2 && !r2 && (e2 = function() {
          return t2._setupAutoplayFailDetection();
        }, 4 === this.elt.readyState ? e2() : this.elt.addEventListener("canplay", e2, { passive: true, once: true })), this;
      }, h.default.MediaElement.prototype.volume = function(e2) {
        if (void 0 === e2)
          return this.elt.volume;
        this.elt.volume = e2;
      }, h.default.MediaElement.prototype.speed = function(e2) {
        if (void 0 === e2)
          return this.presetPlaybackRate || this.elt.playbackRate;
        this.loadedmetadata ? this.elt.playbackRate = e2 : this.presetPlaybackRate = e2;
      }, h.default.MediaElement.prototype.time = function(e2) {
        return void 0 === e2 ? this.elt.currentTime : (this.elt.currentTime = e2, this);
      }, h.default.MediaElement.prototype.duration = function() {
        return this.elt.duration;
      }, h.default.MediaElement.prototype.pixels = [], h.default.MediaElement.prototype._ensureCanvas = function() {
        this.canvas || (this.canvas = document.createElement("canvas"), this.drawingContext = this.canvas.getContext("2d"), this.setModified(true)), this.loadedmetadata && (this.canvas.width !== this.elt.width && (this.canvas.width = this.elt.width, this.canvas.height = this.elt.height, this.width = this.canvas.width, this.height = this.canvas.height), this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height), this.setModified(true));
      }, h.default.MediaElement.prototype.loadPixels = function() {
        return this._ensureCanvas(), h.default.Renderer2D.prototype.loadPixels.apply(this, arguments);
      }, h.default.MediaElement.prototype.updatePixels = function(e2, t2, r2, o2) {
        return this.loadedmetadata && (this._ensureCanvas(), h.default.Renderer2D.prototype.updatePixels.call(this, e2, t2, r2, o2)), this.setModified(true), this;
      }, h.default.MediaElement.prototype.get = function() {
        return this._ensureCanvas(), h.default.Renderer2D.prototype.get.apply(this, arguments);
      }, h.default.MediaElement.prototype._getPixel = function() {
        return this.loadPixels(), h.default.Renderer2D.prototype._getPixel.apply(this, arguments);
      }, h.default.MediaElement.prototype.set = function(e2, t2, r2) {
        this.loadedmetadata && (this._ensureCanvas(), h.default.Renderer2D.prototype.set.call(this, e2, t2, r2), this.setModified(true));
      }, h.default.MediaElement.prototype.copy = function() {
        this._ensureCanvas(), h.default.prototype.copy.apply(this, arguments);
      }, h.default.MediaElement.prototype.mask = function() {
        this.loadPixels(), this.setModified(true), h.default.Image.prototype.mask.apply(this, arguments);
      }, h.default.MediaElement.prototype.isModified = function() {
        return this._modified;
      }, h.default.MediaElement.prototype.setModified = function(e2) {
        this._modified = e2;
      }, h.default.MediaElement.prototype.onended = function(e2) {
        return this._onended = e2, this;
      }, h.default.MediaElement.prototype.connect = function(e2) {
        var t2, r2;
        if ("function" == typeof h.default.prototype.getAudioContext)
          t2 = h.default.prototype.getAudioContext(), r2 = h.default.soundOut.input;
        else
          try {
            r2 = (t2 = e2.context).destination;
          } catch (e3) {
            throw "connect() is meant to be used with Web Audio API or p5.sound.js";
          }
        this.audioSourceNode || (this.audioSourceNode = t2.createMediaElementSource(this.elt), this.audioSourceNode.connect(r2)), e2 ? e2.input ? this.audioSourceNode.connect(e2.input) : this.audioSourceNode.connect(e2) : this.audioSourceNode.connect(r2);
      }, h.default.MediaElement.prototype.disconnect = function() {
        if (!this.audioSourceNode)
          throw "nothing to disconnect";
        this.audioSourceNode.disconnect();
      }, h.default.MediaElement.prototype.showControls = function() {
        this.elt.style["text-align"] = "inherit", this.elt.controls = true;
      }, h.default.MediaElement.prototype.hideControls = function() {
        this.elt.controls = false;
      };
      function s2(e2, t2, r2, o2) {
        this.callback = e2, this.time = t2, this.id = r2, this.val = o2;
      }
      h.default.MediaElement.prototype.addCue = function(e2, t2, r2) {
        var o2 = this._cueIDCounter++, t2 = new s2(t2, e2, o2, r2);
        return this._cues.push(t2), this.elt.ontimeupdate || (this.elt.ontimeupdate = this._onTimeUpdate.bind(this)), o2;
      }, h.default.MediaElement.prototype.removeCue = function(e2) {
        for (var t2 = 0; t2 < this._cues.length; t2++)
          this._cues[t2].id === e2 && (console.log(e2), this._cues.splice(t2, 1));
        0 === this._cues.length && (this.elt.ontimeupdate = null);
      }, h.default.MediaElement.prototype.clearCues = function() {
        this._cues = [], this.elt.ontimeupdate = null;
      }, h.default.MediaElement.prototype._onTimeUpdate = function() {
        for (var e2 = this.time(), t2 = 0; t2 < this._cues.length; t2++) {
          var r2 = this._cues[t2].time, o2 = this._cues[t2].val;
          this._prevTime < r2 && r2 <= e2 && this._cues[t2].callback(o2);
        }
        this._prevTime = e2;
      }, h.default.File = function(e2, t2) {
        this.file = e2, this._pInst = t2;
        t2 = e2.type.split("/");
        this.type = t2[0], this.subtype = t2[1], this.name = e2.name, this.size = e2.size, this.data = void 0;
      }, h.default.File._createLoader = function(o2, n2) {
        var e2 = new FileReader();
        return e2.onload = function(e3) {
          var t2, r2 = new h.default.File(o2);
          "application/json" === r2.file.type ? r2.data = JSON.parse(e3.target.result) : "text/xml" === r2.file.type ? (t2 = new DOMParser().parseFromString(e3.target.result, "text/xml"), r2.data = new h.default.XML(t2.documentElement)) : r2.data = e3.target.result, n2(r2);
        }, e2;
      }, h.default.File._load = function(e2, t2) {
        var r2;
        /^text\//.test(e2.type) || "application/json" === e2.type ? h.default.File._createLoader(e2, t2).readAsText(e2) : /^(video|audio)\//.test(e2.type) ? ((r2 = new h.default.File(e2)).data = URL.createObjectURL(e2), t2(r2)) : h.default.File._createLoader(e2, t2).readAsDataURL(e2);
      };
      e = h.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.every": 151, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.for-each": 154, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.splice": 164, "core-js/modules/es.function.name": 165, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.trim": 193, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.for-each": 229, "core-js/modules/web.dom-collections.iterator": 230, "core-js/modules/web.url": 232 }], 284: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (y = e("../core/main")) && y.__esModule ? y : { default: y }, s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      n.default.prototype.deviceOrientation = 1 < window.innerWidth / window.innerHeight ? "landscape" : "portrait", n.default.prototype.accelerationX = 0, n.default.prototype.accelerationY = 0, n.default.prototype.accelerationZ = 0, n.default.prototype.pAccelerationX = 0, n.default.prototype.pAccelerationY = 0, n.default.prototype.pAccelerationZ = 0, n.default.prototype._updatePAccelerations = function() {
        this._setProperty("pAccelerationX", this.accelerationX), this._setProperty("pAccelerationY", this.accelerationY), this._setProperty("pAccelerationZ", this.accelerationZ);
      }, n.default.prototype.rotationX = 0, n.default.prototype.rotationY = 0, n.default.prototype.rotationZ = 0, n.default.prototype.pRotationX = 0, n.default.prototype.pRotationY = 0;
      var l = n.default.prototype.pRotationZ = 0, u = 0, c = 0, d = "clockwise", f = "clockwise", h = "clockwise", p = (n.default.prototype.pRotateDirectionX = void 0, n.default.prototype.pRotateDirectionY = void 0, n.default.prototype.pRotateDirectionZ = void 0, n.default.prototype._updatePRotations = function() {
        this._setProperty("pRotationX", this.rotationX), this._setProperty("pRotationY", this.rotationY), this._setProperty("pRotationZ", this.rotationZ);
      }, n.default.prototype.turnAxis = void 0, 0.5), m = 30, y = (n.default.prototype.setMoveThreshold = function(e2) {
        n.default._validateParameters("setMoveThreshold", arguments), p = e2;
      }, n.default.prototype.setShakeThreshold = function(e2) {
        n.default._validateParameters("setShakeThreshold", arguments), m = e2;
      }, n.default.prototype._ondeviceorientation = function(e2) {
        this._updatePRotations(), this._angleMode === s2.radians && (e2.beta = e2.beta * (_PI / 180), e2.gamma = e2.gamma * (_PI / 180), e2.alpha = e2.alpha * (_PI / 180)), this._setProperty("rotationX", e2.beta), this._setProperty("rotationY", e2.gamma), this._setProperty("rotationZ", e2.alpha), this._handleMotion();
      }, n.default.prototype._ondevicemotion = function(e2) {
        this._updatePAccelerations(), this._setProperty("accelerationX", 2 * e2.acceleration.x), this._setProperty("accelerationY", 2 * e2.acceleration.y), this._setProperty("accelerationZ", 2 * e2.acceleration.z), this._handleMotion();
      }, n.default.prototype._handleMotion = function() {
        90 === window.orientation || -90 === window.orientation ? this._setProperty("deviceOrientation", "landscape") : 0 === window.orientation ? this._setProperty("deviceOrientation", "portrait") : void 0 === window.orientation && this._setProperty("deviceOrientation", "undefined");
        var e2, t2, r2, o2, n2, s3 = this._isGlobal ? window : this;
        "function" == typeof s3.deviceMoved && (Math.abs(this.accelerationX - this.pAccelerationX) > p || Math.abs(this.accelerationY - this.pAccelerationY) > p || Math.abs(this.accelerationZ - this.pAccelerationZ) > p) && s3.deviceMoved(), "function" == typeof s3.deviceTurned && (t2 = this.rotationX + 180, e2 = this.pRotationX + 180, r2 = l + 180, 0 < t2 - e2 && t2 - e2 < 270 || t2 - e2 < -270 ? d = "clockwise" : (t2 - e2 < 0 || 270 < t2 - e2) && (d = "counter-clockwise"), d !== this.pRotateDirectionX && (r2 = t2), 90 < Math.abs(t2 - r2) && Math.abs(t2 - r2) < 270 && (r2 = t2, this._setProperty("turnAxis", "X"), s3.deviceTurned()), this.pRotateDirectionX = d, l = r2 - 180, e2 = this.rotationY + 180, t2 = this.pRotationY + 180, r2 = u + 180, 0 < e2 - t2 && e2 - t2 < 270 || e2 - t2 < -270 ? f = "clockwise" : (e2 - t2 < 0 || 270 < e2 - this.pRotationY) && (f = "counter-clockwise"), f !== this.pRotateDirectionY && (r2 = e2), 90 < Math.abs(e2 - r2) && Math.abs(e2 - r2) < 270 && (r2 = e2, this._setProperty("turnAxis", "Y"), s3.deviceTurned()), this.pRotateDirectionY = f, u = r2 - 180, 0 < this.rotationZ - this.pRotationZ && this.rotationZ - this.pRotationZ < 270 || this.rotationZ - this.pRotationZ < -270 ? h = "clockwise" : (this.rotationZ - this.pRotationZ < 0 || 270 < this.rotationZ - this.pRotationZ) && (h = "counter-clockwise"), h !== this.pRotateDirectionZ && (c = this.rotationZ), 90 < Math.abs(this.rotationZ - c) && Math.abs(this.rotationZ - c) < 270 && (c = this.rotationZ, this._setProperty("turnAxis", "Z"), s3.deviceTurned()), this.pRotateDirectionZ = h, this._setProperty("turnAxis", void 0)), "function" == typeof s3.deviceShaken && (null !== this.pAccelerationX && (o2 = Math.abs(this.accelerationX - this.pAccelerationX), n2 = Math.abs(this.accelerationY - this.pAccelerationY)), m < o2 + n2 && s3.deviceShaken());
      }, n.default);
      r.default = y;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 285: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      o.default.prototype.isKeyPressed = false, o.default.prototype.keyIsPressed = false, o.default.prototype.key = "", o.default.prototype.keyCode = 0, o.default.prototype._onkeydown = function(e2) {
        var t2;
        this._downKeys[e2.which] || (this._setProperty("isKeyPressed", true), this._setProperty("keyIsPressed", true), this._setProperty("keyCode", e2.which), this._downKeys[e2.which] = true, this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which), "function" != typeof (t2 = this._isGlobal ? window : this).keyPressed || e2.charCode || false === t2.keyPressed(e2) && e2.preventDefault());
      }, o.default.prototype._onkeyup = function(e2) {
        this._downKeys[e2.which] = false, this._areDownKeys() || (this._setProperty("isKeyPressed", false), this._setProperty("keyIsPressed", false)), this._setProperty("_lastKeyCodeTyped", null), this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which), this._setProperty("keyCode", e2.which);
        var t2 = this._isGlobal ? window : this;
        "function" == typeof t2.keyReleased && false === t2.keyReleased(e2) && e2.preventDefault();
      }, o.default.prototype._onkeypress = function(e2) {
        var t2;
        e2.which !== this._lastKeyCodeTyped && (this._setProperty("_lastKeyCodeTyped", e2.which), this._setProperty("key", e2.key || String.fromCharCode(e2.which) || e2.which), "function" == typeof (t2 = this._isGlobal ? window : this).keyTyped && false === t2.keyTyped(e2) && e2.preventDefault());
      }, o.default.prototype._onblur = function(e2) {
        this._downKeys = {};
      }, o.default.prototype.keyIsDown = function(e2) {
        return o.default._validateParameters("keyIsDown", arguments), this._downKeys[e2] || false;
      }, o.default.prototype._areDownKeys = function() {
        for (var e2 in this._downKeys)
          if (this._downKeys.hasOwnProperty(e2) && true === this._downKeys[e2])
            return true;
        return false;
      };
      e = o.default;
      r.default = e;
    }, { "../core/main": 267 }], 286: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.string.includes"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (n = e("../core/main")) && n.__esModule ? n : { default: n }, s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      n.default.prototype.movedX = 0, n.default.prototype.movedY = 0, n.default.prototype._hasMouseInteracted = false, n.default.prototype.mouseX = 0, n.default.prototype.mouseY = 0, n.default.prototype.pmouseX = 0, n.default.prototype.pmouseY = 0, n.default.prototype.winMouseX = 0, n.default.prototype.winMouseY = 0, n.default.prototype.pwinMouseX = 0, n.default.prototype.pwinMouseY = 0, n.default.prototype.mouseButton = 0, n.default.prototype.mouseIsPressed = false, n.default.prototype._updateNextMouseCoords = function(e2) {
        var t2, r2, o2, n2, s3;
        null !== this._curElement && (!e2.touches || 0 < e2.touches.length) && (t2 = this._curElement.elt, r2 = this.width, o2 = this.height, (n2 = e2) && !n2.clientX && (n2.touches ? n2 = n2.touches[0] : n2.changedTouches && (n2 = n2.changedTouches[0])), s3 = t2.getBoundingClientRect(), r2 = t2.scrollWidth / r2 || 1, t2 = t2.scrollHeight / o2 || 1, o2 = { x: (n2.clientX - s3.left) / r2, y: (n2.clientY - s3.top) / t2, winX: n2.clientX, winY: n2.clientY, id: n2.identifier }, this._setProperty("movedX", e2.movementX), this._setProperty("movedY", e2.movementY), this._setProperty("mouseX", o2.x), this._setProperty("mouseY", o2.y), this._setProperty("winMouseX", o2.winX), this._setProperty("winMouseY", o2.winY)), this._hasMouseInteracted || (this._updateMouseCoords(), this._setProperty("_hasMouseInteracted", true));
      }, n.default.prototype._updateMouseCoords = function() {
        this._setProperty("pmouseX", this.mouseX), this._setProperty("pmouseY", this.mouseY), this._setProperty("pwinMouseX", this.winMouseX), this._setProperty("pwinMouseY", this.winMouseY), this._setProperty("_pmouseWheelDeltaY", this._mouseWheelDeltaY);
      }, n.default.prototype._setMouseButton = function(e2) {
        1 === e2.button ? this._setProperty("mouseButton", s2.CENTER) : 2 === e2.button ? this._setProperty("mouseButton", s2.RIGHT) : this._setProperty("mouseButton", s2.LEFT);
      }, n.default.prototype._onmousemove = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._updateNextMouseCoords(e2), this.mouseIsPressed ? "function" == typeof t2.mouseDragged ? false === t2.mouseDragged(e2) && e2.preventDefault() : "function" == typeof t2.touchMoved && false === t2.touchMoved(e2) && e2.preventDefault() : "function" == typeof t2.mouseMoved && false === t2.mouseMoved(e2) && e2.preventDefault();
      }, n.default.prototype._onmousedown = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", true), this._setMouseButton(e2), this._updateNextMouseCoords(e2), "function" == typeof t2.mousePressed ? false === t2.mousePressed(e2) && e2.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t2.touchStarted && false === t2.touchStarted(e2) && e2.preventDefault();
      }, n.default.prototype._onmouseup = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", false), "function" == typeof t2.mouseReleased ? false === t2.mouseReleased(e2) && e2.preventDefault() : "function" == typeof t2.touchEnded && false === t2.touchEnded(e2) && e2.preventDefault();
      }, n.default.prototype._ondragend = n.default.prototype._onmouseup, n.default.prototype._ondragover = n.default.prototype._onmousemove, n.default.prototype._onclick = function(e2) {
        var t2 = this._isGlobal ? window : this;
        "function" == typeof t2.mouseClicked && false === t2.mouseClicked(e2) && e2.preventDefault();
      }, n.default.prototype._ondblclick = function(e2) {
        var t2 = this._isGlobal ? window : this;
        "function" == typeof t2.doubleClicked && false === t2.doubleClicked(e2) && e2.preventDefault();
      }, n.default.prototype._mouseWheelDeltaY = 0, n.default.prototype._pmouseWheelDeltaY = 0, n.default.prototype._onwheel = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._setProperty("_mouseWheelDeltaY", e2.deltaY), "function" == typeof t2.mouseWheel && (e2.delta = e2.deltaY, false === t2.mouseWheel(e2) && e2.preventDefault());
      }, n.default.prototype.requestPointerLock = function() {
        var e2 = this._curElement.elt;
        return e2.requestPointerLock = e2.requestPointerLock || e2.mozRequestPointerLock, e2.requestPointerLock ? (e2.requestPointerLock(), true) : (console.log("requestPointerLock is not implemented in this browser"), false);
      }, n.default.prototype.exitPointerLock = function() {
        document.exitPointerLock();
      };
      e = n.default;
      r.default = e;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 287: [function(e, t, r) {
      e("core-js/modules/es.array.includes"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.string.includes"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.prototype.touches = [], e.default.prototype._updateTouchCoords = function(e2) {
        if (null !== this._curElement) {
          for (var t2 = [], r2 = 0; r2 < e2.touches.length; r2++)
            t2[r2] = function(e3, t3, r3, o) {
              var n = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0, s2 = e3.getBoundingClientRect(), t3 = e3.scrollWidth / t3 || 1, e3 = e3.scrollHeight / r3 || 1, r3 = o.touches[n] || o.changedTouches[n];
              return { x: (r3.clientX - s2.left) / t3, y: (r3.clientY - s2.top) / e3, winX: r3.clientX, winY: r3.clientY, id: r3.identifier };
            }(this._curElement.elt, this.width, this.height, e2, r2);
          this._setProperty("touches", t2);
        }
      }, e.default.prototype._ontouchstart = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", true), this._updateTouchCoords(e2), this._updateNextMouseCoords(e2), this._updateMouseCoords(), "function" == typeof t2.touchStarted ? false === t2.touchStarted(e2) && e2.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t2.mousePressed && false === t2.mousePressed(e2) && e2.preventDefault();
      }, e.default.prototype._ontouchmove = function(e2) {
        var t2 = this._isGlobal ? window : this;
        this._updateTouchCoords(e2), this._updateNextMouseCoords(e2), "function" == typeof t2.touchMoved ? false === t2.touchMoved(e2) && e2.preventDefault() : "function" == typeof t2.mouseDragged && false === t2.mouseDragged(e2) && e2.preventDefault();
      }, e.default.prototype._ontouchend = function(e2) {
        this._setProperty("mouseIsPressed", false), this._updateTouchCoords(e2), this._updateNextMouseCoords(e2);
        var t2 = this._isGlobal ? window : this;
        "function" == typeof t2.touchEnded ? false === t2.touchEnded(e2) && e2.preventDefault() : "function" == typeof t2.mouseReleased && false === t2.mouseReleased(e2) && e2.preventDefault();
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.includes": 156, "core-js/modules/es.string.includes": 185 }], 288: [function(e, t, r) {
      e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.typed-array.int32-array"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.typed-array.int32-array"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var N, F, B, G, V = {};
      function o(e2, I) {
        for (var t2, r2, o2, n, s2, i2, a, l, u, c, d = V._toPixels(e2), f = e2.width, h = e2.height, p = f * h, m = new Int32Array(p), y = 0; y < p; y++)
          m[y] = V._getARGB(d, y);
        var g, v, b, j = new Int32Array(p), _ = new Int32Array(p), x = new Int32Array(p), w = new Int32Array(p), S = 0, M = 3.5 * I | 0;
        if (N !== (M = M < 1 ? 1 : M < 248 ? M : 248)) {
          F = 1 + (N = M) << 1, B = new Int32Array(F), G = new Array(F);
          for (var E, T, C = 0; C < F; C++)
            G[C] = new Int32Array(256);
          for (var O = 1, L = M - 1; O < M; O++) {
            B[M + O] = B[L] = T = L * L;
            for (var k = G[M + O], U = G[L--], A = 0; A < 256; A++)
              k[A] = U[A] = T * A;
          }
          E = B[M] = M * M, k = G[M];
          for (var P = 0; P < 256; P++)
            k[P] = E * P;
        }
        for (v = 0; v < h; v++) {
          for (g = 0; g < f; g++) {
            if (n = o2 = r2 = s2 = t2 = 0, (i2 = g - N) < 0)
              c = -i2, i2 = 0;
            else {
              if (f <= i2)
                break;
              c = 0;
            }
            for (b = c; b < F && !(f <= i2); b++) {
              var R, D = m[i2 + S];
              s2 += (R = G[b])[(-16777216 & D) >>> 24], r2 += R[(16711680 & D) >> 16], o2 += R[(65280 & D) >> 8], n += R[255 & D], t2 += B[b], i2++;
            }
            j[a = S + g] = s2 / t2, _[a] = r2 / t2, x[a] = o2 / t2, w[a] = n / t2;
          }
          S += f;
        }
        for (u = (l = -N) * f, v = S = 0; v < h; v++) {
          for (g = 0; g < f; g++) {
            if (l < (n = o2 = r2 = s2 = t2 = 0))
              c = a = -l, i2 = g;
            else {
              if (h <= l)
                break;
              c = 0, a = l, i2 = g + u;
            }
            for (b = c; b < F && !(h <= a); b++)
              s2 += (R = G[b])[j[i2]], r2 += R[_[i2]], o2 += R[x[i2]], n += R[w[i2]], t2 += B[b], a++, i2 += f;
            m[g + S] = s2 / t2 << 24 | r2 / t2 << 16 | o2 / t2 << 8 | n / t2;
          }
          S += f, u += f, l++;
        }
        V._setPixels(d, m);
      }
      V._toPixels = function(e2) {
        var t2, r2;
        return e2 instanceof ImageData ? e2.data : e2.getContext("2d") ? e2.getContext("2d").getImageData(0, 0, e2.width, e2.height).data : e2.getContext("webgl") ? (r2 = (t2 = e2.getContext("webgl")).drawingBufferWidth * t2.drawingBufferHeight * 4, r2 = new Uint8Array(r2), t2.readPixels(0, 0, e2.width, e2.height, t2.RGBA, t2.UNSIGNED_BYTE, r2), r2) : void 0;
      }, V._getARGB = function(e2, t2) {
        t2 *= 4;
        return e2[3 + t2] << 24 & 4278190080 | e2[t2] << 16 & 16711680 | e2[1 + t2] << 8 & 65280 | 255 & e2[2 + t2];
      }, V._setPixels = function(e2, t2) {
        for (var r2, o2 = 0, n = e2.length; o2 < n; o2++)
          e2[0 + (r2 = 4 * o2)] = (16711680 & t2[o2]) >>> 16, e2[1 + r2] = (65280 & t2[o2]) >>> 8, e2[2 + r2] = 255 & t2[o2], e2[3 + r2] = (4278190080 & t2[o2]) >>> 24;
      }, V._toImageData = function(e2) {
        return e2 instanceof ImageData ? e2 : e2.getContext("2d").getImageData(0, 0, e2.width, e2.height);
      }, V._createImageData = function(e2, t2) {
        return V._tmpCanvas = document.createElement("canvas"), V._tmpCtx = V._tmpCanvas.getContext("2d"), this._tmpCtx.createImageData(e2, t2);
      }, V.apply = function(e2, t2, r2) {
        var o2 = e2.getContext("2d"), n = o2.getImageData(0, 0, e2.width, e2.height), t2 = t2(n, r2);
        t2 instanceof ImageData ? o2.putImageData(t2, 0, 0, 0, 0, e2.width, e2.height) : o2.putImageData(n, 0, 0, 0, 0, e2.width, e2.height);
      }, V.threshold = function(e2, t2) {
        for (var r2 = V._toPixels(e2), o2 = (void 0 === t2 && (t2 = 0.5), Math.floor(255 * t2)), n = 0; n < r2.length; n += 4) {
          var s2 = void 0, s2 = o2 <= 0.2126 * r2[n] + 0.7152 * r2[n + 1] + 0.0722 * r2[n + 2] ? 255 : 0;
          r2[n] = r2[n + 1] = r2[n + 2] = s2;
        }
      }, V.gray = function(e2) {
        for (var t2 = V._toPixels(e2), r2 = 0; r2 < t2.length; r2 += 4) {
          var o2 = t2[r2], n = t2[r2 + 1], s2 = t2[r2 + 2];
          t2[r2] = t2[r2 + 1] = t2[r2 + 2] = 0.2126 * o2 + 0.7152 * n + 0.0722 * s2;
        }
      }, V.opaque = function(e2) {
        for (var t2 = V._toPixels(e2), r2 = 0; r2 < t2.length; r2 += 4)
          t2[r2 + 3] = 255;
        return t2;
      }, V.invert = function(e2) {
        for (var t2 = V._toPixels(e2), r2 = 0; r2 < t2.length; r2 += 4)
          t2[r2] = 255 - t2[r2], t2[r2 + 1] = 255 - t2[r2 + 1], t2[r2 + 2] = 255 - t2[r2 + 2];
      }, V.posterize = function(e2, t2) {
        var r2 = V._toPixels(e2);
        if (t2 < 2 || 255 < t2)
          throw new Error("Level must be greater than 2 and less than 255 for posterize");
        for (var o2 = t2 - 1, n = 0; n < r2.length; n += 4) {
          var s2 = r2[n], i2 = r2[n + 1], a = r2[n + 2];
          r2[n] = 255 * (s2 * t2 >> 8) / o2, r2[n + 1] = 255 * (i2 * t2 >> 8) / o2, r2[n + 2] = 255 * (a * t2 >> 8) / o2;
        }
      }, V.dilate = function(e2) {
        for (var t2, r2, o2, n, s2, i2, a, l, u, c = V._toPixels(e2), d = 0, f = c.length ? c.length / 4 : 0, h = new Int32Array(f); d < f; )
          for (r2 = (t2 = d) + e2.width; d < r2; )
            n = o2 = V._getARGB(c, d), (u = d - 1) < t2 && (u = d), r2 <= (l = d + 1) && (l = d), (s2 = d - e2.width) < 0 && (s2 = 0), f <= (i2 = d + e2.width) && (i2 = d), s2 = V._getARGB(c, s2), u = V._getARGB(c, u), i2 = V._getARGB(c, i2), (n = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) < (a = 77 * (u >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) && (o2 = u, n = a), n < (a = 77 * ((u = V._getARGB(c, l)) >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) && (o2 = u, n = a), n < (l = 77 * (s2 >> 16 & 255) + 151 * (s2 >> 8 & 255) + 28 * (255 & s2)) && (o2 = s2, n = l), n < (u = 77 * (i2 >> 16 & 255) + 151 * (i2 >> 8 & 255) + 28 * (255 & i2)) && (o2 = i2, n = u), h[d++] = o2;
        V._setPixels(c, h);
      }, V.erode = function(e2) {
        for (var t2, r2, o2, n, s2, i2, a, l, u, c = V._toPixels(e2), d = 0, f = c.length ? c.length / 4 : 0, h = new Int32Array(f); d < f; )
          for (r2 = (t2 = d) + e2.width; d < r2; )
            n = o2 = V._getARGB(c, d), (u = d - 1) < t2 && (u = d), r2 <= (l = d + 1) && (l = d), (s2 = d - e2.width) < 0 && (s2 = 0), f <= (i2 = d + e2.width) && (i2 = d), s2 = V._getARGB(c, s2), u = V._getARGB(c, u), i2 = V._getARGB(c, i2), (a = 77 * (u >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) < (n = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) && (o2 = u, n = a), (a = 77 * ((u = V._getARGB(c, l)) >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) < n && (o2 = u, n = a), (l = 77 * (s2 >> 16 & 255) + 151 * (s2 >> 8 & 255) + 28 * (255 & s2)) < n && (o2 = s2, n = l), (u = 77 * (i2 >> 16 & 255) + 151 * (i2 >> 8 & 255) + 28 * (255 & i2)) < n && (o2 = i2, n = u), h[d++] = o2;
        V._setPixels(c, h);
      }, V.blur = function(e2, t2) {
        o(e2, t2);
      }, r.default = V;
    }, { "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.int32-array": 209, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-array": 226 }], 289: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.set"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.set"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var O = o(e("../core/main")), L = o(e("omggif"));
      function o(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      function k(e2) {
        return function(e3) {
          if (Array.isArray(e3)) {
            for (var t2 = 0, r2 = new Array(e3.length); t2 < e3.length; t2++)
              r2[t2] = e3[t2];
            return r2;
          }
        }(e2) || function(e3) {
          if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3))
            return Array.from(e3);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      O.default.prototype.createImage = function(e2, t2) {
        return O.default._validateParameters("createImage", arguments), new O.default.Image(e2, t2);
      }, O.default.prototype.saveCanvas = function() {
        O.default._validateParameters("saveCanvas", arguments);
        var e2, t2, r2, o2, n = [].slice.call(arguments);
        switch (arguments[0] instanceof HTMLCanvasElement ? (e2 = arguments[0], n.shift()) : arguments[0] instanceof O.default.Element ? (e2 = arguments[0].elt, n.shift()) : e2 = this._curElement && this._curElement.elt, 1 <= n.length && (t2 = n[0]), r2 = (r2 = 2 <= n.length ? n[1] : r2) || O.default.prototype._checkFileExtension(t2, r2)[1] || "png") {
          default:
            o2 = "image/png";
            break;
          case "jpeg":
          case "jpg":
            o2 = "image/jpeg";
        }
        e2.toBlob(function(e3) {
          O.default.prototype.downloadFile(e3, t2, r2);
        }, o2);
      }, O.default.prototype.encodeAndDownloadGif = function(h, e2) {
        for (var p = h.gifProperties, t2 = p.loopLimit, r2 = (1 === t2 ? t2 = null : null === t2 && (t2 = 0), new Uint8Array(h.width * h.height * p.numFrames)), m = [], o2 = {}, n = 0; n < p.numFrames; n++) {
          for (var s2 = /* @__PURE__ */ new Set(), i2 = p.frames[n].image.data, a = i2.length, l = new Uint32Array(h.width * h.height), u = 0, c = 0; u < a; u += 4, c++) {
            var d = i2[u + 0] << 16 | i2[u + 1] << 8 | i2[u + 2] << 0;
            s2.add(d), l[c] = d;
          }
          var f = k(s2).sort().toString();
          void 0 === o2[f] ? o2[f] = { freq: 1, frames: [n] } : (o2[f].freq += 1, o2[f].frames.push(n)), m.push(l);
        }
        for (var y = [], g = Object.keys(o2).sort(function(e3, t3) {
          return o2[t3].freq - o2[e3].freq;
        }), v = g[0].split(",").map(function(e3) {
          return parseInt(e3);
        }), y = y.concat(o2[v].frames), b = new Set(v), j = 1; j < g.length; j++) {
          var _ = g[j].split(",").map(function(e3) {
            return parseInt(e3);
          }).filter(function(e3) {
            return !b.has(e3);
          });
          if (v.length + _.length <= 256) {
            for (var x = 0; x < _.length; x++)
              v.push(_[x]), b.add(_[x]);
            y = y.concat(o2[g[j]].frames);
          }
        }
        y = new Set(y);
        for (var w = {}, S = 0; S < v.length; S++)
          w[v[S]] || (w[v[S]] = S);
        for (var M = 1; M < v.length; )
          M <<= 1;
        v.length = M;
        for (var t2 = { loop: t2, palette: new Uint32Array(v) }, E = new L.default.GifWriter(r2, h.width, h.height, t2), T = {}, C = 0; C < p.numFrames; C++)
          !function(e3) {
            for (var t3 = !y.has(e3), r3 = t3 ? [] : v, o3 = new Uint8Array(h.width * h.height), n2 = {}, s3 = /* @__PURE__ */ new Set(), i3 = 0; i3 < m[e3].length; i3++) {
              var a2 = m[e3][i3];
              t3 ? (void 0 === n2[a2] && (n2[a2] = r3.length, r3.push(a2)), o3[i3] = n2[a2]) : o3[i3] = w[a2], 0 < e3 && m[e3 - 1][i3] !== a2 && s3.add(a2);
            }
            var l2 = {}, u2 = r3.filter(function(e4) {
              return !s3.has(e4);
            });
            if (0 < u2.length) {
              var u2 = u2[0], c2 = (t3 ? n2 : w)[u2];
              if (0 < e3) {
                for (var d2 = 0; d2 < m[e3].length; d2++)
                  m[e3 - 1][d2] === m[e3][d2] && (o3[d2] = c2);
                l2.transparent = c2, T.frameOpts.disposal = 1;
              }
            }
            if (l2.delay = p.frames[e3].delay / 10, t3) {
              for (var f2 = 1; f2 < r3.length; )
                f2 <<= 1;
              r3.length = f2, l2.palette = new Uint32Array(r3);
            }
            0 < e3 && E.addFrame(0, 0, h.width, h.height, T.pixelPaletteIndex, T.frameOpts), T = { pixelPaletteIndex: o3, frameOpts: l2 };
          }(C);
        T.frameOpts.disposal = 1, E.addFrame(0, 0, h.width, h.height, T.pixelPaletteIndex, T.frameOpts);
        t2 = new Blob([r2.slice(0, E.end())], { type: "image/gif" });
        O.default.prototype.downloadFile(t2, e2, "gif");
      }, O.default.prototype.saveFrames = function(e2, t2, r2, o2, i2) {
        O.default._validateParameters("saveFrames", arguments);
        r2 = O.default.prototype.constrain(r2 = r2 || 3, 0, 15);
        r2 *= 1e3;
        var o2 = O.default.prototype.constrain(o2 || 15, 0, 22), n = 0, s2 = O.default.prototype._makeFrame, a = this._curElement.elt, l = [], u = setInterval(function() {
          l.push(s2(e2 + n, t2, a)), n++;
        }, 1e3 / o2);
        setTimeout(function() {
          if (clearInterval(u), i2)
            i2(l);
          else {
            var e3 = true, t3 = false, r3 = void 0;
            try {
              for (var o3, n2 = l[Symbol.iterator](); !(e3 = (o3 = n2.next()).done); e3 = true) {
                var s3 = o3.value;
                O.default.prototype.downloadFile(s3.imageData, s3.filename, s3.ext);
              }
            } catch (e4) {
              t3 = true, r3 = e4;
            } finally {
              try {
                e3 || null == n2.return || n2.return();
              } finally {
                if (t3)
                  throw r3;
              }
            }
          }
          l = [];
        }, 0.01 + r2);
      }, O.default.prototype._makeFrame = function(e2, t2, r2) {
        var o2, r2 = this ? this._curElement.elt : r2;
        if (t2)
          switch (t2.toLowerCase()) {
            case "png":
              o2 = "image/png";
              break;
            case "jpeg":
            case "jpg":
              o2 = "image/jpeg";
              break;
            default:
              o2 = "image/png";
          }
        else
          t2 = "png", o2 = "image/png";
        var r2 = (r2 = r2.toDataURL(o2)).replace(o2, "image/octet-stream"), n = {};
        return n.imageData = r2, n.filename = e2, n.ext = t2, n;
      };
      e = O.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.set": 183, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint32-array": 225, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/web.dom-collections.iterator": 230, omggif: 240 }], 290: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.copy-within"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint8-clamped-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.copy-within"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint8-clamped-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0, e("regenerator-runtime/runtime");
      var O = n(e("../core/main")), m = n(e("../core/helpers")), j = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants")), g = n(e("omggif")), L = e("gifenc");
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      function l(e2, t2, r2, o2, n2, s2, i3) {
        try {
          var a2 = e2[s2](i3), l2 = a2.value;
        } catch (e3) {
          return void r2(e3);
        }
        a2.done ? t2(l2) : Promise.resolve(l2).then(o2, n2);
      }
      function y(e2, t2, r2, o2, n2, s2, i3, a2, l2, u, c) {
        var d, f, h, p, m2, y2, g2, v2, b;
        return e2 === j.COVER && (d = t2, h = r2, g2 = s2, v2 = i3, y2 = a2, b = l2, f = u, p = c, m2 = Math.max(g2 / f, v2 / p), g2 /= m2, v2 /= m2, m2 = y2, y2 = b, d === j.CENTER ? m2 += (f - g2) / 2 : d === j.RIGHT && (m2 += f - g2), h === j.CENTER ? y2 += (p - v2) / 2 : h === j.BOTTOM && (y2 += p - v2), a2 = (b = { x: m2, y: y2, w: g2, h: v2 }).x, l2 = b.y, u = b.w, c = b.h), e2 === j.CONTAIN && (d = t2, f = r2, h = o2, p = n2, m2 = s2, y2 = i3, g2 = u, v2 = c, b = Math.max(g2 / m2, v2 / y2), g2 /= b, v2 /= b, b = h, h = p, d === j.CENTER ? b += (m2 - g2) / 2 : d === j.RIGHT && (b += m2 - g2), f === j.CENTER ? h += (y2 - v2) / 2 : f === j.BOTTOM && (h += y2 - v2), o2 = (e2 = { x: b, y: h, w: g2, h: v2 }).x, n2 = e2.y, s2 = e2.w, i3 = e2.h), { sx: a2, sy: l2, sw: u, sh: c, dx: o2, dy: n2, dw: s2, dh: i3 };
      }
      function v(e2, t2) {
        return 0 < e2 && e2 < t2 ? e2 : t2;
      }
      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), O.default.prototype.loadImage = function(o2, h, p) {
        O.default._validateParameters("loadImage", arguments);
        var m2 = new O.default.Image(1, 1, this), y2 = this, e2 = new Request(o2, { method: "GET", mode: "cors" });
        return fetch(o2, e2).then(function(e3) {
          var t2, r2 = e3.headers.get("content-type");
          null === r2 && console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset."), r2 && r2.includes("image/gif") ? e3.arrayBuffer().then(function(e4) {
            if (e4) {
              var e4 = new Uint8Array(e4), r3 = m2, t3 = h, o3 = p, n2 = function(e5) {
                y2._decrementPreload();
              }.bind(y2), s2 = new g.default.GifReader(e4), i3 = (r3.width = r3.canvas.width = s2.width, r3.height = r3.canvas.height = s2.height, []), a2 = s2.numFrames(), l2 = new Uint8ClampedArray(r3.width * r3.height * 4);
              if (1 < a2) {
                for (var u = 0; u < a2; u++) {
                  var c = s2.frameInfo(u), d = r3.drawingContext.getImageData(0, 0, r3.width, r3.height), f = (l2 = d.data.slice(), !function(e5, t4) {
                    try {
                      t4.decodeAndBlitFrameRGBA(e5, l2);
                    } catch (e6) {
                      O.default._friendlyFileLoadError(8, r3.src), "function" == typeof o3 ? o3(e6) : console.error(e6);
                    }
                  }(u, s2), new ImageData(l2, r3.width, r3.height)), f = (r3.drawingContext.putImageData(f, 0, 0), c.delay);
                  0 === f && (f = 10), i3.push({ image: r3.drawingContext.getImageData(0, 0, r3.width, r3.height), delay: 10 * f }), 2 === c.disposal ? r3.drawingContext.clearRect(c.x, c.y, c.width, c.height) : 3 === c.disposal && r3.drawingContext.putImageData(d, 0, 0, c.x, c.y, c.width, c.height);
                }
                e4 = s2.loopCount();
                null === e4 ? e4 = 1 : 0 === e4 && (e4 = null), r3.drawingContext.putImageData(i3[0].image, 0, 0), r3.gifProperties = { displayIndex: 0, loopLimit: e4, loopCount: 0, frames: i3, numFrames: a2, playing: true, timeDisplayed: 0, lastChangeTime: 0 };
              }
              "function" == typeof t3 && t3(r3), n2();
            }
          }, function(e4) {
            "function" == typeof p ? p(e4) : console.error(e4);
          }) : ((t2 = new Image()).onload = function() {
            m2.width = m2.canvas.width = t2.width, m2.height = m2.canvas.height = t2.height, m2.drawingContext.drawImage(t2, 0, 0), m2.modified = true, "function" == typeof h && h(m2), y2._decrementPreload();
          }, t2.onerror = function(e4) {
            O.default._friendlyFileLoadError(0, t2.src), "function" == typeof p ? p(e4) : console.error(e4);
          }, 0 !== o2.indexOf("data:image/") && (t2.crossOrigin = "Anonymous"), t2.src = o2), m2.modified = true;
        }).catch(function(e3) {
          O.default._friendlyFileLoadError(0, o2), "function" == typeof p ? p(e3) : console.error(e3);
        }), m2;
      }, O.default.prototype.saveGif = function() {
        a2 = regeneratorRuntime.mark(function e2(t2, r3) {
          var o2, n2, s2, i3, a3, l2, u, c, d, f, h, p, m2, y2, g2, v2, b, j2, _, x, w, S, M, E, T, C = arguments;
          return regeneratorRuntime.wrap(function(e3) {
            for (; ; )
              switch (e3.prev = e3.next) {
                case 0:
                  if (o2 = 2 < C.length && void 0 !== C[2] ? C[2] : { delay: 0, units: "seconds" }, "string" != typeof t2)
                    throw TypeError("fileName parameter must be a string");
                  e3.next = 3;
                  break;
                case 3:
                  if ("number" != typeof r3)
                    throw TypeError("Duration parameter must be a number");
                  e3.next = 5;
                  break;
                case 5:
                  if ("number" != typeof o2.delay)
                    throw TypeError("Delay parameter must be a number");
                  e3.next = 7;
                  break;
                case 7:
                  if ("seconds" !== o2.units && "frames" !== o2.units)
                    throw TypeError('Units parameter must be either "frames" or "seconds"');
                  e3.next = 9;
                  break;
                case 9:
                  l2 = o2.units, a3 = o2.delay, i3 = this._targetFrameRate, n2 = (n2 = 1 / (i3 = i3 !== 1 / 0 && void 0 !== i3 && 0 !== i3 ? i3 : 60) * 1e3) < 20 ? 20 : n2, i3 = (s2 = "seconds" === l2 ? r3 * i3 : r3) + (l2 = "seconds" === l2 ? a3 * i3 : a3), a3 = l2, this.frameCount = a3, l2 = this._pixelDensity, this.pixelDensity(1), u = [], c = "p5.gif.progressBar", null !== document.getElementById(c) && document.getElementById(c).remove(), (c = this.createP("")).id("progressBar"), c.style("font-size", "16px"), c.style("font-family", "Montserrat"), c.style("background-color", "#ffffffa0"), c.style("padding", "8px"), c.style("border-radius", "10px"), c.position(0, 0), this.drawingContext instanceof WebGLRenderingContext && (f = document.getElementById("defaultCanvas0").getContext("webgl"), d = new Uint8Array(f.drawingBufferWidth * f.drawingBufferHeight * 4)), this.noLoop();
                case 35:
                  if (a3 < i3)
                    return this.redraw(), g2 = void 0, g2 = this.drawingContext instanceof WebGLRenderingContext ? (d = new Uint8Array(f.drawingBufferWidth * f.drawingBufferHeight * 4), f.readPixels(0, 0, f.drawingBufferWidth, f.drawingBufferHeight, f.RGBA, f.UNSIGNED_BYTE, d), function(e4) {
                      for (var t3 = parseInt(height / 2), r4 = 4 * width, o3 = new Uint8Array(4 * width), n3 = 0; n3 < t3; ++n3) {
                        var s3 = n3 * r4, i4 = (height - n3 - 1) * r4;
                        o3.set(e4.subarray(s3, s3 + r4)), e4.copyWithin(s3, i4, i4 + r4), e4.set(o3, i4);
                      }
                      return e4;
                    }(d)) : this.drawingContext.getImageData(0, 0, this.width, this.height).data, u.push(g2), a3++, c.html("Saved frame <b>" + u.length.toString() + "</b> out of " + s2.toString()), e3.next = 44, new Promise(function(e4) {
                      return setTimeout(e4, 0);
                    });
                  e3.next = 46;
                  break;
                case 44:
                  e3.next = 35;
                  break;
                case 46:
                  c.html("Frames processed, generating color palette..."), this.loop(), this.pixelDensity(l2), h = (0, L.GIFEncoder)(), p = function(e4) {
                    for (var t3 = new Uint8Array(e4.length * e4[0].length), r4 = 0; r4 < e4.length; r4++)
                      t3.set(e4[0], r4 * e4[0].length);
                    var o3 = (0, L.quantize)(t3, 256, { format: "rgba444", oneBitAlpha: true });
                    256 === o3.length ? o3[o3.length - 1] = [255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0] : o3.push([255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0]);
                    return o3;
                  }(u), m2 = p.length - 1, y2 = 0;
                case 53:
                  if (y2 < u.length) {
                    if (0 === y2)
                      return g2 = (0, L.applyPalette)(u[y2], p, { format: "rgba4444" }), h.writeFrame(g2, this.width, this.height, { palette: p, delay: n2, dispose: 1 }), e3.abrupt("continue", 68);
                    e3.next = 58;
                  } else
                    e3.next = 71;
                  break;
                case 58:
                  for (v2 = u[y2], b = u[y2 - 1], j2 = [], _ = 0; _ < v2.length; _ += 4)
                    x = [v2[_], v2[_ + 1], v2[_ + 2], v2[_ + 3]], w = [b[_], b[_ + 1], b[_ + 2], b[_ + 3]], !function(e4, r4) {
                      return Array.isArray(e4) && Array.isArray(r4) && e4.length === r4.length && e4.every(function(e5, t3) {
                        return e5 === r4[t3];
                      });
                    }(x, w) || j2.push(_ / 4);
                  for (S = (0, L.applyPalette)(v2, p, { format: "rgba4444" }), M = 0; M < j2.length; M++)
                    E = j2[M], S[E] = m2;
                  return h.writeFrame(S, this.width, this.height, { delay: n2, transparent: true, transparentIndex: m2, dispose: 1 }), c.html("Rendered frame <b>" + y2.toString() + "</b> out of " + s2.toString()), e3.next = 68, new Promise(function(e4) {
                    return setTimeout(e4, 0);
                  });
                case 68:
                  y2++, e3.next = 53;
                  break;
                case 71:
                  h.finish(), T = h.bytesView(), T = new Blob([T], { type: "image/gif" }), u = [], this.loop(), c.html("Done. Downloading your gif!🌸"), O.default.prototype.downloadFile(T, t2, "gif");
                case 79:
                case "end":
                  return e3.stop();
              }
          }, e2, this);
        });
        var a2, r2 = function() {
          var e2 = this, i3 = arguments;
          return new Promise(function(t2, r3) {
            var o2 = a2.apply(e2, i3);
            function n2(e3) {
              l(o2, t2, r3, n2, s2, "next", e3);
            }
            function s2(e3) {
              l(o2, t2, r3, n2, s2, "throw", e3);
            }
            n2(void 0);
          });
        };
        return function(e2, t2) {
          return r2.apply(this, arguments);
        };
      }(), O.default.prototype.image = function(e2, t2, r2, o2, n2, s2, i3, a2, l2, u, c, d) {
        O.default._validateParameters("image", arguments);
        var f = e2.width, h = e2.height, p = (d = d || j.CENTER, c = c || j.CENTER, e2.elt && e2.elt.videoWidth && !e2.canvas && (f = e2.elt.videoWidth, h = e2.elt.videoHeight), o2 || f), n2 = n2 || h, s2 = s2 || 0, i3 = i3 || 0, a2 = v(a2 || f, f), f = v(l2 || h, h), l2 = 1;
        e2.elt && !e2.canvas && e2.elt.style.width && (l2 = e2.elt.videoWidth && !o2 ? e2.elt.videoWidth : e2.elt.width, l2 /= parseInt(e2.elt.style.width, 10)), s2 *= l2, i3 *= l2, f *= l2, a2 *= l2;
        h = y(u, c, d, (h = m.default.modeAdjust(t2, r2, p, n2, this._renderer._imageMode)).x, h.y, h.w, h.h, s2, i3, a2, f);
        this._renderer.image(e2, h.sx, h.sy, h.sw, h.sh, h.dx, h.dy, h.dw, h.dh);
      }, O.default.prototype.tint = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        O.default._validateParameters("tint", t2);
        var o2 = this.color.apply(this, t2);
        this._renderer._tint = o2.levels;
      }, O.default.prototype.noTint = function() {
        this._renderer._tint = null;
      }, O.default.prototype._getTintedImageCanvas = O.default.Renderer2D.prototype._getTintedImageCanvas, O.default.prototype.imageMode = function(e2) {
        O.default._validateParameters("imageMode", arguments), e2 !== j.CORNER && e2 !== j.CORNERS && e2 !== j.CENTER || (this._renderer._imageMode = e2);
      };
      e = O.default;
      r.default = e;
    }, { "../core/constants": 256, "../core/friendly_errors/fes_core": 258, "../core/friendly_errors/file_errors": 259, "../core/friendly_errors/validate_params": 262, "../core/helpers": 263, "../core/main": 267, "core-js/modules/es.array.copy-within": 150, "core-js/modules/es.array.every": 151, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/es.typed-array.uint8-clamped-array": 227, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230, gifenc: 237, omggif: 240, "regenerator-runtime/runtime": 244 }], 291: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = n(e("../core/main")), o = n(e("./filters"));
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      s2.default.Image = function(e2, t2) {
        this.width = e2, this.height = t2, this.canvas = document.createElement("canvas"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext("2d"), (this._pixelsState = this)._pixelDensity = 1, this.gifProperties = null, this._modified = false, this.pixels = [];
      }, s2.default.Image.prototype._animateGif = function(e2) {
        var t2, r2 = this.gifProperties, e2 = e2._lastFrameTime;
        0 === r2.lastChangeTime && (r2.lastChangeTime = e2), r2.playing && (r2.timeDisplayed = e2 - r2.lastChangeTime, t2 = r2.frames[r2.displayIndex].delay, r2.timeDisplayed >= t2 && (t2 = Math.floor(r2.timeDisplayed / t2), r2.timeDisplayed = 0, r2.lastChangeTime = e2, r2.displayIndex += t2, r2.loopCount = Math.floor(r2.displayIndex / r2.numFrames), null !== r2.loopLimit && r2.loopCount >= r2.loopLimit ? r2.playing = false : (e2 = r2.displayIndex % r2.numFrames, this.drawingContext.putImageData(r2.frames[e2].image, 0, 0), r2.displayIndex = e2, this.setModified(true))));
      }, s2.default.Image.prototype._setProperty = function(e2, t2) {
        this[e2] = t2, this.setModified(true);
      }, s2.default.Image.prototype.loadPixels = function() {
        s2.default.Renderer2D.prototype.loadPixels.call(this), this.setModified(true);
      }, s2.default.Image.prototype.updatePixels = function(e2, t2, r2, o2) {
        s2.default.Renderer2D.prototype.updatePixels.call(this, e2, t2, r2, o2), this.setModified(true);
      }, s2.default.Image.prototype.get = function(e2, t2, r2, o2) {
        return s2.default._validateParameters("p5.Image.get", arguments), s2.default.Renderer2D.prototype.get.apply(this, arguments);
      }, s2.default.Image.prototype._getPixel = s2.default.Renderer2D.prototype._getPixel, s2.default.Image.prototype.set = function(e2, t2, r2) {
        s2.default.Renderer2D.prototype.set.call(this, e2, t2, r2), this.setModified(true);
      }, s2.default.Image.prototype.resize = function(e2, t2) {
        0 === e2 && 0 === t2 ? (e2 = this.canvas.width, t2 = this.canvas.height) : 0 === e2 ? e2 = this.canvas.width * t2 / this.canvas.height : 0 === t2 && (t2 = this.canvas.height * e2 / this.canvas.width), e2 = Math.floor(e2), t2 = Math.floor(t2);
        var r2 = document.createElement("canvas");
        if (r2.width = e2, r2.height = t2, this.gifProperties)
          for (var o2 = this.gifProperties, n2 = 0; n2 < o2.numFrames; n2++) {
            for (var s3 = this.drawingContext.createImageData(e2, t2), i2 = (d = d = c = u = l = void 0, o2.frames[n2].image), a = s3, l = 0, u = 0; u < a.height; u++)
              for (var c = 0; c < a.width; c++) {
                var d = Math.floor(c * i2.width / a.width), d = 4 * (Math.floor(u * i2.height / a.height) * i2.width + d);
                a.data[l++] = i2.data[d++], a.data[l++] = i2.data[d++], a.data[l++] = i2.data[d++], a.data[l++] = i2.data[+d];
              }
            o2.frames[n2].image = s3;
          }
        r2.getContext("2d").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, r2.width, r2.height), this.canvas.width = this.width = e2, this.canvas.height = this.height = t2, this.drawingContext.drawImage(r2, 0, 0, e2, t2, 0, 0, e2, t2), 0 < this.pixels.length && this.loadPixels(), this.setModified(true);
      }, s2.default.Image.prototype.copy = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        s2.default.prototype.copy.apply(this, t2);
      }, s2.default.Image.prototype.mask = function(e2) {
        var t2 = this.drawingContext.globalCompositeOperation, r2 = 1, o2 = [e2 = void 0 === e2 ? this : e2, 0, 0, (r2 = e2 instanceof s2.default.Renderer ? e2._pInst._pixelDensity : r2) * e2.width, r2 * e2.height, 0, 0, this.width, this.height];
        if (this.drawingContext.globalCompositeOperation = "destination-in", this.gifProperties) {
          for (var n2 = 0; n2 < this.gifProperties.frames.length; n2++)
            this.drawingContext.putImageData(this.gifProperties.frames[n2].image, 0, 0), s2.default.Image.prototype.copy.apply(this, o2), this.gifProperties.frames[n2].image = this.drawingContext.getImageData(0, 0, this.width, this.height);
          this.drawingContext.putImageData(this.gifProperties.frames[this.gifProperties.displayIndex].image, 0, 0);
        } else
          s2.default.Image.prototype.copy.apply(this, o2);
        this.drawingContext.globalCompositeOperation = t2, this.setModified(true);
      }, s2.default.Image.prototype.filter = function(e2, t2) {
        o.default.apply(this.canvas, o.default[e2], t2), this.setModified(true);
      }, s2.default.Image.prototype.blend = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        s2.default._validateParameters("p5.Image.blend", arguments), s2.default.prototype.blend.apply(this, t2), this.setModified(true);
      }, s2.default.Image.prototype.setModified = function(e2) {
        this._modified = e2;
      }, s2.default.Image.prototype.isModified = function() {
        return this._modified;
      }, s2.default.Image.prototype.save = function(e2, t2) {
        this.gifProperties ? s2.default.prototype.encodeAndDownloadGif(this, e2) : s2.default.prototype.saveCanvas(this.canvas, e2, t2);
      }, s2.default.Image.prototype.reset = function() {
        var e2;
        this.gifProperties && ((e2 = this.gifProperties).playing = true, e2.timeSinceStart = 0, e2.timeDisplayed = 0, e2.lastChangeTime = 0, e2.loopCount = 0, e2.displayIndex = 0, this.drawingContext.putImageData(e2.frames[0].image, 0, 0));
      }, s2.default.Image.prototype.getCurrentFrame = function() {
        var e2;
        if (this.gifProperties)
          return (e2 = this.gifProperties).displayIndex % e2.numFrames;
      }, s2.default.Image.prototype.setFrame = function(e2) {
        var t2;
        this.gifProperties && (e2 < (t2 = this.gifProperties).numFrames && 0 <= e2 ? (t2.timeDisplayed = 0, t2.lastChangeTime = 0, t2.displayIndex = e2, this.drawingContext.putImageData(t2.frames[e2].image, 0, 0)) : console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero."));
      }, s2.default.Image.prototype.numFrames = function() {
        if (this.gifProperties)
          return this.gifProperties.numFrames;
      }, s2.default.Image.prototype.play = function() {
        this.gifProperties && (this.gifProperties.playing = true);
      }, s2.default.Image.prototype.pause = function() {
        this.gifProperties && (this.gifProperties.playing = false);
      }, s2.default.Image.prototype.delay = function(e2, t2) {
        if (this.gifProperties) {
          var r2 = this.gifProperties;
          if (t2 < r2.numFrames && 0 <= t2)
            r2.frames[t2].delay = e2;
          else {
            var o2 = true, t2 = false, n2 = void 0;
            try {
              for (var s3, i2 = r2.frames[Symbol.iterator](); !(o2 = (s3 = i2.next()).done); o2 = true)
                s3.value.delay = e2;
            } catch (e3) {
              t2 = true, n2 = e3;
            } finally {
              try {
                o2 || null == i2.return || i2.return();
              } finally {
                if (t2)
                  throw n2;
              }
            }
          }
        }
      };
      e = s2.default.Image;
      r.default = e;
    }, { "../core/main": 267, "./filters": 288, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.iterator": 230 }], 292: [function(e, t, r) {
      e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.filter"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var h = n(e("../core/main")), o = n(e("./filters"));
      function n(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      e("../color/p5.Color"), h.default.prototype.pixels = [], h.default.prototype.blend = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o2 = 0; o2 < t2; o2++)
          r2[o2] = arguments[o2];
        h.default._validateParameters("blend", r2), this._renderer ? (e2 = this._renderer).blend.apply(e2, r2) : h.default.Renderer2D.prototype.blend.apply(this, r2);
      }, h.default.prototype.copy = function() {
        for (var e2, t2, r2, o2, n2, s2, i2, a, l, u = arguments.length, c = new Array(u), d = 0; d < u; d++)
          c[d] = arguments[d];
        if (h.default._validateParameters("copy", c), 9 === c.length)
          e2 = c[0], t2 = c[1], r2 = c[2], o2 = c[3], n2 = c[4], s2 = c[5], i2 = c[6], a = c[7], l = c[8];
        else {
          if (8 !== c.length)
            throw new Error("Signature not supported");
          e2 = this, t2 = c[0], r2 = c[1], o2 = c[2], n2 = c[3], s2 = c[4], i2 = c[5], a = c[6], l = c[7];
        }
        h.default.prototype._copyHelper(this, e2, t2, r2, o2, n2, s2, i2, a, l);
      }, h.default.prototype._copyHelper = function(e2, t2, r2, o2, n2, s2, i2, a, l, u) {
        t2.loadPixels();
        var c = t2.canvas.width / t2.width, d = 0, f = 0;
        t2._renderer && t2._renderer.isP3D && (d = t2.width / 2, f = t2.height / 2), e2._renderer && e2._renderer.isP3D ? h.default.RendererGL.prototype.image.call(e2._renderer, t2, r2 + d, o2 + f, n2, s2, i2, a, l, u) : e2.drawingContext.drawImage(t2.canvas, c * (r2 + d), c * (o2 + f), c * n2, c * s2, i2, a, l, u);
      }, h.default.prototype.filter = function(e2, t2) {
        h.default._validateParameters("filter", arguments), void 0 !== this.canvas ? o.default.apply(this.canvas, o.default[e2], t2) : o.default.apply(this.elt, o.default[e2], t2);
      }, h.default.prototype.get = function(e2, t2, r2, o2) {
        var n2;
        return h.default._validateParameters("get", arguments), (n2 = this._renderer).get.apply(n2, arguments);
      }, h.default.prototype.loadPixels = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        h.default._validateParameters("loadPixels", t2), this._renderer.loadPixels();
      }, h.default.prototype.set = function(e2, t2, r2) {
        this._renderer.set(e2, t2, r2);
      }, h.default.prototype.updatePixels = function(e2, t2, r2, o2) {
        h.default._validateParameters("updatePixels", arguments), 0 !== this.pixels.length && this._renderer.updatePixels(e2, t2, r2, o2);
      };
      e = h.default;
      r.default = e;
    }, { "../color/p5.Color": 254, "../core/main": 267, "./filters": 288, "core-js/modules/es.array.filter": 153 }], 293: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/web.url"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.promise"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/web.url"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var v = s2(e("../core/main")), m = (e("whatwg-fetch"), e("es6-promise/auto"), s2(e("fetch-jsonp"))), n = s2(e("file-saver"));
      function s2(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      function y(e2) {
        return (y = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      function g(e2) {
        return e2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
      }
      function i2(e2, t2) {
        t2 && true !== t2 && "true" !== t2 || (t2 = "");
        var r2 = "";
        return (e2 = e2 || "untitled") && e2.includes(".") && (r2 = e2.split(".").pop()), t2 && r2 !== t2 && (r2 = t2, e2 = "".concat(e2, ".").concat(r2)), [e2, r2];
      }
      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), v.default.prototype.loadJSON = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        v.default._validateParameters("loadJSON", t2);
        for (var o2, n2, s3, i3 = t2[0], a = {}, l = "json", u = 1; u < t2.length; u++) {
          var c = t2[u];
          "string" == typeof c ? "jsonp" !== c && "json" !== c || (l = c) : "function" == typeof c ? o2 ? n2 = c : o2 = c : "object" === y(c) && (c.hasOwnProperty("jsonpCallback") || c.hasOwnProperty("jsonpCallbackFunction")) && (l = "jsonp", s3 = c);
        }
        var d = this;
        return this.httpDo(i3, "GET", s3, l, function(e3) {
          for (var t3 in e3)
            a[t3] = e3[t3];
          void 0 !== o2 && o2(e3), d._decrementPreload();
        }, function(e3) {
          if (v.default._friendlyFileLoadError(5, i3), !n2)
            throw e3;
          n2(e3);
        }), a;
      }, v.default.prototype.loadStrings = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        v.default._validateParameters("loadStrings", t2);
        for (var n2, o2, s3 = [], i3 = 1; i3 < t2.length; i3++) {
          var a = t2[i3];
          "function" == typeof a && (void 0 === n2 ? n2 = a : void 0 === o2 && (o2 = a));
        }
        var l = this;
        return v.default.prototype.httpDo.call(this, t2[0], "GET", "text", function(e3) {
          for (var t3 = e3.replace(/\r\n/g, "\r").replace(/\n/g, "\r").split(/\r/), r3 = 0, o3 = t3.length; r3 < o3; r3 += 32768)
            Array.prototype.push.apply(s3, t3.slice(r3, Math.min(r3 + 32768, o3)));
          void 0 !== n2 && n2(s3), l._decrementPreload();
        }, function(e3) {
          if (v.default._friendlyFileLoadError(3, e3), !o2)
            throw e3;
          o2(e3);
        }), s3;
      }, v.default.prototype.loadTable = function(t2) {
        var h, r2, p, m2 = false, o2 = t2.substring(t2.lastIndexOf(".") + 1, t2.length);
        "csv" === o2 ? p = "," : "ssv" === o2 ? p = ";" : "tsv" === o2 && (p = "	");
        for (var n2 = 1; n2 < arguments.length; n2++)
          "function" == typeof arguments[n2] ? void 0 === h ? h = arguments[n2] : void 0 === r2 && (r2 = arguments[n2]) : "string" == typeof arguments[n2] && ("header" === arguments[n2] && (m2 = true), "csv" === arguments[n2] ? p = "," : "ssv" === arguments[n2] ? p = ";" : "tsv" === arguments[n2] && (p = "	"));
        var y2 = new v.default.Table(), g2 = this;
        return this.httpDo(t2, "GET", "table", function(e2) {
          for (var t3, r3, o3 = {}, n3 = 0, s3 = [], i3 = 0, a = null, l = function() {
            o3.currentState = n3, o3.token = "";
          }, u = function() {
            a.push(o3.token), l();
          }, c = function() {
            o3.currentState = 4, s3.push(a), a = null;
          }; ; ) {
            if (null == (t3 = e2[i3++])) {
              if (o3.escaped)
                throw new Error("Unclosed quote in file.");
              if (a) {
                u(), c();
                break;
              }
            }
            if (null === a && (o3.escaped = false, a = [], l()), o3.currentState === n3) {
              if ('"' === t3) {
                o3.escaped = true, o3.currentState = 1;
                continue;
              }
              o3.currentState = 1;
            }
            if (1 === o3.currentState && o3.escaped)
              if ('"' === t3)
                '"' === e2[i3] ? (o3.token += '"', i3++) : (o3.escaped = false, o3.currentState = 2);
              else {
                if ("\r" === t3)
                  continue;
                o3.token += t3;
              }
            else
              "\r" === t3 ? ("\n" === e2[i3] && i3++, u(), c()) : "\n" === t3 ? (u(), c()) : t3 === p ? u() : 1 === o3.currentState && (o3.token += t3);
          }
          if (m2)
            y2.columns = s3.shift();
          else
            for (var d = 0; d < s3[0].length; d++)
              y2.columns[d] = "null";
          for (var f = 0; f < s3.length; f++)
            (1 !== s3[f].length || "undefined" !== s3[f][0] && "" !== s3[f][0]) && ((r3 = new v.default.TableRow()).arr = s3[f], r3.obj = function(e3, t4) {
              var r4 = {};
              if (void 0 === (t4 = t4 || []))
                for (var o4 = 0; o4 < e3.length; o4++)
                  t4[o4.toString()] = o4;
              for (var n4 = 0; n4 < t4.length; n4++) {
                var s4 = t4[n4], i4 = e3[n4];
                r4[s4] = i4;
              }
              return r4;
            }(s3[f], y2.columns), y2.addRow(r3));
          "function" == typeof h && h(y2), g2._decrementPreload();
        }, function(e2) {
          v.default._friendlyFileLoadError(2, t2), r2 ? r2(e2) : console.error(e2);
        }), y2;
      }, v.default.prototype.loadXML = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        for (var o2, n2, s3 = new v.default.XML(), i3 = 1; i3 < t2.length; i3++) {
          var a = t2[i3];
          "function" == typeof a && (void 0 === o2 ? o2 = a : void 0 === n2 && (n2 = a));
        }
        var l = this;
        return this.httpDo(t2[0], "GET", "xml", function(e3) {
          for (var t3 in e3)
            s3[t3] = e3[t3];
          void 0 !== o2 && o2(s3), l._decrementPreload();
        }, function(e3) {
          if (v.default._friendlyFileLoadError(1, e3), !n2)
            throw e3;
          n2(e3);
        }), s3;
      }, v.default.prototype.loadBytes = function(t2, r2, o2) {
        var n2 = {}, s3 = this;
        return this.httpDo(t2, "GET", "arrayBuffer", function(e2) {
          n2.bytes = new Uint8Array(e2), "function" == typeof r2 && r2(n2), s3._decrementPreload();
        }, function(e2) {
          if (v.default._friendlyFileLoadError(6, t2), !o2)
            throw e2;
          o2(e2);
        }), n2;
      }, v.default.prototype.httpGet = function() {
        v.default._validateParameters("httpGet", arguments);
        var e2 = Array.prototype.slice.call(arguments);
        return e2.splice(1, 0, "GET"), v.default.prototype.httpDo.apply(this, e2);
      }, v.default.prototype.httpPost = function() {
        v.default._validateParameters("httpPost", arguments);
        var e2 = Array.prototype.slice.call(arguments);
        return e2.splice(1, 0, "POST"), v.default.prototype.httpDo.apply(this, e2);
      }, v.default.prototype.httpDo = function() {
        for (var r2, e2, t2, o2 = {}, n2 = 0, s3 = "text/plain", i3 = arguments.length - 1; 0 < i3 && "function" == typeof (i3 < 0 || arguments.length <= i3 ? void 0 : arguments[i3]); i3--)
          n2++;
        var a = arguments.length - n2, l = arguments.length <= 0 ? void 0 : arguments[0];
        if (2 == a && "string" == typeof l && "object" === y(arguments.length <= 1 ? void 0 : arguments[1]))
          p = new Request(l, arguments.length <= 1 ? void 0 : arguments[1]), e2 = arguments.length <= 2 ? void 0 : arguments[2], t2 = arguments.length <= 3 ? void 0 : arguments[3];
        else {
          for (var u, c = "GET", d = 1; d < arguments.length; d++) {
            var f = d < 0 || arguments.length <= d ? void 0 : arguments[d];
            if ("string" == typeof f)
              "GET" === f || "POST" === f || "PUT" === f || "DELETE" === f ? c = f : "json" === f || "jsonp" === f || "binary" === f || "arrayBuffer" === f || "xml" === f || "text" === f || "table" === f ? r2 = f : u = f;
            else if ("number" == typeof f)
              u = f.toString();
            else if ("object" === y(f))
              if (f.hasOwnProperty("jsonpCallback") || f.hasOwnProperty("jsonpCallbackFunction"))
                for (var h in f)
                  o2[h] = f[h];
              else
                s3 = f instanceof v.default.XML ? (u = f.serialize(), "application/xml") : (u = JSON.stringify(f), "application/json");
            else
              "function" == typeof f && (e2 ? t2 = f : e2 = f);
          }
          var a = "GET" === c ? new Headers() : new Headers({ "Content-Type": s3 }), p = new Request(l, { method: c, mode: "cors", body: u, headers: a });
        }
        return (a = (a = "jsonp" === (r2 = r2 || (l.includes("json") ? "json" : l.includes("xml") ? "xml" : "text")) ? (0, m.default)(l, o2) : fetch(p)).then(function(e3) {
          if (!e3.ok)
            throw (t3 = new Error(e3.body)).status = e3.status, t3.ok = false, t3;
          var t3 = 0;
          switch ((t3 = "jsonp" !== r2 ? e3.headers.get("content-length") : t3) && 64e6 < t3 && v.default._friendlyFileLoadError(7, l), r2) {
            case "json":
            case "jsonp":
              return e3.json();
            case "binary":
              return e3.blob();
            case "arrayBuffer":
              return e3.arrayBuffer();
            case "xml":
              return e3.text().then(function(e4) {
                e4 = new DOMParser().parseFromString(e4, "text/xml");
                return new v.default.XML(e4.documentElement);
              });
            default:
              return e3.text();
          }
        })).then(e2 || function() {
        }), a.catch(t2 || console.error), a;
      }, window.URL = window.URL || window.webkitURL, v.default.prototype._pWriters = [], v.default.prototype.createWriter = function(e2, t2) {
        var r2, o2;
        for (o2 in v.default.prototype._pWriters)
          if (v.default.prototype._pWriters[o2].name === e2)
            return r2 = new v.default.PrintWriter(e2 + this.millis(), t2), v.default.prototype._pWriters.push(r2), r2;
        return r2 = new v.default.PrintWriter(e2, t2), v.default.prototype._pWriters.push(r2), r2;
      }, v.default.PrintWriter = function(r2, o2) {
        var n2 = this;
        this.name = r2, this.content = "", this.write = function(e2) {
          this.content += e2;
        }, this.print = function(e2) {
          this.content += "".concat(e2, "\n");
        }, this.clear = function() {
          this.content = "";
        }, this.close = function() {
          var e2, t2 = [];
          for (e2 in t2.push(this.content), v.default.prototype.writeFile(t2, r2, o2), v.default.prototype._pWriters)
            v.default.prototype._pWriters[e2].name === this.name && v.default.prototype._pWriters.splice(e2, 1);
          n2.clear(), n2 = {};
        };
      }, v.default.prototype.save = function(e2, t2, r2) {
        var o2 = arguments, n2 = (this._curElement || this).elt;
        if (0 === o2.length)
          v.default.prototype.saveCanvas(n2);
        else if (o2[0] instanceof v.default.Renderer || o2[0] instanceof v.default.Graphics)
          v.default.prototype.saveCanvas(o2[0].elt, o2[1], o2[2]);
        else if (1 === o2.length && "string" == typeof o2[0])
          v.default.prototype.saveCanvas(n2, o2[0]);
        else
          switch (i2(o2[1], o2[2])[1]) {
            case "json":
              return void v.default.prototype.saveJSON(o2[0], o2[1], o2[2]);
            case "txt":
              return void v.default.prototype.saveStrings(o2[0], o2[1], o2[2]);
            default:
              o2[0] instanceof Array ? v.default.prototype.saveStrings(o2[0], o2[1], o2[2]) : o2[0] instanceof v.default.Table ? v.default.prototype.saveTable(o2[0], o2[1], o2[2]) : o2[0] instanceof v.default.Image ? v.default.prototype.saveCanvas(o2[0].canvas, o2[1]) : o2[0] instanceof v.default.SoundFile && v.default.prototype.saveSound(o2[0], o2[1], o2[2], o2[3]);
          }
      }, v.default.prototype.saveJSON = function(e2, t2, r2) {
        v.default._validateParameters("saveJSON", arguments), r2 = r2 ? JSON.stringify(e2) : JSON.stringify(e2, void 0, 2), this.saveStrings(r2.split("\n"), t2, "json");
      }, v.default.prototype.saveJSONObject = v.default.prototype.saveJSON, v.default.prototype.saveJSONArray = v.default.prototype.saveJSON, v.default.prototype.saveStrings = function(e2, t2, r2, o2) {
        v.default._validateParameters("saveStrings", arguments);
        for (var n2 = this.createWriter(t2, r2 || "txt"), s3 = 0; s3 < e2.length; s3++)
          o2 ? n2.write(e2[s3] + "\r\n") : n2.write(e2[s3] + "\n");
        n2.close(), n2.clear();
      }, v.default.prototype.saveTable = function(e2, t2, r2) {
        v.default._validateParameters("saveTable", arguments), o2 = void 0 === r2 ? t2.substring(t2.lastIndexOf(".") + 1, t2.length) : r2;
        var o2, n2 = this.createWriter(t2, o2), s3 = e2.columns, i3 = "tsv" === o2 ? "	" : ",";
        if ("html" !== o2) {
          if ("0" !== s3[0]) {
            for (var a = 0; a < s3.length; a++)
              a < s3.length - 1 ? n2.write(s3[a] + i3) : n2.write(s3[a]);
            n2.write("\n");
          }
          for (var l = 0; l < e2.rows.length; l++) {
            for (var u = void 0, u = 0; u < e2.rows[l].arr.length; u++)
              u < e2.rows[l].arr.length - 1 ? "csv" === o2 && String(e2.rows[l].arr[u]).includes(",") ? n2.write('"' + e2.rows[l].arr[u] + '"' + i3) : n2.write(e2.rows[l].arr[u] + i3) : "csv" === o2 && String(e2.rows[l].arr[u]).includes(",") ? n2.write('"' + e2.rows[l].arr[u] + '"') : n2.write(e2.rows[l].arr[u]);
            n2.write("\n");
          }
        } else {
          n2.print("<html>"), n2.print("<head>");
          if (n2.print('  <meta http-equiv="content-type" content="text/html;charset=utf-8" />'), n2.print("</head>"), n2.print("<body>"), n2.print("  <table>"), "0" !== s3[0]) {
            n2.print("    <tr>");
            for (var c = 0; c < s3.length; c++) {
              var d = g(s3[c]);
              n2.print("      <td>".concat(d)), n2.print("      </td>");
            }
            n2.print("    </tr>");
          }
          for (var f = 0; f < e2.rows.length; f++) {
            n2.print("    <tr>");
            for (var h = 0; h < e2.columns.length; h++) {
              var p = g(e2.rows[f].getString(h));
              n2.print("      <td>".concat(p)), n2.print("      </td>");
            }
            n2.print("    </tr>");
          }
          n2.print("  </table>"), n2.print("</body>"), n2.print("</html>");
        }
        n2.close(), n2.clear();
      }, v.default.prototype.writeFile = function(e2, t2, r2) {
        var o2 = "application/octet-stream", e2 = (v.default.prototype._isSafari() && (o2 = "text/plain"), new Blob(e2, { type: o2 }));
        v.default.prototype.downloadFile(e2, t2, r2);
      }, v.default.prototype.downloadFile = function(e2, t2, r2) {
        var o2, t2 = i2(t2, r2), r2 = t2[0];
        e2 instanceof Blob ? n.default.saveAs(e2, r2) : ((o2 = document.createElement("a")).href = e2, o2.download = r2, o2.onclick = function(e3) {
          document.body.removeChild(e3.target), e3.stopPropagation();
        }, o2.style.display = "none", document.body.appendChild(o2), v.default.prototype._isSafari() && (e2 = (e2 = 'Hello, Safari user! To download this file...\n1. Go to File --> Save As.\n2. Choose "Page Source" as the Format.\n') + '3. Name it with this extension: ."'.concat(t2[1], '"'), alert(e2)), o2.click());
      }, v.default.prototype._checkFileExtension = i2, v.default.prototype._isSafari = function() {
        return 0 < Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");
      };
      e = v.default;
      r.default = e;
    }, { "../core/friendly_errors/fes_core": 258, "../core/friendly_errors/file_errors": 259, "../core/friendly_errors/validate_params": 262, "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.last-index-of": 160, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.splice": 164, "core-js/modules/es.function.name": 165, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.promise": 178, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/web.dom-collections.iterator": 230, "core-js/modules/web.url": 232, "es6-promise/auto": 233, "fetch-jsonp": 235, "file-saver": 236, "whatwg-fetch": 245 }], 294: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.trim"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      o.default.Table = function(e2) {
        this.columns = [], this.rows = [];
      }, o.default.Table.prototype.addRow = function(e2) {
        e2 = e2 || new o.default.TableRow();
        if (void 0 === e2.arr || void 0 === e2.obj)
          throw new Error("invalid TableRow: ".concat(e2));
        return (e2.table = this).rows.push(e2), e2;
      }, o.default.Table.prototype.removeRow = function(e2) {
        this.rows[e2].table = null;
        e2 = this.rows.splice(e2 + 1, this.rows.length);
        this.rows.pop(), this.rows = this.rows.concat(e2);
      }, o.default.Table.prototype.getRow = function(e2) {
        return this.rows[e2];
      }, o.default.Table.prototype.getRows = function() {
        return this.rows;
      }, o.default.Table.prototype.findRow = function(e2, t2) {
        if ("string" == typeof t2) {
          for (var r2 = 0; r2 < this.rows.length; r2++)
            if (this.rows[r2].obj[t2] === e2)
              return this.rows[r2];
        } else
          for (var o2 = 0; o2 < this.rows.length; o2++)
            if (this.rows[o2].arr[t2] === e2)
              return this.rows[o2];
        return null;
      }, o.default.Table.prototype.findRows = function(e2, t2) {
        var r2 = [];
        if ("string" == typeof t2)
          for (var o2 = 0; o2 < this.rows.length; o2++)
            this.rows[o2].obj[t2] === e2 && r2.push(this.rows[o2]);
        else
          for (var n = 0; n < this.rows.length; n++)
            this.rows[n].arr[t2] === e2 && r2.push(this.rows[n]);
        return r2;
      }, o.default.Table.prototype.matchRow = function(e2, t2) {
        if ("number" == typeof t2) {
          for (var r2 = 0; r2 < this.rows.length; r2++)
            if (this.rows[r2].arr[t2].match(e2))
              return this.rows[r2];
        } else
          for (var o2 = 0; o2 < this.rows.length; o2++)
            if (this.rows[o2].obj[t2].match(e2))
              return this.rows[o2];
        return null;
      }, o.default.Table.prototype.matchRows = function(e2, t2) {
        var r2 = [];
        if ("number" == typeof t2)
          for (var o2 = 0; o2 < this.rows.length; o2++)
            this.rows[o2].arr[t2].match(e2) && r2.push(this.rows[o2]);
        else
          for (var n = 0; n < this.rows.length; n++)
            this.rows[n].obj[t2].match(e2) && r2.push(this.rows[n]);
        return r2;
      }, o.default.Table.prototype.getColumn = function(e2) {
        var t2 = [];
        if ("string" == typeof e2)
          for (var r2 = 0; r2 < this.rows.length; r2++)
            t2.push(this.rows[r2].obj[e2]);
        else
          for (var o2 = 0; o2 < this.rows.length; o2++)
            t2.push(this.rows[o2].arr[e2]);
        return t2;
      }, o.default.Table.prototype.clearRows = function() {
        delete this.rows, this.rows = [];
      }, o.default.Table.prototype.addColumn = function(e2) {
        this.columns.push(e2 || null);
      }, o.default.Table.prototype.getColumnCount = function() {
        return this.columns.length;
      }, o.default.Table.prototype.getRowCount = function() {
        return this.rows.length;
      }, o.default.Table.prototype.removeTokens = function(e2, t2) {
        for (var r2 = [], o2 = 0; o2 < e2.length; o2++)
          r2.push(e2.charAt(o2).replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"));
        var n = new RegExp(r2.join("|"), "g");
        if (void 0 === t2)
          for (var s2 = 0; s2 < this.columns.length; s2++)
            for (var i2 = 0; i2 < this.rows.length; i2++) {
              var a = (a = this.rows[i2].arr[s2]).replace(n, "");
              this.rows[i2].arr[s2] = a, this.rows[i2].obj[this.columns[s2]] = a;
            }
        else if ("string" == typeof t2)
          for (var l = 0; l < this.rows.length; l++) {
            var u = (u = this.rows[l].obj[t2]).replace(n, ""), c = (this.rows[l].obj[t2] = u, this.columns.indexOf(t2));
            this.rows[l].arr[c] = u;
          }
        else
          for (var d = 0; d < this.rows.length; d++) {
            var f = (f = this.rows[d].arr[t2]).replace(n, "");
            this.rows[d].arr[t2] = f, this.rows[d].obj[this.columns[t2]] = f;
          }
      }, o.default.Table.prototype.trim = function(e2) {
        var t2 = new RegExp(" ", "g");
        if (void 0 === e2)
          for (var r2 = 0; r2 < this.columns.length; r2++)
            for (var o2 = 0; o2 < this.rows.length; o2++) {
              var n = (n = this.rows[o2].arr[r2]).replace(t2, "");
              this.rows[o2].arr[r2] = n, this.rows[o2].obj[this.columns[r2]] = n;
            }
        else if ("string" == typeof e2)
          for (var s2 = 0; s2 < this.rows.length; s2++) {
            var i2 = (i2 = this.rows[s2].obj[e2]).replace(t2, ""), a = (this.rows[s2].obj[e2] = i2, this.columns.indexOf(e2));
            this.rows[s2].arr[a] = i2;
          }
        else
          for (var l = 0; l < this.rows.length; l++) {
            var u = (u = this.rows[l].arr[e2]).replace(t2, "");
            this.rows[l].arr[e2] = u, this.rows[l].obj[this.columns[e2]] = u;
          }
      }, o.default.Table.prototype.removeColumn = function(e2) {
        "string" == typeof e2 ? r2 = this.columns.indexOf(t2 = e2) : t2 = this.columns[r2 = e2];
        var t2, r2, e2 = this.columns.splice(r2 + 1, this.columns.length);
        this.columns.pop(), this.columns = this.columns.concat(e2);
        for (var o2 = 0; o2 < this.rows.length; o2++) {
          var n = this.rows[o2].arr, s2 = n.splice(r2 + 1, n.length);
          n.pop(), this.rows[o2].arr = n.concat(s2), delete this.rows[o2].obj[t2];
        }
      }, o.default.Table.prototype.set = function(e2, t2, r2) {
        this.rows[e2].set(t2, r2);
      }, o.default.Table.prototype.setNum = function(e2, t2, r2) {
        this.rows[e2].setNum(t2, r2);
      }, o.default.Table.prototype.setString = function(e2, t2, r2) {
        this.rows[e2].setString(t2, r2);
      }, o.default.Table.prototype.get = function(e2, t2) {
        return this.rows[e2].get(t2);
      }, o.default.Table.prototype.getNum = function(e2, t2) {
        return this.rows[e2].getNum(t2);
      }, o.default.Table.prototype.getString = function(e2, t2) {
        return this.rows[e2].getString(t2);
      }, o.default.Table.prototype.getObject = function(e2) {
        for (var t2, r2 = {}, o2 = 0; o2 < this.rows.length; o2++)
          if (t2 = this.rows[o2].obj, "string" == typeof e2) {
            if (!(0 <= this.columns.indexOf(e2)))
              throw new Error('This table has no column named "'.concat(e2, '"'));
            r2[t2[e2]] = t2;
          } else
            r2[o2] = this.rows[o2].obj;
        return r2;
      }, o.default.Table.prototype.getArray = function() {
        for (var e2 = [], t2 = 0; t2 < this.rows.length; t2++)
          e2.push(this.rows[t2].arr);
        return e2;
      };
      e = o.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.splice": 164, "core-js/modules/es.regexp.constructor": 180, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.trim": 193 }], 295: [function(e, t, r) {
      e("core-js/modules/es.array.index-of"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.split"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.split"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.TableRow = function(e2, t2) {
        var r2 = [], o = {};
        e2 && (r2 = e2.split(t2 = t2 || ","));
        for (var n = 0; n < r2.length; n++) {
          var s2 = n, i2 = r2[n];
          o[s2] = i2;
        }
        this.arr = r2, this.obj = o, this.table = null;
      }, e.default.TableRow.prototype.set = function(e2, t2) {
        if ("string" == typeof e2) {
          var r2 = this.table.columns.indexOf(e2);
          if (!(0 <= r2))
            throw new Error('This table has no column named "'.concat(e2, '"'));
          this.obj[e2] = t2, this.arr[r2] = t2;
        } else {
          if (!(e2 < this.table.columns.length))
            throw new Error("Column #".concat(e2, " is out of the range of this table"));
          this.arr[e2] = t2;
          r2 = this.table.columns[e2];
          this.obj[r2] = t2;
        }
      }, e.default.TableRow.prototype.setNum = function(e2, t2) {
        t2 = parseFloat(t2);
        this.set(e2, t2);
      }, e.default.TableRow.prototype.setString = function(e2, t2) {
        t2 = t2.toString();
        this.set(e2, t2);
      }, e.default.TableRow.prototype.get = function(e2) {
        return ("string" == typeof e2 ? this.obj : this.arr)[e2];
      }, e.default.TableRow.prototype.getNum = function(e2) {
        var t2 = "string" == typeof e2 ? parseFloat(this.obj[e2]) : parseFloat(this.arr[e2]);
        if ("NaN" === t2.toString())
          throw "Error: ".concat(this.obj[e2], " is NaN (Not a Number)");
        return t2;
      }, e.default.TableRow.prototype.getString = function(e2) {
        return ("string" == typeof e2 ? this.obj : this.arr)[e2].toString();
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.split": 191 }], 296: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.replace"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function o(e2) {
        for (var t2 = [], r2 = 0; r2 < e2.length; r2++)
          t2.push(new a.default.XML(e2[r2]));
        return t2;
      }
      a.default.XML = function(e2) {
        e2 ? this.DOM = e2 : (e2 = document.implementation.createDocument(null, "doc"), this.DOM = e2.createElement("root"));
      }, a.default.XML.prototype.getParent = function() {
        return new a.default.XML(this.DOM.parentElement);
      }, a.default.XML.prototype.getName = function() {
        return this.DOM.tagName;
      }, a.default.XML.prototype.setName = function(e2) {
        var t2 = this.DOM.innerHTML, r2 = this.DOM.attributes, o2 = document.implementation.createDocument(null, "default").createElement(e2);
        o2.innerHTML = t2;
        for (var n = 0; n < r2.length; n++)
          o2.setAttribute(r2[n].nodeName, r2.nodeValue);
        this.DOM = o2;
      }, a.default.XML.prototype.hasChildren = function() {
        return 0 < this.DOM.children.length;
      }, a.default.XML.prototype.listChildren = function() {
        for (var e2 = [], t2 = 0; t2 < this.DOM.childNodes.length; t2++)
          e2.push(this.DOM.childNodes[t2].nodeName);
        return e2;
      }, a.default.XML.prototype.getChildren = function(e2) {
        return o(e2 ? this.DOM.getElementsByTagName(e2) : this.DOM.children);
      }, a.default.XML.prototype.getChild = function(e2) {
        if ("string" != typeof e2)
          return new a.default.XML(this.DOM.children[e2]);
        var t2 = true, r2 = false, o2 = void 0;
        try {
          for (var n, s2 = this.DOM.children[Symbol.iterator](); !(t2 = (n = s2.next()).done); t2 = true) {
            var i2 = n.value;
            if (i2.tagName === e2)
              return new a.default.XML(i2);
          }
        } catch (e3) {
          r2 = true, o2 = e3;
        } finally {
          try {
            t2 || null == s2.return || s2.return();
          } finally {
            if (r2)
              throw o2;
          }
        }
      }, a.default.XML.prototype.addChild = function(e2) {
        e2 instanceof a.default.XML && this.DOM.appendChild(e2.DOM);
      }, a.default.XML.prototype.removeChild = function(e2) {
        var t2 = -1;
        if ("string" == typeof e2) {
          for (var r2 = 0; r2 < this.DOM.children.length; r2++)
            if (this.DOM.children[r2].tagName === e2) {
              t2 = r2;
              break;
            }
        } else
          t2 = e2;
        -1 !== t2 && this.DOM.removeChild(this.DOM.children[t2]);
      }, a.default.XML.prototype.getAttributeCount = function() {
        return this.DOM.attributes.length;
      }, a.default.XML.prototype.listAttributes = function() {
        var e2 = [], t2 = true, r2 = false, o2 = void 0;
        try {
          for (var n, s2 = this.DOM.attributes[Symbol.iterator](); !(t2 = (n = s2.next()).done); t2 = true) {
            var i2 = n.value;
            e2.push(i2.nodeName);
          }
        } catch (e3) {
          r2 = true, o2 = e3;
        } finally {
          try {
            t2 || null == s2.return || s2.return();
          } finally {
            if (r2)
              throw o2;
          }
        }
        return e2;
      }, a.default.XML.prototype.hasAttribute = function(e2) {
        var t2 = {}, r2 = true, o2 = false, n = void 0;
        try {
          for (var s2, i2 = this.DOM.attributes[Symbol.iterator](); !(r2 = (s2 = i2.next()).done); r2 = true) {
            var a2 = s2.value;
            t2[a2.nodeName] = a2.nodeValue;
          }
        } catch (e3) {
          o2 = true, n = e3;
        } finally {
          try {
            r2 || null == i2.return || i2.return();
          } finally {
            if (o2)
              throw n;
          }
        }
        return !!t2[e2];
      }, a.default.XML.prototype.getNum = function(e2, t2) {
        var r2 = {}, o2 = true, n = false, s2 = void 0;
        try {
          for (var i2, a2 = this.DOM.attributes[Symbol.iterator](); !(o2 = (i2 = a2.next()).done); o2 = true) {
            var l = i2.value;
            r2[l.nodeName] = l.nodeValue;
          }
        } catch (e3) {
          n = true, s2 = e3;
        } finally {
          try {
            o2 || null == a2.return || a2.return();
          } finally {
            if (n)
              throw s2;
          }
        }
        return Number(r2[e2]) || t2 || 0;
      }, a.default.XML.prototype.getString = function(e2, t2) {
        var r2 = {}, o2 = true, n = false, s2 = void 0;
        try {
          for (var i2, a2 = this.DOM.attributes[Symbol.iterator](); !(o2 = (i2 = a2.next()).done); o2 = true) {
            var l = i2.value;
            r2[l.nodeName] = l.nodeValue;
          }
        } catch (e3) {
          n = true, s2 = e3;
        } finally {
          try {
            o2 || null == a2.return || a2.return();
          } finally {
            if (n)
              throw s2;
          }
        }
        return r2[e2] ? String(r2[e2]) : t2 || null;
      }, a.default.XML.prototype.setAttribute = function(e2, t2) {
        this.DOM.setAttribute(e2, t2);
      }, a.default.XML.prototype.getContent = function(e2) {
        var t2 = this.DOM.textContent;
        return (t2 = t2.replace(/\s\s+/g, ",")) || e2 || null;
      }, a.default.XML.prototype.setContent = function(e2) {
        this.DOM.children.length || (this.DOM.textContent = e2);
      }, a.default.XML.prototype.serialize = function() {
        return new XMLSerializer().serializeToString(this.DOM);
      };
      e = a.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.replace": 189, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.iterator": 230 }], 297: [function(e, t, r) {
      e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.math.hypot"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.math.hypot"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.string.includes"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var i2 = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function o() {
        if ("function" == typeof Math.hypot)
          return Math.hypot.apply(null, arguments);
        for (var e2 = arguments.length, t2 = [], r2 = 0, o2 = 0; o2 < e2; o2++) {
          var n = arguments[o2];
          if ((n = +n) === 1 / 0 || n === -1 / 0)
            return 1 / 0;
          r2 < (n = Math.abs(n)) && (r2 = n), t2[o2] = n;
        }
        0 === r2 && (r2 = 1);
        for (var s2 = 0, i3 = 0, a = 0; a < e2; a++)
          var l = t2[a] / r2, l = l * l - i3, u = s2 + l, i3 = u - s2 - l, s2 = u;
        return Math.sqrt(s2) * r2;
      }
      i2.default.prototype.abs = Math.abs, i2.default.prototype.ceil = Math.ceil, i2.default.prototype.constrain = function(e2, t2, r2) {
        return i2.default._validateParameters("constrain", arguments), Math.max(Math.min(e2, r2), t2);
      }, i2.default.prototype.dist = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return i2.default._validateParameters("dist", t2), 4 === t2.length ? o(t2[2] - t2[0], t2[3] - t2[1]) : 6 === t2.length ? o(t2[3] - t2[0], t2[4] - t2[1], t2[5] - t2[2]) : void 0;
      }, i2.default.prototype.exp = Math.exp, i2.default.prototype.floor = Math.floor, i2.default.prototype.lerp = function(e2, t2, r2) {
        return i2.default._validateParameters("lerp", arguments), r2 * (t2 - e2) + e2;
      }, i2.default.prototype.log = Math.log, i2.default.prototype.mag = function(e2, t2) {
        return i2.default._validateParameters("mag", arguments), o(e2, t2);
      }, i2.default.prototype.map = function(e2, t2, r2, o2, n, s2) {
        i2.default._validateParameters("map", arguments);
        e2 = (e2 - t2) / (r2 - t2) * (n - o2) + o2;
        return s2 ? o2 < n ? this.constrain(e2, o2, n) : this.constrain(e2, n, o2) : e2;
      }, i2.default.prototype.max = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return t2[0] instanceof Array ? Math.max.apply(null, t2[0]) : Math.max.apply(null, t2);
      }, i2.default.prototype.min = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return t2[0] instanceof Array ? Math.min.apply(null, t2[0]) : Math.min.apply(null, t2);
      }, i2.default.prototype.norm = function(e2, t2, r2) {
        return i2.default._validateParameters("norm", arguments), this.map(e2, t2, r2, 0, 1);
      }, i2.default.prototype.pow = Math.pow, i2.default.prototype.round = function(e2, t2) {
        return t2 ? (t2 = Math.pow(10, t2), Math.round(e2 * t2) / t2) : Math.round(e2);
      }, i2.default.prototype.sq = function(e2) {
        return e2 * e2;
      }, i2.default.prototype.sqrt = Math.sqrt, i2.default.prototype.fract = function(e2) {
        i2.default._validateParameters("fract", arguments);
        var t2, r2 = 0, e2 = Number(e2);
        return isNaN(e2) || Math.abs(e2) === 1 / 0 ? e2 : (e2 < 0 && (e2 = -e2, r2 = 1), String(e2).includes(".") && !String(e2).includes("e") ? (t2 = String(e2), t2 = Number("0" + t2.slice(t2.indexOf("."))), Math.abs(r2 - t2)) : e2 < 1 ? Math.abs(r2 - e2) : 0);
      };
      e = i2.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.math.hypot": 167, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.string.includes": 185 }], 298: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.reflect.construct"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.reflect.construct"), e("core-js/modules/es.regexp.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function n(e2, t2, r2) {
        return (n = function() {
          if ("undefined" != typeof Reflect && Reflect.construct && !Reflect.construct.sham) {
            if ("function" == typeof Proxy)
              return 1;
            try {
              return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              })), 1;
            } catch (e3) {
            }
          }
        }() ? Reflect.construct : function(e3, t3, r3) {
          var o2 = [null];
          o2.push.apply(o2, t3);
          t3 = new (Function.bind.apply(e3, o2))();
          return r3 && s2(t3, r3.prototype), t3;
        }).apply(null, arguments);
      }
      function s2(e2, t2) {
        return (s2 = Object.setPrototypeOf || function(e3, t3) {
          return e3.__proto__ = t3, e3;
        })(e2, t2);
      }
      o.default.prototype.createVector = function(e2, t2, r2) {
        return this instanceof o.default ? n(o.default.Vector, [this._fromRadians.bind(this), this._toRadians.bind(this)].concat(Array.prototype.slice.call(arguments))) : new o.default.Vector(e2, t2, r2);
      };
      e = o.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.reflect.construct": 179, "core-js/modules/es.regexp.to-string": 182 }], 299: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      function b(e2) {
        return 0.5 * (1 - Math.cos(e2 * Math.PI));
      }
      var j, _ = 4095, x = 4, w = 0.5, e = (e.default.prototype.noise = function(e2) {
        var t2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
        if (null == j) {
          j = new Array(4096);
          for (var o = 0; o < 4096; o++)
            j[o] = Math.random();
        }
        e2 < 0 && (e2 = -e2), t2 < 0 && (t2 = -t2), r2 < 0 && (r2 = -r2);
        for (var n, s2, i2 = Math.floor(e2), a = Math.floor(t2), l = Math.floor(r2), u = e2 - i2, c = t2 - a, d = r2 - l, f = 0, h = 0.5, p = 0; p < x; p++) {
          var m = i2 + (a << 4) + (l << 8), y = b(u), g = b(c), v = j[m & _];
          v += y * (j[m + 1 & _] - v), n = j[m + 16 & _], v += g * ((n += y * (j[m + 16 + 1 & _] - n)) - v), n = j[(m += 256) & _], n += y * (j[m + 1 & _] - n), s2 = j[m + 16 & _], n += g * ((s2 += y * (j[m + 16 + 1 & _] - s2)) - n), f += (v += b(d) * (n - v)) * h, h *= w, i2 <<= 1, a <<= 1, l <<= 1, 1 <= (u *= 2) && (i2++, u--), 1 <= (c *= 2) && (a++, c--), 1 <= (d *= 2) && (l++, d--);
        }
        return f;
      }, e.default.prototype.noiseDetail = function(e2, t2) {
        0 < e2 && (x = e2), 0 < t2 && (w = t2);
      }, e.default.prototype.noiseSeed = function(e2) {
        o = 4294967296;
        var t2, r2, o, n = { setSeed: function(e3) {
          r2 = t2 = (null == e3 ? Math.random() * o : e3) >>> 0;
        }, getSeed: function() {
          return t2;
        }, rand: function() {
          return (r2 = (1664525 * r2 + 1013904223) % o) / o;
        } };
        n.setSeed(e2), j = new Array(4096);
        for (var s2 = 0; s2 < 4096; s2++)
          j[s2] = n.rand();
      }, e.default);
      r.default = e;
    }, { "../core/main": 267 }], 300: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.some"), e("core-js/modules/es.math.sign"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.number.is-finite"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.sub"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.every"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.some"), e("core-js/modules/es.math.sign"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.number.is-finite"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.sub"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (s2 = e("../core/main")) && s2.__esModule ? s2 : { default: s2 }, n = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = l();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function l() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), l = function() {
          return e2;
        }, e2);
      }
      a.default.Vector = function() {
        var e2, t2, r2 = "[object Function]" === {}.toString.call(arguments[0]) ? (this.isPInst = true, this._fromRadians = arguments[0], this._toRadians = arguments[1], e2 = arguments[2] || 0, t2 = arguments[3] || 0, arguments[4] || 0) : (e2 = arguments[0] || 0, t2 = arguments[1] || 0, arguments[2] || 0);
        this.x = e2, this.y = t2, this.z = r2;
      }, a.default.Vector.prototype.toString = function() {
        return "p5.Vector Object : [".concat(this.x, ", ").concat(this.y, ", ").concat(this.z, "]");
      }, a.default.Vector.prototype.set = function(e2, t2, r2) {
        return e2 instanceof a.default.Vector ? (this.x = e2.x || 0, this.y = e2.y || 0, this.z = e2.z || 0) : e2 instanceof Array ? (this.x = e2[0] || 0, this.y = e2[1] || 0, this.z = e2[2] || 0) : (this.x = e2 || 0, this.y = t2 || 0, this.z = r2 || 0), this;
      }, a.default.Vector.prototype.copy = function() {
        return this.isPInst ? new a.default.Vector(this._fromRadians, this._toRadians, this.x, this.y, this.z) : new a.default.Vector(this.x, this.y, this.z);
      }, a.default.Vector.prototype.add = function(e2, t2, r2) {
        return e2 instanceof a.default.Vector ? (this.x += e2.x || 0, this.y += e2.y || 0, this.z += e2.z || 0) : e2 instanceof Array ? (this.x += e2[0] || 0, this.y += e2[1] || 0, this.z += e2[2] || 0) : (this.x += e2 || 0, this.y += t2 || 0, this.z += r2 || 0), this;
      };
      function u(e2, t2) {
        return 0 !== e2 && (this.x = this.x % e2), 0 !== t2 && (this.y = this.y % t2), this;
      }
      function c(e2, t2, r2) {
        return 0 !== e2 && (this.x = this.x % e2), 0 !== t2 && (this.y = this.y % t2), 0 !== r2 && (this.z = this.z % r2), this;
      }
      a.default.Vector.prototype.rem = function(e2, t2, r2) {
        var o2;
        if (e2 instanceof a.default.Vector) {
          if (Number.isFinite(e2.x) && Number.isFinite(e2.y) && Number.isFinite(e2.z))
            return n2 = parseFloat(e2.x), s3 = parseFloat(e2.y), o2 = parseFloat(e2.z), c.call(this, n2, s3, o2);
        } else if (e2 instanceof Array) {
          if (e2.every(function(e3) {
            return Number.isFinite(e3);
          }))
            return 2 === e2.length ? u.call(this, e2[0], e2[1]) : 3 === e2.length ? c.call(this, e2[0], e2[1], e2[2]) : void 0;
        } else if (1 === arguments.length) {
          if (Number.isFinite(e2) && 0 !== e2)
            return this.x = this.x % e2, this.y = this.y % e2, this.z = this.z % e2, this;
        } else if (2 === arguments.length) {
          var n2 = Array.prototype.slice.call(arguments);
          if (n2.every(function(e3) {
            return Number.isFinite(e3);
          }) && 2 === n2.length)
            return u.call(this, n2[0], n2[1]);
        } else if (3 === arguments.length) {
          var s3 = Array.prototype.slice.call(arguments);
          if (s3.every(function(e3) {
            return Number.isFinite(e3);
          }) && 3 === s3.length)
            return c.call(this, s3[0], s3[1], s3[2]);
        }
      }, a.default.Vector.prototype.sub = function(e2, t2, r2) {
        return e2 instanceof a.default.Vector ? (this.x -= e2.x || 0, this.y -= e2.y || 0, this.z -= e2.z || 0) : e2 instanceof Array ? (this.x -= e2[0] || 0, this.y -= e2[1] || 0, this.z -= e2[2] || 0) : (this.x -= e2 || 0, this.y -= t2 || 0, this.z -= r2 || 0), this;
      }, a.default.Vector.prototype.mult = function(e2, t2, r2) {
        var o2;
        return e2 instanceof a.default.Vector ? Number.isFinite(e2.x) && Number.isFinite(e2.y) && Number.isFinite(e2.z) && "number" == typeof e2.x && "number" == typeof e2.y && "number" == typeof e2.z ? (this.x *= e2.x, this.y *= e2.y, this.z *= e2.z) : console.warn("p5.Vector.prototype.mult:", "x contains components that are either undefined or not finite numbers") : e2 instanceof Array ? e2.every(function(e3) {
          return Number.isFinite(e3);
        }) && e2.every(function(e3) {
          return "number" == typeof e3;
        }) ? 1 === e2.length ? (this.x *= e2[0], this.y *= e2[0], this.z *= e2[0]) : 2 === e2.length ? (this.x *= e2[0], this.y *= e2[1]) : 3 === e2.length && (this.x *= e2[0], this.y *= e2[1], this.z *= e2[2]) : console.warn("p5.Vector.prototype.mult:", "x contains elements that are either undefined or not finite numbers") : (o2 = Array.prototype.slice.call(arguments)).every(function(e3) {
          return Number.isFinite(e3);
        }) && o2.every(function(e3) {
          return "number" == typeof e3;
        }) ? (1 === arguments.length && (this.x *= e2, this.y *= e2, this.z *= e2), 2 === arguments.length && (this.x *= e2, this.y *= t2), 3 === arguments.length && (this.x *= e2, this.y *= t2, this.z *= r2)) : console.warn("p5.Vector.prototype.mult:", "x, y, or z arguments are either undefined or not a finite number"), this;
      }, a.default.Vector.prototype.div = function(e2, t2, r2) {
        if (e2 instanceof a.default.Vector)
          if (Number.isFinite(e2.x) && Number.isFinite(e2.y) && Number.isFinite(e2.z) && "number" == typeof e2.x && "number" == typeof e2.y && "number" == typeof e2.z) {
            if (0 === e2.x || 0 === e2.y || 0 === e2.z)
              return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
            this.x /= e2.x, this.y /= e2.y, this.z /= e2.z;
          } else
            console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
        else if (e2 instanceof Array)
          if (e2.every(function(e3) {
            return Number.isFinite(e3);
          }) && e2.every(function(e3) {
            return "number" == typeof e3;
          })) {
            if (e2.some(function(e3) {
              return 0 === e3;
            }))
              return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
            1 === e2.length ? (this.x /= e2[0], this.y /= e2[0], this.z /= e2[0]) : 2 === e2.length ? (this.x /= e2[0], this.y /= e2[1]) : 3 === e2.length && (this.x /= e2[0], this.y /= e2[1], this.z /= e2[2]);
          } else
            console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");
        else {
          var o2 = Array.prototype.slice.call(arguments);
          if (o2.every(function(e3) {
            return Number.isFinite(e3);
          }) && o2.every(function(e3) {
            return "number" == typeof e3;
          })) {
            if (o2.some(function(e3) {
              return 0 === e3;
            }))
              return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
            1 === arguments.length && (this.x /= e2, this.y /= e2, this.z /= e2), 2 === arguments.length && (this.x /= e2, this.y /= t2), 3 === arguments.length && (this.x /= e2, this.y /= t2, this.z /= r2);
          } else
            console.warn("p5.Vector.prototype.div:", "x, y, or z arguments are either undefined or not a finite number");
        }
        return this;
      }, a.default.Vector.prototype.mag = function() {
        return Math.sqrt(this.magSq());
      }, a.default.Vector.prototype.magSq = function() {
        var e2 = this.x, t2 = this.y, r2 = this.z;
        return e2 * e2 + t2 * t2 + r2 * r2;
      }, a.default.Vector.prototype.dot = function(e2, t2, r2) {
        return e2 instanceof a.default.Vector ? this.dot(e2.x, e2.y, e2.z) : this.x * (e2 || 0) + this.y * (t2 || 0) + this.z * (r2 || 0);
      }, a.default.Vector.prototype.cross = function(e2) {
        var t2 = this.y * e2.z - this.z * e2.y, r2 = this.z * e2.x - this.x * e2.z, e2 = this.x * e2.y - this.y * e2.x;
        return this.isPInst ? new a.default.Vector(this._fromRadians, this._toRadians, t2, r2, e2) : new a.default.Vector(t2, r2, e2);
      }, a.default.Vector.prototype.dist = function(e2) {
        return e2.copy().sub(this).mag();
      }, a.default.Vector.prototype.normalize = function() {
        var e2 = this.mag();
        return 0 !== e2 && this.mult(1 / e2), this;
      }, a.default.Vector.prototype.limit = function(e2) {
        var t2 = this.magSq();
        return e2 * e2 < t2 && this.div(Math.sqrt(t2)).mult(e2), this;
      }, a.default.Vector.prototype.setMag = function(e2) {
        return this.normalize().mult(e2);
      }, a.default.Vector.prototype.heading = function() {
        var e2 = Math.atan2(this.y, this.x);
        return this.isPInst ? this._fromRadians(e2) : e2;
      }, a.default.Vector.prototype.setHeading = function(e2) {
        this.isPInst && (e2 = this._toRadians(e2));
        var t2 = this.mag();
        return this.x = t2 * Math.cos(e2), this.y = t2 * Math.sin(e2), this;
      }, a.default.Vector.prototype.rotate = function(e2) {
        var e2 = this.heading() + e2, t2 = (this.isPInst && (e2 = this._toRadians(e2)), this.mag());
        return this.x = Math.cos(e2) * t2, this.y = Math.sin(e2) * t2, this;
      }, a.default.Vector.prototype.angleBetween = function(e2) {
        var t2 = this.dot(e2) / (this.mag() * e2.mag()), t2 = Math.acos(Math.min(1, Math.max(-1, t2)));
        return t2 *= Math.sign(this.cross(e2).z || 1), t2 = this.isPInst ? this._fromRadians(t2) : t2;
      }, a.default.Vector.prototype.lerp = function(e2, t2, r2, o2) {
        return e2 instanceof a.default.Vector ? this.lerp(e2.x, e2.y, e2.z, t2) : (this.x += (e2 - this.x) * o2 || 0, this.y += (t2 - this.y) * o2 || 0, this.z += (r2 - this.z) * o2 || 0, this);
      }, a.default.Vector.prototype.reflect = function(e2) {
        return e2.normalize(), this.sub(e2.mult(2 * this.dot(e2)));
      }, a.default.Vector.prototype.array = function() {
        return [this.x || 0, this.y || 0, this.z || 0];
      }, a.default.Vector.prototype.equals = function(e2, t2, r2) {
        var o2, n2, e2 = e2 instanceof a.default.Vector ? (o2 = e2.x || 0, n2 = e2.y || 0, e2.z || 0) : e2 instanceof Array ? (o2 = e2[0] || 0, n2 = e2[1] || 0, e2[2] || 0) : (o2 = e2 || 0, n2 = t2 || 0, r2 || 0);
        return this.x === o2 && this.y === n2 && this.z === e2;
      }, a.default.Vector.fromAngle = function(e2, t2) {
        return new a.default.Vector((t2 = void 0 === t2 ? 1 : t2) * Math.cos(e2), t2 * Math.sin(e2), 0);
      }, a.default.Vector.fromAngles = function(e2, t2, r2) {
        void 0 === r2 && (r2 = 1);
        var o2 = Math.cos(t2), t2 = Math.sin(t2), n2 = Math.cos(e2), e2 = Math.sin(e2);
        return new a.default.Vector(r2 * e2 * t2, -r2 * n2, r2 * e2 * o2);
      }, a.default.Vector.random2D = function() {
        return this.fromAngle(Math.random() * n.TWO_PI);
      }, a.default.Vector.random3D = function() {
        var e2 = Math.random() * n.TWO_PI, t2 = 2 * Math.random() - 1, r2 = Math.sqrt(1 - t2 * t2), o2 = r2 * Math.cos(e2), r2 = r2 * Math.sin(e2);
        return new a.default.Vector(o2, r2, t2);
      }, a.default.Vector.add = function(e2, t2, r2) {
        return r2 ? r2.set(e2) : (r2 = e2.copy(), 3 === arguments.length && a.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.add")), r2.add(t2), r2;
      }, a.default.Vector.rem = function(e2, t2) {
        if (e2 instanceof a.default.Vector && t2 instanceof a.default.Vector)
          return (e2 = e2.copy()).rem(t2), e2;
      }, a.default.Vector.sub = function(e2, t2, r2) {
        return r2 ? r2.set(e2) : (r2 = e2.copy(), 3 === arguments.length && a.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.sub")), r2.sub(t2), r2;
      }, a.default.Vector.mult = function(e2, t2, r2) {
        return r2 ? r2.set(e2) : (r2 = e2.copy(), 3 === arguments.length && a.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.mult")), r2.mult(t2), r2;
      }, a.default.Vector.rotate = function(e2, t2, r2) {
        return 2 === arguments.length ? r2 = e2.copy() : (r2 instanceof a.default.Vector || a.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.rotate"), r2.set(e2)), r2.rotate(t2), r2;
      }, a.default.Vector.div = function(e2, t2, r2) {
        return r2 ? r2.set(e2) : (r2 = e2.copy(), 3 === arguments.length && a.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.div")), r2.div(t2), r2;
      }, a.default.Vector.dot = function(e2, t2) {
        return e2.dot(t2);
      }, a.default.Vector.cross = function(e2, t2) {
        return e2.cross(t2);
      }, a.default.Vector.dist = function(e2, t2) {
        return e2.dist(t2);
      }, a.default.Vector.lerp = function(e2, t2, r2, o2) {
        return o2 ? o2.set(e2) : (o2 = e2.copy(), 4 === arguments.length && a.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.lerp")), o2.lerp(t2, r2), o2;
      }, a.default.Vector.mag = function(e2) {
        var t2 = e2.x, r2 = e2.y, e2 = e2.z;
        return Math.sqrt(t2 * t2 + r2 * r2 + e2 * e2);
      }, a.default.Vector.normalize = function(e2, t2) {
        return arguments.length < 2 ? t2 = e2.copy() : (t2 instanceof a.default.Vector || a.default._friendlyError("The target parameter should be of type p5.Vector", "p5.Vector.normalize"), t2.set(e2)), t2.normalize();
      };
      var s2 = a.default.Vector;
      r.default = s2;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.every": 151, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.some": 163, "core-js/modules/es.math.sign": 168, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.number.is-finite": 170, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.sub": 192, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 301: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      var s2 = "_lcg_random_state", o = 4294967296, i2 = 0, e = (n.default.prototype._lcg = function(e2) {
        return this[e2] = (1664525 * this[e2] + 1013904223) % o, this[e2] / o;
      }, n.default.prototype._lcgSetSeed = function(e2, t2) {
        this[e2] = (null == t2 ? Math.random() * o : t2) >>> 0;
      }, n.default.prototype.randomSeed = function(e2) {
        this._lcgSetSeed(s2, e2), this._gaussian_previous = false;
      }, n.default.prototype.random = function(e2, t2) {
        var r2, o2;
        return n.default._validateParameters("random", arguments), r2 = null != this[s2] ? this._lcg(s2) : Math.random(), void 0 === e2 ? r2 : void 0 === t2 ? e2 instanceof Array ? e2[Math.floor(r2 * e2.length)] : r2 * e2 : (t2 < e2 && (o2 = e2, e2 = t2, t2 = o2), r2 * (t2 - e2) + e2);
      }, n.default.prototype.randomGaussian = function(e2) {
        var t2, r2, o2, n2, s3 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1;
        if (this._gaussian_previous)
          t2 = i2, this._gaussian_previous = false;
        else {
          for (; 1 <= (n2 = (r2 = this.random(2) - 1) * r2 + (o2 = this.random(2) - 1) * o2); )
            ;
          t2 = r2 * (n2 = Math.sqrt(-2 * Math.log(n2) / n2)), i2 = o2 * n2, this._gaussian_previous = true;
        }
        return t2 * s3 + (e2 || 0);
      }, n.default);
      r.default = e;
    }, { "../core/main": 267 }], 302: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (l = e("../core/main")) && l.__esModule ? l : { default: l }, s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      n.default.prototype._angleMode = s2.RADIANS, n.default.prototype.acos = function(e2) {
        return this._fromRadians(Math.acos(e2));
      }, n.default.prototype.asin = function(e2) {
        return this._fromRadians(Math.asin(e2));
      }, n.default.prototype.atan = function(e2) {
        return this._fromRadians(Math.atan(e2));
      }, n.default.prototype.atan2 = function(e2, t2) {
        return this._fromRadians(Math.atan2(e2, t2));
      }, n.default.prototype.cos = function(e2) {
        return Math.cos(this._toRadians(e2));
      }, n.default.prototype.sin = function(e2) {
        return Math.sin(this._toRadians(e2));
      }, n.default.prototype.tan = function(e2) {
        return Math.tan(this._toRadians(e2));
      }, n.default.prototype.degrees = function(e2) {
        return e2 * s2.RAD_TO_DEG;
      }, n.default.prototype.radians = function(e2) {
        return e2 * s2.DEG_TO_RAD;
      }, n.default.prototype.angleMode = function(e2) {
        if (n.default._validateParameters("angleMode", arguments), void 0 === e2)
          return this._angleMode;
        e2 !== s2.DEGREES && e2 !== s2.RADIANS || (this._angleMode = e2);
      }, n.default.prototype._toRadians = function(e2) {
        return this._angleMode === s2.DEGREES ? e2 * s2.DEG_TO_RAD : e2;
      }, n.default.prototype._toDegrees = function(e2) {
        return this._angleMode === s2.RADIANS ? e2 * s2.RAD_TO_DEG : e2;
      }, n.default.prototype._fromRadians = function(e2) {
        return this._angleMode === s2.DEGREES ? e2 * s2.RAD_TO_DEG : e2;
      };
      var l = n.default;
      r.default = l;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 303: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      n.default.prototype.textAlign = function(e2, t2) {
        var r2;
        return n.default._validateParameters("textAlign", arguments), (r2 = this._renderer).textAlign.apply(r2, arguments);
      }, n.default.prototype.textLeading = function(e2) {
        var t2;
        return n.default._validateParameters("textLeading", arguments), (t2 = this._renderer).textLeading.apply(t2, arguments);
      }, n.default.prototype.textSize = function(e2) {
        var t2;
        return n.default._validateParameters("textSize", arguments), (t2 = this._renderer).textSize.apply(t2, arguments);
      }, n.default.prototype.textStyle = function(e2) {
        var t2;
        return n.default._validateParameters("textStyle", arguments), (t2 = this._renderer).textStyle.apply(t2, arguments);
      }, n.default.prototype.textWidth = function() {
        for (var e2, t2 = arguments.length, r2 = new Array(t2), o = 0; o < t2; o++)
          r2[o] = arguments[o];
        return r2[0] += "", n.default._validateParameters("textWidth", r2), 0 === r2[0].length ? 0 : (e2 = this._renderer).textWidth.apply(e2, r2);
      }, n.default.prototype.textAscent = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return n.default._validateParameters("textAscent", t2), this._renderer.textAscent();
      }, n.default.prototype.textDescent = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return n.default._validateParameters("textDescent", t2), this._renderer.textDescent();
      }, n.default.prototype._updateTextMetrics = function() {
        return this._renderer._updateTextMetrics();
      }, n.default.prototype.textWrap = function(e2) {
        if ("WORD" !== e2 && "CHAR" !== e2)
          throw "Error: textWrap accepts only WORD or CHAR";
        return this._renderer.textWrap(e2);
      };
      e = n.default;
      r.default = e;
    }, { "../core/main": 267 }], 304: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.last-index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.split"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = (c = e("../core/main")) && c.__esModule ? c : { default: c }, n = s2(e("../core/constants")), u = s2(e("opentype.js"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function s2(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2, n2 = {}, s3 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2)
          Object.prototype.hasOwnProperty.call(e2, r2) && ((o2 = s3 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (o2.get || o2.set) ? Object.defineProperty(n2, r2, o2) : n2[r2] = e2[r2]);
        return n2.default = e2, t2 && t2.set(e2, n2), n2;
      }
      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), l.default.prototype.loadFont = function(o2, n2, s3) {
        l.default._validateParameters("loadFont", arguments);
        var i3 = new l.default.Font(this), a2 = this;
        return u.load(o2, function(e2, t2) {
          if (e2)
            return l.default._friendlyFileLoadError(4, o2), void 0 !== s3 ? s3(e2) : void console.error(e2, o2);
          i3.font = t2, void 0 !== n2 && n2(i3), a2._decrementPreload();
          var e2 = o2.split("\\").pop().split("/").pop(), t2 = e2.lastIndexOf("."), r2 = t2 < 1 ? null : e2.slice(t2 + 1);
          ["ttf", "otf", "woff", "woff2"].includes(r2) && (r2 = e2.slice(0, -1 !== t2 ? t2 : 0), (e2 = document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(r2, ";\nsrc: url(").concat(o2, ");\n}\n"))), document.head.appendChild(e2));
        }), i3;
      }, l.default.prototype.text = function(e2, t2, r2, o2, n2) {
        var s3;
        return l.default._validateParameters("text", arguments), this._renderer._doFill || this._renderer._doStroke ? (s3 = this._renderer).text.apply(s3, arguments) : this;
      }, l.default.prototype.textFont = function(e2, t2) {
        if (l.default._validateParameters("textFont", arguments), arguments.length) {
          if (e2)
            return this._renderer._setProperty("_textFont", e2), t2 && (this._renderer._setProperty("_textSize", t2), this._renderer._leadingSet || this._renderer._setProperty("_textLeading", t2 * n._DEFAULT_LEADMULT)), this._renderer._applyTextProperties();
          throw new Error("null font passed to textFont");
        }
        return this._renderer._textFont;
      };
      var c = l.default;
      r.default = c;
    }, { "../core/constants": 256, "../core/friendly_errors/fes_core": 258, "../core/friendly_errors/file_errors": 259, "../core/friendly_errors/validate_params": 262, "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.last-index-of": 160, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230, "opentype.js": 241 }], 305: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (n = e("../core/main")) && n.__esModule ? n : { default: n }, v = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== p(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = i2();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function i2() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), i2 = function() {
          return e2;
        }, e2);
      }
      function p(e2) {
        return (p = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      function m(e2, t2) {
        var r2 = e2.length;
        return e2[t2 < 0 ? t2 % r2 + r2 : t2 % r2];
      }
      function y(e2, t2, r2, o2) {
        var n2, s2, i3;
        return o2 ? (void 0 === y.tmpPoint1 && (y.tmpPoint1 = [], y.tmpPoint2 = []), s2 = y.tmpPoint1, i3 = y.tmpPoint2, s2.x = t2.x - e2.x, s2.y = t2.y - e2.y, i3.x = r2.x - t2.x, i3.y = r2.y - t2.y, n2 = s2.x * i3.x + s2.y * i3.y, s2 = Math.sqrt(s2.x * s2.x + s2.y * s2.y), i3 = Math.sqrt(i3.x * i3.x + i3.y * i3.y), Math.acos(n2 / (s2 * i3)) < o2) : 0 == (t2[0] - e2[0]) * (r2[1] - e2[1]) - (r2[0] - e2[0]) * (t2[1] - e2[1]);
      }
      function d(e2, t2, r2, o2, n2, s2, i3, a, l) {
        var u = 1 - l, c = Math.pow(u, 3), d2 = Math.pow(u, 2), f2 = l * l, h2 = f2 * l, p2 = c * e2 + 3 * d2 * l * r2 + 3 * u * l * l * n2 + h2 * i3, c = c * t2 + 3 * d2 * l * o2 + 3 * u * l * l * s2 + h2 * a, d2 = e2 + 2 * l * (r2 - e2) + f2 * (n2 - 2 * r2 + e2), h2 = t2 + 2 * l * (o2 - t2) + f2 * (s2 - 2 * o2 + t2), m2 = r2 + 2 * l * (n2 - r2) + f2 * (i3 - 2 * n2 + r2), f2 = o2 + 2 * l * (s2 - o2) + f2 * (a - 2 * s2 + o2), e2 = u * e2 + l * r2, r2 = u * t2 + l * o2, t2 = u * n2 + l * i3, o2 = u * s2 + l * a, n2 = 90 - 180 * Math.atan2(d2 - m2, h2 - f2) / Math.PI;
        return (m2 < d2 || h2 < f2) && (n2 += 180), { x: p2, y: c, m: { x: d2, y: h2 }, n: { x: m2, y: f2 }, start: { x: e2, y: r2 }, end: { x: t2, y: o2 }, alpha: n2 };
      }
      function f(e2, t2, r2, o2, n2, s2, i3, a, l) {
        return null == l ? h(e2, t2, r2, o2, n2, s2, i3, a) : d(e2, t2, r2, o2, n2, s2, i3, a, function(e3, t3, r3, o3, n3, s3, i4, a2, l2) {
          if (!(l2 < 0 || h(e3, t3, r3, o3, n3, s3, i4, a2) < l2)) {
            var u, c = 0.5, d2 = 1 - c;
            for (u = h(e3, t3, r3, o3, n3, s3, i4, a2, d2); 0.01 < Math.abs(u - l2); )
              u = h(e3, t3, r3, o3, n3, s3, i4, a2, d2 += (u < l2 ? 1 : -1) * (c /= 2));
            return d2;
          }
        }(e2, t2, r2, o2, n2, s2, i3, a, l));
      }
      function g(e2, t2, r2) {
        for (var o2, n2, s2, i3, a, l = 0, u = 0, c = (e2 = function(e3, t3) {
          function r3(e4, t4, r4) {
            var o4, n4;
            if (!e4)
              return ["C", t4.x, t4.y, t4.x, t4.y, t4.x, t4.y];
            switch (e4[0] in { T: 1, Q: 1 } || (t4.qx = t4.qy = null), e4[0]) {
              case "M":
                t4.X = e4[1], t4.Y = e4[2];
                break;
              case "A":
                e4 = ["C"].concat(E.apply(0, [t4.x, t4.y].concat(e4.slice(1))));
                break;
              case "S":
                n4 = "C" === r4 || "S" === r4 ? (o4 = 2 * t4.x - t4.bx, 2 * t4.y - t4.by) : (o4 = t4.x, t4.y), e4 = ["C", o4, n4].concat(e4.slice(1));
                break;
              case "T":
                "Q" === r4 || "T" === r4 ? (t4.qx = 2 * t4.x - t4.qx, t4.qy = 2 * t4.y - t4.qy) : (t4.qx = t4.x, t4.qy = t4.y), e4 = ["C"].concat(x(t4.x, t4.y, t4.qx, t4.qy, e4[1], e4[2]));
                break;
              case "Q":
                t4.qx = e4[1], t4.qy = e4[2], e4 = ["C"].concat(x(t4.x, t4.y, e4[1], e4[2], e4[3], e4[4]));
                break;
              case "L":
                e4 = ["C"].concat(_(t4.x, t4.y, e4[1], e4[2]));
                break;
              case "H":
                e4 = ["C"].concat(_(t4.x, t4.y, e4[1], t4.y));
                break;
              case "V":
                e4 = ["C"].concat(_(t4.x, t4.y, t4.x, e4[1]));
                break;
              case "Z":
                e4 = ["C"].concat(_(t4.x, t4.y, t4.X, t4.Y));
            }
            return e4;
          }
          function o3(e4, t4) {
            if (7 < e4[t4].length) {
              e4[t4].shift();
              for (var r4 = e4[t4]; r4.length; )
                c2[t4] = "A", a2 && (d2[t4] = "A"), e4.splice(t4++, 0, ["C"].concat(r4.splice(0, 6)));
              e4.splice(t4, 1), s3 = Math.max(i4.length, a2 && a2.length || 0);
            }
          }
          function n3(e4, t4, r4, o4, n4) {
            e4 && t4 && "M" === e4[n4][0] && "M" !== t4[n4][0] && (t4.splice(n4, 0, ["M", o4.x, o4.y]), r4.bx = 0, r4.by = 0, r4.x = e4[n4][1], r4.y = e4[n4][2], s3 = Math.max(i4.length, a2 && a2.length || 0));
          }
          var s3, i4 = b(e3), a2 = t3 && b(t3), l2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, u2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, c2 = [], d2 = [], f2 = "", h2 = "";
          s3 = Math.max(i4.length, a2 && a2.length || 0);
          for (var p2 = 0; p2 < s3; p2++) {
            "C" !== (f2 = i4[p2] ? i4[p2][0] : f2) && (c2[p2] = f2, p2 && (h2 = c2[p2 - 1])), i4[p2] = r3(i4[p2], l2, h2), "A" !== c2[p2] && "C" === f2 && (c2[p2] = "C"), o3(i4, p2), a2 && ("C" !== (f2 = a2[p2] ? a2[p2][0] : f2) && (d2[p2] = f2, p2 && (h2 = d2[p2 - 1])), a2[p2] = r3(a2[p2], u2, h2), "A" !== d2[p2] && "C" === f2 && (d2[p2] = "C"), o3(a2, p2)), n3(i4, a2, l2, u2, p2), n3(a2, i4, u2, l2, p2);
            var m2 = i4[p2], y2 = a2 && a2[p2], g2 = m2.length, v2 = a2 && y2.length;
            l2.x = m2[g2 - 2], l2.y = m2[g2 - 1], l2.bx = parseFloat(m2[g2 - 4]) || l2.x, l2.by = parseFloat(m2[g2 - 3]) || l2.y, u2.bx = a2 && (parseFloat(y2[v2 - 4]) || u2.x), u2.by = a2 && (parseFloat(y2[v2 - 3]) || u2.y), u2.x = a2 && y2[v2 - 2], u2.y = a2 && y2[v2 - 1];
          }
          return a2 ? [i4, a2] : i4;
        }(e2)).length; u < c; u++) {
          if ("M" === (s2 = e2[u])[0])
            o2 = +s2[1], n2 = +s2[2];
          else {
            if (t2 < l + (i3 = f(o2, n2, s2[1], s2[2], s2[3], s2[4], s2[5], s2[6])) && !r2)
              return { x: (a = f(o2, n2, s2[1], s2[2], s2[3], s2[4], s2[5], s2[6], t2 - l)).x, y: a.y, alpha: a.alpha };
            l += i3, o2 = +s2[5], n2 = +s2[6];
          }
          s2.shift();
        }
        return a = (a = r2 ? l : d(o2, n2, s2[0], s2[1], s2[2], s2[3], s2[4], s2[5], 1)).alpha ? { x: a.x, y: a.y, alpha: a.alpha } : a;
      }
      function b(e2) {
        var t2 = [], r2 = 0, o2 = 0, n2 = 0, s2 = 0, i3 = 0;
        if (e2) {
          "M" === e2[0][0] && (n2 = r2 = +e2[0][1], s2 = o2 = +e2[0][2], i3++, t2[0] = ["M", r2, o2]);
          for (var a, l, u = 3 === e2.length && "M" === e2[0][0] && "R" === e2[1][0].toUpperCase() && "Z" === e2[2][0].toUpperCase(), c = i3, d2 = e2.length; c < d2; c++) {
            if (t2.push(a = []), (l = e2[c])[0] !== String.prototype.toUpperCase.call(l[0]))
              switch (a[0] = String.prototype.toUpperCase.call(l[0]), a[0]) {
                case "A":
                  a[1] = l[1], a[2] = l[2], a[3] = l[3], a[4] = l[4], a[5] = l[5], a[6] = +(l[6] + r2), a[7] = +(l[7] + o2);
                  break;
                case "V":
                  a[1] = +l[1] + o2;
                  break;
                case "H":
                  a[1] = +l[1] + r2;
                  break;
                case "R":
                  for (var f2, h2 = 2, p2 = (f2 = [r2, o2].concat(l.slice(1))).length; h2 < p2; h2++)
                    f2[h2] = +f2[h2] + r2, f2[++h2] = +f2[h2] + o2;
                  t2.pop(), t2 = t2.concat(j(f2, u));
                  break;
                case "M":
                  n2 = +l[1] + r2, s2 = +l[2] + o2;
                  break;
                default:
                  for (var m2 = 1, y2 = l.length; m2 < y2; m2++)
                    a[m2] = +l[m2] + (m2 % 2 ? r2 : o2);
              }
            else if ("R" === l[0])
              f2 = [r2, o2].concat(l.slice(1)), t2.pop(), t2 = t2.concat(j(f2, u)), a = ["R"].concat(l.slice(-2));
            else
              for (var g2 = 0, v2 = l.length; g2 < v2; g2++)
                a[g2] = l[g2];
            switch (a[0]) {
              case "Z":
                r2 = n2, o2 = s2;
                break;
              case "H":
                r2 = a[1];
                break;
              case "V":
                o2 = a[1];
                break;
              case "M":
                n2 = a[a.length - 2], s2 = a[a.length - 1];
                break;
              default:
                r2 = a[a.length - 2], o2 = a[a.length - 1];
            }
          }
        }
        return t2;
      }
      function E(e2, t2, r2, o2, n2, s2, i3, a, l, u) {
        function c(e3, t3, r3) {
          return { x: e3 * Math.cos(r3) - t3 * Math.sin(r3), y: e3 * Math.sin(r3) + t3 * Math.cos(r3) };
        }
        var d2, f2 = Math.PI, h2 = 120 * f2 / 180, p2 = f2 / 180 * (+n2 || 0), m2 = [], y2 = (u ? (x2 = u[0], d2 = u[1], j2 = u[2], _2 = u[3]) : (e2 = (v2 = c(e2, t2, -p2)).x, t2 = v2.y, 1 < (y2 = (g2 = (e2 - (a = (v2 = c(a, l, -p2)).x)) / 2) * g2 / (r2 * r2) + (v2 = (t2 - (l = v2.y)) / 2) * v2 / (o2 * o2)) && (r2 *= y2 = Math.sqrt(y2), o2 *= y2), y2 = r2 * r2, b2 = o2 * o2, j2 = (s2 = (s2 === i3 ? -1 : 1) * Math.sqrt(Math.abs((y2 * b2 - y2 * v2 * v2 - b2 * g2 * g2) / (y2 * v2 * v2 + b2 * g2 * g2)))) * r2 * v2 / o2 + (e2 + a) / 2, _2 = s2 * -o2 * g2 / r2 + (t2 + l) / 2, x2 = Math.asin(((t2 - _2) / o2).toFixed(9)), d2 = Math.asin(((l - _2) / o2).toFixed(9)), (x2 = e2 < j2 ? f2 - x2 : x2) < 0 && (x2 = 2 * f2 + x2), (d2 = a < j2 ? f2 - d2 : d2) < 0 && (d2 = 2 * f2 + d2), i3 && d2 < x2 && (x2 -= 2 * f2), !i3 && x2 < d2 && (d2 -= 2 * f2)), d2 - x2), g2 = (Math.abs(y2) > h2 && (b2 = d2, v2 = a, s2 = l, d2 = x2 + h2 * (i3 && x2 < d2 ? 1 : -1), m2 = E(a = j2 + r2 * Math.cos(d2), l = _2 + o2 * Math.sin(d2), r2, o2, n2, 0, i3, v2, s2, [d2, b2, j2, _2])), y2 = d2 - x2, Math.cos(x2)), f2 = Math.sin(x2), h2 = Math.cos(d2), n2 = Math.sin(d2), i3 = Math.tan(y2 / 4), v2 = 4 / 3 * r2 * i3, s2 = 4 / 3 * o2 * i3, b2 = [e2, t2], j2 = [e2 + v2 * f2, t2 - s2 * g2], _2 = [a + v2 * n2, l - s2 * h2], x2 = [a, l];
        if (j2[0] = 2 * b2[0] - j2[0], j2[1] = 2 * b2[1] - j2[1], u)
          return [j2, _2, x2].concat(m2);
        for (var w2 = [], S = 0, M = (m2 = [j2, _2, x2].concat(m2).join().split(",")).length; S < M; S++)
          w2[S] = S % 2 ? c(m2[S - 1], m2[S], p2).y : c(m2[S], m2[S + 1], p2).x;
        return w2;
      }
      function j(e2, t2) {
        for (var r2 = [], o2 = 0, n2 = e2.length; o2 < n2 - 2 * !t2; o2 += 2) {
          var s2 = [{ x: +e2[o2 - 2], y: +e2[o2 - 1] }, { x: +e2[o2], y: +e2[o2 + 1] }, { x: +e2[o2 + 2], y: +e2[o2 + 3] }, { x: +e2[o2 + 4], y: +e2[o2 + 5] }];
          t2 ? o2 ? n2 - 4 === o2 ? s2[3] = { x: +e2[0], y: +e2[1] } : n2 - 2 === o2 && (s2[2] = { x: +e2[0], y: +e2[1] }, s2[3] = { x: +e2[2], y: +e2[3] }) : s2[0] = { x: +e2[n2 - 2], y: +e2[n2 - 1] } : n2 - 4 === o2 ? s2[3] = s2[2] : o2 || (s2[0] = { x: +e2[o2], y: +e2[o2 + 1] }), r2.push(["C", (-s2[0].x + 6 * s2[1].x + s2[2].x) / 6, (-s2[0].y + 6 * s2[1].y + s2[2].y) / 6, (s2[1].x + 6 * s2[2].x - s2[3].x) / 6, (s2[1].y + 6 * s2[2].y - s2[3].y) / 6, s2[2].x, s2[2].y]);
        }
        return r2;
      }
      function _(e2, t2, r2, o2) {
        return [e2, t2, r2, o2, r2, o2];
      }
      function x(e2, t2, r2, o2, n2, s2) {
        return [1 / 3 * e2 + 2 / 3 * r2, 1 / 3 * t2 + 2 / 3 * o2, 1 / 3 * n2 + 2 / 3 * r2, 1 / 3 * s2 + 2 / 3 * o2, n2, s2];
      }
      function h(e2, t2, r2, o2, n2, s2, i3, a, l) {
        for (var u = (l = 1 < (l = null == l ? 1 : l) ? 1 : l < 0 ? 0 : l) / 2, c = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816], d2 = 0, f2 = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472], h2 = 0; h2 < 12; h2++) {
          var p2 = u * c[h2] + u, m2 = w(p2, e2, r2, n2, i3), p2 = w(p2, t2, o2, s2, a);
          d2 += f2[h2] * Math.sqrt(m2 * m2 + p2 * p2);
        }
        return u * d2;
      }
      function w(e2, t2, r2, o2, n2) {
        return e2 * (e2 * (-3 * t2 + 9 * r2 - 9 * o2 + 3 * n2) + 6 * t2 - 12 * r2 + 6 * o2) - 3 * t2 + 3 * r2;
      }
      n.default.Font = function(e2) {
        this.parent = e2, this.cache = {}, this.font = void 0;
      }, n.default.Font.prototype.textBounds = function(e2) {
        var t2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0, o2 = 3 < arguments.length ? arguments[3] : void 0, n2 = 4 < arguments.length ? arguments[4] : void 0, s2 = n2 && n2.renderer && n2.renderer._pInst || this.parent, i3 = s2._renderer.drawingContext, o2 = (i3.textAlign || v.LEFT, i3.textBaseline || v.BASELINE, o2 || s2._renderer._textSize);
        if (!g2) {
          for (var a = [], l = [], u = [], c = (u[0] = [], []), d2 = this._scale(o2), f2 = s2._renderer.textLeading(), h2 = 0, p2 = (this.font.forEachGlyph(e2, t2, r2, o2, n2, function(e3, t3, r3, o3) {
            var n3 = e3.getMetrics();
            0 === e3.index || 10 === e3.index ? u[h2 += 1] = [] : (u[h2].push(t3 + n3.xMin * d2), u[h2].push(t3 + n3.xMax * d2), c.push(r3 + h2 * f2 + -n3.yMin * d2), c.push(r3 + h2 * f2 + -n3.yMax * d2));
          }), 0 < u[h2].length && (a[h2] = Math.min.apply(null, u[h2]), l[h2] = Math.max.apply(null, u[h2])), 0), m2 = 0; m2 <= h2; m2++) {
            a[m2] = Math.min.apply(null, u[m2]), l[m2] = Math.max.apply(null, u[m2]);
            var y2 = l[m2] - a[m2];
            p2 < y2 && (p2 = y2);
          }
          var i3 = Math.min.apply(null, a), g2 = { x: i3, y: r2 = Math.min.apply(null, c), h: Math.max.apply(null, c) - r2, w: p2, advance: i3 - t2 }, o2 = this._handleAlignment(s2._renderer, e2, g2.x, g2.y, g2.w + g2.advance);
          g2.x = o2.x, g2.y = o2.y;
        }
        return g2;
      }, n.default.Font.prototype.textToPoints = function(e2, t2, r2, o2, n2) {
        var s2 = 0, i3 = [], a = this._getGlyphs(e2);
        o2 = o2 || this.parent._renderer._textSize;
        for (var l, u = 0; u < a.length; u++) {
          if (!(a[l = u].name && "space" === a[l].name || e2.length === a.length && " " === e2[l]))
            for (var c = function(e3) {
              for (var t3, r3 = [], o3 = 0; o3 < e3.length; o3++)
                "M" === e3[o3].type && (t3 && r3.push(t3), t3 = []), t3.push(function(e4) {
                  var t4 = [e4.type];
                  "M" === e4.type || "L" === e4.type ? t4.push(e4.x, e4.y) : "C" === e4.type ? t4.push(e4.x1, e4.y1, e4.x2, e4.y2, e4.x, e4.y) : "Q" === e4.type && t4.push(e4.x1, e4.y1, e4.x, e4.y);
                  return t4;
                }(e3[o3]));
              return r3.push(t3), r3;
            }(a[u].getPath(t2, r2, o2).commands), d2 = 0; d2 < c.length; d2++)
              for (var f2 = function(e3, t3) {
                for (var t3 = function(e4, t4) {
                  if ("object" !== p(e4))
                    e4 = t4;
                  else
                    for (var r4 in t4)
                      void 0 === e4[r4] && (e4[r4] = t4[r4]);
                  return e4;
                }(t3, { sampleFactor: 0.1, simplifyThreshold: 0 }), r3 = g(e3, 0, 1), o3 = r3 / (r3 * t3.sampleFactor), n3 = [], s3 = 0; s3 < r3; s3 += o3)
                  n3.push(g(e3, s3));
                t3.simplifyThreshold && !function(e4) {
                  for (var t4 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r4 = 0, o4 = e4.length - 1; 3 < e4.length && 0 <= o4; --o4)
                    y(m(e4, o4 - 1), m(e4, o4), m(e4, o4 + 1), t4) && (e4.splice(o4 % e4.length, 1), r4++);
                }(n3, t3.simplifyThreshold);
                return n3;
              }(c[d2], n2), h2 = 0; h2 < f2.length; h2++)
                f2[h2].x += s2, i3.push(f2[h2]);
          s2 += a[u].advanceWidth * this._scale(o2);
        }
        return i3;
      }, n.default.Font.prototype._getGlyphs = function(e2) {
        return this.font.stringToGlyphs(e2);
      }, n.default.Font.prototype._getPath = function(e2, t2, r2, o2) {
        var n2 = (o2 && o2.renderer && o2.renderer._pInst || this.parent)._renderer, t2 = this._handleAlignment(n2, e2, t2, r2);
        return this.font.getPath(e2, t2.x, t2.y, n2._textSize, o2);
      }, n.default.Font.prototype._getPathData = function(e2, t2, r2, o2) {
        var n2 = 3;
        return "string" == typeof e2 && 2 < arguments.length ? e2 = this._getPath(e2, t2, r2, o2) : "object" === p(t2) && (o2 = t2), o2 && "number" == typeof o2.decimals && (n2 = o2.decimals), e2.toPathData(n2);
      }, n.default.Font.prototype._getSVG = function(e2, t2, r2, o2) {
        var n2 = 3;
        return "string" == typeof e2 && 2 < arguments.length ? e2 = this._getPath(e2, t2, r2, o2) : "object" === p(t2) && (o2 = t2), o2 && ("number" == typeof o2.decimals && (n2 = o2.decimals), "number" == typeof o2.strokeWidth && (e2.strokeWidth = o2.strokeWidth), void 0 !== o2.fill && (e2.fill = o2.fill), void 0 !== o2.stroke && (e2.stroke = o2.stroke)), e2.toSVG(n2);
      }, n.default.Font.prototype._renderPath = function(e2, t2, r2, o2) {
        var n2 = o2 && o2.renderer || this.parent._renderer, s2 = n2.drawingContext, e2 = ("object" === p(e2) && e2.commands ? e2 : this._getPath(e2, t2, r2, o2)).commands, i3 = (s2.beginPath(), true), t2 = false, r2 = void 0;
        try {
          for (var a, l = e2[Symbol.iterator](); !(i3 = (a = l.next()).done); i3 = true) {
            var u = a.value;
            "M" === u.type ? s2.moveTo(u.x, u.y) : "L" === u.type ? s2.lineTo(u.x, u.y) : "C" === u.type ? s2.bezierCurveTo(u.x1, u.y1, u.x2, u.y2, u.x, u.y) : "Q" === u.type ? s2.quadraticCurveTo(u.x1, u.y1, u.x, u.y) : "Z" === u.type && s2.closePath();
          }
        } catch (e3) {
          t2 = true, r2 = e3;
        } finally {
          try {
            i3 || null == l.return || l.return();
          } finally {
            if (t2)
              throw r2;
          }
        }
        return n2._doStroke && n2._strokeSet && s2.stroke(), n2._doFill && (n2._fillSet || n2._setFill(v._DEFAULT_TEXT_FILL), s2.fill()), this;
      }, n.default.Font.prototype._textWidth = function(e2, t2) {
        return this.font.getAdvanceWidth(e2, t2);
      }, n.default.Font.prototype._textAscent = function(e2) {
        return this.font.ascender * this._scale(e2);
      }, n.default.Font.prototype._textDescent = function(e2) {
        return -this.font.descender * this._scale(e2);
      }, n.default.Font.prototype._scale = function(e2) {
        return 1 / this.font.unitsPerEm * (e2 || this.parent._renderer._textSize);
      }, n.default.Font.prototype._handleAlignment = function(e2, t2, r2, o2, n2) {
        var s2 = e2._textSize;
        switch (void 0 === n2 && (n2 = this._textWidth(t2, s2)), e2._textAlign) {
          case v.CENTER:
            r2 -= n2 / 2;
            break;
          case v.RIGHT:
            r2 -= n2;
        }
        switch (e2._textBaseline) {
          case v.TOP:
            o2 += this._textAscent(s2);
            break;
          case v.CENTER:
            o2 += this._textAscent(s2) / 2;
            break;
          case v.BOTTOM:
            o2 -= this._textDescent(s2);
        }
        return { x: r2, y: o2 };
      };
      e = n.default;
      r.default = e;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.splice": 164, "core-js/modules/es.function.name": 165, "core-js/modules/es.number.to-fixed": 171, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.split": 191, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 306: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.array-buffer.constructor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.array-buffer.constructor"), e("core-js/modules/es.object.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.prototype.append = function(e2, t2) {
        return e2.push(t2), e2;
      }, e.default.prototype.arrayCopy = function(e2, t2, r2, o, n) {
        var s2, i2;
        e2 = void 0 !== n ? (i2 = Math.min(n, e2.length), s2 = o, e2.slice(t2, i2 + t2)) : (i2 = void 0 !== r2 ? (i2 = r2, Math.min(i2, e2.length)) : e2.length, r2 = t2, e2.slice(s2 = 0, i2)), Array.prototype.splice.apply(r2, [s2, i2].concat(e2));
      }, e.default.prototype.concat = function(e2, t2) {
        return e2.concat(t2);
      }, e.default.prototype.reverse = function(e2) {
        return e2.reverse();
      }, e.default.prototype.shorten = function(e2) {
        return e2.pop(), e2;
      }, e.default.prototype.shuffle = function(e2, t2) {
        for (var r2, o, n = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(e2), s2 = (e2 = t2 || n ? e2 : e2.slice()).length; 1 < s2; )
          r2 = this.random(0, 1) * s2 | 0, o = e2[--s2], e2[s2] = e2[r2], e2[r2] = o;
        return e2;
      }, e.default.prototype.sort = function(e2, t2) {
        var r2 = t2 ? e2.slice(0, Math.min(t2, e2.length)) : e2, t2 = t2 ? e2.slice(Math.min(t2, e2.length)) : [];
        return (r2 = "string" == typeof r2[0] ? r2.sort() : r2.sort(function(e3, t3) {
          return e3 - t3;
        })).concat(t2);
      }, e.default.prototype.splice = function(e2, t2, r2) {
        return Array.prototype.splice.apply(e2, [r2, 0].concat(t2)), e2;
      }, e.default.prototype.subset = function(e2, t2, r2) {
        return void 0 !== r2 ? e2.slice(t2, t2 + r2) : e2.slice(t2, e2.length);
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array-buffer.constructor": 148, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.splice": 164, "core-js/modules/es.object.to-string": 177 }], 307: [function(e, t, r) {
      e("core-js/modules/es.array.map"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.repeat"), e("core-js/modules/es.array.map"), e("core-js/modules/es.number.constructor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.repeat"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var o = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      o.default.prototype.float = function(e2) {
        return e2 instanceof Array ? e2.map(parseFloat) : parseFloat(e2);
      }, o.default.prototype.int = function(e2) {
        var t2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 10;
        return e2 === 1 / 0 || "Infinity" === e2 ? 1 / 0 : e2 === -1 / 0 || "-Infinity" === e2 ? -1 / 0 : "string" == typeof e2 ? parseInt(e2, t2) : "number" == typeof e2 ? 0 | e2 : "boolean" == typeof e2 ? e2 ? 1 : 0 : e2 instanceof Array ? e2.map(function(e3) {
          return o.default.prototype.int(e3, t2);
        }) : void 0;
      }, o.default.prototype.str = function(e2) {
        return e2 instanceof Array ? e2.map(o.default.prototype.str) : String(e2);
      }, o.default.prototype.boolean = function(e2) {
        return "number" == typeof e2 ? 0 !== e2 : "string" == typeof e2 ? "true" === e2.toLowerCase() : "boolean" == typeof e2 ? e2 : e2 instanceof Array ? e2.map(o.default.prototype.boolean) : void 0;
      }, o.default.prototype.byte = function(e2) {
        e2 = o.default.prototype.int(e2, 10);
        return "number" == typeof e2 ? (e2 + 128) % 256 - 128 : e2 instanceof Array ? e2.map(o.default.prototype.byte) : void 0;
      }, o.default.prototype.char = function(e2) {
        return "number" != typeof e2 || isNaN(e2) ? e2 instanceof Array ? e2.map(o.default.prototype.char) : "string" == typeof e2 ? o.default.prototype.char(parseInt(e2, 10)) : void 0 : String.fromCharCode(e2);
      }, o.default.prototype.unchar = function(e2) {
        return "string" == typeof e2 && 1 === e2.length ? e2.charCodeAt(0) : e2 instanceof Array ? e2.map(o.default.prototype.unchar) : void 0;
      }, o.default.prototype.hex = function(e2, t2) {
        if (t2 = null == t2 ? 8 : t2, e2 instanceof Array)
          return e2.map(function(e3) {
            return o.default.prototype.hex(e3, t2);
          });
        if (e2 === 1 / 0 || e2 === -1 / 0)
          return (e2 === 1 / 0 ? "F" : "0").repeat(t2);
        if ("number" == typeof e2) {
          e2 < 0 && (e2 = 4294967295 + e2 + 1);
          for (var r2 = Number(e2).toString(16).toUpperCase(); r2.length < t2; )
            r2 = "0".concat(r2);
          return r2 = r2.length >= t2 ? r2.substring(r2.length - t2, r2.length) : r2;
        }
      }, o.default.prototype.unhex = function(e2) {
        return e2 instanceof Array ? e2.map(o.default.prototype.unhex) : parseInt("0x".concat(e2), 16);
      };
      e = o.default;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.map": 161, "core-js/modules/es.number.constructor": 169, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.repeat": 188 }], 308: [function(e, t, r) {
      e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.join"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.constructor"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.replace"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (l = e("../core/main")) && l.__esModule ? l : { default: l };
      function o(e2, t2, r2) {
        var o2 = e2 < 0, e2 = o2 ? e2.toString().substring(1) : e2.toString(), n2 = e2.indexOf("."), s3 = -1 !== n2 ? e2.substring(0, n2) : e2, i3 = -1 !== n2 ? e2.substring(n2 + 1) : "", a2 = o2 ? "-" : "";
        if (void 0 !== r2) {
          o2 = "";
          (-1 !== n2 || 0 < r2 - i3.length) && (o2 = "."), i3.length > r2 && (i3 = i3.substring(0, r2));
          for (var l2 = 0; l2 < t2 - s3.length; l2++)
            a2 += "0";
          for (var a2 = (a2 += s3) + o2 + i3, u = 0; u < r2 - i3.length; u++)
            a2 += "0";
          return a2;
        }
        for (var c = 0; c < Math.max(t2 - s3.length, 0); c++)
          a2 += "0";
        return a2 += e2;
      }
      function n(e2, t2) {
        var r2 = (e2 = e2.toString()).indexOf("."), o2 = -1 !== r2 ? e2.substring(r2) : "", e2 = (e2 = -1 !== r2 ? e2.substring(0, r2) : e2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        if (0 === t2)
          o2 = "";
        else if (void 0 !== t2)
          if (t2 > o2.length)
            for (var n2 = t2 - (o2 += -1 === r2 ? "." : "").length + 1, s3 = 0; s3 < n2; s3++)
              o2 += "0";
          else
            o2 = o2.substring(0, t2 + 1);
        return e2 + o2;
      }
      function i2(e2) {
        return 0 < parseFloat(e2) ? "+".concat(e2.toString()) : e2.toString();
      }
      function a(e2) {
        return 0 <= parseFloat(e2) ? " ".concat(e2.toString()) : e2.toString();
      }
      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), s2.default.prototype.join = function(e2, t2) {
        return s2.default._validateParameters("join", arguments), e2.join(t2);
      }, s2.default.prototype.match = function(e2, t2) {
        return s2.default._validateParameters("match", arguments), e2.match(t2);
      }, s2.default.prototype.matchAll = function(e2, t2) {
        s2.default._validateParameters("matchAll", arguments);
        for (var r2 = new RegExp(t2, "g"), o2 = r2.exec(e2), n2 = []; null !== o2; )
          n2.push(o2), o2 = r2.exec(e2);
        return n2;
      }, s2.default.prototype.nf = function(e2, t2, r2) {
        return s2.default._validateParameters("nf", arguments), e2 instanceof Array ? e2.map(function(e3) {
          return o(e3, t2, r2);
        }) : "[object Arguments]" === Object.prototype.toString.call(e2) ? 3 === e2.length ? this.nf(e2[0], e2[1], e2[2]) : 2 === e2.length ? this.nf(e2[0], e2[1]) : this.nf(e2[0]) : o(e2, t2, r2);
      }, s2.default.prototype.nfc = function(e2, t2) {
        return s2.default._validateParameters("nfc", arguments), e2 instanceof Array ? e2.map(function(e3) {
          return n(e3, t2);
        }) : n(e2, t2);
      }, s2.default.prototype.nfp = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        s2.default._validateParameters("nfp", t2);
        var o2 = s2.default.prototype.nf.apply(this, t2);
        return o2 instanceof Array ? o2.map(i2) : i2(o2);
      }, s2.default.prototype.nfs = function() {
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        s2.default._validateParameters("nfs", t2);
        var o2 = s2.default.prototype.nf.apply(this, t2);
        return o2 instanceof Array ? o2.map(a) : a(o2);
      }, s2.default.prototype.split = function(e2, t2) {
        return s2.default._validateParameters("split", arguments), e2.split(t2);
      }, s2.default.prototype.splitTokens = function(e2, t2) {
        var r2, o2;
        return s2.default._validateParameters("splitTokens", arguments), o2 = void 0 !== t2 ? (o2 = /\]/g.exec(t2 = t2), (r2 = /\[/g.exec(t2)) && o2 ? (t2 = t2.slice(0, o2.index) + t2.slice(o2.index + 1), r2 = /\[/g.exec(t2), t2 = t2.slice(0, r2.index) + t2.slice(r2.index + 1), new RegExp("[\\[".concat(t2, "\\]]"), "g")) : o2 ? (t2 = t2.slice(0, o2.index) + t2.slice(o2.index + 1), new RegExp("[".concat(t2, "\\]]"), "g")) : r2 ? (t2 = t2.slice(0, r2.index) + t2.slice(r2.index + 1), new RegExp("[".concat(t2, "\\[]"), "g")) : new RegExp("[".concat(t2, "]"), "g")) : /\s/g, e2.split(o2).filter(function(e3) {
          return e3;
        });
      }, s2.default.prototype.trim = function(e2) {
        return s2.default._validateParameters("trim", arguments), e2 instanceof Array ? e2.map(this.trim) : e2.trim();
      };
      var l = s2.default;
      r.default = l;
    }, { "../core/friendly_errors/fes_core": 258, "../core/friendly_errors/file_errors": 259, "../core/friendly_errors/validate_params": 262, "../core/main": 267, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.join": 159, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.constructor": 180, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.replace": 189, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.trim": 193 }], 309: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.prototype.day = function() {
        return new Date().getDate();
      }, e.default.prototype.hour = function() {
        return new Date().getHours();
      }, e.default.prototype.minute = function() {
        return new Date().getMinutes();
      }, e.default.prototype.millis = function() {
        return -1 === this._millisStart ? 0 : window.performance.now() - this._millisStart;
      }, e.default.prototype.month = function() {
        return new Date().getMonth() + 1;
      }, e.default.prototype.second = function() {
        return new Date().getSeconds();
      }, e.default.prototype.year = function() {
        return new Date().getFullYear();
      };
      e = e.default;
      r.default = e;
    }, { "../core/main": 267 }], 310: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.number.to-fixed"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var S = (n = e("../core/main")) && n.__esModule ? n : { default: n }, _ = (e("./p5.Geometry"), function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants")));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      S.default.prototype.plane = function(e2, t2, r2, o2) {
        this._assert3d("plane"), S.default._validateParameters("plane", arguments), void 0 === e2 && (e2 = 50), void 0 === t2 && (t2 = e2), void 0 === o2 && (o2 = 1);
        var n2, s2 = "plane|".concat(r2 = void 0 === r2 ? 1 : r2, "|").concat(o2);
        return this._renderer.geometryInHash(s2) || ((n2 = new S.default.Geometry(r2, o2, function() {
          for (var e3, t3, r3 = 0; r3 <= this.detailY; r3++)
            for (var o3 = r3 / this.detailY, n3 = 0; n3 <= this.detailX; n3++)
              e3 = n3 / this.detailX, t3 = new S.default.Vector(e3 - 0.5, o3 - 0.5, 0), this.vertices.push(t3), this.uvs.push(e3, o3);
        })).computeFaces().computeNormals(), r2 <= 1 && o2 <= 1 ? n2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"), this._renderer.createBuffers(s2, n2)), this._renderer.drawBuffersScaled(s2, e2, t2, 1), this;
      }, S.default.prototype.box = function(e2, t2, r2, o2, n2) {
        this._assert3d("box"), S.default._validateParameters("box", arguments), void 0 === e2 && (e2 = 50), void 0 === t2 && (t2 = e2), void 0 === r2 && (r2 = t2);
        var s2, i3 = this._renderer.attributes && this._renderer.attributes.perPixelLighting, i3 = (void 0 === n2 && (n2 = i3 ? 1 : 4), "box|".concat(o2 = void 0 === o2 ? i3 ? 1 : 4 : o2, "|").concat(n2));
        return this._renderer.geometryInHash(i3) || ((s2 = new S.default.Geometry(o2, n2, function() {
          var e3 = [[0, 4, 2, 6], [1, 3, 5, 7], [0, 1, 4, 5], [2, 6, 3, 7], [0, 2, 1, 3], [4, 5, 6, 7]];
          this.strokeIndices = [[0, 1], [1, 3], [3, 2], [6, 7], [8, 9], [9, 11], [14, 15], [16, 17], [17, 19], [18, 19], [20, 21], [22, 23]];
          for (var t3 = 0; t3 < e3.length; t3++) {
            for (var r3 = e3[t3], o3 = 4 * t3, n3 = 0; n3 < 4; n3++) {
              var s3 = r3[n3], s3 = new S.default.Vector((2 * (1 & s3) - 1) / 2, ((2 & s3) - 1) / 2, ((4 & s3) / 2 - 1) / 2);
              this.vertices.push(s3), this.uvs.push(1 & n3, (2 & n3) / 2);
            }
            this.faces.push([o3, 1 + o3, 2 + o3]), this.faces.push([2 + o3, 1 + o3, 3 + o3]);
          }
        })).computeNormals(), o2 <= 4 && n2 <= 4 ? s2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"), this._renderer.createBuffers(i3, s2)), this._renderer.drawBuffersScaled(i3, e2, t2, r2), this;
      }, S.default.prototype.sphere = function(e2, t2, r2) {
        return this._assert3d("sphere"), S.default._validateParameters("sphere", arguments), this.ellipsoid(e2 = void 0 === e2 ? 50 : e2, e2, e2, t2 = void 0 === t2 ? 24 : t2, r2 = void 0 === r2 ? 16 : r2), this;
      };
      function l(e2, t2, r2, o2, n2, s2, i3) {
        e2 = e2 <= 0 ? 1 : e2, t2 = t2 < 0 ? 0 : t2, r2 = r2 <= 0 ? e2 : r2, o2 = o2 < 3 ? 3 : o2;
        for (var a2, l2, u = (s2 = void 0 === s2 || s2) ? -2 : 0, c = (n2 = n2 < 1 ? 1 : n2) + ((i3 = void 0 === i3 ? 0 !== t2 : i3) ? 2 : 0), d = Math.atan2(e2 - t2, r2), f = Math.sin(d), h = Math.cos(d), p = u; p <= c; ++p) {
          var m = p / n2, y = r2 * m, g = void 0, g = p < 0 ? (m = y = 0, e2) : n2 < p ? (y = r2, m = 1, t2) : e2 + (t2 - e2) * m;
          for (-2 !== p && p !== n2 + 2 || (g = 0), y -= r2 / 2, a2 = 0; a2 < o2; ++a2) {
            var v = a2 / (o2 - 1), b = 2 * Math.PI * v, j = Math.sin(b), b = Math.cos(b), _2 = (this.vertices.push(new S.default.Vector(j * g, y, b * g)), void 0), _2 = p < 0 ? new S.default.Vector(0, -1, 0) : n2 < p && t2 ? new S.default.Vector(0, 1, 0) : new S.default.Vector(j * h, f, b * h);
            this.vertexNormals.push(_2), this.uvs.push(v, m);
          }
        }
        var x = 0;
        if (s2) {
          for (l2 = 0; l2 < o2; ++l2)
            this.faces.push([x + l2, x + o2 + (l2 + 1) % o2, x + o2 + l2]);
          x += 2 * o2;
        }
        for (p = 0; p < n2; ++p) {
          for (a2 = 0; a2 < o2; ++a2) {
            var w = (a2 + 1) % o2;
            this.faces.push([x + a2, x + w, x + o2 + w]), this.faces.push([x + a2, x + o2 + w, x + o2 + a2]);
          }
          x += o2;
        }
        if (i3)
          for (x += o2, a2 = 0; a2 < o2; ++a2)
            this.faces.push([x + a2, x + (a2 + 1) % o2, x + o2]);
      }
      S.default.prototype.cylinder = function(e2, t2, r2, o2, n2, s2) {
        this._assert3d("cylinder"), S.default._validateParameters("cylinder", arguments), void 0 === e2 && (e2 = 50), void 0 === t2 && (t2 = e2), void 0 === o2 && (o2 = 1), void 0 === s2 && (s2 = true), void 0 === n2 && (n2 = true);
        var i3, a2 = "cylinder|".concat(r2 = void 0 === r2 ? 24 : r2, "|").concat(o2, "|").concat(n2, "|").concat(s2);
        return this._renderer.geometryInHash(a2) || (i3 = new S.default.Geometry(r2, o2), l.call(i3, 1, 1, 1, r2, o2, n2, s2), r2 <= 24 && o2 <= 16 ? i3._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(a2, i3)), this._renderer.drawBuffersScaled(a2, e2, t2, e2), this;
      }, S.default.prototype.cone = function(e2, t2, r2, o2, n2) {
        this._assert3d("cone"), S.default._validateParameters("cone", arguments), void 0 === e2 && (e2 = 50), void 0 === t2 && (t2 = e2), void 0 === o2 && (o2 = 1), void 0 === n2 && (n2 = true);
        var s2, i3 = "cone|".concat(r2 = void 0 === r2 ? 24 : r2, "|").concat(o2, "|").concat(n2);
        return this._renderer.geometryInHash(i3) || (s2 = new S.default.Geometry(r2, o2), l.call(s2, 1, 0, 1, r2, o2, n2, false), r2 <= 24 && o2 <= 16 ? s2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(i3, s2)), this._renderer.drawBuffersScaled(i3, e2, t2, e2), this;
      }, S.default.prototype.ellipsoid = function(e2, t2, r2, o2, n2) {
        this._assert3d("ellipsoid"), S.default._validateParameters("ellipsoid", arguments), void 0 === e2 && (e2 = 50), void 0 === t2 && (t2 = e2), void 0 === r2 && (r2 = e2), void 0 === n2 && (n2 = 16);
        var s2, i3 = "ellipsoid|".concat(o2 = void 0 === o2 ? 24 : o2, "|").concat(n2);
        return this._renderer.geometryInHash(i3) || ((s2 = new S.default.Geometry(o2, n2, function() {
          for (var e3 = 0; e3 <= this.detailY; e3++)
            for (var t3 = e3 / this.detailY, r3 = Math.PI * t3 - Math.PI / 2, o3 = Math.cos(r3), n3 = Math.sin(r3), s3 = 0; s3 <= this.detailX; s3++) {
              var i4 = s3 / this.detailX, a2 = 2 * Math.PI * i4, l2 = Math.cos(a2), a2 = Math.sin(a2), a2 = new S.default.Vector(o3 * a2, n3, o3 * l2);
              this.vertices.push(a2), this.vertexNormals.push(a2), this.uvs.push(i4, t3);
            }
        })).computeFaces(), o2 <= 24 && n2 <= 24 ? s2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"), this._renderer.createBuffers(i3, s2)), this._renderer.drawBuffersScaled(i3, e2, t2, r2), this;
      }, S.default.prototype.torus = function(e2, t2, r2, o2) {
        if (this._assert3d("torus"), S.default._validateParameters("torus", arguments), void 0 === e2)
          e2 = 50;
        else if (!e2)
          return;
        if (void 0 === t2)
          t2 = 10;
        else if (!t2)
          return;
        void 0 === r2 && (r2 = 24), void 0 === o2 && (o2 = 16);
        var n2, d = (t2 / e2).toPrecision(4), t2 = "torus|".concat(d, "|").concat(r2, "|").concat(o2);
        return this._renderer.geometryInHash(t2) || ((n2 = new S.default.Geometry(r2, o2, function() {
          for (var e3 = 0; e3 <= this.detailY; e3++)
            for (var t3 = e3 / this.detailY, r3 = 2 * Math.PI * t3, o3 = Math.cos(r3), n3 = Math.sin(r3), s2 = 1 + d * o3, i3 = 0; i3 <= this.detailX; i3++) {
              var a2 = i3 / this.detailX, l2 = 2 * Math.PI * a2, u = Math.cos(l2), l2 = Math.sin(l2), c = new S.default.Vector(s2 * u, s2 * l2, d * n3), u = new S.default.Vector(o3 * u, o3 * l2, n3);
              this.vertices.push(c), this.vertexNormals.push(u), this.uvs.push(a2, t3);
            }
        })).computeFaces(), r2 <= 24 && o2 <= 16 ? n2._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(t2, n2)), this._renderer.drawBuffersScaled(t2, e2, e2, e2), this;
      }, S.default.RendererGL.prototype.point = function(e2, t2, r2) {
        var o2 = [];
        return o2.push(new S.default.Vector(e2, t2, r2 = void 0 === r2 ? 0 : r2)), this._drawPoints(o2, this.immediateMode.buffers.point), this;
      }, S.default.RendererGL.prototype.triangle = function(e2) {
        var t2 = e2[0], r2 = e2[1], o2 = e2[2], n2 = e2[3], s2 = e2[4], e2 = e2[5], i3 = (this.geometryInHash("tri") || ((i3 = new S.default.Geometry(1, 1, function() {
          var e3 = [];
          e3.push(new S.default.Vector(0, 0, 0)), e3.push(new S.default.Vector(0, 1, 0)), e3.push(new S.default.Vector(1, 0, 0)), this.strokeIndices = [[0, 1], [1, 2], [2, 0]], this.vertices = e3, this.faces = [[0, 1, 2]], this.uvs = [0, 0, 0, 1, 1, 1];
        }))._makeTriangleEdges()._edgesToVertices(), i3.computeNormals(), this.createBuffers("tri", i3)), this.uMVMatrix.copy());
        try {
          var a2 = new S.default.Matrix([o2 - t2, n2 - r2, 0, 0, s2 - t2, e2 - r2, 0, 0, 0, 0, 1, 0, t2, r2, 0, 1]).mult(this.uMVMatrix);
          this.uMVMatrix = a2, this.drawBuffers("tri");
        } finally {
          this.uMVMatrix = i3;
        }
        return this;
      }, S.default.RendererGL.prototype.ellipse = function(e2) {
        this.arc(e2[0], e2[1], e2[2], e2[3], 0, _.TWO_PI, _.OPEN, e2[4]);
      }, S.default.RendererGL.prototype.arc = function(e2) {
        var t2, r2 = arguments[1], o2 = arguments[2], n2 = arguments[3], s2 = arguments[4], i3 = arguments[5], a2 = arguments[6], l2 = arguments[7] || 25, u = (Math.abs(i3 - s2) >= _.TWO_PI ? "".concat(c = "ellipse", "|") : "".concat(c = "arc", "|").concat(s2, "|").concat(i3, "|").concat(a2, "|")).concat(l2, "|"), c = (this.geometryInHash(u) || ((t2 = new S.default.Geometry(l2, 1, function() {
          if (this.strokeIndices = [], s2.toFixed(10) !== i3.toFixed(10)) {
            a2 !== _.PIE && void 0 !== a2 || (this.vertices.push(new S.default.Vector(0.5, 0.5, 0)), this.uvs.push([0.5, 0.5]));
            for (var e3 = 0; e3 <= l2; e3++) {
              var t3 = (i3 - s2) * (e3 / l2) + s2, r3 = 0.5 + Math.cos(t3) / 2, t3 = 0.5 + Math.sin(t3) / 2;
              this.vertices.push(new S.default.Vector(r3, t3, 0)), this.uvs.push([r3, t3]), e3 < l2 - 1 && (this.faces.push([0, e3 + 1, e3 + 2]), this.strokeIndices.push([e3 + 1, e3 + 2]));
            }
            switch (a2) {
              case _.PIE:
                this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([0, 1]), this.strokeIndices.push([this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([0, this.vertices.length - 1]);
                break;
              case _.CHORD:
                this.strokeIndices.push([0, 1]), this.strokeIndices.push([0, this.vertices.length - 1]);
                break;
              case _.OPEN:
                this.strokeIndices.push([0, 1]);
                break;
              default:
                this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([this.vertices.length - 2, this.vertices.length - 1]);
            }
          }
        })).computeNormals(), l2 <= 50 ? t2._makeTriangleEdges()._edgesToVertices(t2) : this._doStroke && console.log("Cannot apply a stroke to an ".concat(c, " with more than 50 detail")), this.createBuffers(u, t2)), this.uMVMatrix.copy());
        try {
          this.uMVMatrix.translate([e2, r2, 0]), this.uMVMatrix.scale(o2, n2, 1), this.drawBuffers(u);
        } finally {
          this.uMVMatrix = c;
        }
        return this;
      }, S.default.RendererGL.prototype.rect = function(e2) {
        var t2 = e2[0], r2 = e2[1], o2 = e2[2], n2 = e2[3];
        if (void 0 === e2[4]) {
          var s2 = this._pInst._glAttributes.perPixelLighting, i3 = e2[4] || (s2 ? 1 : 24), a2 = e2[5] || (s2 ? 1 : 16), s2 = "rect|".concat(i3, "|").concat(a2), l2 = (this.geometryInHash(s2) || ((l2 = new S.default.Geometry(i3, a2, function() {
            for (var e3 = 0; e3 <= this.detailY; e3++)
              for (var t3 = e3 / this.detailY, r3 = 0; r3 <= this.detailX; r3++) {
                var o3 = r3 / this.detailX, n3 = new S.default.Vector(o3, t3, 0);
                this.vertices.push(n3), this.uvs.push(o3, t3);
              }
            0 < i3 && 0 < a2 && (this.strokeIndices = [[0, i3], [i3, (i3 + 1) * (a2 + 1) - 1], [(i3 + 1) * (a2 + 1) - 1, (i3 + 1) * a2], [(i3 + 1) * a2, 0]]);
          })).computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices(), this.createBuffers(s2, l2)), this.uMVMatrix.copy());
          try {
            this.uMVMatrix.translate([t2, r2, 0]), this.uMVMatrix.scale(o2, n2, 1), this.drawBuffers(s2);
          } finally {
            this.uMVMatrix = l2;
          }
        } else {
          var s2 = e2[4], l2 = void 0 === e2[5] ? s2 : e2[5], u = void 0 === e2[6] ? l2 : e2[6], e2 = void 0 === e2[7] ? u : e2[7], c = o2, d = n2, f = ((c += t2) < t2 && (f = t2, t2 = c, c = f), (d += r2) < r2 && (f = r2, r2 = d, d = f), Math.min((c - t2) / 2, (d - r2) / 2)), h = (f < s2 && (s2 = f), f < l2 && (l2 = f), f < u && (u = f), f < e2 && (e2 = f), t2), p = r2, f = c, t2 = d, m = (this.beginShape(), 0 !== l2 ? (this.vertex(f - l2, p), this.quadraticVertex(f, p, f, p + l2)) : this.vertex(f, p), 0 !== u ? (this.vertex(f, t2 - u), this.quadraticVertex(f, t2, f - u, t2)) : this.vertex(f, t2), 0 !== e2 ? (this.vertex(h + e2, t2), this.quadraticVertex(h, t2, h, t2 - e2)) : this.vertex(h, t2), 0 !== s2 ? (this.vertex(h, p + s2), this.quadraticVertex(h, p, h + s2, p)) : this.vertex(h, p), !(this.immediateMode.geometry.uvs.length = 0)), r2 = false, c = void 0;
          try {
            for (var y, g = this.immediateMode.geometry.vertices[Symbol.iterator](); !(m = (y = g.next()).done); m = true) {
              var v = y.value, b = (v.x - h) / o2, j = (v.y - p) / n2;
              this.immediateMode.geometry.uvs.push(b, j);
            }
          } catch (e3) {
            r2 = true, c = e3;
          } finally {
            try {
              m || null == g.return || g.return();
            } finally {
              if (r2)
                throw c;
            }
          }
          this.endShape(_.CLOSE);
        }
        return this;
      }, S.default.RendererGL.prototype.quad = function(i3, a2, l2, u, c, d, f, h, p, m, y, g, e2, t2) {
        void 0 === e2 && (e2 = 2), void 0 === t2 && (t2 = 2);
        var r2 = "quad|".concat(i3, "|").concat(a2, "|").concat(l2, "|").concat(u, "|").concat(c, "|").concat(d, "|").concat(f, "|").concat(h, "|").concat(p, "|").concat(m, "|").concat(y, "|").concat(g, "|").concat(e2, "|").concat(t2);
        if (!this.geometryInHash(r2)) {
          var o2 = new S.default.Geometry(e2, t2, function() {
            for (var e3 = 1 / (this.detailX - 1), t3 = 1 / (this.detailY - 1), r3 = 0; r3 < this.detailY; r3++)
              for (var o3 = 0; o3 < this.detailX; o3++) {
                var n3 = o3 * e3, s3 = r3 * t3;
                this.vertices.push(new S.default.Vector((1 - n3) * ((1 - s3) * i3 + s3 * m) + n3 * ((1 - s3) * u + s3 * f), (1 - n3) * ((1 - s3) * a2 + s3 * y) + n3 * ((1 - s3) * c + s3 * h), (1 - n3) * ((1 - s3) * l2 + s3 * g) + n3 * ((1 - s3) * d + s3 * p))), this.uvs.push([n3, s3]);
              }
          });
          o2.faces = [];
          for (var n2 = 0; n2 < t2 - 1; n2++)
            for (var s2 = 0; s2 < e2 - 1; s2++) {
              var v = s2 + n2 * e2, b = s2 + 1 + (n2 + 1) * e2, j = s2 + (n2 + 1) * e2;
              o2.faces.push([v, s2 + 1 + n2 * e2, b]), o2.faces.push([v, b, j]);
            }
          o2.computeNormals()._makeTriangleEdges()._edgesToVertices(), this.createBuffers(r2, o2);
        }
        return this.drawBuffers(r2), this;
      }, S.default.RendererGL.prototype.bezier = function(e2, t2, r2, o2, n2, s2, i3, a2, l2, u, c, d) {
        8 === arguments.length && (c = a2, u = i3, a2 = s2, i3 = n2, n2 = o2, o2 = r2, r2 = s2 = l2 = d = 0);
        var f = this._pInst._bezierDetail || 20;
        this.beginShape();
        for (var h = 0; h <= f; h++) {
          var p = Math.pow(1 - h / f, 3), m = h / f * 3 * Math.pow(1 - h / f, 2), y = 3 * Math.pow(h / f, 2) * (1 - h / f), g = Math.pow(h / f, 3);
          this.vertex(e2 * p + o2 * m + i3 * y + u * g, t2 * p + n2 * m + a2 * y + c * g, r2 * p + s2 * m + l2 * y + d * g);
        }
        return this.endShape(), this;
      }, S.default.RendererGL.prototype.curve = function(e2, t2, r2, o2, n2, s2, i3, a2, l2, u, c, d) {
        8 === arguments.length && (u = i3, c = a2, i3 = n2, a2 = o2, n2 = o2 = r2, r2 = s2 = l2 = d = 0);
        var f = this._pInst._curveDetail;
        this.beginShape();
        for (var h = 0; h <= f; h++) {
          var p = 0.5 * Math.pow(h / f, 3), m = 0.5 * Math.pow(h / f, 2), y = h / f * 0.5;
          this.vertex(p * (3 * o2 - e2 - 3 * i3 + u) + m * (2 * e2 - 5 * o2 + 4 * i3 - u) + y * (-e2 + i3) + 2 * o2 * 0.5, p * (3 * n2 - t2 - 3 * a2 + c) + m * (2 * t2 - 5 * n2 + 4 * a2 - c) + y * (-t2 + a2) + 2 * n2 * 0.5, p * (3 * s2 - r2 - 3 * l2 + d) + m * (2 * r2 - 5 * s2 + 4 * l2 - d) + y * (-r2 + l2) + 2 * s2 * 0.5);
        }
        return this.endShape(), this;
      }, S.default.RendererGL.prototype.line = function() {
        return 6 === arguments.length ? (this.beginShape(_.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]), this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]), this.endShape()) : 4 === arguments.length && (this.beginShape(_.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0), this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0), this.endShape()), this;
      }, S.default.RendererGL.prototype.bezierVertex = function() {
        if (0 === this.immediateMode._bezierVertex.length)
          throw Error("vertex() must be used once before calling bezierVertex()");
        var e2, t2, r2, o2, n2, s2, i3 = [], a2 = [], l2 = arguments.length;
        if (0 === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
          for (var u = 1 / this._lutBezierDetail, c = 0, d = 1, f = 0; c < 1; ) {
            if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableBezier[f] = this._bezierCoefficients(s2), d.toFixed(6) === u.toFixed(6)) {
              s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableBezier[f] = this._bezierCoefficients(s2);
              break;
            }
            c += u, d -= u, ++f;
          }
        }
        var h = this._lookUpTableBezier.length;
        if (6 === l2) {
          for (this.isBezier = true, i3 = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 4 ? void 0 : arguments[4]], a2 = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 5 ? void 0 : arguments[5]], n2 = 0; n2 < h; n2++)
            t2 = i3[0] * this._lookUpTableBezier[n2][0] + i3[1] * this._lookUpTableBezier[n2][1] + i3[2] * this._lookUpTableBezier[n2][2] + i3[3] * this._lookUpTableBezier[n2][3], r2 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], this.vertex(t2, r2);
          this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];
        } else if (9 === l2) {
          for (this.isBezier = true, i3 = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 6 ? void 0 : arguments[6]], a2 = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 7 ? void 0 : arguments[7]], e2 = [this.immediateMode._bezierVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5], arguments.length <= 8 ? void 0 : arguments[8]], n2 = 0; n2 < h; n2++)
            t2 = i3[0] * this._lookUpTableBezier[n2][0] + i3[1] * this._lookUpTableBezier[n2][1] + i3[2] * this._lookUpTableBezier[n2][2] + i3[3] * this._lookUpTableBezier[n2][3], r2 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], o2 = e2[0] * this._lookUpTableBezier[n2][0] + e2[1] * this._lookUpTableBezier[n2][1] + e2[2] * this._lookUpTableBezier[n2][2] + e2[3] * this._lookUpTableBezier[n2][3], this.vertex(t2, r2, o2);
          this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6], this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7], this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];
        }
      }, S.default.RendererGL.prototype.quadraticVertex = function() {
        if (0 === this.immediateMode._quadraticVertex.length)
          throw Error("vertex() must be used once before calling quadraticVertex()");
        var e2, t2, r2, o2, n2, s2, i3 = [], a2 = [], l2 = arguments.length;
        if (0 === this._lookUpTableQuadratic.length || this._lutQuadraticDetail !== this._pInst._curveDetail) {
          this._lookUpTableQuadratic = [], this._lutQuadraticDetail = this._pInst._curveDetail;
          for (var u = 1 / this._lutQuadraticDetail, c = 0, d = 1, f = 0; c < 1; ) {
            if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableQuadratic[f] = this._quadraticCoefficients(s2), d.toFixed(6) === u.toFixed(6)) {
              s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableQuadratic[f] = this._quadraticCoefficients(s2);
              break;
            }
            c += u, d -= u, ++f;
          }
        }
        var h = this._lookUpTableQuadratic.length;
        if (4 === l2) {
          for (this.isQuadratic = true, i3 = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2]], a2 = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3]], n2 = 0; n2 < h; n2++)
            t2 = i3[0] * this._lookUpTableQuadratic[n2][0] + i3[1] * this._lookUpTableQuadratic[n2][1] + i3[2] * this._lookUpTableQuadratic[n2][2], r2 = a2[0] * this._lookUpTableQuadratic[n2][0] + a2[1] * this._lookUpTableQuadratic[n2][1] + a2[2] * this._lookUpTableQuadratic[n2][2], this.vertex(t2, r2);
          this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2], this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];
        } else if (6 === l2) {
          for (this.isQuadratic = true, i3 = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3]], a2 = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4]], e2 = [this.immediateMode._quadraticVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5]], n2 = 0; n2 < h; n2++)
            t2 = i3[0] * this._lookUpTableQuadratic[n2][0] + i3[1] * this._lookUpTableQuadratic[n2][1] + i3[2] * this._lookUpTableQuadratic[n2][2], r2 = a2[0] * this._lookUpTableQuadratic[n2][0] + a2[1] * this._lookUpTableQuadratic[n2][1] + a2[2] * this._lookUpTableQuadratic[n2][2], o2 = e2[0] * this._lookUpTableQuadratic[n2][0] + e2[1] * this._lookUpTableQuadratic[n2][1] + e2[2] * this._lookUpTableQuadratic[n2][2], this.vertex(t2, r2, o2);
          this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3], this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];
        }
      }, S.default.RendererGL.prototype.curveVertex = function() {
        var e2, t2, r2, o2, n2, s2, i3 = [], a2 = [], l2 = arguments.length;
        if (0 === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;
          for (var u = 1 / this._lutBezierDetail, c = 0, d = 1, f = 0; c < 1; ) {
            if (s2 = parseFloat(c.toFixed(6)), this._lookUpTableBezier[f] = this._bezierCoefficients(s2), d.toFixed(6) === u.toFixed(6)) {
              s2 = parseFloat(d.toFixed(6)) + parseFloat(c.toFixed(6)), ++f, this._lookUpTableBezier[f] = this._bezierCoefficients(s2);
              break;
            }
            c += u, d -= u, ++f;
          }
        }
        var h = this._lookUpTableBezier.length;
        if (2 === l2) {
          if (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), 8 === this.immediateMode._curveVertex.length) {
            for (this.isCurve = true, i3 = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[6]]), a2 = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[7]]), n2 = 0; n2 < h; n2++)
              t2 = i3[0] * this._lookUpTableBezier[n2][0] + i3[1] * this._lookUpTableBezier[n2][1] + i3[2] * this._lookUpTableBezier[n2][2] + i3[3] * this._lookUpTableBezier[n2][3], r2 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], this.vertex(t2, r2);
            for (n2 = 0; n2 < l2; n2++)
              this.immediateMode._curveVertex.shift();
          }
        } else if (3 === l2 && (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]), 12 === this.immediateMode._curveVertex.length)) {
          for (this.isCurve = true, i3 = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[6], this.immediateMode._curveVertex[9]]), a2 = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[7], this.immediateMode._curveVertex[10]]), e2 = this._bezierToCatmull([this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[8], this.immediateMode._curveVertex[11]]), n2 = 0; n2 < h; n2++)
            t2 = i3[0] * this._lookUpTableBezier[n2][0] + i3[1] * this._lookUpTableBezier[n2][1] + i3[2] * this._lookUpTableBezier[n2][2] + i3[3] * this._lookUpTableBezier[n2][3], r2 = a2[0] * this._lookUpTableBezier[n2][0] + a2[1] * this._lookUpTableBezier[n2][1] + a2[2] * this._lookUpTableBezier[n2][2] + a2[3] * this._lookUpTableBezier[n2][3], o2 = e2[0] * this._lookUpTableBezier[n2][0] + e2[1] * this._lookUpTableBezier[n2][1] + e2[2] * this._lookUpTableBezier[n2][2] + e2[3] * this._lookUpTableBezier[n2][3], this.vertex(t2, r2, o2);
          for (n2 = 0; n2 < l2; n2++)
            this.immediateMode._curveVertex.shift();
        }
      }, S.default.RendererGL.prototype.image = function(e2, t2, r2, o2, n2, s2, i3, a2, l2) {
        this._isErasing && this.blendMode(this._cachedBlendMode), this._pInst.push(), this._pInst.noLights(), this._pInst.texture(e2), this._pInst.textureMode(_.NORMAL);
        var u = 0, c = (t2 <= e2.width && (u = t2 / e2.width), 1), t2 = (t2 + o2 <= e2.width && (c = (t2 + o2) / e2.width), 0), o2 = (r2 <= e2.height && (t2 = r2 / e2.height), 1);
        r2 + n2 <= e2.height && (o2 = (r2 + n2) / e2.height), this.beginShape(), this.vertex(s2, i3, 0, u, t2), this.vertex(s2 + a2, i3, 0, c, t2), this.vertex(s2 + a2, i3 + l2, 0, c, o2), this.vertex(s2, i3 + l2, 0, u, o2), this.endShape(_.CLOSE), this._pInst.pop(), this._isErasing && this.blendMode(_.REMOVE);
      };
      var n = S.default;
      r.default = n;
    }, { "../core/constants": 256, "../core/main": 267, "./p5.Geometry": 316, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.number.to-fixed": 171, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 311: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (l = e("../core/main")) && l.__esModule ? l : { default: l }, n = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      s2.default.prototype.orbitControl = function(e2, t2, r2) {
        var o2, n2;
        if (this._assert3d("orbitControl"), s2.default._validateParameters("orbitControl", arguments), this.mouseX < this.width && 0 < this.mouseX && this.mouseY < this.height && 0 < this.mouseY)
          return o2 = this._renderer._curCamera, void 0 === e2 && (e2 = 1), void 0 === t2 && (t2 = e2), void 0 === r2 && (r2 = 0.5), true !== this.contextMenuDisabled && (this.canvas.oncontextmenu = function() {
            return false;
          }, this._setProperty("contextMenuDisabled", true)), true !== this.wheelDefaultDisabled && (this.canvas.onwheel = function() {
            return false;
          }, this._setProperty("wheelDefaultDisabled", true)), n2 = this.height < this.width ? this.height : this.width, this._mouseWheelDeltaY !== this._pmouseWheelDeltaY && (0 < this._mouseWheelDeltaY ? this._renderer._curCamera._orbit(0, 0, r2 * n2) : this._renderer._curCamera._orbit(0, 0, -r2 * n2)), this.mouseIsPressed && (this.mouseButton === this.LEFT ? (r2 = -e2 * (this.mouseX - this.pmouseX) / n2, n2 = t2 * (this.mouseY - this.pmouseY) / n2, this._renderer._curCamera._orbit(r2, n2, 0)) : this.mouseButton === this.RIGHT && (r2 = o2._getLocalAxes(), 0 !== (n2 = Math.sqrt(r2.x[0] * r2.x[0] + r2.x[2] * r2.x[2])) && (r2.x[0] /= n2, r2.x[2] /= n2), 0 !== (n2 = Math.sqrt(r2.y[0] * r2.y[0] + r2.y[2] * r2.y[2])) && (r2.y[0] /= n2, r2.y[2] /= n2), n2 = -1 * e2 * (this.mouseX - this.pmouseX), e2 = -1 * t2 * (this.mouseY - this.pmouseY), o2.setPosition(o2.eyeX + n2 * r2.x[0] + e2 * r2.z[0], o2.eyeY, o2.eyeZ + n2 * r2.x[2] + e2 * r2.z[2]))), this;
      }, s2.default.prototype.debugMode = function() {
        this._assert3d("debugMode");
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        s2.default._validateParameters("debugMode", t2);
        for (var o2 = this._registeredMethods.post.length - 1; 0 <= o2; o2--)
          this._registeredMethods.post[o2].toString() !== this._grid().toString() && this._registeredMethods.post[o2].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(o2, 1);
        t2[0] === n.GRID ? this.registerMethod("post", this._grid.call(this, t2[1], t2[2], t2[3], t2[4], t2[5])) : t2[0] === n.AXES ? this.registerMethod("post", this._axesIcon.call(this, t2[1], t2[2], t2[3], t2[4])) : (this.registerMethod("post", this._grid.call(this, t2[0], t2[1], t2[2], t2[3], t2[4])), this.registerMethod("post", this._axesIcon.call(this, t2[5], t2[6], t2[7], t2[8])));
      }, s2.default.prototype.noDebugMode = function() {
        this._assert3d("noDebugMode");
        for (var e2 = this._registeredMethods.post.length - 1; 0 <= e2; e2--)
          this._registeredMethods.post[e2].toString() !== this._grid().toString() && this._registeredMethods.post[e2].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(e2, 1);
      }, s2.default.prototype._grid = function(e2, r2, o2, n2, s3) {
        void 0 === e2 && (e2 = this.width / 2), void 0 === r2 && (r2 = Math.round(e2 / 30) < 4 ? 4 : Math.round(e2 / 30)), void 0 === o2 && (o2 = 0), void 0 === n2 && (n2 = 0), void 0 === s3 && (s3 = 0);
        var i3 = e2 / r2, a2 = e2 / 2;
        return function() {
          this.push(), this.stroke(255 * this._renderer.curStrokeColor[0], 255 * this._renderer.curStrokeColor[1], 255 * this._renderer.curStrokeColor[2]), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]);
          for (var e3 = 0; e3 <= r2; e3++)
            this.beginShape(this.LINES), this.vertex(-a2 + o2, n2, e3 * i3 - a2 + s3), this.vertex(a2 + o2, n2, e3 * i3 - a2 + s3), this.endShape();
          for (var t2 = 0; t2 <= r2; t2++)
            this.beginShape(this.LINES), this.vertex(t2 * i3 - a2 + o2, n2, -a2 + s3), this.vertex(t2 * i3 - a2 + o2, n2, a2 + s3), this.endShape();
          this.pop();
        };
      }, s2.default.prototype._axesIcon = function(e2, t2, r2, o2) {
        return void 0 === e2 && (e2 = 40 < this.width / 20 ? this.width / 20 : 40), void 0 === t2 && (t2 = -this.width / 4), void 0 === r2 && (r2 = t2), void 0 === o2 && (o2 = t2), function() {
          this.push(), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]), this.strokeWeight(2), this.stroke(255, 0, 0), this.beginShape(this.LINES), this.vertex(t2, r2, o2), this.vertex(t2 + e2, r2, o2), this.endShape(), this.stroke(0, 255, 0), this.beginShape(this.LINES), this.vertex(t2, r2, o2), this.vertex(t2, r2 + e2, o2), this.endShape(), this.stroke(0, 0, 255), this.beginShape(this.LINES), this.vertex(t2, r2, o2), this.vertex(t2, r2, o2 + e2), this.endShape(), this.pop();
        };
      };
      var l = s2.default;
      r.default = l;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.splice": 164, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 312: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var m = (s2 = e("../core/main")) && s2.__esModule ? s2 : { default: s2 }, n = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      m.default.prototype.ambientLight = function(e2, t2, r2, o2) {
        this._assert3d("ambientLight"), m.default._validateParameters("ambientLight", arguments);
        var n2 = this.color.apply(this, arguments);
        return this._renderer.ambientLightColors.push(n2._array[0], n2._array[1], n2._array[2]), this._renderer._enableLighting = true, this;
      }, m.default.prototype.specularColor = function(e2, t2, r2) {
        this._assert3d("specularColor"), m.default._validateParameters("specularColor", arguments);
        var o2 = this.color.apply(this, arguments);
        return this._renderer.specularColors = [o2._array[0], o2._array[1], o2._array[2]], this;
      }, m.default.prototype.directionalLight = function(e2, t2, r2, o2, n2, s3) {
        this._assert3d("directionalLight"), m.default._validateParameters("directionalLight", arguments), e2 = e2 instanceof m.default.Color ? e2 : this.color(e2, t2, r2);
        var i3, a2, t2 = arguments[arguments.length - 1], r2 = "number" == typeof t2 ? (i3 = arguments[arguments.length - 3], a2 = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (i3 = t2.x, a2 = t2.y, t2.z), t2 = Math.sqrt(i3 * i3 + a2 * a2 + r2 * r2);
        return this._renderer.directionalLightDirections.push(i3 / t2, a2 / t2, r2 / t2), this._renderer.directionalLightDiffuseColors.push(e2._array[0], e2._array[1], e2._array[2]), Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = true, this;
      }, m.default.prototype.pointLight = function(e2, t2, r2, o2, n2, s3) {
        this._assert3d("pointLight"), m.default._validateParameters("pointLight", arguments), e2 = e2 instanceof m.default.Color ? e2 : this.color(e2, t2, r2);
        var i3, a2, t2 = arguments[arguments.length - 1], r2 = "number" == typeof t2 ? (i3 = arguments[arguments.length - 3], a2 = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (i3 = t2.x, a2 = t2.y, t2.z);
        return this._renderer.pointLightPositions.push(i3, a2, r2), this._renderer.pointLightDiffuseColors.push(e2._array[0], e2._array[1], e2._array[2]), Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = true, this;
      }, m.default.prototype.lights = function() {
        var e2;
        return this._assert3d("lights"), this._colorMode === n.RGB ? (this.ambientLight(128, 128, 128), this.directionalLight(128, 128, 128, 0, 0, -1)) : (e2 = this._colorMaxes[this._colorMode][2], this.ambientLight(0, 0, e2), this.directionalLight(0, 0, e2, 0, 0, -1)), this;
      }, m.default.prototype.lightFalloff = function(e2, t2, r2) {
        return this._assert3d("lightFalloff"), m.default._validateParameters("lightFalloff", arguments), e2 < 0 && (e2 = 0, console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.")), t2 < 0 && (t2 = 0, console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.")), r2 < 0 && (r2 = 0, console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.")), 0 === e2 && 0 === t2 && 0 === r2 && (e2 = 1, console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.")), this._renderer.constantAttenuation = e2, this._renderer.linearAttenuation = t2, this._renderer.quadraticAttenuation = r2, this;
      }, m.default.prototype.spotLight = function(e2, t2, r2, o2, n2, s3, i3, a2, l, u, c) {
        this._assert3d("spotLight"), m.default._validateParameters("spotLight", arguments);
        var d, f, h, p = arguments.length;
        switch (p) {
          case 11:
          case 10:
            d = this.color(e2, t2, r2), f = new m.default.Vector(o2, n2, s3), h = new m.default.Vector(i3, a2, l);
            break;
          case 9:
            e2 instanceof m.default.Color ? (d = e2, f = new m.default.Vector(t2, r2, o2), h = new m.default.Vector(n2, s3, i3), u = a2, c = l) : o2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, h = new m.default.Vector(n2, s3, i3), u = a2, c = l) : i3 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = new m.default.Vector(o2, n2, s3), h = i3, u = a2, c = l) : (d = this.color(e2, t2, r2), f = new m.default.Vector(o2, n2, s3), h = new m.default.Vector(i3, a2, l));
            break;
          case 8:
            u = (h = e2 instanceof m.default.Color ? (d = e2, f = new m.default.Vector(t2, r2, o2), new m.default.Vector(n2, s3, i3)) : o2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, new m.default.Vector(n2, s3, i3)) : (d = this.color(e2, t2, r2), f = new m.default.Vector(o2, n2, s3), i3), a2);
            break;
          case 7:
            e2 instanceof m.default.Color && t2 instanceof m.default.Vector ? (d = e2, f = t2, h = new m.default.Vector(r2, o2, n2), u = s3, c = i3) : e2 instanceof m.default.Color && n2 instanceof m.default.Vector ? (d = e2, f = new m.default.Vector(t2, r2, o2), h = n2, u = s3, c = i3) : o2 instanceof m.default.Vector && n2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, h = n2, u = s3, c = i3) : h = e2 instanceof m.default.Color ? (d = e2, f = new m.default.Vector(t2, r2, o2), new m.default.Vector(n2, s3, i3)) : o2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, new m.default.Vector(n2, s3, i3)) : (d = this.color(e2, t2, r2), f = new m.default.Vector(o2, n2, s3), i3);
            break;
          case 6:
            o2 instanceof m.default.Vector && n2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, h = n2, u = s3) : e2 instanceof m.default.Color && n2 instanceof m.default.Vector ? (d = e2, f = new m.default.Vector(t2, r2, o2), h = n2, u = s3) : e2 instanceof m.default.Color && t2 instanceof m.default.Vector && (d = e2, f = t2, h = new m.default.Vector(r2, o2, n2), u = s3);
            break;
          case 5:
            e2 instanceof m.default.Color && t2 instanceof m.default.Vector && r2 instanceof m.default.Vector ? (d = e2, f = t2, h = r2, u = o2, c = n2) : o2 instanceof m.default.Vector && n2 instanceof m.default.Vector ? (d = this.color(e2, t2, r2), f = o2, h = n2) : e2 instanceof m.default.Color && n2 instanceof m.default.Vector ? (d = e2, f = new m.default.Vector(t2, r2, o2), h = n2) : e2 instanceof m.default.Color && t2 instanceof m.default.Vector && (d = e2, f = t2, h = new m.default.Vector(r2, o2, n2));
            break;
          case 4:
            d = e2, f = t2, h = r2, u = o2;
            break;
          case 3:
            d = e2, f = t2, h = r2;
            break;
          default:
            return console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(p < 3 ? "few" : "many", " arguments were provided")), this;
        }
        return this._renderer.spotLightDiffuseColors.push(d._array[0], d._array[1], d._array[2]), Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors), this._renderer.spotLightPositions.push(f.x, f.y, f.z), h.normalize(), this._renderer.spotLightDirections.push(h.x, h.y, h.z), void 0 === u && (u = Math.PI / 3), void 0 !== c && c < 1 ? (c = 1, console.warn("Value of concentration needs to be greater than 1. Setting it to 1")) : void 0 === c && (c = 100), u = this._renderer._pInst._toRadians(u), this._renderer.spotLightAngle.push(Math.cos(u)), this._renderer.spotLightConc.push(c), this._renderer._enableLighting = true, this;
      }, m.default.prototype.noLights = function() {
        return this._assert3d("noLights"), m.default._validateParameters("noLights", arguments), this._renderer._enableLighting = false, this._renderer.ambientLightColors.length = 0, this._renderer.specularColors = [1, 1, 1], this._renderer.directionalLightDirections.length = 0, this._renderer.directionalLightDiffuseColors.length = 0, this._renderer.directionalLightSpecularColors.length = 0, this._renderer.pointLightPositions.length = 0, this._renderer.pointLightDiffuseColors.length = 0, this._renderer.pointLightSpecularColors.length = 0, this._renderer.spotLightPositions.length = 0, this._renderer.spotLightDirections.length = 0, this._renderer.spotLightDiffuseColors.length = 0, this._renderer.spotLightSpecularColors.length = 0, this._renderer.spotLightAngle.length = 0, this._renderer.spotLightConc.length = 0, this._renderer.constantAttenuation = 1, this._renderer.linearAttenuation = 0, this._renderer.quadraticAttenuation = 0, this._renderer._useShininess = 1, this;
      };
      var s2 = m.default;
      r.default = s2;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 313: [function(e, t, r) {
      e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.array.splice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.match"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.trim"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var x = (o = e("../core/main")) && o.__esModule ? o : { default: o };
      e("./p5.Geometry"), x.default.prototype.loadModel = function(e2) {
        x.default._validateParameters("loadModel", arguments);
        var y, g, t2, r2 = e2.slice(-4), v = ("boolean" == typeof arguments[1] ? (y = arguments[1], g = arguments[2], t2 = arguments[3], void 0 !== arguments[4] && (r2 = arguments[4])) : (y = false, g = arguments[1], t2 = arguments[2], void 0 !== arguments[3] && (r2 = arguments[3])), new x.default.Geometry()), b = (v.gid = "".concat(e2, "|").concat(y), this);
        return r2.match(/\.stl$/i) ? this.httpDo(e2, "GET", "arrayBuffer", function(e3) {
          !function(e4, t3) {
            if (function(e5) {
              for (var t4 = new DataView(e5), r3 = [115, 111, 108, 105, 100], o2 = 0; o2 < 5; o2++)
                if (function(e6, t5, r4) {
                  for (var o3 = 0, n = e6.length; o3 < n; o3++)
                    if (e6[o3] !== t5.getUint8(r4 + o3, false))
                      return;
                  return 1;
                }(r3, t4, o2))
                  return;
              return 1;
            }(t3))
              !function(e5, t4) {
                for (var r3, o2, n, s2, i2, a, l, u = new DataView(t4), c = u.getUint32(80, true), d = false, f = 0; f < 70; f++)
                  1129270351 === u.getUint32(f, false) && 82 === u.getUint8(f + 4) && 61 === u.getUint8(f + 5) && (d = true, s2 = [], i2 = u.getUint8(f + 6) / 255, a = u.getUint8(f + 7) / 255, l = u.getUint8(f + 8) / 255);
                for (var h = 0; h < c; h++) {
                  for (var p, m = 84 + 50 * h, y2 = u.getFloat32(m, true), g2 = u.getFloat32(4 + m, true), v2 = u.getFloat32(8 + m, true), b2 = (d && (p = u.getUint16(48 + m, true), n = 0 == (32768 & p) ? (r3 = (31 & p) / 31, o2 = (p >> 5 & 31) / 31, (p >> 10 & 31) / 31) : (r3 = i2, o2 = a, l)), new x.default.Vector(y2, g2, v2)), j = 1; j <= 3; j++) {
                    var _ = m + 12 * j, _ = new x.default.Vector(u.getFloat32(_, true), u.getFloat32(4 + _, true), u.getFloat32(8 + _, true));
                    e5.vertices.push(_), e5.vertexNormals.push(b2), d && s2.push(r3, o2, n);
                  }
                  e5.faces.push([3 * h, 3 * h + 1, 3 * h + 2]), e5.uvs.push([0, 0], [0, 0], [0, 0]);
                }
              }(e4, t3);
            else {
              t3 = new DataView(t3);
              if (!("TextDecoder" in window))
                return console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");
              t3 = new TextDecoder("utf-8").decode(t3).split("\n");
              !function(e5, t4) {
                for (var r3, o2, n = "", s2 = [], i2 = 0; i2 < t4.length; ++i2) {
                  for (var a = t4[i2].trim(), l = a.split(" "), u = 0; u < l.length; ++u)
                    "" === l[u] && l.splice(u, 1);
                  if (0 !== l.length)
                    switch (n) {
                      case "":
                        if ("solid" !== l[0])
                          return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "solid"'));
                        n = "solid";
                        break;
                      case "solid":
                        if ("facet" !== l[0] || "normal" !== l[1])
                          return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "facet normal"'));
                        r3 = new x.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e5.vertexNormals.push(r3, r3, r3), n = "facet normal";
                        break;
                      case "facet normal":
                        if ("outer" !== l[0] || "loop" !== l[1])
                          return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "outer loop"'));
                        n = "vertex";
                        break;
                      case "vertex":
                        if ("vertex" === l[0])
                          o2 = new x.default.Vector(parseFloat(l[1]), parseFloat(l[2]), parseFloat(l[3])), e5.vertices.push(o2), e5.uvs.push([0, 0]), s2.push(e5.vertices.indexOf(o2));
                        else {
                          if ("endloop" !== l[0])
                            return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "vertex" or "endloop"'));
                          e5.faces.push(s2), s2 = [], n = "endloop";
                        }
                        break;
                      case "endloop":
                        if ("endfacet" !== l[0])
                          return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "endfacet"'));
                        n = "endfacet";
                        break;
                      case "endfacet":
                        if ("endsolid" !== l[0]) {
                          if ("facet" !== l[0] || "normal" !== l[1])
                            return console.error(a), console.error('Invalid state "'.concat(l[0], '", should be "endsolid" or "facet normal"'));
                          r3 = new x.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e5.vertexNormals.push(r3, r3, r3), n = "facet normal";
                        }
                        break;
                      default:
                        console.error('Invalid state "'.concat(n, '"'));
                    }
                }
              }(e4, t3);
            }
          }(v, e3), y && v.normalize(), b._decrementPreload(), "function" == typeof g && g(v);
        }, t2) : r2.match(/\.obj$/i) ? this.loadStrings(e2, function(e3) {
          for (var t3 = v, r3 = e3, o2 = { v: [], vt: [], vn: [] }, n = {}, s2 = 0; s2 < r3.length; ++s2) {
            var i2 = r3[s2].trim().split(/\b\s+/);
            if (0 < i2.length) {
              if ("v" === i2[0] || "vn" === i2[0]) {
                var a = new x.default.Vector(parseFloat(i2[1]), parseFloat(i2[2]), parseFloat(i2[3]));
                o2[i2[0]].push(a);
              } else if ("vt" === i2[0]) {
                a = [parseFloat(i2[1]), 1 - parseFloat(i2[2])];
                o2[i2[0]].push(a);
              } else if ("f" === i2[0])
                for (var l = 3; l < i2.length; ++l) {
                  for (var u = [], c = [1, l - 1, l], d = 0; d < c.length; ++d) {
                    var f = i2[c[d]], h = 0;
                    if (void 0 !== n[f])
                      h = n[f];
                    else {
                      for (var p = f.split("/"), m = 0; m < p.length; m++)
                        p[m] = parseInt(p[m]) - 1;
                      h = n[f] = t3.vertices.length, t3.vertices.push(o2.v[p[0]].copy()), o2.vt[p[1]] ? t3.uvs.push(o2.vt[p[1]].slice()) : t3.uvs.push([0, 0]), o2.vn[p[2]] && t3.vertexNormals.push(o2.vn[p[2]].copy());
                    }
                    u.push(h);
                  }
                  u[0] !== u[1] && u[0] !== u[2] && u[1] !== u[2] && t3.faces.push(u);
                }
            }
          }
          0 === t3.vertexNormals.length && t3.computeNormals(), y && v.normalize(), b._decrementPreload(), "function" == typeof g && g(v);
        }, t2) : (x.default._friendlyFileLoadError(3, e2), t2 ? t2() : console.error("Sorry, the file type is invalid. Only OBJ and STL files are supported.")), v;
      }, x.default.prototype.model = function(e2) {
        this._assert3d("model"), x.default._validateParameters("model", arguments), 0 < e2.vertices.length && (this._renderer.geometryInHash(e2.gid) || (e2._makeTriangleEdges()._edgesToVertices(), this._renderer.createBuffers(e2.gid, e2)), this._renderer.drawBuffers(e2.gid));
      };
      var o = x.default;
      r.default = o;
    }, { "../core/main": 267, "./p5.Geometry": 316, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.slice": 162, "core-js/modules/es.array.splice": 164, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.match": 187, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.trim": 193 }], 314: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.join"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.join"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var u = (s2 = e("../core/main")) && s2.__esModule ? s2 : { default: s2 }, n = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      e("./p5.Texture"), u.default.prototype.loadShader = function(e2, t2, r2, o2) {
        u.default._validateParameters("loadShader", arguments), o2 = o2 || console.error;
        function n2() {
          i3._decrementPreload(), r2 && r2(s3);
        }
        var s3 = new u.default.Shader(), i3 = this, a2 = false, l = false;
        return this.loadStrings(e2, function(e3) {
          s3._vertSrc = e3.join("\n"), l = true, a2 && n2();
        }, o2), this.loadStrings(t2, function(e3) {
          s3._fragSrc = e3.join("\n"), a2 = true, l && n2();
        }, o2), s3;
      }, u.default.prototype.createShader = function(e2, t2) {
        return this._assert3d("createShader"), u.default._validateParameters("createShader", arguments), new u.default.Shader(this._renderer, e2, t2);
      }, u.default.prototype.shader = function(e2) {
        return this._assert3d("shader"), u.default._validateParameters("shader", arguments), void 0 === e2._renderer && (e2._renderer = this._renderer), e2.init(), e2.isStrokeShader() ? this._renderer.userStrokeShader = e2 : (this._renderer.userFillShader = e2, this._renderer._useNormalMaterial = false), this;
      }, u.default.prototype.resetShader = function() {
        return this._renderer.userFillShader = this._renderer.userStrokeShader = null, this;
      }, u.default.prototype.texture = function(e2) {
        return this._assert3d("texture"), u.default._validateParameters("texture", arguments), e2.gifProperties && e2._animateGif(this), this._renderer.drawMode = n.TEXTURE, this._renderer._useSpecularMaterial = false, this._renderer._useEmissiveMaterial = false, this._renderer._useNormalMaterial = false, this._renderer._tex = e2, this._renderer._setProperty("_doFill", true), this;
      }, u.default.prototype.textureMode = function(e2) {
        e2 !== n.IMAGE && e2 !== n.NORMAL ? console.warn("You tried to set ".concat(e2, " textureMode only supports IMAGE & NORMAL ")) : this._renderer.textureMode = e2;
      }, u.default.prototype.textureWrap = function(e2) {
        for (var t2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : e2, r2 = (this._renderer.textureWrapX = e2, this._renderer.textureWrapY = t2, this._renderer.textures), o2 = 0; o2 < r2.length; o2++)
          r2[o2].setWrapMode(e2, t2);
      }, u.default.prototype.normalMaterial = function() {
        this._assert3d("normalMaterial");
        for (var e2 = arguments.length, t2 = new Array(e2), r2 = 0; r2 < e2; r2++)
          t2[r2] = arguments[r2];
        return u.default._validateParameters("normalMaterial", t2), this._renderer.drawMode = n.FILL, this._renderer._useSpecularMaterial = false, this._renderer._useEmissiveMaterial = false, this._renderer._useNormalMaterial = true, this._renderer.curFillColor = [1, 1, 1, 1], this._renderer._setProperty("_doFill", true), this.noStroke(), this;
      }, u.default.prototype.ambientMaterial = function(e2, t2, r2) {
        this._assert3d("ambientMaterial"), u.default._validateParameters("ambientMaterial", arguments);
        var o2 = u.default.prototype.color.apply(this, arguments);
        return this._renderer.curAmbientColor = o2._array, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this._renderer._tex = null, this._renderer._setProperty("_doFill", true), this;
      }, u.default.prototype.emissiveMaterial = function(e2, t2, r2, o2) {
        this._assert3d("emissiveMaterial"), u.default._validateParameters("emissiveMaterial", arguments);
        var n2 = u.default.prototype.color.apply(this, arguments);
        return this._renderer.curEmissiveColor = n2._array, this._renderer._useEmissiveMaterial = true, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this._renderer._tex = null, this;
      }, u.default.prototype.specularMaterial = function(e2, t2, r2, o2) {
        this._assert3d("specularMaterial"), u.default._validateParameters("specularMaterial", arguments);
        var n2 = u.default.prototype.color.apply(this, arguments);
        return this._renderer.curSpecularColor = n2._array, this._renderer._useSpecularMaterial = true, this._renderer._useNormalMaterial = false, this._renderer._enableLighting = true, this._renderer._tex = null, this;
      }, u.default.prototype.shininess = function(e2) {
        return this._assert3d("shininess"), u.default._validateParameters("shininess", arguments), this._renderer._useShininess = e2 = e2 < 1 ? 1 : e2, this;
      }, u.default.RendererGL.prototype._applyColorBlend = function(e2) {
        var t2 = this.GL, r2 = this.drawMode === n.TEXTURE || this.curBlendMode !== n.BLEND || e2[e2.length - 1] < 1 || this._isErasing;
        return r2 !== this._isBlending && (r2 || this.curBlendMode !== n.BLEND && this.curBlendMode !== n.ADD ? t2.enable(t2.BLEND) : t2.disable(t2.BLEND), t2.depthMask(true), this._isBlending = r2), this._applyBlendMode(), e2;
      }, u.default.RendererGL.prototype._applyBlendMode = function() {
        if (this._cachedBlendMode !== this.curBlendMode) {
          var e2 = this.GL;
          switch (this.curBlendMode) {
            case n.BLEND:
              e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.SRC_ALPHA, e2.ONE_MINUS_SRC_ALPHA);
              break;
            case n.ADD:
              e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.SRC_ALPHA, e2.ONE);
              break;
            case n.REMOVE:
              e2.blendEquation(e2.FUNC_REVERSE_SUBTRACT), e2.blendFunc(e2.SRC_ALPHA, e2.DST_ALPHA);
              break;
            case n.MULTIPLY:
              e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ZERO, e2.SRC_COLOR, e2.ONE, e2.ONE);
              break;
            case n.SCREEN:
              e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE_MINUS_DST_COLOR, e2.ONE, e2.ONE, e2.ONE);
              break;
            case n.EXCLUSION:
              e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE_MINUS_DST_COLOR, e2.ONE_MINUS_SRC_COLOR, e2.ONE, e2.ONE);
              break;
            case n.REPLACE:
              e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.ONE, e2.ZERO);
              break;
            case n.SUBTRACT:
              e2.blendEquationSeparate(e2.FUNC_REVERSE_SUBTRACT, e2.FUNC_ADD), e2.blendFuncSeparate(e2.SRC_ALPHA, e2.ONE, e2.ONE, e2.ONE);
              break;
            case n.DARKEST:
              this.blendExt ? (e2.blendEquationSeparate(this.blendExt.MIN_EXT, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE, e2.ONE, e2.ONE, e2.ONE)) : console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");
              break;
            case n.LIGHTEST:
              this.blendExt ? (e2.blendEquationSeparate(this.blendExt.MAX_EXT, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE, e2.ONE, e2.ONE, e2.ONE)) : console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");
              break;
            default:
              console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");
          }
          this._isErasing || (this._cachedBlendMode = this.curBlendMode);
        }
      };
      var s2 = u.default;
      r.default = s2;
    }, { "../core/constants": 256, "../core/main": 267, "./p5.Texture": 323, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.join": 159, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 315: [function(e, t, r) {
      Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var f = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      f.default.prototype.camera = function() {
        var e2;
        this._assert3d("camera");
        for (var t2 = arguments.length, r2 = new Array(t2), o = 0; o < t2; o++)
          r2[o] = arguments[o];
        return f.default._validateParameters("camera", r2), (e2 = this._renderer._curCamera).camera.apply(e2, r2), this;
      }, f.default.prototype.perspective = function() {
        var e2;
        this._assert3d("perspective");
        for (var t2 = arguments.length, r2 = new Array(t2), o = 0; o < t2; o++)
          r2[o] = arguments[o];
        return f.default._validateParameters("perspective", r2), (e2 = this._renderer._curCamera).perspective.apply(e2, r2), this;
      }, f.default.prototype.ortho = function() {
        var e2;
        this._assert3d("ortho");
        for (var t2 = arguments.length, r2 = new Array(t2), o = 0; o < t2; o++)
          r2[o] = arguments[o];
        return f.default._validateParameters("ortho", r2), (e2 = this._renderer._curCamera).ortho.apply(e2, r2), this;
      }, f.default.prototype.frustum = function() {
        var e2;
        this._assert3d("frustum");
        for (var t2 = arguments.length, r2 = new Array(t2), o = 0; o < t2; o++)
          r2[o] = arguments[o];
        return f.default._validateParameters("frustum", r2), (e2 = this._renderer._curCamera).frustum.apply(e2, r2), this;
      }, f.default.prototype.createCamera = function() {
        this._assert3d("createCamera");
        var e2 = new f.default.Camera(this._renderer);
        return e2._computeCameraDefaultSettings(), e2._setDefaultCamera(), this._renderer._curCamera = e2;
      }, f.default.Camera = function(e2) {
        this._renderer = e2, this.cameraType = "default", this.cameraMatrix = new f.default.Matrix(), this.projMatrix = new f.default.Matrix();
      }, f.default.Camera.prototype.perspective = function(e2, t2, r2, o) {
        this.cameraType = 0 < arguments.length ? "custom" : "default", void 0 === e2 ? (e2 = this.defaultCameraFOV, this.cameraFOV = e2) : this.cameraFOV = this._renderer._pInst._toRadians(e2), void 0 === t2 && (t2 = this.defaultAspectRatio), void 0 === r2 && (r2 = this.defaultCameraNear), void 0 === o && (o = this.defaultCameraFar), r2 <= 1e-4 && (r2 = 0.01, console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")), o < r2 && console.log("Perspective far plane value is less than near plane value. Nothing will be shown."), this.aspectRatio = t2, this.cameraNear = r2, this.cameraFar = o, this.projMatrix = f.default.Matrix.identity();
        var e2 = 1 / Math.tan(this.cameraFOV / 2), n = 1 / (this.cameraNear - this.cameraFar);
        this.projMatrix.set(e2 / t2, 0, 0, 0, 0, -e2, 0, 0, 0, 0, (o + r2) * n, -1, 0, 0, 2 * o * r2 * n, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
      }, f.default.Camera.prototype.ortho = function(e2, t2, r2, o, n, s2) {
        void 0 === e2 && (e2 = -this._renderer.width / 2), void 0 === t2 && (t2 = +this._renderer.width / 2), void 0 === r2 && (r2 = -this._renderer.height / 2), void 0 === n && (n = 0);
        var i2 = t2 - e2, a = (o = void 0 === o ? +this._renderer.height / 2 : o) - r2, l = (s2 = void 0 === s2 ? Math.max(this._renderer.width, this._renderer.height) : s2) - n, u = 2 / i2, c = 2 / a, d = -2 / l, t2 = -(t2 + e2) / i2, e2 = -(o + r2) / a, i2 = -(s2 + n) / l;
        this.projMatrix = f.default.Matrix.identity(), this.projMatrix.set(u, 0, 0, 0, 0, -c, 0, 0, 0, 0, d, 0, t2, e2, i2, 1), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
      }, f.default.Camera.prototype.frustum = function(e2, t2, r2, o, n, s2) {
        void 0 === e2 && (e2 = -this._renderer.width / 2), void 0 === t2 && (t2 = +this._renderer.width / 2), void 0 === r2 && (r2 = -this._renderer.height / 2), void 0 === n && (n = 0);
        var i2 = t2 - e2, a = (o = void 0 === o ? +this._renderer.height / 2 : o) - r2, l = (s2 = void 0 === s2 ? Math.max(this._renderer.width, this._renderer.height) : s2) - n, u = 2 * n / i2, c = 2 * n / a, d = -2 * s2 * n / l, t2 = (t2 + e2) / i2, e2 = (o + r2) / a, i2 = -(s2 + n) / l;
        this.projMatrix = f.default.Matrix.identity(), this.projMatrix.set(u, 0, 0, 0, 0, c, 0, 0, t2, e2, i2, -1, 0, 0, d, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
      }, f.default.Camera.prototype._rotateView = function(e2, t2, r2, o) {
        var n = this.centerX, s2 = this.centerY, i2 = this.centerZ, a = (n -= this.eyeX, s2 -= this.eyeY, i2 -= this.eyeZ, f.default.Matrix.identity(this._renderer._pInst)), e2 = (a.rotate(this._renderer._pInst._toRadians(e2), t2, r2, o), [n * a.mat4[0] + s2 * a.mat4[4] + i2 * a.mat4[8], n * a.mat4[1] + s2 * a.mat4[5] + i2 * a.mat4[9], n * a.mat4[2] + s2 * a.mat4[6] + i2 * a.mat4[10]]);
        e2[0] += this.eyeX, e2[1] += this.eyeY, e2[2] += this.eyeZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, e2[0], e2[1], e2[2], this.upX, this.upY, this.upZ);
      }, f.default.Camera.prototype.pan = function(e2) {
        var t2 = this._getLocalAxes();
        this._rotateView(e2, t2.y[0], t2.y[1], t2.y[2]);
      }, f.default.Camera.prototype.tilt = function(e2) {
        var t2 = this._getLocalAxes();
        this._rotateView(e2, t2.x[0], t2.x[1], t2.x[2]);
      }, f.default.Camera.prototype.lookAt = function(e2, t2, r2) {
        this.camera(this.eyeX, this.eyeY, this.eyeZ, e2, t2, r2, this.upX, this.upY, this.upZ);
      }, f.default.Camera.prototype.camera = function(e2, t2, r2, o, n, s2, i2, a, l) {
        void 0 === e2 && (e2 = this.defaultEyeX, t2 = this.defaultEyeY, r2 = this.defaultEyeZ, o = e2, n = t2, a = 1, l = i2 = s2 = 0), this.eyeX = e2, this.eyeY = t2, this.eyeZ = r2, void 0 !== o && (this.centerX = o, this.centerY = n, this.centerZ = s2), void 0 !== i2 && (this.upX = i2, this.upY = a, this.upZ = l);
        o = this._getLocalAxes(), this.cameraMatrix.set(o.x[0], o.y[0], o.z[0], 0, o.x[1], o.y[1], o.z[1], 0, o.x[2], o.y[2], o.z[2], 0, 0, 0, 0, 1), n = -e2;
        return this.cameraMatrix.translate([n, -t2, -r2]), this._isActive() && this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0], this.cameraMatrix.mat4[1], this.cameraMatrix.mat4[2], this.cameraMatrix.mat4[3], this.cameraMatrix.mat4[4], this.cameraMatrix.mat4[5], this.cameraMatrix.mat4[6], this.cameraMatrix.mat4[7], this.cameraMatrix.mat4[8], this.cameraMatrix.mat4[9], this.cameraMatrix.mat4[10], this.cameraMatrix.mat4[11], this.cameraMatrix.mat4[12], this.cameraMatrix.mat4[13], this.cameraMatrix.mat4[14], this.cameraMatrix.mat4[15]), this;
      }, f.default.Camera.prototype.move = function(e2, t2, r2) {
        var o = this._getLocalAxes(), e2 = [o.x[0] * e2, o.x[1] * e2, o.x[2] * e2], t2 = [o.y[0] * t2, o.y[1] * t2, o.y[2] * t2], o = [o.z[0] * r2, o.z[1] * r2, o.z[2] * r2];
        this.camera(this.eyeX + e2[0] + t2[0] + o[0], this.eyeY + e2[1] + t2[1] + o[1], this.eyeZ + e2[2] + t2[2] + o[2], this.centerX + e2[0] + t2[0] + o[0], this.centerY + e2[1] + t2[1] + o[1], this.centerZ + e2[2] + t2[2] + o[2], 0, 1, 0);
      }, f.default.Camera.prototype.setPosition = function(e2, t2, r2) {
        var o = e2 - this.eyeX, n = t2 - this.eyeY, s2 = r2 - this.eyeZ;
        this.camera(e2, t2, r2, this.centerX + o, this.centerY + n, this.centerZ + s2, 0, 1, 0);
      }, f.default.Camera.prototype._computeCameraDefaultSettings = function() {
        this.defaultCameraFOV = 60 / 180 * Math.PI, this.defaultAspectRatio = this._renderer.width / this._renderer.height, this.defaultEyeX = 0, this.defaultEyeY = 0, this.defaultEyeZ = this._renderer.height / 2 / Math.tan(this.defaultCameraFOV / 2), this.defaultCenterX = 0, this.defaultCenterY = 0, this.defaultCenterZ = 0, this.defaultCameraNear = 0.1 * this.defaultEyeZ, this.defaultCameraFar = 10 * this.defaultEyeZ;
      }, f.default.Camera.prototype._setDefaultCamera = function() {
        this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.eyeX = this.defaultEyeX, this.eyeY = this.defaultEyeY, this.eyeZ = this.defaultEyeZ, this.centerX = this.defaultCenterX, this.centerY = this.defaultCenterY, this.centerZ = this.defaultCenterZ, this.upX = 0, this.upY = 1, this.upZ = 0, this.cameraNear = this.defaultCameraNear, this.cameraFar = this.defaultCameraFar, this.perspective(), this.camera(), this.cameraType = "default";
      }, f.default.Camera.prototype._resize = function() {
        "default" === this.cameraType ? (this._computeCameraDefaultSettings(), this._setDefaultCamera()) : this.perspective(this.cameraFOV, this._renderer.width / this._renderer.height);
      }, f.default.Camera.prototype.copy = function() {
        var e2 = new f.default.Camera(this._renderer);
        return e2.cameraFOV = this.cameraFOV, e2.aspectRatio = this.aspectRatio, e2.eyeX = this.eyeX, e2.eyeY = this.eyeY, e2.eyeZ = this.eyeZ, e2.centerX = this.centerX, e2.centerY = this.centerY, e2.centerZ = this.centerZ, e2.cameraNear = this.cameraNear, e2.cameraFar = this.cameraFar, e2.cameraType = this.cameraType, e2.cameraMatrix = this.cameraMatrix.copy(), e2.projMatrix = this.projMatrix.copy(), e2;
      }, f.default.Camera.prototype._getLocalAxes = function() {
        var e2 = this.eyeX - this.centerX, t2 = this.eyeY - this.centerY, r2 = this.eyeZ - this.centerZ, o = Math.sqrt(e2 * e2 + t2 * t2 + r2 * r2), o = (0 !== o && (e2 /= o, t2 /= o, r2 /= o), this.upX), n = (a = this.upY) * r2 - (l = this.upZ) * t2, s2 = -o * r2 + l * e2, i2 = o * t2 - a * e2, o = t2 * i2 - r2 * s2, a = -e2 * i2 + r2 * n, l = e2 * s2 - t2 * n, u = Math.sqrt(n * n + s2 * s2 + i2 * i2), u = (0 !== u && (n /= u, s2 /= u, i2 /= u), Math.sqrt(o * o + a * a + l * l));
        return 0 !== u && (o /= u, a /= u, l /= u), { x: [n, s2, i2], y: [o, a, l], z: [e2, t2, r2] };
      }, f.default.Camera.prototype._orbit = function(e2, t2, r2) {
        var o = this.eyeX - this.centerX, n = this.eyeY - this.centerY, s2 = this.eyeZ - this.centerZ, i2 = Math.sqrt(o * o + n * n + s2 * s2), o = Math.atan2(o, s2), s2 = Math.acos(Math.max(-1, Math.min(1, n / i2))), n = (o += e2, (i2 += r2) < 0 && (i2 = 0.1), (s2 += t2) > Math.PI ? s2 = Math.PI : s2 <= 0 && (s2 = 1e-3), Math.sin(s2) * i2 * Math.sin(o)), e2 = Math.cos(s2) * i2, r2 = Math.sin(s2) * i2 * Math.cos(o);
        this.camera(n + this.centerX, e2 + this.centerY, r2 + this.centerZ, this.centerX, this.centerY, this.centerZ, 0, 1, 0);
      }, f.default.Camera.prototype._isActive = function() {
        return this === this._renderer._curCamera;
      }, f.default.prototype.setCamera = function(e2) {
        this._renderer._curCamera = e2, this._renderer.uPMatrix.set(e2.projMatrix.mat4[0], e2.projMatrix.mat4[1], e2.projMatrix.mat4[2], e2.projMatrix.mat4[3], e2.projMatrix.mat4[4], e2.projMatrix.mat4[5], e2.projMatrix.mat4[6], e2.projMatrix.mat4[7], e2.projMatrix.mat4[8], e2.projMatrix.mat4[9], e2.projMatrix.mat4[10], e2.projMatrix.mat4[11], e2.projMatrix.mat4[12], e2.projMatrix.mat4[13], e2.projMatrix.mat4[14], e2.projMatrix.mat4[15]);
      };
      e = f.default.Camera;
      r.default = e;
    }, { "../core/main": 267 }], 316: [function(e, t, r) {
      e("core-js/modules/es.string.sub"), e("core-js/modules/es.string.sub"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      l.default.Geometry = function(e2, t2, r2) {
        return this.vertices = [], this.lineVertices = [], this.lineNormals = [], this.vertexNormals = [], this.faces = [], this.uvs = [], this.edges = [], this.vertexColors = [], this.detailX = void 0 !== e2 ? e2 : 1, this.detailY = void 0 !== t2 ? t2 : 1, this.dirtyFlags = {}, r2 instanceof Function && r2.call(this), this;
      }, l.default.Geometry.prototype.reset = function() {
        this.lineVertices.length = 0, this.lineNormals.length = 0, this.vertices.length = 0, this.edges.length = 0, this.vertexColors.length = 0, this.vertexNormals.length = 0, this.uvs.length = 0, this.dirtyFlags = {};
      }, l.default.Geometry.prototype.computeFaces = function() {
        this.faces.length = 0;
        for (var e2, t2, r2, o = this.detailX + 1, n = 0; n < this.detailY; n++)
          for (var s2 = 0; s2 < this.detailX; s2++)
            t2 = (n + 1) * o + s2 + 1, this.faces.push([n * o + s2, e2 = n * o + s2 + 1, r2 = (n + 1) * o + s2]), this.faces.push([r2, e2, t2]);
        return this;
      }, l.default.Geometry.prototype._getFaceNormal = function(e2) {
        var e2 = this.faces[e2], t2 = this.vertices[e2[0]], r2 = this.vertices[e2[1]], e2 = this.vertices[e2[2]], r2 = l.default.Vector.sub(r2, t2), e2 = l.default.Vector.sub(e2, t2), t2 = l.default.Vector.cross(r2, e2), o = l.default.Vector.mag(t2), r2 = o / (l.default.Vector.mag(r2) * l.default.Vector.mag(e2));
        return 0 === r2 || isNaN(r2) ? (console.warn("p5.Geometry.prototype._getFaceNormal:", "face has colinear sides or a repeated vertex"), t2) : (1 < r2 && (r2 = 1), t2.mult(Math.asin(r2) / o));
      }, l.default.Geometry.prototype.computeNormals = function() {
        for (var e2 = this.vertexNormals, t2 = this.vertices, r2 = this.faces, o = e2.length = 0; o < t2.length; ++o)
          e2.push(new l.default.Vector());
        for (var n = 0; n < r2.length; ++n)
          for (var s2 = r2[n], i2 = this._getFaceNormal(n), a = 0; a < 3; ++a)
            e2[s2[a]].add(i2);
        for (o = 0; o < t2.length; ++o)
          e2[o].normalize();
        return this;
      }, l.default.Geometry.prototype.averageNormals = function() {
        for (var e2 = 0; e2 <= this.detailY; e2++) {
          var t2 = this.detailX + 1, r2 = l.default.Vector.add(this.vertexNormals[e2 * t2], this.vertexNormals[e2 * t2 + this.detailX]), r2 = l.default.Vector.div(r2, 2);
          this.vertexNormals[e2 * t2] = r2, this.vertexNormals[e2 * t2 + this.detailX] = r2;
        }
        return this;
      }, l.default.Geometry.prototype.averagePoleNormals = function() {
        for (var e2 = new l.default.Vector(0, 0, 0), t2 = 0; t2 < this.detailX; t2++)
          e2.add(this.vertexNormals[t2]);
        for (var e2 = l.default.Vector.div(e2, this.detailX), r2 = 0; r2 < this.detailX; r2++)
          this.vertexNormals[r2] = e2;
        e2 = new l.default.Vector(0, 0, 0);
        for (var o = this.vertices.length - 1; o > this.vertices.length - 1 - this.detailX; o--)
          e2.add(this.vertexNormals[o]);
        e2 = l.default.Vector.div(e2, this.detailX);
        for (var n = this.vertices.length - 1; n > this.vertices.length - 1 - this.detailX; n--)
          this.vertexNormals[n] = e2;
        return this;
      }, l.default.Geometry.prototype._makeTriangleEdges = function() {
        if (this.edges.length = 0, Array.isArray(this.strokeIndices))
          for (var e2 = 0, t2 = this.strokeIndices.length; e2 < t2; e2++)
            this.edges.push(this.strokeIndices[e2]);
        else
          for (var r2 = 0; r2 < this.faces.length; r2++)
            this.edges.push([this.faces[r2][0], this.faces[r2][1]]), this.edges.push([this.faces[r2][1], this.faces[r2][2]]), this.edges.push([this.faces[r2][2], this.faces[r2][0]]);
        return this;
      }, l.default.Geometry.prototype._edgesToVertices = function() {
        this.lineVertices.length = 0;
        for (var e2 = this.lineNormals.length = 0; e2 < this.edges.length; e2++) {
          var t2 = this.vertices[this.edges[e2][0]], r2 = this.vertices[this.edges[e2][1]], o = r2.copy().sub(t2).normalize(), n = t2.array(), t2 = t2.array(), s2 = r2.array(), r2 = r2.array(), i2 = o.array(), o = o.array();
          i2.push(1), o.push(-1), this.lineNormals.push(i2, o, i2, i2, o, o), this.lineVertices.push(n, t2, s2, s2, t2, r2);
        }
        return this;
      }, l.default.Geometry.prototype.normalize = function() {
        if (0 < this.vertices.length) {
          for (var e2 = this.vertices[0].copy(), t2 = this.vertices[0].copy(), r2 = 0; r2 < this.vertices.length; r2++)
            e2.x = Math.max(e2.x, this.vertices[r2].x), t2.x = Math.min(t2.x, this.vertices[r2].x), e2.y = Math.max(e2.y, this.vertices[r2].y), t2.y = Math.min(t2.y, this.vertices[r2].y), e2.z = Math.max(e2.z, this.vertices[r2].z), t2.z = Math.min(t2.z, this.vertices[r2].z);
          for (var o = l.default.Vector.lerp(e2, t2, 0.5), n = l.default.Vector.sub(e2, t2), s2 = 200 / Math.max(Math.max(n.x, n.y), n.z), i2 = 0; i2 < this.vertices.length; i2++)
            this.vertices[i2].sub(o), this.vertices[i2].mult(s2);
        }
        return this;
      };
      e = l.default.Geometry;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.string.sub": 192 }], 317: [function(e, t, r) {
      e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var O = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      var o = Array, L = function(e2) {
        return e2 instanceof Array;
      }, e = ("undefined" != typeof Float32Array && (o = Float32Array, L = function(e2) {
        return e2 instanceof Array || e2 instanceof Float32Array;
      }), O.default.Matrix = function() {
        for (var e2 = new Array(arguments.length), t2 = 0; t2 < e2.length; ++t2)
          e2[t2] = arguments[t2];
        return e2.length && e2[e2.length - 1] instanceof O.default && (this.p5 = e2[e2.length - 1]), "mat3" === e2[0] ? this.mat3 = Array.isArray(e2[1]) ? e2[1] : new o([1, 0, 0, 0, 1, 0, 0, 0, 1]) : this.mat4 = Array.isArray(e2[0]) ? e2[0] : new o([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), this;
      }, O.default.Matrix.prototype.set = function(e2) {
        return e2 instanceof O.default.Matrix ? this.mat4 = e2.mat4 : L(e2) ? this.mat4 = e2 : 16 === arguments.length && (this.mat4[0] = e2, this.mat4[1] = arguments[1], this.mat4[2] = arguments[2], this.mat4[3] = arguments[3], this.mat4[4] = arguments[4], this.mat4[5] = arguments[5], this.mat4[6] = arguments[6], this.mat4[7] = arguments[7], this.mat4[8] = arguments[8], this.mat4[9] = arguments[9], this.mat4[10] = arguments[10], this.mat4[11] = arguments[11], this.mat4[12] = arguments[12], this.mat4[13] = arguments[13], this.mat4[14] = arguments[14], this.mat4[15] = arguments[15]), this;
      }, O.default.Matrix.prototype.get = function() {
        return new O.default.Matrix(this.mat4, this.p5);
      }, O.default.Matrix.prototype.copy = function() {
        var e2 = new O.default.Matrix(this.p5);
        return e2.mat4[0] = this.mat4[0], e2.mat4[1] = this.mat4[1], e2.mat4[2] = this.mat4[2], e2.mat4[3] = this.mat4[3], e2.mat4[4] = this.mat4[4], e2.mat4[5] = this.mat4[5], e2.mat4[6] = this.mat4[6], e2.mat4[7] = this.mat4[7], e2.mat4[8] = this.mat4[8], e2.mat4[9] = this.mat4[9], e2.mat4[10] = this.mat4[10], e2.mat4[11] = this.mat4[11], e2.mat4[12] = this.mat4[12], e2.mat4[13] = this.mat4[13], e2.mat4[14] = this.mat4[14], e2.mat4[15] = this.mat4[15], e2;
      }, O.default.Matrix.identity = function(e2) {
        return new O.default.Matrix(e2);
      }, O.default.Matrix.prototype.transpose = function(e2) {
        var t2, r2, o2, n, s2, i2;
        return e2 instanceof O.default.Matrix ? (t2 = e2.mat4[1], r2 = e2.mat4[2], o2 = e2.mat4[3], n = e2.mat4[6], s2 = e2.mat4[7], i2 = e2.mat4[11], this.mat4[0] = e2.mat4[0], this.mat4[1] = e2.mat4[4], this.mat4[2] = e2.mat4[8], this.mat4[3] = e2.mat4[12], this.mat4[4] = t2, this.mat4[5] = e2.mat4[5], this.mat4[6] = e2.mat4[9], this.mat4[7] = e2.mat4[13], this.mat4[8] = r2, this.mat4[9] = n, this.mat4[10] = e2.mat4[10], this.mat4[11] = e2.mat4[14], this.mat4[12] = o2, this.mat4[13] = s2, this.mat4[14] = i2, this.mat4[15] = e2.mat4[15]) : L(e2) && (t2 = e2[1], r2 = e2[2], o2 = e2[3], n = e2[6], s2 = e2[7], i2 = e2[11], this.mat4[0] = e2[0], this.mat4[1] = e2[4], this.mat4[2] = e2[8], this.mat4[3] = e2[12], this.mat4[4] = t2, this.mat4[5] = e2[5], this.mat4[6] = e2[9], this.mat4[7] = e2[13], this.mat4[8] = r2, this.mat4[9] = n, this.mat4[10] = e2[10], this.mat4[11] = e2[14], this.mat4[12] = o2, this.mat4[13] = s2, this.mat4[14] = i2, this.mat4[15] = e2[15]), this;
      }, O.default.Matrix.prototype.invert = function(e2) {
        e2 instanceof O.default.Matrix ? (t2 = e2.mat4[0], r2 = e2.mat4[1], o2 = e2.mat4[2], n = e2.mat4[3], s2 = e2.mat4[4], i2 = e2.mat4[5], a = e2.mat4[6], l = e2.mat4[7], u = e2.mat4[8], c = e2.mat4[9], d = e2.mat4[10], f = e2.mat4[11], h = e2.mat4[12], p = e2.mat4[13], m = e2.mat4[14], y = e2.mat4[15]) : L(e2) && (t2 = e2[0], r2 = e2[1], o2 = e2[2], n = e2[3], s2 = e2[4], i2 = e2[5], a = e2[6], l = e2[7], u = e2[8], c = e2[9], d = e2[10], f = e2[11], h = e2[12], p = e2[13], m = e2[14], y = e2[15]);
        var t2, r2, o2, n, s2, i2, a, l, u, c, d, f, h, p, m, y, e2 = t2 * i2 - r2 * s2, g = t2 * a - o2 * s2, v = t2 * l - n * s2, b = r2 * a - o2 * i2, j = r2 * l - n * i2, _ = o2 * l - n * a, x = u * p - c * h, w = u * m - d * h, S = u * y - f * h, M = c * m - d * p, E = c * y - f * p, T = d * y - f * m, C = e2 * T - g * E + v * M + b * S - j * w + _ * x;
        return C ? (this.mat4[0] = (i2 * T - a * E + l * M) * (C = 1 / C), this.mat4[1] = (o2 * E - r2 * T - n * M) * C, this.mat4[2] = (p * _ - m * j + y * b) * C, this.mat4[3] = (d * j - c * _ - f * b) * C, this.mat4[4] = (a * S - s2 * T - l * w) * C, this.mat4[5] = (t2 * T - o2 * S + n * w) * C, this.mat4[6] = (m * v - h * _ - y * g) * C, this.mat4[7] = (u * _ - d * v + f * g) * C, this.mat4[8] = (s2 * E - i2 * S + l * x) * C, this.mat4[9] = (r2 * S - t2 * E - n * x) * C, this.mat4[10] = (h * j - p * v + y * e2) * C, this.mat4[11] = (c * v - u * j - f * e2) * C, this.mat4[12] = (i2 * w - s2 * M - a * x) * C, this.mat4[13] = (t2 * M - r2 * w + o2 * x) * C, this.mat4[14] = (p * g - h * b - m * e2) * C, this.mat4[15] = (u * b - c * g + d * e2) * C, this) : null;
      }, O.default.Matrix.prototype.invert3x3 = function() {
        var e2 = this.mat3[0], t2 = this.mat3[1], r2 = this.mat3[2], o2 = this.mat3[3], n = this.mat3[4], s2 = this.mat3[5], i2 = this.mat3[6], a = this.mat3[7], l = this.mat3[8], u = l * n - s2 * a, c = -l * o2 + s2 * i2, d = a * o2 - n * i2, f = e2 * u + t2 * c + r2 * d;
        return f ? (this.mat3[0] = u * (f = 1 / f), this.mat3[1] = (-l * t2 + r2 * a) * f, this.mat3[2] = (s2 * t2 - r2 * n) * f, this.mat3[3] = c * f, this.mat3[4] = (l * e2 - r2 * i2) * f, this.mat3[5] = (-s2 * e2 + r2 * o2) * f, this.mat3[6] = d * f, this.mat3[7] = (-a * e2 + t2 * i2) * f, this.mat3[8] = (n * e2 - t2 * o2) * f, this) : null;
      }, O.default.Matrix.prototype.transpose3x3 = function(e2) {
        var t2 = e2[1], r2 = e2[2], o2 = e2[5];
        return this.mat3[1] = e2[3], this.mat3[2] = e2[6], this.mat3[3] = t2, this.mat3[5] = e2[7], this.mat3[6] = r2, this.mat3[7] = o2, this;
      }, O.default.Matrix.prototype.inverseTranspose = function(e2) {
        void 0 === this.mat3 ? console.error("sorry, this function only works with mat3") : (this.mat3[0] = e2.mat4[0], this.mat3[1] = e2.mat4[1], this.mat3[2] = e2.mat4[2], this.mat3[3] = e2.mat4[4], this.mat3[4] = e2.mat4[5], this.mat3[5] = e2.mat4[6], this.mat3[6] = e2.mat4[8], this.mat3[7] = e2.mat4[9], this.mat3[8] = e2.mat4[10]);
        e2 = this.invert3x3();
        if (e2)
          e2.transpose3x3(this.mat3);
        else
          for (var t2 = 0; t2 < 9; t2++)
            this.mat3[t2] = 0;
        return this;
      }, O.default.Matrix.prototype.determinant = function() {
        var e2 = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4], t2 = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4], r2 = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4], o2 = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5], n = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5], s2 = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6], i2 = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12], a = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12], l = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12], u = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13], c = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13];
        return e2 * (this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14]) - t2 * c + r2 * u + o2 * l - n * a + s2 * i2;
      }, O.default.Matrix.prototype.mult = function(e2) {
        var t2;
        if (e2 === this || e2 === this.mat4)
          t2 = this.copy().mat4;
        else if (e2 instanceof O.default.Matrix)
          t2 = e2.mat4;
        else if (L(e2))
          t2 = e2;
        else {
          if (16 !== arguments.length)
            return;
          t2 = arguments;
        }
        var e2 = this.mat4[0], r2 = this.mat4[1], o2 = this.mat4[2], n = this.mat4[3];
        return this.mat4[0] = e2 * t2[0] + r2 * t2[4] + o2 * t2[8] + n * t2[12], this.mat4[1] = e2 * t2[1] + r2 * t2[5] + o2 * t2[9] + n * t2[13], this.mat4[2] = e2 * t2[2] + r2 * t2[6] + o2 * t2[10] + n * t2[14], this.mat4[3] = e2 * t2[3] + r2 * t2[7] + o2 * t2[11] + n * t2[15], e2 = this.mat4[4], r2 = this.mat4[5], o2 = this.mat4[6], n = this.mat4[7], this.mat4[4] = e2 * t2[0] + r2 * t2[4] + o2 * t2[8] + n * t2[12], this.mat4[5] = e2 * t2[1] + r2 * t2[5] + o2 * t2[9] + n * t2[13], this.mat4[6] = e2 * t2[2] + r2 * t2[6] + o2 * t2[10] + n * t2[14], this.mat4[7] = e2 * t2[3] + r2 * t2[7] + o2 * t2[11] + n * t2[15], e2 = this.mat4[8], r2 = this.mat4[9], o2 = this.mat4[10], n = this.mat4[11], this.mat4[8] = e2 * t2[0] + r2 * t2[4] + o2 * t2[8] + n * t2[12], this.mat4[9] = e2 * t2[1] + r2 * t2[5] + o2 * t2[9] + n * t2[13], this.mat4[10] = e2 * t2[2] + r2 * t2[6] + o2 * t2[10] + n * t2[14], this.mat4[11] = e2 * t2[3] + r2 * t2[7] + o2 * t2[11] + n * t2[15], e2 = this.mat4[12], r2 = this.mat4[13], o2 = this.mat4[14], n = this.mat4[15], this.mat4[12] = e2 * t2[0] + r2 * t2[4] + o2 * t2[8] + n * t2[12], this.mat4[13] = e2 * t2[1] + r2 * t2[5] + o2 * t2[9] + n * t2[13], this.mat4[14] = e2 * t2[2] + r2 * t2[6] + o2 * t2[10] + n * t2[14], this.mat4[15] = e2 * t2[3] + r2 * t2[7] + o2 * t2[11] + n * t2[15], this;
      }, O.default.Matrix.prototype.apply = function(e2) {
        var t2;
        if (e2 === this || e2 === this.mat4)
          t2 = this.copy().mat4;
        else if (e2 instanceof O.default.Matrix)
          t2 = e2.mat4;
        else if (L(e2))
          t2 = e2;
        else {
          if (16 !== arguments.length)
            return;
          t2 = arguments;
        }
        var e2 = this.mat4, r2 = e2[0], o2 = e2[4], n = e2[8], s2 = e2[12], r2 = (e2[0] = t2[0] * r2 + t2[1] * o2 + t2[2] * n + t2[3] * s2, e2[4] = t2[4] * r2 + t2[5] * o2 + t2[6] * n + t2[7] * s2, e2[8] = t2[8] * r2 + t2[9] * o2 + t2[10] * n + t2[11] * s2, e2[12] = t2[12] * r2 + t2[13] * o2 + t2[14] * n + t2[15] * s2, e2[1]), o2 = e2[5], n = e2[9], s2 = e2[13], r2 = (e2[1] = t2[0] * r2 + t2[1] * o2 + t2[2] * n + t2[3] * s2, e2[5] = t2[4] * r2 + t2[5] * o2 + t2[6] * n + t2[7] * s2, e2[9] = t2[8] * r2 + t2[9] * o2 + t2[10] * n + t2[11] * s2, e2[13] = t2[12] * r2 + t2[13] * o2 + t2[14] * n + t2[15] * s2, e2[2]), o2 = e2[6], n = e2[10], s2 = e2[14], r2 = (e2[2] = t2[0] * r2 + t2[1] * o2 + t2[2] * n + t2[3] * s2, e2[6] = t2[4] * r2 + t2[5] * o2 + t2[6] * n + t2[7] * s2, e2[10] = t2[8] * r2 + t2[9] * o2 + t2[10] * n + t2[11] * s2, e2[14] = t2[12] * r2 + t2[13] * o2 + t2[14] * n + t2[15] * s2, e2[3]), o2 = e2[7], n = e2[11], s2 = e2[15];
        return e2[3] = t2[0] * r2 + t2[1] * o2 + t2[2] * n + t2[3] * s2, e2[7] = t2[4] * r2 + t2[5] * o2 + t2[6] * n + t2[7] * s2, e2[11] = t2[8] * r2 + t2[9] * o2 + t2[10] * n + t2[11] * s2, e2[15] = t2[12] * r2 + t2[13] * o2 + t2[14] * n + t2[15] * s2, this;
      }, O.default.Matrix.prototype.scale = function(e2, t2, r2) {
        return e2 instanceof O.default.Vector ? (t2 = e2.y, r2 = e2.z, e2 = e2.x) : e2 instanceof Array && (t2 = e2[1], r2 = e2[2], e2 = e2[0]), this.mat4[0] *= e2, this.mat4[1] *= e2, this.mat4[2] *= e2, this.mat4[3] *= e2, this.mat4[4] *= t2, this.mat4[5] *= t2, this.mat4[6] *= t2, this.mat4[7] *= t2, this.mat4[8] *= r2, this.mat4[9] *= r2, this.mat4[10] *= r2, this.mat4[11] *= r2, this;
      }, O.default.Matrix.prototype.rotate = function(e2, t2, r2, o2) {
        t2 instanceof O.default.Vector ? (r2 = t2.y, o2 = t2.z, t2 = t2.x) : t2 instanceof Array && (r2 = t2[1], o2 = t2[2], t2 = t2[0]);
        var n = Math.sqrt(t2 * t2 + r2 * r2 + o2 * o2), n = (t2 *= 1 / n, r2 *= 1 / n, o2 *= 1 / n, this.mat4[0]), s2 = this.mat4[1], i2 = this.mat4[2], a = this.mat4[3], l = this.mat4[4], u = this.mat4[5], c = this.mat4[6], d = this.mat4[7], f = this.mat4[8], h = this.mat4[9], p = this.mat4[10], m = this.mat4[11], y = Math.sin(e2), e2 = Math.cos(e2), g = 1 - e2, v = t2 * t2 * g + e2, b = r2 * t2 * g + o2 * y, j = o2 * t2 * g - r2 * y, _ = t2 * r2 * g - o2 * y, x = r2 * r2 * g + e2, w = o2 * r2 * g + t2 * y, S = t2 * o2 * g + r2 * y, r2 = r2 * o2 * g - t2 * y, t2 = o2 * o2 * g + e2;
        return this.mat4[0] = n * v + l * b + f * j, this.mat4[1] = s2 * v + u * b + h * j, this.mat4[2] = i2 * v + c * b + p * j, this.mat4[3] = a * v + d * b + m * j, this.mat4[4] = n * _ + l * x + f * w, this.mat4[5] = s2 * _ + u * x + h * w, this.mat4[6] = i2 * _ + c * x + p * w, this.mat4[7] = a * _ + d * x + m * w, this.mat4[8] = n * S + l * r2 + f * t2, this.mat4[9] = s2 * S + u * r2 + h * t2, this.mat4[10] = i2 * S + c * r2 + p * t2, this.mat4[11] = a * S + d * r2 + m * t2, this;
      }, O.default.Matrix.prototype.translate = function(e2) {
        var t2 = e2[0], r2 = e2[1], e2 = e2[2] || 0;
        this.mat4[12] += this.mat4[0] * t2 + this.mat4[4] * r2 + this.mat4[8] * e2, this.mat4[13] += this.mat4[1] * t2 + this.mat4[5] * r2 + this.mat4[9] * e2, this.mat4[14] += this.mat4[2] * t2 + this.mat4[6] * r2 + this.mat4[10] * e2, this.mat4[15] += this.mat4[3] * t2 + this.mat4[7] * r2 + this.mat4[11] * e2;
      }, O.default.Matrix.prototype.rotateX = function(e2) {
        this.rotate(e2, 1, 0, 0);
      }, O.default.Matrix.prototype.rotateY = function(e2) {
        this.rotate(e2, 0, 1, 0);
      }, O.default.Matrix.prototype.rotateZ = function(e2) {
        this.rotate(e2, 0, 0, 1);
      }, O.default.Matrix.prototype.perspective = function(e2, t2, r2, o2) {
        var e2 = 1 / Math.tan(e2 / 2), n = 1 / (r2 - o2);
        return this.mat4[0] = e2 / t2, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = e2, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = (o2 + r2) * n, this.mat4[11] = -1, this.mat4[12] = 0, this.mat4[13] = 0, this.mat4[14] = 2 * o2 * r2 * n, this.mat4[15] = 0, this;
      }, O.default.Matrix.prototype.ortho = function(e2, t2, r2, o2, n, s2) {
        var i2 = 1 / (e2 - t2), a = 1 / (r2 - o2), l = 1 / (n - s2);
        return this.mat4[0] = -2 * i2, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = -2 * a, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = 2 * l, this.mat4[11] = 0, this.mat4[12] = (e2 + t2) * i2, this.mat4[13] = (o2 + r2) * a, this.mat4[14] = (s2 + n) * l, this.mat4[15] = 1, this;
      }, O.default.Matrix);
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.float32-array": 203, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223 }], 318: [function(e, t, r) {
      e("core-js/modules/es.array.map"), e("core-js/modules/es.array.map"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      e = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      e.default.RenderBuffer = function(e2, t2, r2, o, n, s2) {
        this.size = e2, this.src = t2, this.dst = r2, this.attr = o, this._renderer = n, this.map = s2;
      }, e.default.RenderBuffer.prototype._prepareBuffer = function(e2, t2) {
        var r2, o, n, s2 = t2.attributes, i2 = this._renderer.GL, a = e2.model || e2, s2 = s2[this.attr];
        s2 && (r2 = e2[this.dst], 0 < (o = a[this.src]).length && ((n = !r2) && (e2[this.dst] = r2 = i2.createBuffer()), i2.bindBuffer(i2.ARRAY_BUFFER, r2), !n && false === a.dirtyFlags[this.src] || (n = (e2 = this.map) ? e2(o) : o, this._renderer._bindBuffer(r2, i2.ARRAY_BUFFER, n), a.dirtyFlags[this.src] = false), t2.enableAttrib(s2, this.size)));
      };
      e = e.default.RenderBuffer;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.map": 161 }], 319: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.map"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = (n = e("../core/main")) && n.__esModule ? n : { default: n }, u = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s2;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s2 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s2.get || s2.set) ? Object.defineProperty(o2, r2, s2) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function c(e2) {
        return function(e3) {
          if (Array.isArray(e3)) {
            for (var t2 = 0, r2 = new Array(e3.length); t2 < e3.length; t2++)
              r2[t2] = e3[t2];
            return r2;
          }
        }(e2) || function(e3) {
          if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3))
            return Array.from(e3);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      e("./p5.RenderBuffer"), l.default.RendererGL.prototype.beginShape = function(e2) {
        return this.immediateMode.shapeMode = void 0 !== e2 ? e2 : u.TRIANGLE_FAN, this.immediateMode.geometry.reset(), this;
      };
      var d = { vertices: 1, vertexNormals: 1, vertexColors: 4, uvs: 2 }, n = (l.default.RendererGL.prototype.vertex = function(e2, t2) {
        if (this.immediateMode.shapeMode === u.QUADS && this.immediateMode.geometry.vertices.length % 6 == 3)
          for (var r2 in d) {
            var o2 = d[r2], r2 = this.immediateMode.geometry[r2];
            r2.push.apply(r2, c(r2.slice(r2.length - 3 * o2, r2.length - 2 * o2)).concat(c(r2.slice(r2.length - o2, r2.length))));
          }
        var n2, s2, i3 = n2 = s2 = 0, a2 = (3 === arguments.length ? i3 = arguments[2] : 4 === arguments.length ? (n2 = arguments[2], s2 = arguments[3]) : 5 === arguments.length && (i3 = arguments[2], n2 = arguments[3], s2 = arguments[4]), new l.default.Vector(e2, t2, i3)), a2 = (this.immediateMode.geometry.vertices.push(a2), this.immediateMode.geometry.vertexNormals.push(this._currentNormal), this.curFillColor || [0.5, 0.5, 0.5, 1]);
        return this.immediateMode.geometry.vertexColors.push(a2[0], a2[1], a2[2], a2[3]), this.textureMode === u.IMAGE && (null !== this._tex ? 0 < this._tex.width && 0 < this._tex.height && (n2 /= this._tex.width, s2 /= this._tex.height) : null === this._tex && 4 <= arguments.length && console.warn("You must first call texture() before using vertex() with image based u and v coordinates")), this.immediateMode.geometry.uvs.push(n2, s2), this.immediateMode._bezierVertex[0] = e2, this.immediateMode._bezierVertex[1] = t2, this.immediateMode._bezierVertex[2] = i3, this.immediateMode._quadraticVertex[0] = e2, this.immediateMode._quadraticVertex[1] = t2, this.immediateMode._quadraticVertex[2] = i3, this;
      }, l.default.RendererGL.prototype.normal = function(e2, t2, r2) {
        return e2 instanceof l.default.Vector ? this._currentNormal = e2 : this._currentNormal = new l.default.Vector(e2, t2, r2), this;
      }, l.default.RendererGL.prototype.endShape = function(e2, t2, r2, o2, n2, s2) {
        return this.immediateMode.shapeMode === u.POINTS ? this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point) : (this._processVertices.apply(this, arguments), this._doFill && 1 < this.immediateMode.geometry.vertices.length && this._drawImmediateFill(), this._doStroke && 1 < this.immediateMode.geometry.lineVertices.length && this._drawImmediateStroke(), this.isBezier = false, this.isQuadratic = false, this.isCurve = false, this.immediateMode._bezierVertex.length = 0, this.immediateMode._quadraticVertex.length = 0, this.immediateMode._curveVertex.length = 0), this;
      }, l.default.RendererGL.prototype._processVertices = function(e2) {
        var t2;
        0 !== this.immediateMode.geometry.vertices.length && (t2 = this._doStroke && this.drawMode !== u.TEXTURE, e2 = e2 === u.CLOSE, t2 && (this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, e2), this.immediateMode.geometry._edgesToVertices()), t2 = this.immediateMode.shapeMode === u.TESS, (this.isBezier || this.isQuadratic || this.isCurve || t2) && this.immediateMode.shapeMode !== u.LINES && this._tesselateShape());
      }, l.default.RendererGL.prototype._calculateEdges = function(e2, t2, r2) {
        var o2 = [], n2 = 0;
        switch (e2) {
          case u.TRIANGLE_STRIP:
            for (n2 = 0; n2 < t2.length - 2; n2++)
              o2.push([n2, n2 + 1]), o2.push([n2, n2 + 2]);
            o2.push([n2, n2 + 1]);
            break;
          case u.TRIANGLES:
            for (n2 = 0; n2 < t2.length - 2; n2 += 3)
              o2.push([n2, n2 + 1]), o2.push([n2 + 1, n2 + 2]), o2.push([n2 + 2, n2]);
            break;
          case u.LINES:
            for (n2 = 0; n2 < t2.length - 1; n2 += 2)
              o2.push([n2, n2 + 1]);
            break;
          case u.QUADS:
            for (n2 = 0; n2 < t2.length - 5; n2 += 6)
              o2.push([n2, n2 + 1]), o2.push([n2 + 1, n2 + 2]), o2.push([n2 + 3, n2 + 5]), o2.push([n2 + 4, n2 + 5]);
            break;
          case u.QUAD_STRIP:
            for (n2 = 0; n2 < t2.length - 2; n2 += 2)
              o2.push([n2, n2 + 1]), o2.push([n2, n2 + 2]), o2.push([n2 + 1, n2 + 3]);
            o2.push([n2, n2 + 1]);
            break;
          default:
            for (n2 = 0; n2 < t2.length - 1; n2++)
              o2.push([n2, n2 + 1]);
        }
        return r2 && o2.push([t2.length - 1, 0]), o2;
      }, l.default.RendererGL.prototype._tesselateShape = function() {
        for (var r2 = this, e2 = (this.immediateMode.shapeMode = u.TRIANGLES, [this._flatten(this.immediateMode.geometry.vertices.map(function(e3, t3) {
          return [e3.x, e3.y, e3.z, r2.immediateMode.geometry.uvs[2 * t3], r2.immediateMode.geometry.uvs[2 * t3 + 1], r2.immediateMode.geometry.vertexColors[4 * t3], r2.immediateMode.geometry.vertexColors[4 * t3 + 1], r2.immediateMode.geometry.vertexColors[4 * t3 + 2], r2.immediateMode.geometry.vertexColors[4 * t3 + 3], r2.immediateMode.geometry.vertexNormals[t3].x, r2.immediateMode.geometry.vertexNormals[t3].y, r2.immediateMode.geometry.vertexNormals[t3].z];
        }))]), t2 = this._triangulate(e2), o2 = (this.immediateMode.geometry.vertices = [], this.immediateMode.geometry.vertexNormals = [], this.immediateMode.geometry.uvs = [], []), n2 = 0, s2 = t2.length; n2 < s2; n2 += 12)
          o2.push.apply(o2, c(t2.slice(n2 + 5, n2 + 9))), this.normal.apply(this, c(t2.slice(n2 + 9, n2 + 12))), this.vertex.apply(this, c(t2.slice(n2, n2 + 5)));
        this.immediateMode.geometry.vertexColors = o2;
      }, l.default.RendererGL.prototype._drawImmediateFill = function() {
        var e2 = this.GL, t2 = this._getImmediateFillShader(), r2 = (this._setFillUniforms(t2), true), o2 = false, n2 = void 0;
        try {
          for (var s2, i3 = this.immediateMode.buffers.fill[Symbol.iterator](); !(r2 = (s2 = i3.next()).done); r2 = true)
            s2.value._prepareBuffer(this.immediateMode.geometry, t2);
        } catch (e3) {
          o2 = true, n2 = e3;
        } finally {
          try {
            r2 || null == i3.return || i3.return();
          } finally {
            if (o2)
              throw n2;
          }
        }
        this.immediateMode.shapeMode !== u.LINE_STRIP && this.immediateMode.shapeMode !== u.LINES || (this.immediateMode.shapeMode = u.TRIANGLE_FAN), this.immediateMode.shapeMode === u.QUADS ? this.immediateMode.shapeMode = u.TRIANGLES : this.immediateMode.shapeMode === u.QUAD_STRIP && (this.immediateMode.shapeMode = u.TRIANGLE_STRIP), this._applyColorBlend(this.curFillColor), e2.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length), t2.unbindShader();
      }, l.default.RendererGL.prototype._drawImmediateStroke = function() {
        var e2 = this.GL, t2 = this._getImmediateStrokeShader(), r2 = (this._setStrokeUniforms(t2), true), o2 = false, n2 = void 0;
        try {
          for (var s2, i3 = this.immediateMode.buffers.stroke[Symbol.iterator](); !(r2 = (s2 = i3.next()).done); r2 = true)
            s2.value._prepareBuffer(this.immediateMode.geometry, t2);
        } catch (e3) {
          o2 = true, n2 = e3;
        } finally {
          try {
            r2 || null == i3.return || i3.return();
          } finally {
            if (o2)
              throw n2;
          }
        }
        this._applyColorBlend(this.curStrokeColor), e2.drawArrays(e2.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length), t2.unbindShader();
      }, l.default.RendererGL);
      r.default = n;
    }, { "../core/constants": 256, "../core/main": 267, "./p5.RenderBuffer": 318, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.map": 161, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 320: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.some"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.uint16-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.some"), e("core-js/modules/es.object.keys"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.uint16-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var a = (n = e("../core/main")) && n.__esModule ? n : { default: n };
      e("./p5.RendererGL"), e("./p5.RenderBuffer");
      var o = 0, n = (a.default.RendererGL.prototype._initBufferDefaults = function(e2) {
        var t2;
        return this._freeBuffers(e2), 1e3 < ++o && (t2 = Object.keys(this.retainedMode.geometry)[0], delete this.retainedMode.geometry[t2], o--), this.retainedMode.geometry[e2] = {};
      }, a.default.RendererGL.prototype._freeBuffers = function(e2) {
        var a2, l = this.retainedMode.geometry[e2];
        function t2(e3) {
          var t3 = true, r2 = false, o2 = void 0;
          try {
            for (var n2, s2 = e3[Symbol.iterator](); !(t3 = (n2 = s2.next()).done); t3 = true) {
              var i2 = n2.value;
              l[i2.dst] && (a2.deleteBuffer(l[i2.dst]), l[i2.dst] = null);
            }
          } catch (e4) {
            r2 = true, o2 = e4;
          } finally {
            try {
              t3 || null == s2.return || s2.return();
            } finally {
              if (r2)
                throw o2;
            }
          }
        }
        l && (delete this.retainedMode.geometry[e2], o--, a2 = this.GL, l.indexBuffer && a2.deleteBuffer(l.indexBuffer), t2(this.retainedMode.buffers.stroke), t2(this.retainedMode.buffers.fill));
      }, a.default.RendererGL.prototype.createBuffers = function(e2, t2) {
        var r2, o2, n2, s2 = this.GL, e2 = this._initBufferDefaults(e2), i2 = (e2.model = t2, e2.indexBuffer);
        return t2.faces.length ? (i2 = i2 || (e2.indexBuffer = s2.createBuffer()), n2 = (o2 = (r2 = a.default.RendererGL.prototype._flatten(t2.faces)).some(function(e3) {
          return 65535 < e3;
        })) ? Uint32Array : Uint16Array, this._bindBuffer(i2, s2.ELEMENT_ARRAY_BUFFER, r2, n2), e2.indexBufferType = o2 ? s2.UNSIGNED_INT : s2.UNSIGNED_SHORT, e2.vertexCount = 3 * t2.faces.length) : (i2 && (s2.deleteBuffer(i2), e2.indexBuffer = null), e2.vertexCount = t2.vertices ? t2.vertices.length : 0), e2.lineVertexCount = t2.lineVertices ? t2.lineVertices.length : 0, e2;
      }, a.default.RendererGL.prototype.drawBuffers = function(e2) {
        var t2 = this.GL, r2 = this.retainedMode.geometry[e2];
        if (this._doStroke && 0 < r2.lineVertexCount) {
          var o2 = this._getRetainedStrokeShader(), n2 = (this._setStrokeUniforms(o2), true), s2 = false, i2 = void 0;
          try {
            for (var a2, l = this.retainedMode.buffers.stroke[Symbol.iterator](); !(n2 = (a2 = l.next()).done); n2 = true)
              a2.value._prepareBuffer(r2, o2);
          } catch (e3) {
            s2 = true, i2 = e3;
          } finally {
            try {
              n2 || null == l.return || l.return();
            } finally {
              if (s2)
                throw i2;
            }
          }
          this._applyColorBlend(this.curStrokeColor), this._drawArrays(t2.TRIANGLES, e2), o2.unbindShader();
        }
        if (this._doFill) {
          var u = this._getRetainedFillShader(), c = (this._setFillUniforms(u), true), s2 = false, i2 = void 0;
          try {
            for (var d, f = this.retainedMode.buffers.fill[Symbol.iterator](); !(c = (d = f.next()).done); c = true)
              d.value._prepareBuffer(r2, u);
          } catch (e3) {
            s2 = true, i2 = e3;
          } finally {
            try {
              c || null == f.return || f.return();
            } finally {
              if (s2)
                throw i2;
            }
          }
          r2.indexBuffer && this._bindBuffer(r2.indexBuffer, t2.ELEMENT_ARRAY_BUFFER), this._applyColorBlend(this.curFillColor), this._drawElements(t2.TRIANGLES, e2), u.unbindShader();
        }
        return this;
      }, a.default.RendererGL.prototype.drawBuffersScaled = function(e2, t2, r2, o2) {
        var n2 = this.uMVMatrix.copy();
        try {
          this.uMVMatrix.scale(t2, r2, o2), this.drawBuffers(e2);
        } finally {
          this.uMVMatrix = n2;
        }
      }, a.default.RendererGL.prototype._drawArrays = function(e2, t2) {
        return this.GL.drawArrays(e2, 0, this.retainedMode.geometry[t2].lineVertexCount), this;
      }, a.default.RendererGL.prototype._drawElements = function(e2, t2) {
        var t2 = this.retainedMode.geometry[t2], r2 = this.GL;
        if (t2.indexBuffer) {
          if (t2.indexBufferType === r2.UNSIGNED_INT && !r2.getExtension("OES_element_index_uint"))
            throw new Error("Unable to render a 3d model with > 65535 triangles. Your web browser does not support the WebGL Extension OES_element_index_uint.");
          r2.drawElements(r2.TRIANGLES, t2.vertexCount, t2.indexBufferType, 0);
        } else
          r2.drawArrays(e2 || r2.TRIANGLES, 0, t2.vertexCount);
      }, a.default.RendererGL.prototype._drawPoints = function(e2, t2) {
        var r2 = this.GL, o2 = this._getImmediatePointShader();
        this._setPointUniforms(o2), this._bindBuffer(t2, r2.ARRAY_BUFFER, this._vToNArray(e2), Float32Array, r2.STATIC_DRAW), o2.enableAttrib(o2.attributes.aPosition, 3), r2.drawArrays(r2.Points, 0, e2.length), o2.unbindShader();
      }, a.default.RendererGL);
      r.default = n;
    }, { "../core/main": 267, "./p5.RenderBuffer": 318, "./p5.RendererGL": 321, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.some": 163, "core-js/modules/es.object.keys": 176, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.float32-array": 203, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint16-array": 224, "core-js/modules/es.typed-array.uint32-array": 225, "core-js/modules/web.dom-collections.iterator": 230 }], 321: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.float64-array"), e("core-js/modules/es.typed-array.int16-array"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint16-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.concat"), e("core-js/modules/es.array.fill"), e("core-js/modules/es.array.filter"), e("core-js/modules/es.array.from"), e("core-js/modules/es.array.includes"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.object.assign"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.to-string"), e("core-js/modules/es.string.includes"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.float32-array"), e("core-js/modules/es.typed-array.float64-array"), e("core-js/modules/es.typed-array.int16-array"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.uint16-array"), e("core-js/modules/es.typed-array.uint32-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var l = u(e("../core/main")), s2 = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants")), n = u(e("libtess"));
      e("./p5.Shader"), e("./p5.Camera"), e("../core/p5.Renderer"), e("./p5.Matrix"), e("path");
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      function u(e2) {
        return e2 && e2.__esModule ? e2 : { default: e2 };
      }
      function c(e2) {
        return function(e3) {
          if (Array.isArray(e3)) {
            for (var t2 = 0, r2 = new Array(e3.length); t2 < e3.length; t2++)
              r2[t2] = e3[t2];
            return r2;
          }
        }(e2) || function(e3) {
          if (Symbol.iterator in Object(e3) || "[object Arguments]" === Object.prototype.toString.call(e3))
            return Array.from(e3);
        }(e2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      var e = "precision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\n\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];	\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\n  return lr;\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n", d = { immediateVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n", vertexColorVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n", vertexColorFrag: "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}", normalVert: "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n}\n", normalFrag: "precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}", basicFrag: "precision mediump float;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}", lightVert: e + "// include lighting.glgl\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n}\n", lightTextureFrag: "precision highp float;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\n  }\n}", phongVert: "precision highp float;\nprecision highp int;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n}\n", phongFrag: e + "// include lighting.glsl\nprecision highp float;\nprecision highp int;\n\nuniform vec4 uSpecularMatColor;\nuniform vec4 uAmbientMatColor;\nuniform vec4 uEmissiveMatColor;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  // Calculating final color as result of all lights (plus emissive term).\n\n  gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n  gl_FragColor.rgb = diffuse * gl_FragColor.rgb + \n                    vAmbientColor * uAmbientMatColor.rgb + \n                    specular * uSpecularMatColor.rgb + \n                    uEmissiveMatColor.rgb;\n}", fontVert: "precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord;\n  w = gl_Position.w;\n}\n", fontFrag: "#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n	#define int float\n	#define ivec2 vec2\n	#define INT(x) float(x)\n\n	int ifloor(float v) { return floor(v); }\n	ivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n	precision highp int;\n	#define INT(x) x\n\n	int ifloor(float v) { return int(v); }\n	int ifloor(int v) { return v; }\n	ivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = uMaterialColor;\n  gl_FragColor.a *= saturate(max(antialias, cover));\n}", lineVert: "/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\n\nattribute vec4 aPosition;\nattribute vec4 aDirection;\n  \nvoid main() {\n  // using a scale <1 moves the lines towards the camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  vec3 scale = vec3(0.9995);\n\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posq.xyz = posq.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 q = uProjectionMatrix * posq;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\n\n  // flip tangent to normal (it's already normalized)\n  vec2 normal = vec2(-tangent.y, tangent.x);\n\n  float thickness = aDirection.w * uStrokeWeight;\n  vec2 offset = normal * thickness / 2.0;\n\n  vec2 curPerspScale;\n\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n    // invert Y, projections in Processing invert Y\n    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n}\n", lineFrag: "precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\n\nvoid main() {\n  gl_FragColor = uMaterialColor;\n}", pointVert: "attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n	vec4 positionVec4 =  vec4(aPosition, 1.0);\n	gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n	gl_PointSize = uPointSize;\n	vStrokeWeight = uPointSize;\n}", pointFrag: "precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n	float mask = 0.0;\n\n	// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n	mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n	// if strokeWeight is 1 or less lets just draw a square\n	// this prevents weird artifacting from carving circles when our points are really small\n	// if strokeWeight is larger than 1, we just use it as is\n\n	mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n	// throw away the borders of the mask\n    // otherwise we get weird alpha blending issues\n\n	if(mask > 0.98){\n      discard;\n  	}\n\n  	gl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\n}" }, e = (l.default.RendererGL = function(e2, t2, r2, o2) {
        return l.default.Renderer.call(this, e2, t2, r2), this._setAttributeDefaults(t2), this._initContext(), this.isP3D = true, this.GL = this.drawingContext, this._pInst._setProperty("drawingContext", this.drawingContext), this._isErasing = false, this._enableLighting = false, this.ambientLightColors = [], this.specularColors = [1, 1, 1], this.directionalLightDirections = [], this.directionalLightDiffuseColors = [], this.directionalLightSpecularColors = [], this.pointLightPositions = [], this.pointLightDiffuseColors = [], this.pointLightSpecularColors = [], this.spotLightPositions = [], this.spotLightDirections = [], this.spotLightDiffuseColors = [], this.spotLightSpecularColors = [], this.spotLightAngle = [], this.spotLightConc = [], this.drawMode = s2.FILL, this.curFillColor = this._cachedFillStyle = [1, 1, 1, 1], this.curAmbientColor = this._cachedFillStyle = [0, 0, 0, 0], this.curSpecularColor = this._cachedFillStyle = [0, 0, 0, 0], this.curEmissiveColor = this._cachedFillStyle = [0, 0, 0, 0], this.curStrokeColor = this._cachedStrokeStyle = [0, 0, 0, 1], this.curBlendMode = s2.BLEND, this._cachedBlendMode = void 0, this.blendExt = this.GL.getExtension("EXT_blend_minmax"), this._isBlending = false, this._useSpecularMaterial = false, this._useEmissiveMaterial = false, this._useNormalMaterial = false, this._useShininess = 1, this._tint = [255, 255, 255, 255], this.constantAttenuation = 1, this.linearAttenuation = 0, this.quadraticAttenuation = 0, this.uMVMatrix = new l.default.Matrix(), this.uPMatrix = new l.default.Matrix(), this.uNMatrix = new l.default.Matrix("mat3"), this._currentNormal = new l.default.Vector(0, 0, 1), this._curCamera = new l.default.Camera(this), this._curCamera._computeCameraDefaultSettings(), this._curCamera._setDefaultCamera(), this._defaultLightShader = void 0, this._defaultImmediateModeShader = void 0, this._defaultNormalShader = void 0, this._defaultColorShader = void 0, this._defaultPointShader = void 0, this.userFillShader = void 0, this.userStrokeShader = void 0, this.userPointShader = void 0, this.retainedMode = { geometry: {}, buffers: { stroke: [new l.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten), new l.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)], fill: [new l.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new l.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray), new l.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this), new l.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this), new l.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)], text: [new l.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new l.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)] } }, this.immediateMode = { geometry: new l.default.Geometry(), shapeMode: s2.TRIANGLE_FAN, _bezierVertex: [], _quadraticVertex: [], _curveVertex: [], buffers: { fill: [new l.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new l.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray), new l.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this), new l.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this), new l.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)], stroke: [new l.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten), new l.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)], point: this.GL.createBuffer() } }, this.pointSize = 5, this.curStrokeWeight = 1, this.textures = [], this.textureMode = s2.IMAGE, this.textureWrapX = s2.CLAMP, this.textureWrapY = s2.CLAMP, this._tex = null, this._curveTightness = 6, this._lookUpTableBezier = [], this._lookUpTableQuadratic = [], this._lutBezierDetail = 0, this._lutQuadraticDetail = 0, this._tessy = this._initTessy(), this.fontInfos = {}, this._curShader = void 0, this;
      }, l.default.RendererGL.prototype = Object.create(l.default.Renderer.prototype), l.default.RendererGL.prototype._setAttributeDefaults = function(e2) {
        var t2 = { alpha: false, depth: true, stencil: true, antialias: navigator.userAgent.toLowerCase().includes("safari"), premultipliedAlpha: false, preserveDrawingBuffer: true, perPixelLighting: true };
        null === e2._glAttributes ? e2._glAttributes = t2 : e2._glAttributes = Object.assign(t2, e2._glAttributes);
      }, l.default.RendererGL.prototype._initContext = function() {
        if (this.drawingContext = this.canvas.getContext("webgl", this._pInst._glAttributes) || this.canvas.getContext("experimental-webgl", this._pInst._glAttributes), null === this.drawingContext)
          throw new Error("Error creating webgl context");
        var e2 = this.drawingContext;
        e2.enable(e2.DEPTH_TEST), e2.depthFunc(e2.LEQUAL), e2.viewport(0, 0, e2.drawingBufferWidth, e2.drawingBufferHeight), this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);
      }, l.default.RendererGL.prototype._resetContext = function(e2, t2) {
        var r2, o2 = this.width, n2 = this.height, s3 = this.canvas.id, i3 = this._pInst instanceof l.default.Graphics, s3 = (i3 ? ((r2 = this._pInst).canvas.parentNode.removeChild(r2.canvas), r2.canvas = document.createElement("canvas"), (r2._pInst._userNode || document.body).appendChild(r2.canvas), l.default.Element.call(r2, r2.canvas, r2._pInst), r2.width = o2, r2.height = n2) : ((r2 = this.canvas) && r2.parentNode.removeChild(r2), (r2 = document.createElement("canvas")).id = s3, (this._pInst._userNode || document.body).appendChild(r2), this._pInst.canvas = r2, this.canvas = r2), new l.default.RendererGL(this._pInst.canvas, this._pInst, !i3));
        this._pInst._setProperty("_renderer", s3), s3.resize(o2, n2), s3._applyDefaults(), i3 || this._pInst._elements.push(s3), "function" == typeof t2 && setTimeout(function() {
          t2.apply(window._renderer, e2);
        }, 0);
      }, l.default.prototype.setAttributes = function(e2, t2) {
        if (void 0 === this._glAttributes)
          console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");
        else {
          var r2 = true;
          if (void 0 !== t2 ? (null === this._glAttributes && (this._glAttributes = {}), this._glAttributes[e2] !== t2 && (this._glAttributes[e2] = t2, r2 = false)) : e2 instanceof Object && this._glAttributes !== e2 && (this._glAttributes = e2, r2 = false), this._renderer.isP3D && !r2) {
            if (!this._setupDone) {
              for (var o2 in this._renderer.retainedMode.geometry)
                if (this._renderer.retainedMode.geometry.hasOwnProperty(o2))
                  return void console.error("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");
            }
            this.push(), this._renderer._resetContext(), this.pop(), this._renderer._curCamera && (this._renderer._curCamera._renderer = this._renderer);
          }
        }
      }, l.default.RendererGL.prototype._update = function() {
        this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0], this._curCamera.cameraMatrix.mat4[1], this._curCamera.cameraMatrix.mat4[2], this._curCamera.cameraMatrix.mat4[3], this._curCamera.cameraMatrix.mat4[4], this._curCamera.cameraMatrix.mat4[5], this._curCamera.cameraMatrix.mat4[6], this._curCamera.cameraMatrix.mat4[7], this._curCamera.cameraMatrix.mat4[8], this._curCamera.cameraMatrix.mat4[9], this._curCamera.cameraMatrix.mat4[10], this._curCamera.cameraMatrix.mat4[11], this._curCamera.cameraMatrix.mat4[12], this._curCamera.cameraMatrix.mat4[13], this._curCamera.cameraMatrix.mat4[14], this._curCamera.cameraMatrix.mat4[15]), this.ambientLightColors.length = 0, this.specularColors = [1, 1, 1], this.directionalLightDirections.length = 0, this.directionalLightDiffuseColors.length = 0, this.directionalLightSpecularColors.length = 0, this.pointLightPositions.length = 0, this.pointLightDiffuseColors.length = 0, this.pointLightSpecularColors.length = 0, this.spotLightPositions.length = 0, this.spotLightDirections.length = 0, this.spotLightDiffuseColors.length = 0, this.spotLightSpecularColors.length = 0, this.spotLightAngle.length = 0, this.spotLightConc.length = 0, this._enableLighting = false, this._tint = [255, 255, 255, 255], this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
      }, l.default.RendererGL.prototype.background = function() {
        var e2 = (e2 = this._pInst).color.apply(e2, arguments), t2 = e2.levels[0] / 255, r2 = e2.levels[1] / 255, o2 = e2.levels[2] / 255, e2 = e2.levels[3] / 255;
        this.GL.clearColor(t2, r2, o2, e2), this.GL.clear(this.GL.COLOR_BUFFER_BIT);
      }, l.default.RendererGL.prototype.fill = function(e2, t2, r2, o2) {
        var n2 = l.default.prototype.color.apply(this._pInst, arguments);
        this.curFillColor = n2._array, this.drawMode = s2.FILL, this._useNormalMaterial = false, this._tex = null;
      }, l.default.RendererGL.prototype.stroke = function(e2, t2, r2, o2) {
        arguments[3] = 255;
        var n2 = l.default.prototype.color.apply(this._pInst, arguments);
        this.curStrokeColor = n2._array;
      }, l.default.RendererGL.prototype.strokeCap = function(e2) {
        console.error("Sorry, strokeCap() is not yet implemented in WEBGL mode");
      }, l.default.RendererGL.prototype.strokeJoin = function(e2) {
        console.error("Sorry, strokeJoin() is not yet implemented in WEBGL mode");
      }, l.default.RendererGL.prototype.filter = function(e2) {
        console.error("filter() does not work in WEBGL mode");
      }, l.default.RendererGL.prototype.blendMode = function(e2) {
        e2 === s2.DARKEST || e2 === s2.LIGHTEST || e2 === s2.ADD || e2 === s2.BLEND || e2 === s2.SUBTRACT || e2 === s2.SCREEN || e2 === s2.EXCLUSION || e2 === s2.REPLACE || e2 === s2.MULTIPLY || e2 === s2.REMOVE ? this.curBlendMode = e2 : e2 !== s2.BURN && e2 !== s2.OVERLAY && e2 !== s2.HARD_LIGHT && e2 !== s2.SOFT_LIGHT && e2 !== s2.DODGE || console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");
      }, l.default.RendererGL.prototype.erase = function(e2, t2) {
        this._isErasing || (this._applyBlendMode(s2.REMOVE), this._isErasing = true, this._cachedFillStyle = this.curFillColor.slice(), this.curFillColor = [1, 1, 1, e2 / 255], this._cachedStrokeStyle = this.curStrokeColor.slice(), this.curStrokeColor = [1, 1, 1, t2 / 255]);
      }, l.default.RendererGL.prototype.noErase = function() {
        this._isErasing && (this._isErasing = false, this.curFillColor = this._cachedFillStyle.slice(), this.curStrokeColor = this._cachedStrokeStyle.slice(), this.blendMode(this._cachedBlendMode));
      }, l.default.RendererGL.prototype.strokeWeight = function(e2) {
        this.curStrokeWeight !== e2 && (this.pointSize = e2, this.curStrokeWeight = e2);
      }, l.default.RendererGL.prototype._getPixel = function(e2, t2) {
        var r2 = new Uint8Array(4);
        return this.drawingContext.readPixels(e2, t2, 1, 1, this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE, r2), [r2[0], r2[1], r2[2], r2[3]];
      }, l.default.RendererGL.prototype.loadPixels = function() {
        var e2, t2 = this._pixelsState;
        true !== this._pInst._glAttributes.preserveDrawingBuffer ? console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.") : (t2 = t2.pixels, e2 = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4, t2 instanceof Uint8Array && t2.length === e2 || (t2 = new Uint8Array(e2), this._pixelsState._setProperty("pixels", t2)), e2 = this._pInst._pixelDensity, this.GL.readPixels(0, 0, this.width * e2, this.height * e2, this.GL.RGBA, this.GL.UNSIGNED_BYTE, t2));
      }, l.default.RendererGL.prototype.geometryInHash = function(e2) {
        return void 0 !== this.retainedMode.geometry[e2];
      }, l.default.RendererGL.prototype.resize = function(e2, t2) {
        l.default.Renderer.prototype.resize.call(this, e2, t2), this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight), this._viewport = this.GL.getParameter(this.GL.VIEWPORT), this._curCamera._resize();
        e2 = this._pixelsState;
        void 0 !== e2.pixels && e2._setProperty("pixels", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4));
      }, l.default.RendererGL.prototype.clear = function() {
        this.GL.clearColor((arguments.length <= 0 ? void 0 : arguments[0]) || 0, (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0, (arguments.length <= 3 ? void 0 : arguments[3]) || 0), this.GL.clearDepth(1), this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);
      }, l.default.RendererGL.prototype.applyMatrix = function(e2, t2, r2, o2, n2, s3) {
        16 === arguments.length ? l.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments) : this.uMVMatrix.apply([e2, t2, 0, 0, r2, o2, 0, 0, 0, 0, 1, 0, n2, s3, 0, 1]);
      }, l.default.RendererGL.prototype.translate = function(e2, t2, r2) {
        return e2 instanceof l.default.Vector && (r2 = e2.z, t2 = e2.y, e2 = e2.x), this.uMVMatrix.translate([e2, t2, r2]), this;
      }, l.default.RendererGL.prototype.scale = function(e2, t2, r2) {
        return this.uMVMatrix.scale(e2, t2, r2), this;
      }, l.default.RendererGL.prototype.rotate = function(e2, t2) {
        return void 0 === t2 ? this.rotateZ(e2) : (l.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments), this);
      }, l.default.RendererGL.prototype.rotateX = function(e2) {
        return this.rotate(e2, 1, 0, 0), this;
      }, l.default.RendererGL.prototype.rotateY = function(e2) {
        return this.rotate(e2, 0, 1, 0), this;
      }, l.default.RendererGL.prototype.rotateZ = function(e2) {
        return this.rotate(e2, 0, 0, 1), this;
      }, l.default.RendererGL.prototype.push = function() {
        var e2 = l.default.Renderer.prototype.push.apply(this), t2 = e2.properties;
        return t2.uMVMatrix = this.uMVMatrix.copy(), t2.uPMatrix = this.uPMatrix.copy(), t2._curCamera = this._curCamera, this._curCamera = this._curCamera.copy(), t2.ambientLightColors = this.ambientLightColors.slice(), t2.specularColors = this.specularColors.slice(), t2.directionalLightDirections = this.directionalLightDirections.slice(), t2.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice(), t2.directionalLightSpecularColors = this.directionalLightSpecularColors.slice(), t2.pointLightPositions = this.pointLightPositions.slice(), t2.pointLightDiffuseColors = this.pointLightDiffuseColors.slice(), t2.pointLightSpecularColors = this.pointLightSpecularColors.slice(), t2.spotLightPositions = this.spotLightPositions.slice(), t2.spotLightDirections = this.spotLightDirections.slice(), t2.spotLightDiffuseColors = this.spotLightDiffuseColors.slice(), t2.spotLightSpecularColors = this.spotLightSpecularColors.slice(), t2.spotLightAngle = this.spotLightAngle.slice(), t2.spotLightConc = this.spotLightConc.slice(), t2.userFillShader = this.userFillShader, t2.userStrokeShader = this.userStrokeShader, t2.userPointShader = this.userPointShader, t2.pointSize = this.pointSize, t2.curStrokeWeight = this.curStrokeWeight, t2.curStrokeColor = this.curStrokeColor, t2.curFillColor = this.curFillColor, t2.curAmbientColor = this.curAmbientColor, t2.curSpecularColor = this.curSpecularColor, t2.curEmissiveColor = this.curEmissiveColor, t2._useSpecularMaterial = this._useSpecularMaterial, t2._useEmissiveMaterial = this._useEmissiveMaterial, t2._useShininess = this._useShininess, t2.constantAttenuation = this.constantAttenuation, t2.linearAttenuation = this.linearAttenuation, t2.quadraticAttenuation = this.quadraticAttenuation, t2._enableLighting = this._enableLighting, t2._useNormalMaterial = this._useNormalMaterial, t2._tex = this._tex, t2.drawMode = this.drawMode, t2._currentNormal = this._currentNormal, t2.curBlendMode = this.curBlendMode, e2;
      }, l.default.RendererGL.prototype.resetMatrix = function() {
        return this.uMVMatrix = l.default.Matrix.identity(this._pInst), this;
      }, l.default.RendererGL.prototype._getImmediateStrokeShader = function() {
        var e2 = this.userStrokeShader;
        return e2 && e2.isStrokeShader() ? e2 : this._getLineShader();
      }, l.default.RendererGL.prototype._getRetainedStrokeShader = l.default.RendererGL.prototype._getImmediateStrokeShader, l.default.RendererGL.prototype._getImmediateFillShader = function() {
        var e2 = this.userFillShader;
        if (this._useNormalMaterial && (!e2 || !e2.isNormalShader()))
          return this._getNormalShader();
        if (this._enableLighting) {
          if (!e2 || !e2.isLightShader())
            return this._getLightShader();
        } else if (this._tex) {
          if (!e2 || !e2.isTextureShader())
            return this._getLightShader();
        } else if (!e2)
          return this._getImmediateModeShader();
        return e2;
      }, l.default.RendererGL.prototype._getRetainedFillShader = function() {
        if (this._useNormalMaterial)
          return this._getNormalShader();
        var e2 = this.userFillShader;
        if (this._enableLighting) {
          if (!e2 || !e2.isLightShader())
            return this._getLightShader();
        } else if (this._tex) {
          if (!e2 || !e2.isTextureShader())
            return this._getLightShader();
        } else if (!e2)
          return this._getColorShader();
        return e2;
      }, l.default.RendererGL.prototype._getImmediatePointShader = function() {
        var e2 = this.userPointShader;
        return e2 && e2.isPointShader() ? e2 : this._getPointShader();
      }, l.default.RendererGL.prototype._getRetainedLineShader = l.default.RendererGL.prototype._getImmediateLineShader, l.default.RendererGL.prototype._getLightShader = function() {
        return this._defaultLightShader || (this._pInst._glAttributes.perPixelLighting ? this._defaultLightShader = new l.default.Shader(this, d.phongVert, d.phongFrag) : this._defaultLightShader = new l.default.Shader(this, d.lightVert, d.lightTextureFrag)), this._defaultLightShader;
      }, l.default.RendererGL.prototype._getImmediateModeShader = function() {
        return this._defaultImmediateModeShader || (this._defaultImmediateModeShader = new l.default.Shader(this, d.immediateVert, d.vertexColorFrag)), this._defaultImmediateModeShader;
      }, l.default.RendererGL.prototype._getNormalShader = function() {
        return this._defaultNormalShader || (this._defaultNormalShader = new l.default.Shader(this, d.normalVert, d.normalFrag)), this._defaultNormalShader;
      }, l.default.RendererGL.prototype._getColorShader = function() {
        return this._defaultColorShader || (this._defaultColorShader = new l.default.Shader(this, d.normalVert, d.basicFrag)), this._defaultColorShader;
      }, l.default.RendererGL.prototype._getPointShader = function() {
        return this._defaultPointShader || (this._defaultPointShader = new l.default.Shader(this, d.pointVert, d.pointFrag)), this._defaultPointShader;
      }, l.default.RendererGL.prototype._getLineShader = function() {
        return this._defaultLineShader || (this._defaultLineShader = new l.default.Shader(this, d.lineVert, d.lineFrag)), this._defaultLineShader;
      }, l.default.RendererGL.prototype._getFontShader = function() {
        return this._defaultFontShader || (this.GL.getExtension("OES_standard_derivatives"), this._defaultFontShader = new l.default.Shader(this, d.fontVert, d.fontFrag)), this._defaultFontShader;
      }, l.default.RendererGL.prototype._getEmptyTexture = function() {
        var e2;
        return this._emptyTexture || ((e2 = new l.default.Image(1, 1)).set(0, 0, 255), this._emptyTexture = new l.default.Texture(this, e2)), this._emptyTexture;
      }, l.default.RendererGL.prototype.getTexture = function(e2) {
        var t2 = this.textures, r2 = true, o2 = false, n2 = void 0;
        try {
          for (var s3, i3 = t2[Symbol.iterator](); !(r2 = (s3 = i3.next()).done); r2 = true) {
            var a2 = s3.value;
            if (a2.src === e2)
              return a2;
          }
        } catch (e3) {
          o2 = true, n2 = e3;
        } finally {
          try {
            r2 || null == i3.return || i3.return();
          } finally {
            if (o2)
              throw n2;
          }
        }
        o2 = new l.default.Texture(this, e2);
        return t2.push(o2), o2;
      }, l.default.RendererGL.prototype._setStrokeUniforms = function(e2) {
        e2.bindShader(), e2.setUniform("uMaterialColor", this.curStrokeColor), e2.setUniform("uStrokeWeight", this.curStrokeWeight);
      }, l.default.RendererGL.prototype._setFillUniforms = function(e2) {
        e2.bindShader(), e2.setUniform("uMaterialColor", this.curFillColor), e2.setUniform("isTexture", !!this._tex), this._tex && e2.setUniform("uSampler", this._tex), e2.setUniform("uTint", this._tint), e2.setUniform("uAmbientMatColor", this.curAmbientColor), e2.setUniform("uSpecularMatColor", this.curSpecularColor), e2.setUniform("uEmissiveMatColor", this.curEmissiveColor), e2.setUniform("uSpecular", this._useSpecularMaterial), e2.setUniform("uEmissive", this._useEmissiveMaterial), e2.setUniform("uShininess", this._useShininess), e2.setUniform("uUseLighting", this._enableLighting);
        var t2 = this.pointLightDiffuseColors.length / 3, t2 = (e2.setUniform("uPointLightCount", t2), e2.setUniform("uPointLightLocation", this.pointLightPositions), e2.setUniform("uPointLightDiffuseColors", this.pointLightDiffuseColors), e2.setUniform("uPointLightSpecularColors", this.pointLightSpecularColors), this.directionalLightDiffuseColors.length / 3), t2 = (e2.setUniform("uDirectionalLightCount", t2), e2.setUniform("uLightingDirection", this.directionalLightDirections), e2.setUniform("uDirectionalDiffuseColors", this.directionalLightDiffuseColors), e2.setUniform("uDirectionalSpecularColors", this.directionalLightSpecularColors), this.ambientLightColors.length / 3), t2 = (e2.setUniform("uAmbientLightCount", t2), e2.setUniform("uAmbientColor", this.ambientLightColors), this.spotLightDiffuseColors.length / 3);
        e2.setUniform("uSpotLightCount", t2), e2.setUniform("uSpotLightAngle", this.spotLightAngle), e2.setUniform("uSpotLightConc", this.spotLightConc), e2.setUniform("uSpotLightDiffuseColors", this.spotLightDiffuseColors), e2.setUniform("uSpotLightSpecularColors", this.spotLightSpecularColors), e2.setUniform("uSpotLightLocation", this.spotLightPositions), e2.setUniform("uSpotLightDirection", this.spotLightDirections), e2.setUniform("uConstantAttenuation", this.constantAttenuation), e2.setUniform("uLinearAttenuation", this.linearAttenuation), e2.setUniform("uQuadraticAttenuation", this.quadraticAttenuation), e2.bindTextures();
      }, l.default.RendererGL.prototype._setPointUniforms = function(e2) {
        e2.bindShader(), e2.setUniform("uMaterialColor", this.curStrokeColor), e2.setUniform("uPointSize", this.pointSize * this._pInst._pixelDensity);
      }, l.default.RendererGL.prototype._bindBuffer = function(e2, t2, r2, o2, n2) {
        t2 = t2 || this.GL.ARRAY_BUFFER, this.GL.bindBuffer(t2, e2), void 0 !== r2 && (e2 = new (o2 || Float32Array)(r2), this.GL.bufferData(t2, e2, n2 || this.GL.STATIC_DRAW));
      }, l.default.RendererGL.prototype._arraysEqual = function(e2, t2) {
        var r2 = e2.length;
        if (r2 !== t2.length)
          return false;
        for (var o2 = 0; o2 < r2; o2++)
          if (e2[o2] !== t2[o2])
            return false;
        return true;
      }, l.default.RendererGL.prototype._isTypedArray = function(e2) {
        return e2 instanceof Uint32Array;
      }, l.default.RendererGL.prototype._flatten = function(e2) {
        if (0 === e2.length)
          return [];
        var t2;
        if (2e4 < e2.length) {
          for (var r2 = Object.prototype.toString, o2 = [], n2 = e2.slice(), s3 = n2.pop(); "[object Array]" === r2.call(s3) ? n2.push.apply(n2, c(s3)) : o2.push(s3), n2.length && void 0 !== (s3 = n2.pop()); )
            ;
          return o2.reverse(), o2;
        }
        return (t2 = []).concat.apply(t2, c(e2));
      }, l.default.RendererGL.prototype._vToNArray = function(e2) {
        var t2 = [], r2 = true, o2 = false, n2 = void 0;
        try {
          for (var s3, i3 = e2[Symbol.iterator](); !(r2 = (s3 = i3.next()).done); r2 = true) {
            var a2 = s3.value;
            t2.push(a2.x, a2.y, a2.z);
          }
        } catch (e3) {
          o2 = true, n2 = e3;
        } finally {
          try {
            r2 || null == i3.return || i3.return();
          } finally {
            if (o2)
              throw n2;
          }
        }
        return t2;
      }, l.default.prototype._assert3d = function(e2) {
        if (!this._renderer.isP3D)
          throw new Error("".concat(e2, "() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."));
      }, l.default.RendererGL.prototype._initTessy = function() {
        var e2 = new n.default.GluTesselator();
        return e2.gluTessCallback(n.default.gluEnum.GLU_TESS_VERTEX_DATA, function(e3, t2) {
          for (var r2 = 0; r2 < e3.length; r2++)
            t2[t2.length] = e3[r2];
        }), e2.gluTessCallback(n.default.gluEnum.GLU_TESS_BEGIN, function(e3) {
          e3 !== n.default.primitiveType.GL_TRIANGLES && console.log("expected TRIANGLES but got type: ".concat(e3));
        }), e2.gluTessCallback(n.default.gluEnum.GLU_TESS_ERROR, function(e3) {
          console.log("error callback"), console.log("error number: ".concat(e3));
        }), e2.gluTessCallback(n.default.gluEnum.GLU_TESS_COMBINE, function(e3, t2, r2) {
          for (var o2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], n2 = 0; n2 < r2.length; n2++)
            for (var s3 = 0; s3 < o2.length; s3++)
              0 !== r2[n2] && t2[n2] && (o2[s3] += t2[n2][s3] * r2[n2]);
          return o2;
        }), e2.gluTessCallback(n.default.gluEnum.GLU_TESS_EDGE_FLAG, function(e3) {
        }), e2;
      }, l.default.RendererGL.prototype._triangulate = function(e2) {
        this._tessy.gluTessNormal(0, 0, 1);
        var t2 = [];
        this._tessy.gluTessBeginPolygon(t2);
        for (var r2 = 0; r2 < e2.length; r2++) {
          this._tessy.gluTessBeginContour();
          for (var o2 = e2[r2], n2 = 0; n2 < o2.length; n2 += 12) {
            var s3 = o2.slice(n2, n2 + 12);
            this._tessy.gluTessVertex(s3, s3);
          }
          this._tessy.gluTessEndContour();
        }
        return this._tessy.gluTessEndPolygon(), t2;
      }, l.default.RendererGL.prototype._bezierCoefficients = function(e2) {
        var t2 = e2 * e2, r2 = 1 - e2, o2 = r2 * r2;
        return [o2 * r2, 3 * o2 * e2, 3 * r2 * t2, t2 * e2];
      }, l.default.RendererGL.prototype._quadraticCoefficients = function(e2) {
        var t2 = 1 - e2;
        return [t2 * t2, 2 * t2 * e2, e2 * e2];
      }, l.default.RendererGL.prototype._bezierToCatmull = function(e2) {
        return [e2[1], e2[1] + (e2[2] - e2[0]) / this._curveTightness, e2[2] - (e2[3] - e2[1]) / this._curveTightness, e2[2]];
      }, l.default.RendererGL);
      r.default = e;
    }, { "../core/constants": 256, "../core/main": 267, "../core/p5.Renderer": 270, "./p5.Camera": 315, "./p5.Matrix": 317, "./p5.Shader": 322, "core-js/modules/es.array.concat": 149, "core-js/modules/es.array.fill": 152, "core-js/modules/es.array.filter": 153, "core-js/modules/es.array.from": 155, "core-js/modules/es.array.includes": 156, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.object.assign": 172, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.to-string": 182, "core-js/modules/es.string.includes": 185, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.float32-array": 203, "core-js/modules/es.typed-array.float64-array": 204, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.int16-array": 208, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint16-array": 224, "core-js/modules/es.typed-array.uint32-array": 225, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230, libtess: 239, path: 242 }], 322: [function(e, t, r) {
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.index-of"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.array.slice"), e("core-js/modules/es.function.name"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/web.dom-collections.iterator"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var s2 = (e = e("../core/main")) && e.__esModule ? e : { default: e };
      s2.default.Shader = function(e2, t2, r2) {
        this._renderer = e2, this._vertSrc = t2, this._fragSrc = r2, this._vertShader = -1, this._fragShader = -1, this._glProgram = 0, this._loadedAttributes = false, this.attributes = {}, this._loadedUniforms = false, this.uniforms = {}, this._bound = false, this.samplers = [];
      }, s2.default.Shader.prototype.init = function() {
        if (0 === this._glProgram) {
          var e2 = this._renderer.GL;
          if (this._vertShader = e2.createShader(e2.VERTEX_SHADER), e2.shaderSource(this._vertShader, this._vertSrc), e2.compileShader(this._vertShader), !e2.getShaderParameter(this._vertShader, e2.COMPILE_STATUS))
            return console.error("Yikes! An error occurred compiling the vertex shader:".concat(e2.getShaderInfoLog(this._vertShader))), null;
          if (this._fragShader = e2.createShader(e2.FRAGMENT_SHADER), e2.shaderSource(this._fragShader, this._fragSrc), e2.compileShader(this._fragShader), !e2.getShaderParameter(this._fragShader, e2.COMPILE_STATUS))
            return console.error("Darn! An error occurred compiling the fragment shader:".concat(e2.getShaderInfoLog(this._fragShader))), null;
          this._glProgram = e2.createProgram(), e2.attachShader(this._glProgram, this._vertShader), e2.attachShader(this._glProgram, this._fragShader), e2.linkProgram(this._glProgram), e2.getProgramParameter(this._glProgram, e2.LINK_STATUS) || console.error("Snap! Error linking shader program: ".concat(e2.getProgramInfoLog(this._glProgram))), this._loadAttributes(), this._loadUniforms();
        }
        return this;
      }, s2.default.Shader.prototype._loadAttributes = function() {
        if (!this._loadedAttributes) {
          this.attributes = {};
          for (var e2 = this._renderer.GL, t2 = e2.getProgramParameter(this._glProgram, e2.ACTIVE_ATTRIBUTES), r2 = 0; r2 < t2; ++r2) {
            var o = e2.getActiveAttrib(this._glProgram, r2), n = o.name, s3 = e2.getAttribLocation(this._glProgram, n), i2 = {};
            i2.name = n, i2.location = s3, i2.index = r2, i2.type = o.type, i2.size = o.size, this.attributes[n] = i2;
          }
          this._loadedAttributes = true;
        }
      }, s2.default.Shader.prototype._loadUniforms = function() {
        if (!this._loadedUniforms) {
          for (var e2 = this._renderer.GL, t2 = e2.getProgramParameter(this._glProgram, e2.ACTIVE_UNIFORMS), r2 = 0, o = 0; o < t2; ++o) {
            var n = e2.getActiveUniform(this._glProgram, o), s3 = {}, i2 = (s3.location = e2.getUniformLocation(this._glProgram, n.name), s3.size = n.size, n.name);
            1 < n.size && (i2 = i2.substring(0, i2.indexOf("[0]"))), s3.name = i2, s3.type = n.type, s3._cachedData = void 0, s3.type === e2.SAMPLER_2D && (s3.samplerIndex = r2, r2++, this.samplers.push(s3)), s3.isArray = 1 < n.size || s3.type === e2.FLOAT_MAT3 || s3.type === e2.FLOAT_MAT4 || s3.type === e2.FLOAT_VEC2 || s3.type === e2.FLOAT_VEC3 || s3.type === e2.FLOAT_VEC4 || s3.type === e2.INT_VEC2 || s3.type === e2.INT_VEC4 || s3.type === e2.INT_VEC3, this.uniforms[i2] = s3;
          }
          this._loadedUniforms = true;
        }
      }, s2.default.Shader.prototype.compile = function() {
      }, s2.default.Shader.prototype.bindShader = function() {
        this.init(), this._bound || (this.useProgram(), this._bound = true, this._setMatrixUniforms(), this.setUniform("uViewport", this._renderer._viewport));
      }, s2.default.Shader.prototype.unbindShader = function() {
        return this._bound && (this.unbindTextures(), this._bound = false), this;
      }, s2.default.Shader.prototype.bindTextures = function() {
        var e2 = this._renderer.GL, t2 = true, r2 = false, o = void 0;
        try {
          for (var n, s3 = this.samplers[Symbol.iterator](); !(t2 = (n = s3.next()).done); t2 = true) {
            var i2 = n.value, a = i2.texture;
            void 0 === a && (a = this._renderer._getEmptyTexture()), e2.activeTexture(e2.TEXTURE0 + i2.samplerIndex), a.bindTexture(), a.update(), e2.uniform1i(i2.location, i2.samplerIndex);
          }
        } catch (e3) {
          r2 = true, o = e3;
        } finally {
          try {
            t2 || null == s3.return || s3.return();
          } finally {
            if (r2)
              throw o;
          }
        }
      }, s2.default.Shader.prototype.updateTextures = function() {
        var e2 = true, t2 = false, r2 = void 0;
        try {
          for (var o, n = this.samplers[Symbol.iterator](); !(e2 = (o = n.next()).done); e2 = true) {
            var s3 = o.value.texture;
            s3 && s3.update();
          }
        } catch (e3) {
          t2 = true, r2 = e3;
        } finally {
          try {
            e2 || null == n.return || n.return();
          } finally {
            if (t2)
              throw r2;
          }
        }
      }, s2.default.Shader.prototype.unbindTextures = function() {
      }, s2.default.Shader.prototype._setMatrixUniforms = function() {
        var e2 = this._renderer._curCamera.cameraMatrix, t2 = this._renderer.uPMatrix, r2 = this._renderer.uMVMatrix, o = r2.copy();
        o.mult(t2), this.isStrokeShader() && ("default" === this._renderer._curCamera.cameraType ? this.setUniform("uPerspective", 1) : this.setUniform("uPerspective", 0)), this.setUniform("uViewMatrix", e2.mat4), this.setUniform("uProjectionMatrix", t2.mat4), this.setUniform("uModelViewMatrix", r2.mat4), this.setUniform("uModelViewProjectionMatrix", o.mat4), this.uniforms.uNormalMatrix && (this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix), this.setUniform("uNormalMatrix", this._renderer.uNMatrix.mat3));
      }, s2.default.Shader.prototype.useProgram = function() {
        var e2 = this._renderer.GL;
        return this._renderer._curShader !== this && (e2.useProgram(this._glProgram), this._renderer._curShader = this), this;
      }, s2.default.Shader.prototype.setUniform = function(e2, t2) {
        var r2 = this.uniforms[e2];
        if (r2) {
          var o = this._renderer.GL;
          if (r2.isArray) {
            if (r2._cachedData && this._renderer._arraysEqual(r2._cachedData, t2))
              return;
            r2._cachedData = t2.slice(0);
          } else {
            if (r2._cachedData && r2._cachedData === t2)
              return;
            Array.isArray(t2) ? r2._cachedData = t2.slice(0) : r2._cachedData = t2;
          }
          var n = r2.location;
          switch (this.useProgram(), r2.type) {
            case o.BOOL:
              true === t2 ? o.uniform1i(n, 1) : o.uniform1i(n, 0);
              break;
            case o.INT:
              1 < r2.size ? t2.length && o.uniform1iv(n, t2) : o.uniform1i(n, t2);
              break;
            case o.FLOAT:
              1 < r2.size ? t2.length && o.uniform1fv(n, t2) : o.uniform1f(n, t2);
              break;
            case o.FLOAT_MAT3:
              o.uniformMatrix3fv(n, false, t2);
              break;
            case o.FLOAT_MAT4:
              o.uniformMatrix4fv(n, false, t2);
              break;
            case o.FLOAT_VEC2:
              1 < r2.size ? t2.length && o.uniform2fv(n, t2) : o.uniform2f(n, t2[0], t2[1]);
              break;
            case o.FLOAT_VEC3:
              1 < r2.size ? t2.length && o.uniform3fv(n, t2) : o.uniform3f(n, t2[0], t2[1], t2[2]);
              break;
            case o.FLOAT_VEC4:
              1 < r2.size ? t2.length && o.uniform4fv(n, t2) : o.uniform4f(n, t2[0], t2[1], t2[2], t2[3]);
              break;
            case o.INT_VEC2:
              1 < r2.size ? t2.length && o.uniform2iv(n, t2) : o.uniform2i(n, t2[0], t2[1]);
              break;
            case o.INT_VEC3:
              1 < r2.size ? t2.length && o.uniform3iv(n, t2) : o.uniform3i(n, t2[0], t2[1], t2[2]);
              break;
            case o.INT_VEC4:
              1 < r2.size ? t2.length && o.uniform4iv(n, t2) : o.uniform4i(n, t2[0], t2[1], t2[2], t2[3]);
              break;
            case o.SAMPLER_2D:
              o.activeTexture(o.TEXTURE0 + r2.samplerIndex), r2.texture = t2 instanceof s2.default.Texture ? t2 : this._renderer.getTexture(t2), o.uniform1i(n, r2.samplerIndex);
          }
          return this;
        }
      }, s2.default.Shader.prototype.isLightShader = function() {
        return void 0 !== this.attributes.aNormal || void 0 !== this.uniforms.uUseLighting || void 0 !== this.uniforms.uAmbientLightCount || void 0 !== this.uniforms.uDirectionalLightCount || void 0 !== this.uniforms.uPointLightCount || void 0 !== this.uniforms.uAmbientColor || void 0 !== this.uniforms.uDirectionalDiffuseColors || void 0 !== this.uniforms.uDirectionalSpecularColors || void 0 !== this.uniforms.uPointLightLocation || void 0 !== this.uniforms.uPointLightDiffuseColors || void 0 !== this.uniforms.uPointLightSpecularColors || void 0 !== this.uniforms.uLightingDirection || void 0 !== this.uniforms.uSpecular;
      }, s2.default.Shader.prototype.isNormalShader = function() {
        return void 0 !== this.attributes.aNormal;
      }, s2.default.Shader.prototype.isTextureShader = function() {
        return 0 < this.samplers.length;
      }, s2.default.Shader.prototype.isColorShader = function() {
        return void 0 !== this.attributes.aVertexColor || void 0 !== this.uniforms.uMaterialColor;
      }, s2.default.Shader.prototype.isTexLightShader = function() {
        return this.isLightShader() && this.isTextureShader();
      }, s2.default.Shader.prototype.isStrokeShader = function() {
        return void 0 !== this.uniforms.uStrokeWeight;
      }, s2.default.Shader.prototype.enableAttrib = function(e2, t2, r2, o, n, s3) {
        var i2, a;
        return e2 && -1 !== (i2 = e2.location) && (a = this._renderer.GL, e2.enabled || (a.enableVertexAttribArray(i2), e2.enabled = true), this._renderer.GL.vertexAttribPointer(i2, t2, r2 || a.FLOAT, o || false, n || 0, s3 || 0)), this;
      };
      e = s2.default.Shader;
      r.default = e;
    }, { "../core/main": 267, "core-js/modules/es.array.index-of": 157, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.array.slice": 162, "core-js/modules/es.function.name": 165, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/web.dom-collections.iterator": 230 }], 323: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.typed-array.uint8-array"), e("core-js/modules/es.typed-array.copy-within"), e("core-js/modules/es.typed-array.every"), e("core-js/modules/es.typed-array.fill"), e("core-js/modules/es.typed-array.filter"), e("core-js/modules/es.typed-array.find"), e("core-js/modules/es.typed-array.find-index"), e("core-js/modules/es.typed-array.for-each"), e("core-js/modules/es.typed-array.includes"), e("core-js/modules/es.typed-array.index-of"), e("core-js/modules/es.typed-array.iterator"), e("core-js/modules/es.typed-array.join"), e("core-js/modules/es.typed-array.last-index-of"), e("core-js/modules/es.typed-array.map"), e("core-js/modules/es.typed-array.reduce"), e("core-js/modules/es.typed-array.reduce-right"), e("core-js/modules/es.typed-array.reverse"), e("core-js/modules/es.typed-array.set"), e("core-js/modules/es.typed-array.slice"), e("core-js/modules/es.typed-array.some"), e("core-js/modules/es.typed-array.sort"), e("core-js/modules/es.typed-array.subarray"), e("core-js/modules/es.typed-array.to-locale-string"), e("core-js/modules/es.typed-array.to-string"), Object.defineProperty(r, "__esModule", { value: true }), r.default = void 0;
      var n = (s2 = e("../core/main")) && s2.__esModule ? s2 : { default: s2 }, a = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = l();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function l() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), l = function() {
          return e2;
        }, e2);
      }
      n.default.Texture = function(e2, t2, r2) {
        this._renderer = e2;
        e2 = this._renderer.GL, (r2 = r2 || {}).dataType === e2.FLOAT && (e2.getExtension("OES_texture_float") || console.log("Oh no, your device doesn't support floating point textures!"), e2.getExtension("OES_texture_float_linear") || console.log("Ack! Your device doesn't support linear filtering for floating point textures")), this.src = t2, this.glTex = void 0, this.glTarget = e2.TEXTURE_2D, this.glFormat = r2.format || e2.RGBA, this.mipmaps = false, this.glMinFilter = r2.minFilter || e2.LINEAR, this.glMagFilter = r2.magFilter || e2.LINEAR, this.glWrapS = r2.wrapS || e2.CLAMP_TO_EDGE, this.glWrapT = r2.wrapT || e2.CLAMP_TO_EDGE, this.glDataType = r2.dataType || e2.UNSIGNED_BYTE, this.isSrcMediaElement = void 0 !== n.default.MediaElement && t2 instanceof n.default.MediaElement, this._videoPrevUpdateTime = 0, this.isSrcHTMLElement = void 0 !== n.default.Element && t2 instanceof n.default.Element && !(t2 instanceof n.default.Graphics) && !(t2 instanceof n.default.Renderer), this.isSrcP5Image = t2 instanceof n.default.Image, this.isSrcP5Graphics = t2 instanceof n.default.Graphics, this.isSrcP5Renderer = t2 instanceof n.default.Renderer, this.isImageData = "undefined" != typeof ImageData && t2 instanceof ImageData, r2 = this._getTextureDataFromSource();
        return this.width = r2.width, this.height = r2.height, this.init(r2), this;
      }, n.default.Texture.prototype._getTextureDataFromSource = function() {
        var e2;
        return this.isSrcP5Image ? e2 = this.src.canvas : this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcP5Renderer || this.isSrcHTMLElement ? e2 = this.src.elt : this.isImageData && (e2 = this.src), e2;
      }, n.default.Texture.prototype.init = function(e2) {
        var t2, r2 = this._renderer.GL;
        this.glTex = r2.createTexture(), this.glWrapS = this._renderer.textureWrapX, this.glWrapT = this._renderer.textureWrapY, this.setWrapMode(this.glWrapS, this.glWrapT), this.bindTexture(), r2.texParameteri(r2.TEXTURE_2D, r2.TEXTURE_MAG_FILTER, this.glMagFilter), r2.texParameteri(r2.TEXTURE_2D, r2.TEXTURE_MIN_FILTER, this.glMinFilter), 0 === this.width || 0 === this.height || this.isSrcMediaElement && !this.src.loadedmetadata ? (t2 = new Uint8Array([1, 1, 1, 1]), r2.texImage2D(this.glTarget, 0, r2.RGBA, 1, 1, 0, this.glFormat, this.glDataType, t2)) : r2.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, e2);
      }, n.default.Texture.prototype.update = function() {
        var e2, t2, r2, o2 = this.src;
        return 0 !== o2.width && 0 !== o2.height && (e2 = this._getTextureDataFromSource(), t2 = false, r2 = this._renderer.GL, e2.width !== this.width || e2.height !== this.height ? (t2 = true, this.width = e2.width, this.height = e2.height, this.isSrcP5Image ? o2.setModified(false) : (this.isSrcMediaElement || this.isSrcHTMLElement) && o2.setModified(true)) : this.isSrcP5Image ? o2.isModified() && o2.setModified(!(t2 = true)) : this.isSrcMediaElement ? o2.isModified() ? o2.setModified(!(t2 = true)) : o2.loadedmetadata && this._videoPrevUpdateTime !== o2.time() && (this._videoPrevUpdateTime = o2.time(), t2 = true) : this.isImageData ? o2._dirty && (t2 = !(o2._dirty = false)) : t2 = true, t2 && (this.bindTexture(), r2.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, e2)), t2);
      }, n.default.Texture.prototype.bindTexture = function() {
        return this._renderer.GL.bindTexture(this.glTarget, this.glTex), this;
      }, n.default.Texture.prototype.unbindTexture = function() {
        this._renderer.GL.bindTexture(this.glTarget, null);
      }, n.default.Texture.prototype.setInterpolation = function(e2, t2) {
        var r2 = this._renderer.GL;
        e2 === a.NEAREST ? this.glMinFilter = r2.NEAREST : this.glMinFilter = r2.LINEAR, t2 === a.NEAREST ? this.glMagFilter = r2.NEAREST : this.glMagFilter = r2.LINEAR, this.bindTexture(), r2.texParameteri(r2.TEXTURE_2D, r2.TEXTURE_MIN_FILTER, this.glMinFilter), r2.texParameteri(r2.TEXTURE_2D, r2.TEXTURE_MAG_FILTER, this.glMagFilter), this.unbindTexture();
      }, n.default.Texture.prototype.setWrapMode = function(e2, t2) {
        function r2(e3) {
          return 0 == (e3 & e3 - 1);
        }
        var o2 = this._renderer.GL, n2 = r2(this.width), s3 = r2(this.height);
        e2 === a.REPEAT ? n2 && s3 ? this.glWrapS = o2.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = o2.CLAMP_TO_EDGE) : e2 === a.MIRROR ? n2 && s3 ? this.glWrapS = o2.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = o2.CLAMP_TO_EDGE) : this.glWrapS = o2.CLAMP_TO_EDGE, t2 === a.REPEAT ? n2 && s3 ? this.glWrapT = o2.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = o2.CLAMP_TO_EDGE) : t2 === a.MIRROR ? n2 && s3 ? this.glWrapT = o2.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = o2.CLAMP_TO_EDGE) : this.glWrapT = o2.CLAMP_TO_EDGE, this.bindTexture(), o2.texParameteri(o2.TEXTURE_2D, o2.TEXTURE_WRAP_S, this.glWrapS), o2.texParameteri(o2.TEXTURE_2D, o2.TEXTURE_WRAP_T, this.glWrapT), this.unbindTexture();
      };
      var s2 = n.default.Texture;
      r.default = s2;
    }, { "../core/constants": 256, "../core/main": 267, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.typed-array.copy-within": 197, "core-js/modules/es.typed-array.every": 198, "core-js/modules/es.typed-array.fill": 199, "core-js/modules/es.typed-array.filter": 200, "core-js/modules/es.typed-array.find": 202, "core-js/modules/es.typed-array.find-index": 201, "core-js/modules/es.typed-array.for-each": 205, "core-js/modules/es.typed-array.includes": 206, "core-js/modules/es.typed-array.index-of": 207, "core-js/modules/es.typed-array.iterator": 210, "core-js/modules/es.typed-array.join": 211, "core-js/modules/es.typed-array.last-index-of": 212, "core-js/modules/es.typed-array.map": 213, "core-js/modules/es.typed-array.reduce": 215, "core-js/modules/es.typed-array.reduce-right": 214, "core-js/modules/es.typed-array.reverse": 216, "core-js/modules/es.typed-array.set": 217, "core-js/modules/es.typed-array.slice": 218, "core-js/modules/es.typed-array.some": 219, "core-js/modules/es.typed-array.sort": 220, "core-js/modules/es.typed-array.subarray": 221, "core-js/modules/es.typed-array.to-locale-string": 222, "core-js/modules/es.typed-array.to-string": 223, "core-js/modules/es.typed-array.uint8-array": 226, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }], 324: [function(e, t, r) {
      function o(e2) {
        return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
        })(e2);
      }
      function i2(e2) {
        return (i2 = "function" == typeof Symbol && "symbol" === o(Symbol.iterator) ? function(e3) {
          return o(e3);
        } : function(e3) {
          return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : o(e3);
        })(e2);
      }
      e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.get-own-property-descriptor"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.sub"), e("core-js/modules/es.weak-map"), e("core-js/modules/web.dom-collections.iterator"), e("core-js/modules/es.symbol"), e("core-js/modules/es.symbol.description"), e("core-js/modules/es.symbol.iterator"), e("core-js/modules/es.array.iterator"), e("core-js/modules/es.object.to-string"), e("core-js/modules/es.regexp.exec"), e("core-js/modules/es.string.iterator"), e("core-js/modules/es.string.split"), e("core-js/modules/es.string.sub"), e("core-js/modules/web.dom-collections.iterator");
      var n, B = (n = e("../core/main")) && n.__esModule ? n : { default: n }, E = function(e2) {
        if (e2 && e2.__esModule)
          return e2;
        if (null === e2 || "object" !== i2(e2) && "function" != typeof e2)
          return { default: e2 };
        var t2 = a();
        if (t2 && t2.has(e2))
          return t2.get(e2);
        var r2, o2 = {}, n2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (r2 in e2) {
          var s3;
          Object.prototype.hasOwnProperty.call(e2, r2) && ((s3 = n2 ? Object.getOwnPropertyDescriptor(e2, r2) : null) && (s3.get || s3.set) ? Object.defineProperty(o2, r2, s3) : o2[r2] = e2[r2]);
        }
        o2.default = e2, t2 && t2.set(e2, o2);
        return o2;
      }(e("../core/constants"));
      function a() {
        var e2;
        return "function" != typeof WeakMap ? null : (e2 = /* @__PURE__ */ new WeakMap(), a = function() {
          return e2;
        }, e2);
      }
      e("./p5.Shader"), e("./p5.RendererGL.Retained"), B.default.RendererGL.prototype._applyTextProperties = function() {
      }, B.default.RendererGL.prototype.textWidth = function(e2) {
        return this._isOpenType() ? this._textFont._textWidth(e2, this._textSize) : 0;
      };
      function s2(e2, t2) {
        this.width = e2, this.height = t2, this.infos = [], this.findImage = function(e3) {
          var t3, r2, o2 = this.width * this.height;
          if (o2 < e3)
            throw new Error("font is too complex to render in 3D");
          for (var n2 = this.infos.length - 1; 0 <= n2; --n2) {
            var s3 = this.infos[n2];
            if (s3.index + e3 < o2) {
              r2 = (t3 = s3).imageData;
              break;
            }
          }
          if (!t3) {
            try {
              r2 = new ImageData(this.width, this.height);
            } catch (e4) {
              var i3 = document.getElementsByTagName("canvas")[0], a2 = !i3, l = (i3 || ((i3 = document.createElement("canvas")).style.display = "none", document.body.appendChild(i3)), i3.getContext("2d"));
              l && (r2 = l.createImageData(this.width, this.height)), a2 && document.body.removeChild(i3);
            }
            this.infos.push(t3 = { index: 0, imageData: r2 });
          }
          l = t3.index;
          return t3.index += e3, r2._dirty = true, { imageData: r2, index: l };
        };
      }
      function G(e2, t2, r2, o2, n2) {
        var s3 = e2.imageData.data, e2 = 4 * e2.index++;
        s3[e2++] = t2, s3[e2++] = r2, s3[e2++] = o2, s3[+e2] = n2;
      }
      function T(e2) {
        this.font = e2, this.strokeImageInfos = new s2(64, 64), this.colDimImageInfos = new s2(64, 64), this.rowDimImageInfos = new s2(64, 64), this.colCellImageInfos = new s2(64, 64), this.rowCellImageInfos = new s2(64, 64), this.glyphInfos = {}, this.getGlyphInfo = function(e3) {
          var t2 = this.glyphInfos[e3.index];
          if (!t2) {
            var r2 = e3.getBoundingBox(), o2 = r2.x1, n2 = r2.y1, s3 = r2.x2 - o2, i3 = r2.y2 - n2, a2 = e3.path.commands;
            if (0 == s3 || 0 == i3 || !a2.length)
              return this.glyphInfos[e3.index] = {};
            for (var l, u, c, d, f = [], h = [], p = [], m = 8; 0 <= m; --m)
              p.push([]);
            for (m = 8; 0 <= m; --m)
              h.push([]);
            var y = true, g = false, v = void 0;
            try {
              for (var b, j = a2[Symbol.iterator](); !(y = (b = j.next()).done); y = true) {
                var _ = b.value, x = (_.x - o2) / s3, w = (_.y - n2) / i3;
                if (!N(l, u, x, w)) {
                  switch (_.type) {
                    case "M":
                      c = x, d = w;
                      break;
                    case "L":
                      U(l, u, x, w);
                      break;
                    case "Q":
                      var S = (_.x1 - o2) / s3, M = (_.y1 - n2) / i3;
                      P([l, x, S], [u, w, M], { x: l, y: u, cx: S, cy: M });
                      break;
                    case "Z":
                      N(l, u, c, d) ? f.push({ x: l, y: u }) : (U(l, u, c, d), f.push({ x: c, y: d }));
                      break;
                    case "C":
                      for (var E2 = function(e4, t3, r3, o3, n3, s4, i4, a3) {
                        var e4 = new D(new B.default.Vector(e4, t3), new B.default.Vector(r3, o3), new B.default.Vector(n3, s4), new B.default.Vector(i4, a3)).splitInflections(), l2 = [], u2 = 30 / V, c2 = true, t3 = false, r3 = void 0;
                        try {
                          for (var d2, f2 = e4[Symbol.iterator](); !(c2 = (d2 = f2.next()).done); c2 = true) {
                            for (var h2 = d2.value, p2 = [], m2 = void 0; !(0.125 <= (m2 = u2 / h2.quadError())); ) {
                              var y2 = Math.pow(m2, 1 / 3), g2 = h2.split(y2), v2 = h2.split(1 - y2 / (1 - y2));
                              l2.push(g2), p2.push(h2), h2 = v2;
                            }
                            m2 < 1 && l2.push(h2.split(0.5)), l2.push(h2), Array.prototype.push.apply(l2, p2.reverse());
                          }
                        } catch (e5) {
                          t3 = true, r3 = e5;
                        } finally {
                          try {
                            c2 || null == f2.return || f2.return();
                          } finally {
                            if (t3)
                              throw r3;
                          }
                        }
                        return l2;
                      }(l, u, (_.x1 - o2) / s3, (_.y1 - n2) / i3, (_.x2 - o2) / s3, (_.y2 - n2) / i3, x, w), T2 = 0; T2 < E2.length; T2++) {
                        var C = E2[T2].toQuadratic();
                        P([C.x, C.x1, C.cx], [C.y, C.y1, C.cy], C);
                      }
                      break;
                    default:
                      throw new Error("unknown command type: ".concat(_.type));
                  }
                  l = x, u = w;
                }
              }
            } catch (e4) {
              g = true, v = e4;
            } finally {
              try {
                y || null == j.return || j.return();
              } finally {
                if (g)
                  throw v;
              }
            }
            for (var O = f.length, L = this.strokeImageInfos.findImage(O), I = L.index, k = 0; k < O; ++k) {
              var A = f[k];
              G(L, R(A.x), R(A.y), R(A.cx), R(A.cy));
            }
            (t2 = this.glyphInfos[e3.index] = { glyph: e3, uGlyphRect: [r2.x1, -r2.y1, r2.x2, -r2.y2], strokeImageInfo: L, strokes: f, colInfo: F(p, this.colDimImageInfos, this.colCellImageInfos), rowInfo: F(h, this.rowDimImageInfos, this.rowCellImageInfos) }).uGridOffset = [t2.colInfo.dimOffset, t2.rowInfo.dimOffset];
          }
          return t2;
          function P(e4, t3, r3) {
            var o3 = f.length;
            function n3(e5, t4, r4) {
              for (var o4 = e5.length; 0 < o4--; ) {
                var n4 = e5[o4];
                n4 < t4 && (t4 = n4), r4 < n4 && (r4 = n4);
              }
              return { min: t4, max: r4 };
            }
            f.push(r3);
            for (var r3 = n3(e4, 1, 0), e4 = Math.max(Math.floor(9 * r3.min), 0), s4 = Math.min(Math.ceil(9 * r3.max), 9), i4 = e4; i4 < s4; ++i4)
              p[i4].push(o3);
            for (var r3 = n3(t3, 1, 0), e4 = Math.max(Math.floor(9 * r3.min), 0), a3 = Math.min(Math.ceil(9 * r3.max), 9), l2 = e4; l2 < a3; ++l2)
              h[l2].push(o3);
          }
          function R(e4) {
            return (e4 = (r3 = 255) * e4) < (t3 = 0) ? t3 : r3 < e4 ? r3 : e4;
            var t3, r3;
          }
          function D(e4, t3, r3, o3) {
            this.p0 = e4, this.c0 = t3, this.c1 = r3, this.p1 = o3, this.toQuadratic = function() {
              return { x: this.p0.x, y: this.p0.y, x1: this.p1.x, y1: this.p1.y, cx: (3 * (this.c0.x + this.c1.x) - (this.p0.x + this.p1.x)) / 4, cy: (3 * (this.c0.y + this.c1.y) - (this.p0.y + this.p1.y)) / 4 };
            }, this.quadError = function() {
              return B.default.Vector.sub(B.default.Vector.sub(this.p1, this.p0), B.default.Vector.mult(B.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;
            }, this.split = function(e5) {
              var t4 = B.default.Vector.lerp(this.p0, this.c0, e5), r4 = B.default.Vector.lerp(this.c0, this.c1, e5), o4 = B.default.Vector.lerp(t4, r4, e5), r4 = (this.c1 = B.default.Vector.lerp(this.c1, this.p1, e5), this.c0 = B.default.Vector.lerp(r4, this.c1, e5), B.default.Vector.lerp(o4, this.c0, e5)), e5 = new D(this.p0, t4, o4, r4);
              return this.p0 = r4, e5;
            }, this.splitInflections = function() {
              var e5 = B.default.Vector.sub(this.c0, this.p0), t4 = B.default.Vector.sub(B.default.Vector.sub(this.c1, this.c0), e5), r4 = B.default.Vector.sub(B.default.Vector.sub(B.default.Vector.sub(this.p1, this.c1), e5), B.default.Vector.mult(t4, 2)), o4 = [], n3 = t4.x * r4.y - t4.y * r4.x;
              return 0 !== n3 && 0 <= (e5 = (r4 = e5.x * r4.y - e5.y * r4.x) * r4 - 4 * n3 * (e5.x * t4.y - e5.y * t4.x)) && (n3 < 0 && (n3 = -n3, r4 = -r4, 0), e5 = (-r4 + (t4 = Math.sqrt(e5))) / (2 * n3), 0 < (r4 = (-r4 - t4) / (2 * n3)) && r4 < 1 && (o4.push(this.split(r4)), e5 = 1 - (1 - e5) / (1 - r4)), 0 < e5 && e5 < 1 && o4.push(this.split(e5))), o4.push(this), o4;
            };
          }
          function U(e4, t3, r3, o3) {
            P([e4, r3], [t3, o3], { x: e4, y: t3, cx: (e4 + r3) / 2, cy: (t3 + o3) / 2 });
          }
          function N(e4, t3, r3, o3) {
            return Math.abs(r3 - e4) < 1e-5 && Math.abs(o3 - t3) < 1e-5;
          }
          function F(e4, t3, r3) {
            for (var o3 = e4.length, n3 = t3.findImage(o3), t3 = n3.index, s4 = 0, i4 = 0; i4 < o3; ++i4)
              s4 += e4[i4].length;
            for (var a3 = r3.findImage(s4), l2 = 0; l2 < o3; ++l2) {
              var u2 = e4[l2], c2 = u2.length, d2 = a3.index;
              G(n3, d2 >> 7, 127 & d2, c2 >> 7, 127 & c2);
              for (var f2 = 0; f2 < c2; ++f2) {
                var h2 = u2[f2] + I;
                G(a3, h2 >> 7, 127 & h2, 0, 0);
              }
            }
            return { cellImageInfo: a3, dimOffset: t3, dimImageInfo: n3 };
          }
        };
      }
      var V = Math.sqrt(3);
      B.default.RendererGL.prototype._renderText = function(e2, t2, r2, o2, n2) {
        if (this._textFont && "string" != typeof this._textFont) {
          if (!(n2 <= o2) && this._doFill) {
            if (this._isOpenType()) {
              e2.push();
              var n2 = this._doStroke, s3 = this.drawMode, i3 = (this._doStroke = false, this.drawMode = E.TEXTURE, this._textFont.font), a2 = (a2 = this._textFont._fontInfo) || (this._textFont._fontInfo = new T(i3)), r2 = this._textFont._handleAlignment(this, t2, r2, o2), o2 = this._textSize / i3.unitsPerEm, l = (this.translate(r2.x, r2.y, 0), this.scale(o2, o2, 1), this.GL), r2 = !this._defaultFontShader, u = this._getFontShader(), c = (u.init(), u.bindShader(), r2 && (u.setUniform("uGridImageSize", [64, 64]), u.setUniform("uCellsImageSize", [64, 64]), u.setUniform("uStrokeImageSize", [64, 64]), u.setUniform("uGridSize", [9, 9])), this._applyColorBlend(this.curFillColor), this.retainedMode.geometry.glyph), d = (c || ((o2 = this._textGeom = new B.default.Geometry(1, 1, function() {
                for (var e3 = 0; e3 <= 1; e3++)
                  for (var t3 = 0; t3 <= 1; t3++)
                    this.vertices.push(new B.default.Vector(t3, e3, 0)), this.uvs.push(t3, e3);
              })).computeFaces().computeNormals(), c = this.createBuffers("glyph", o2)), true), r2 = false, o2 = void 0;
              try {
                for (var f, h = this.retainedMode.buffers.text[Symbol.iterator](); !(d = (f = h.next()).done); d = true)
                  f.value._prepareBuffer(c, u);
              } catch (e3) {
                r2 = true, o2 = e3;
              } finally {
                try {
                  d || null == h.return || h.return();
                } finally {
                  if (r2)
                    throw o2;
                }
              }
              this._bindBuffer(c.indexBuffer, l.ELEMENT_ARRAY_BUFFER), u.setUniform("uMaterialColor", this.curFillColor);
              try {
                var p = 0, m = null, y = i3.stringToGlyphs(t2), g = true, v = false, b = void 0;
                try {
                  for (var j, _ = y[Symbol.iterator](); !(g = (j = _.next()).done); g = true) {
                    var x, w, S = j.value, M = (m && (p += i3.getKerningValue(m, S)), a2.getGlyphInfo(S));
                    M.uGlyphRect && (x = M.rowInfo, w = M.colInfo, u.setUniform("uSamplerStrokes", M.strokeImageInfo.imageData), u.setUniform("uSamplerRowStrokes", x.cellImageInfo.imageData), u.setUniform("uSamplerRows", x.dimImageInfo.imageData), u.setUniform("uSamplerColStrokes", w.cellImageInfo.imageData), u.setUniform("uSamplerCols", w.dimImageInfo.imageData), u.setUniform("uGridOffset", M.uGridOffset), u.setUniform("uGlyphRect", M.uGlyphRect), u.setUniform("uGlyphOffset", p), u.bindTextures(), l.drawElements(l.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0)), p += S.advanceWidth, m = S;
                  }
                } catch (e3) {
                  v = true, b = e3;
                } finally {
                  try {
                    g || null == _.return || _.return();
                  } finally {
                    if (v)
                      throw b;
                  }
                }
              } finally {
                u.unbindShader(), this._doStroke = n2, this.drawMode = s3, e2.pop();
              }
            } else
              console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported");
            return e2;
          }
        } else
          console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");
      };
    }, { "../core/constants": 256, "../core/main": 267, "./p5.RendererGL.Retained": 320, "./p5.Shader": 322, "core-js/modules/es.array.iterator": 158, "core-js/modules/es.object.get-own-property-descriptor": 173, "core-js/modules/es.object.to-string": 177, "core-js/modules/es.regexp.exec": 181, "core-js/modules/es.string.iterator": 186, "core-js/modules/es.string.split": 191, "core-js/modules/es.string.sub": 192, "core-js/modules/es.symbol": 196, "core-js/modules/es.symbol.description": 194, "core-js/modules/es.symbol.iterator": 195, "core-js/modules/es.weak-map": 228, "core-js/modules/web.dom-collections.iterator": 230 }] }, {}, [251])(251);
  });
})(p5_min$1);
const p5_min = /* @__PURE__ */ getDefaultExportFromCjs(p5_min$1.exports);
const p5 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: p5_min
}, [p5_min$1.exports]);
const socketPiano_svelte_svelte_type_style_lang = "";
function create_fragment$4(ctx) {
  let div1;
  return {
    c() {
      div1 = element("div");
      div1.innerHTML = `<div class="p5-container svelte-kpn7pf" id="pianoContainer"></div>`;
      attr(div1, "class", "svelte-kpn7pf");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
    }
  };
}
function instance$3($$self, $$props, $$invalidate) {
  let { id } = $$props;
  let { name } = $$props;
  onMount(() => {
    console.log(document.getElementById("pianoContainer"));
    let piano = new SocketPiano(name, id);
    const pianoScreen = new p5(pianoSketch);
    pianoScreen.piano = piano;
  });
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2)
      $$invalidate(0, id = $$props2.id);
    if ("name" in $$props2)
      $$invalidate(1, name = $$props2.name);
  };
  return [id, name];
}
class Socket_piano extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$3, create_fragment$4, safe_not_equal, { id: 0, name: 1 });
  }
}
const joinRoom_svelte_svelte_type_style_lang = "";
function create_else_block(ctx) {
  let socketpiano;
  let current;
  socketpiano = new Socket_piano({
    props: { name: ctx[1], id: ctx[2] }
  });
  return {
    c() {
      create_component(socketpiano.$$.fragment);
    },
    m(target, anchor) {
      mount_component(socketpiano, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const socketpiano_changes = {};
      if (dirty & 2)
        socketpiano_changes.name = ctx2[1];
      if (dirty & 4)
        socketpiano_changes.id = ctx2[2];
      socketpiano.$set(socketpiano_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(socketpiano.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(socketpiano.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(socketpiano, detaching);
    }
  };
}
function create_if_block$1(ctx) {
  let div1;
  let h2;
  let t1;
  let form;
  let div0;
  let t3;
  let p;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Join Room";
      t1 = space();
      form = element("form");
      div0 = element("div");
      div0.innerHTML = `<input type="text" id="name" class="name svelte-1m8hpmi" placeholder="Name" value="" required=""/> 
                <input type="text" id="roomId" class="room-id svelte-1m8hpmi" placeholder="Room ID" value="" required=""/>`;
      t3 = space();
      p = element("p");
      p.textContent = "Join Room";
      attr(h2, "class", "svelte-1m8hpmi");
      attr(div0, "class", "input-wrapper svelte-1m8hpmi");
      attr(p, "class", "svelte-1m8hpmi");
      attr(form, "class", "svelte-1m8hpmi");
      attr(div1, "class", "join svelte-1m8hpmi");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, form);
      append(form, div0);
      append(form, t3);
      append(form, p);
      if (!mounted) {
        dispose = listen(p, "click", ctx[3]);
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment$3(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block$1, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance$2($$self, $$props, $$invalidate) {
  let joined = false;
  let name = "";
  let id = "";
  const click_handler = () => {
    $$invalidate(1, name = document.getElementById("name").value);
    $$invalidate(2, id = document.getElementById("roomId").value);
    $$invalidate(0, joined = true);
  };
  return [joined, name, id, click_handler];
}
class Join_room extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$2, create_fragment$3, safe_not_equal, {});
  }
}
const handPiano_svelte_svelte_type_style_lang = "";
function create_fragment$2(ctx) {
  let div1;
  let div0;
  let t0;
  let p;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      p = element("p");
      p.textContent = "show";
      attr(div0, "class", "p5-container svelte-kpn7pf");
      attr(div0, "id", "pianoContainer");
      attr(div1, "class", "svelte-kpn7pf");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div1, t0);
      append(div1, p);
      if (!mounted) {
        dispose = listen(p, "click", ctx[0]);
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function instance$1($$self) {
  let show = false;
  const createSketch = () => {
    show = !show;
    if (show) {
      const pianoP5 = new p5(pianoSketch);
      pianoP5.piano = new Piano();
    }
  };
  return [createSketch];
}
class Hand_piano extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$2, safe_not_equal, {});
  }
}
const modeSelect_svelte_svelte_type_style_lang = "";
function create_if_block_2(ctx) {
  let joinroom;
  let current;
  joinroom = new Join_room({});
  return {
    c() {
      create_component(joinroom.$$.fragment);
    },
    m(target, anchor) {
      mount_component(joinroom, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(joinroom.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(joinroom.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(joinroom, detaching);
    }
  };
}
function create_if_block_1(ctx) {
  let handpiano;
  let t0;
  let p0;
  let t1;
  let p1;
  let current;
  let mounted;
  let dispose;
  handpiano = new Hand_piano({});
  return {
    c() {
      create_component(handpiano.$$.fragment);
      t0 = space();
      p0 = element("p");
      t1 = space();
      p1 = element("p");
      p1.textContent = "Back";
      attr(p0, "data-mode", "select");
      attr(p1, "data-mode", "");
    },
    m(target, anchor) {
      mount_component(handpiano, target, anchor);
      insert(target, t0, anchor);
      insert(target, p0, anchor);
      insert(target, t1, anchor);
      insert(target, p1, anchor);
      current = true;
      if (!mounted) {
        dispose = listen(p0, "click", ctx[1]);
        mounted = true;
      }
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(handpiano.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(handpiano.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(handpiano, detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(p0);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(p1);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block(ctx) {
  let div1;
  let h2;
  let t1;
  let p0;
  let t3;
  let div0;
  let p1;
  let t5;
  let p2;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      h2 = element("h2");
      h2.textContent = "Please Select version of Hand Piano";
      t1 = space();
      p0 = element("p");
      p0.textContent = "Multiplayer Mode will allow you to connect with other users via rooms so that you can play together whereas Solo will allow you to play on your own";
      t3 = space();
      div0 = element("div");
      p1 = element("p");
      p1.textContent = "Multiplayer Mode";
      t5 = space();
      p2 = element("p");
      p2.textContent = "Solo Mode";
      attr(h2, "class", "svelte-1dpf1u1");
      attr(p1, "data-mode", "multiplayer");
      attr(p1, "class", "svelte-1dpf1u1");
      attr(p2, "data-mode", "solo");
      attr(p2, "class", "svelte-1dpf1u1");
      attr(div0, "class", "options svelte-1dpf1u1");
      attr(div1, "class", "version-select svelte-1dpf1u1");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, h2);
      append(div1, t1);
      append(div1, p0);
      append(div1, t3);
      append(div1, div0);
      append(div0, p1);
      append(div0, t5);
      append(div0, p2);
      if (!mounted) {
        dispose = [
          listen(p1, "click", ctx[1]),
          listen(p2, "click", ctx[1])
        ];
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment$1(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0] === "select")
      return 0;
    if (ctx2[0] === "solo")
      return 1;
    if (ctx2[0] === "multiplayer")
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx))) {
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block = if_blocks[current_block_type_index];
          if (!if_block) {
            if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block.c();
          } else {
            if_block.p(ctx2, dirty);
          }
          transition_in(if_block, 1);
          if_block.m(div, null);
        } else {
          if_block = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let mode = "select";
  const modeSelect = (event) => {
    $$invalidate(0, mode = event.target.getAttribute("data-mode"));
  };
  return [mode, modeSelect];
}
class Mode_select extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment$1, safe_not_equal, {});
  }
}
function create_fragment(ctx) {
  let main;
  let topbar;
  let t;
  let modeselect;
  let current;
  topbar = new Top_bar({});
  modeselect = new Mode_select({});
  return {
    c() {
      main = element("main");
      create_component(topbar.$$.fragment);
      t = space();
      create_component(modeselect.$$.fragment);
    },
    m(target, anchor) {
      insert(target, main, anchor);
      mount_component(topbar, main, null);
      append(main, t);
      mount_component(modeselect, main, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(topbar.$$.fragment, local);
      transition_in(modeselect.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(topbar.$$.fragment, local);
      transition_out(modeselect.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(main);
      destroy_component(topbar);
      destroy_component(modeselect);
    }
  };
}
class App extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {});
  }
}
new App({
  target: document.getElementById("app")
});
